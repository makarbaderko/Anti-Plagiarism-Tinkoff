Module(body=[Import(names=[alias(name='inspect')]), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='etna', names=[alias(name='SETTINGS')], level=0), ImportFrom(module='sklearn.preprocessing', names=[alias(name='StandardScaler')], level=0), ImportFrom(module='sklearn.preprocessing', names=[alias(name='RobustScaler')], level=0), ImportFrom(module='etna.datasets.tsdataset', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), If(test=Attribute(value=Name(id='SETTINGS', ctx=Load()), attr='torch_required', ctx=Load()), body=[ImportFrom(module='pytorch_forecasting.data', names=[alias(name='TimeSeriesDataSet')], level=0), ImportFrom(module='pytorch_forecasting.data.encoders', names=[alias(name='EncoderNormalizer')], level=0), ImportFrom(module='pytorch_forecasting.data.encoders', names=[alias(name='NaNLabelEncoder')], level=0), ImportFrom(module='pytorch_forecasting.data.encoders', names=[alias(name='TorchNormalizer')], level=0)], orelse=[Assign(targets=[Name(id='TimeSeriesDataSet', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='EncoderNormalizer', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='NaNLabelEncoder', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='TorchNormalizer', ctx=Store())], value=Constant(value=None))]), Assign(targets=[Name(id='normalizer', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='TorchNormalizer', ctx=Load()), Name(id='NaNLabelEncoder', ctx=Load()), Name(id='EncoderNormalizer', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='PytorchForecastingTransform', bases=[Name(id='Transform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Tʕrƕ˜ɓanĊΆsϙfγor̤̋ʣ¿mƒ fθoϊđrĂ mτodƿͭeąlŗs˛ŝ ȱ3ʝŃfroɇǁˌȀmçƉ Pyʳɢ̌+Ίtƹ́oǕrcϭh2FoņreƏˀcïast\u0382i̥ngƁ l*i̇ɫbròaʖrýθ\x88ƿ=.ɶ\n̺͵\nƇĕNoctes\nŪʻĲǴ---õ̙--ŔĦwʧý\nTǝǴhis ̴tǵransɾfoƥrmɉ ̗Ûsh\x9eoŒƗulńϤ˾dɁ be addeƎɁdϑ aǨtϲ thμÝe vTerþy e]ǳʳΨſ̵nd γoĩf\xa0ƅ ϟ̧Ξ`š`tranǌsfo̅;rms`` pa̶r$εaɐ\u0378mete΄r.')), FunctionDef(name='transformsv', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load()), Attribute(value=Name(id='se', ctx=Load()), attr='freq', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_df_flat', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), Assign(targets=[Name(id='_df_flat', ctx=Store())], value=Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='_df_flat', ctx=Load()), attr='timestamp', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='se', ctx=Load()), attr='min_timestamp', ctx=Load())]), ctx=Load())), Assign(targets=[Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='fillna', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Constant(value='time_idx'), ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), op=Sub(), right=Attribute(value=Name(id='se', ctx=Load()), attr='min_timestamp', ctx=Load())), op=FloorDiv(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timedelta', ctx=Load()), args=[Constant(value='1s')], keywords=[]))), Assign(targets=[Name(id='encoded_unix_times', ctx=Store())], value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_time_encoder', ctx=Load()), args=[Call(func=Name(id='_list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='_df_flat', ctx=Load()), attr='time_idx', ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Constant(value='time_idx'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Constant(value='time_idx'), ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='encoded_unix_times', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load()))], keywords=[])), If(test=Attribute(value=Name(id='se', ctx=Load()), attr='time_varying_known_categoricals', ctx=Load()), body=[For(target=Name(id='feature_name', ctx=Store()), iter=Attribute(value=Name(id='se', ctx=Load()), attr='time_varying_known_categoricals', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Name(id='feature_name', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Name(id='feature_name', ctx=Load()), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='stack', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load()), attr='function', ctx=Load()), ops=[Eq()], comparators=[Constant(value='make_future')]), body=[Assign(targets=[Name(id='pf_dataset_pr', ctx=Store())], value=Call(func=Attribute(value=Name(id='TimeSeriesDataSet', ctx=Load()), attr='from_parameters', ctx=Load()), args=[Attribute(value=Name(id='se', ctx=Load()), attr='pf_dataset_params', ctx=Load()), Name(id='_df_flat', ctx=Load())], keywords=[keyword(arg='predict', value=Constant(value=True)), keyword(arg='stop_randomization', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='pf_dataset_predict', ctx=Store())], value=Name(id='pf_dataset_pr', ctx=Load()))], orelse=[Assign(targets=[Name(id='pf_dataset_traineEDYp', ctx=Store())], value=Call(func=Attribute(value=Name(id='TimeSeriesDataSet', ctx=Load()), attr='from_parameters', ctx=Load()), args=[Attribute(value=Name(id='se', ctx=Load()), attr='pf_dataset_params', ctx=Load()), Name(id='_df_flat', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='pf_dataset_train', ctx=Store())], value=Name(id='pf_dataset_traineEDYp', ctx=Load()))]), Return(value=Name(id='df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_time_encoder', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='values', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='encoded_unix_times', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='_enumerate', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='encoded_unix_times', ctx=Load()), slice=Name(id='value', ctx=Load()), ctx=Store())], value=Name(id='idx', ctx=Load()))], orelse=[]), Return(value=Name(id='encoded_unix_times', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='max_encode', annotation=Name(id='int', ctx=Load())), arg(arg='mi', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='min_prediction_i', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='min_prediction_length', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_prediction_length', annotation=Name(id='int', ctx=Load())), arg(arg='static_categoricals', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='static_reals', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='time_varying_known_categoricals', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='TIME_VARYING_KNOWN_REALS', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='time_varying_unknown_categoricals', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='time_va', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='variable_groups', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='constant_fill_strategyeeF', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='FLOAT', ctx=Load()), Name(id='int', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='allow_missing_timest_eps', annotation=Name(id='bool', ctx=Load())), arg(arg='lags', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='add_relative_t_ime_idx', annotation=Name(id='bool', ctx=Load())), arg(arg='add_target_sc_ales', annotation=Name(id='bool', ctx=Load())), arg(arg='add_encoder_length', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='targe', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='normalizer', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='normalizer', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Name(id='normalizer', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='categorical_encoder', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='NaNLabelEncoder', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='scalers', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='StandardScaler', ctx=Load()), Name(id='RobustScaler', ctx=Load()), Name(id='TorchNormalizer', ctx=Load()), Name(id='EncoderNormalizer', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=30), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=1), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=True), Constant(value=True), Constant(value=True), Constant(value='auto'), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='su', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='max_encoder_length', ctx=Store())], value=Name(id='max_encode', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='min_encoder_length', ctx=Store())], value=Name(id='mi', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='min_prediction_idx', ctx=Store())], value=Name(id='min_prediction_i', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='min_prediction_length', ctx=Store())], value=Name(id='min_prediction_length', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='max_prediction_length', ctx=Store())], value=Name(id='max_prediction_length', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='static_categoricals', ctx=Store())], value=IfExp(test=Name(id='static_categoricals', ctx=Load()), body=Name(id='static_categoricals', ctx=Load()), orelse=List(elts=[], ctx=Load()))), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='static_reals', ctx=Store())], value=IfExp(test=Name(id='static_reals', ctx=Load()), body=Name(id='static_reals', ctx=Load()), orelse=List(elts=[], ctx=Load()))), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='time_varying_known_categoricals', ctx=Store())], value=IfExp(test=Name(id='time_varying_known_categoricals', ctx=Load()), body=Name(id='time_varying_known_categoricals', ctx=Load()), orelse=List(elts=[], ctx=Load()))), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='time_varying_known_reals', ctx=Store())], value=IfExp(test=Name(id='TIME_VARYING_KNOWN_REALS', ctx=Load()), body=Name(id='TIME_VARYING_KNOWN_REALS', ctx=Load()), orelse=List(elts=[], ctx=Load()))), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='time_varying_unknown_categoricals', ctx=Store())], value=IfExp(test=Name(id='time_varying_unknown_categoricals', ctx=Load()), body=Name(id='time_varying_unknown_categoricals', ctx=Load()), orelse=List(elts=[], ctx=Load()))), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='time_varying_unknown_reals', ctx=Store())], value=IfExp(test=Name(id='time_va', ctx=Load()), body=Name(id='time_va', ctx=Load()), orelse=List(elts=[], ctx=Load()))), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='variable_groups', ctx=Store())], value=IfExp(test=Name(id='variable_groups', ctx=Load()), body=Name(id='variable_groups', ctx=Load()), orelse=Dict(keys=[], values=[]))), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='add_relative_time_idx', ctx=Store())], value=Name(id='add_relative_t_ime_idx', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='add_target_scales', ctx=Store())], value=Name(id='add_target_sc_ales', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='add_encoder_length', ctx=Store())], value=Name(id='add_encoder_length', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='allow_missing_timesteps', ctx=Store())], value=Name(id='allow_missing_timest_eps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='target_normalizer', ctx=Store())], value=Name(id='targe', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='categorical_encoders', ctx=Store())], value=IfExp(test=Name(id='categorical_encoder', ctx=Load()), body=Name(id='categorical_encoder', ctx=Load()), orelse=Dict(keys=[], values=[]))), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='constant_fill_strategy', ctx=Store())], value=IfExp(test=Name(id='constant_fill_strategyeeF', ctx=Load()), body=Name(id='constant_fill_strategyeeF', ctx=Load()), orelse=List(elts=[], ctx=Load()))), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='lags', ctx=Store())], value=IfExp(test=Name(id='lags', ctx=Load()), body=Name(id='lags', ctx=Load()), orelse=Dict(keys=[], values=[]))), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='scalers', ctx=Store())], value=IfExp(test=Name(id='scalers', ctx=Load()), body=Name(id='scalers', ctx=Load()), orelse=Dict(keys=[], values=[]))), AnnAssign(target=Attribute(value=Name(id='se', ctx=Load()), attr='pf_dataset_predict', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TimeSeriesDataSet', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fipt Ĺ°Timΰe;ɤȖ5SeĄrɃiČ]ŘeΜsDÈatƍɪYaĭƞSe̻ÆčÚt.\n\nPaƸr(amϲ̊Ä\u038deteĭrjs\x9d\nƂƹ---ƈ\x96-π-į----â̕ȳ-Ę\nʭǝdĒf;:\nϨƍ˄ ĩǔ͖  ͆ϥ \x91d̃ƙa2«tƇa \x9dεŉto be ɶȫfiɱtted.\n\nRetϞêʙurns\n-Ɂ̝ʵ--ɏ#ʨλʼ-Ű̎-͞--\n ¤ ʪǌȈ \x8f PytoΊþ̨rcąǹ_hFȔorecastin\x85gûTra±~nsČfŘor˛m')), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='freq', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='infer_freq', ctx=Load()), args=[Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load()), Attribute(value=Name(id='se', ctx=Load()), attr='freq', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_df_flat', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), Assign(targets=[Name(id='_df_flat', ctx=Store())], value=Call(func=Attribute(value=Name(id='_df_flat', ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='min_timestamp', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_df_flat', ctx=Load()), attr='timestamp', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='se', ctx=Load()), attr='time_varying_known_categoricals', ctx=Load()), body=[For(target=Name(id='feature_name', ctx=Store()), iter=Attribute(value=Name(id='se', ctx=Load()), attr='time_varying_known_categoricals', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Name(id='feature_name', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Name(id='feature_name', ctx=Load()), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Constant(value='time_idx'), ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), op=Sub(), right=Attribute(value=Name(id='se', ctx=Load()), attr='min_timestamp', ctx=Load())), op=FloorDiv(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timedelta', ctx=Load()), args=[Constant(value='1s')], keywords=[]))), Assign(targets=[Name(id='encoded_unix_times', ctx=Store())], value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_time_encoder', ctx=Load()), args=[Call(func=Name(id='_list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='_df_flat', ctx=Load()), attr='time_idx', ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Constant(value='time_idx'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='_df_flat', ctx=Load()), slice=Constant(value='time_idx'), ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='encoded_unix_times', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load()))], keywords=[])), Assign(targets=[Name(id='PF_DATASET', ctx=Store())], value=Call(func=Name(id='TimeSeriesDataSet', ctx=Load()), args=[Name(id='_df_flat', ctx=Load())], keywords=[keyword(arg='time_idx', value=Constant(value='time_idx')), keyword(arg='target', value=Constant(value='target')), keyword(arg='group_ids', value=List(elts=[Constant(value='segment')], ctx=Load())), keyword(arg='time_varying_known_reals', value=Attribute(value=Name(id='se', ctx=Load()), attr='time_varying_known_reals', ctx=Load())), keyword(arg='time_varying_known_categoricals', value=Attribute(value=Name(id='se', ctx=Load()), attr='time_varying_known_categoricals', ctx=Load())), keyword(arg='time_varying_unknown_reals', value=Attribute(value=Name(id='se', ctx=Load()), attr='time_varying_unknown_reals', ctx=Load())), keyword(arg='max_encoder_length', value=Attribute(value=Name(id='se', ctx=Load()), attr='max_encoder_length', ctx=Load())), keyword(arg='max_prediction_length', value=Attribute(value=Name(id='se', ctx=Load()), attr='max_prediction_length', ctx=Load())), keyword(arg='min_encoder_length', value=Attribute(value=Name(id='se', ctx=Load()), attr='min_encoder_length', ctx=Load())), keyword(arg='min_prediction_length', value=Attribute(value=Name(id='se', ctx=Load()), attr='min_prediction_length', ctx=Load())), keyword(arg='add_relative_time_idx', value=Attribute(value=Name(id='se', ctx=Load()), attr='add_relative_time_idx', ctx=Load())), keyword(arg='add_target_scales', value=Attribute(value=Name(id='se', ctx=Load()), attr='add_target_scales', ctx=Load())), keyword(arg='add_encoder_length', value=Attribute(value=Name(id='se', ctx=Load()), attr='add_encoder_length', ctx=Load())), keyword(arg='allow_missing_timesteps', value=Attribute(value=Name(id='se', ctx=Load()), attr='allow_missing_timesteps', ctx=Load())), keyword(arg='target_normalizer', value=Attribute(value=Name(id='se', ctx=Load()), attr='target_normalizer', ctx=Load())), keyword(arg='static_categoricals', value=Attribute(value=Name(id='se', ctx=Load()), attr='static_categoricals', ctx=Load())), keyword(arg='min_prediction_idx', value=Attribute(value=Name(id='se', ctx=Load()), attr='min_prediction_idx', ctx=Load())), keyword(arg='variable_groups', value=Attribute(value=Name(id='se', ctx=Load()), attr='variable_groups', ctx=Load())), keyword(arg='constant_fill_strategy', value=Attribute(value=Name(id='se', ctx=Load()), attr='constant_fill_strategy', ctx=Load())), keyword(arg='lags', value=Attribute(value=Name(id='se', ctx=Load()), attr='lags', ctx=Load())), keyword(arg='categorical_encoders', value=Attribute(value=Name(id='se', ctx=Load()), attr='categorical_encoders', ctx=Load())), keyword(arg='scalers', value=Attribute(value=Name(id='se', ctx=Load()), attr='scalers', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='pf_dataset_params', ctx=Store())], value=Call(func=Attribute(value=Name(id='PF_DATASET', ctx=Load()), attr='get_parameters', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='se', ctx=Load()))], decorator_list=[], returns=Constant(value='PytorchForecastingTransform'))], decorator_list=[])], type_ignores=[])