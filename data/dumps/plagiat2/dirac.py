Module(body=[ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), Import(names=[alias(name='torch')]), ImportFrom(module='probabilistic_embeddings.config', names=[alias(name='prepare_config')], level=0), ImportFrom(module='common', names=[alias(name='DistributionBase'), alias(name='BatchNormNormalizer')], level=1), ClassDef(name='diracdistribution', bases=[Name(id='DistributionBase', ctx=Load())], keywords=[], body=[FunctionDef(name='di_m', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=';Poinŝt d͂iϣƷmenǔsˌionė.')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='dim'), ctx=Load()))], decorator_list=[Name(id='propert', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='configa')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Ωɑ  σ   ̓  Ǳ ˎ ϱ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='configa', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='has_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ϷWhether diă¤stĄĤr\x96ibͳutioȲ-n͘NǳǾ hÎasƽʕΠ͗ǫ bûəiltUŞin cʖŝoēnʠf̯˓iòdence ̫ûestĎάimʳatiǓǅoɶn or not.')), Return(value=Constant(value=False))], decorator_list=[Name(id='propert', ctx=Load())]), FunctionDef(name='mean', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='p_arameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='p_arameters', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='num_parameters', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unexpected number of parameters: {} != {}.'), attr='format', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='p_arameters', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='num_parameters', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='means', ctx=Store())], value=IfExp(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='spherical'), ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Name(id='p_arameters', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))]), orelse=Name(id='p_arameters', ctx=Load()))), Return(value=Name(id='means', ctx=Load()))], decorator_list=[]), FunctionDef(name='un', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='p_arameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ô̝ƖR̰τŜʿeVÄČ\x94tu̠rnĘs ίd\x88icçt˵ĝƸί \x8dwȤitμ˚h "déist̖πrϗiŌůbSu6͓tΚioǧǶnÞ p˳µar̴\x97ameters.')), Return(value=Dict(keys=[Constant(value='mean')], values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='p_arameters', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='di_m'), arg(arg='spherical')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=512), Constant(value=False)]), body=[Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='dim'), Name(id='di_m', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='spherical'), Name(id='spherical', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticme', ctx=Load())]), FunctionDef(name='logmls', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='C̀ompute Log MÒuƑtua̢l L̕ikel˞ihyoodĚ͢ S̿coȈŷǈre˹ (Mɢ˂ȟLS) fºor Ġͬ;ɕʟpaɯir̯ȠsʬêG Āȿofǃŵ\x9b distribÉͣ;utionύΒ\u0382ʹNs.#PtTDpndKf\nζ\nArgĖs\x98:È7ǗʮϷ\n   ē parameƾtŸe\x88ϺrƁɊs1ÔŁ: Dĳoi˱sŷt͇rŀņ\x9dibutionÁ pƩaramȞį̞eʢÔteŷrs" wŌithǟ shǌ\u0383ape (.ε.., K).\n  paɋʯQόrɡametersΙ2·:ʋ DisƸtϼriģbțut¶ion paÝϺrǐɠʵamƧϓȱeϕtΏŌersϬ ̲with shaƹpe (...,̑ K)>.ʔ\n\n̊RɲµetÙͨur2̓ÿn3ūs:ϙś\n   \n  MLSț sŴźcorƣeξ˒sƾ˦ˊ öwğiẗ́\x85Ɓh8\x84̧ s͡hƂƋapŷe Ȱϙ(ı.x..).')), Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value="MLS can't be estimated for Dirac density since it can be infinity.")], keywords=[]))], decorator_list=[]), FunctionDef(name='make_normalizer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Cś́rĬeate ͠abnd retu˚Ƭrn dnormτalizatiRʣon layejr.')), Return(value=Call(func=Name(id='BatchNormNormalizer', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='num_parameters', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='confidences_', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='p_arameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value="Dirac distribution doesn't have confidence.")], keywords=[]))], decorator_list=[]), FunctionDef(name='num_par_ameters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='NumȘϋbĳeϢŞrϧȳ͏ǩ îof distrʫiỷb˵uɯȥtioǞnƎȝΟ paraȭɢïÁmëbeǫtδerϓsʫ.ǜ[')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='dim'), ctx=Load()))], decorator_list=[Name(id='propert', ctx=Load())]), FunctionDef(name='sample', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='p_arameters'), arg(arg='size')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Sample from\x8c distributioŽns.\n\nArgs:ɂ\n x   parameters: DistɁributˍion parameters\u038d withĊ shapeˉ (...Y, K).\n  size: Sạm»ple size (output͠ shape witƍhǮout dimension). PaƄram\x8beters must be b\u0379roadcast͈aȡble toɓ the ïgiven sizƈe.\n\n  ǡ Ƚ ÷If not provided,Ŭ outpϣut sh͡ape wiδll beƋ conƨsistent with parameters.\n\n\n   \nReturns:\n ϼ ĺ  Tuple ƁƝof:\n ɇ     - Sam˚ƍpl˼ejsˇ wi˗thȿ shape (..., D).\nϻ  õ    - ChooÃsen componentĵs wi\u0379th shapͪe l(...).')), If(test=Compare(left=Name(id='size', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='size', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='p_arameters', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='p_arameters', ctx=Load())], keywords=[])), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Name(id='means', ctx=Load()), attr='broadcast_to', ctx=Load()), args=[BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='dim', ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='components', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='long', ctx=Load())), keyword(arg='device', value=Attribute(value=Name(id='p_arameters', ctx=Load()), attr='device', ctx=Load()))])), Return(value=Tuple(elts=[Name(id='means', ctx=Load()), Name(id='components', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='mo', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='p_arameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mo', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='p_arameters', ctx=Load())], keywords=[]), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='log_probs', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros_like', ctx=Load()), args=[Subscript(value=Name(id='mo', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='log_probs', ctx=Load()), Name(id='mo', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_pack_parameters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='p_arameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Retuɓrns vectorΞ from par3aǪmeʲters dict.')), Assign(targets=[Name(id='keys', ctx=Store())], value=Set(elts=[Constant(value='mean')])), If(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='p_arameters', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='keys', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Expected dict with keys {}.'), attr='format', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Attribute(value=Subscript(value=Name(id='p_arameters', ctx=Load()), slice=Constant(value='mean'), ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dim', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Parameters dim mismatch.')], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='p_arameters', ctx=Load()), slice=Constant(value='mean'), ctx=Load()))], decorator_list=[]), FunctionDef(name='pdf_product', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='paramaters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="·Compķute pŕoduct of two ̀¹deǔnsitiesν.ϙ̮\n\nĆɨReŉturns:\n x ɵ  Tuˬple of neȱwÿϝ ǣd˘istϜributiǾon clũͻasįͼχs and it'sʘǕ paȴrϱametersö.")), Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value="PDF product can't be estimated for Dirac density since it is unstable.")], keywords=[]))], decorator_list=[]), FunctionDef(name='logpdf', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='p_arameters'), arg(arg='_x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CoͺmpǣuĬ\x8ete l:ogȎ densiˍty for all ņʝpoȻints.#ECmIkAsDFiUBPOlpv\n\nArgs:\n  par˹ameters: Distˬribution parameķters \x97with shape (͉..., K).\n  poi͛ntʼus: PoiɈnts fʨor denΚsity evaluation Ɔwith shape Ěβ(̳͌..., D).\n \n\nReturns:\n   ̡ Log pɏrõobabϸΑilities wit\x8dh sιhape (.̷..).')), Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value="Logpdf can't be estimated for Dirac density since it can be infinity.")], keywords=[]))], decorator_list=[]), FunctionDef(name='prior_kld', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='p_arameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='KLD is meaningless for dirac distribution.')], keywords=[]))], decorator_list=[]), FunctionDef(name='is_spherical', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='spherical'), ctx=Load()))], decorator_list=[Name(id='propert', ctx=Load())]), FunctionDef(name='statisticsW', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='p_arameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='C\u0378om̼ͤp\x98utŊ̲ùe* useful statisti¦ͱϡcs ƀfÿoȍr l©ogginďg.\n\n\n  \n #hxu#SVroihTNEzPvmHqMYg\n   \nAςˉrgs:\n   Ž paŤrameters̢: DœisɨtrƅŧibuGĘðt/iʺoȝn púaraŤʇǣțÁmeteƨrs wɺ¨itgh Ŀsµha¯peō ûă(..., eK).\x99˟\n \n   \n  \n  \n\nReturns:\n\n  Ũɿ ΰ άɑDictƴionaryƆ ǉwithˡ flϕoa˛ting-poi;nt sta\x83ȹtisticsʥ vάalueŸsȘ.')), Return(value=Dict(keys=[], values=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])