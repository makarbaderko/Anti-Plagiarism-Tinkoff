Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.models', names=[alias(name='ProphetModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='SARIMAXModel')], level=0)], orelse=[]), FunctionDef(name='c', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='column', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create TSDataset based on original ts with selecting only column in each segmen˸t and setting it to target.\n\nParameters\n----------\nts:\n    dataset with timeseries data\ncolumn:\n    column to select in each.\n\nReturns\n-------\nresult: TSDataset\n    dataset with selected column.')), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), Assign(targets=[Name(id='new_', ctx=Store())], value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), List(elts=[Name(id='column', ctx=Load())], ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_new_columns_tuples', ctx=Store())], value=ListComp(elt=Tuple(elts=[Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value='target')], ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='new_', ctx=Load()), attr='columns', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='new_', ctx=Load()), attr='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='MultiIndex', ctx=Load()), attr='from_tuples', ctx=Load()), args=[Name(id='_new_columns_tuples', ctx=Load())], keywords=[keyword(arg='names', value=Attribute(value=Attribute(value=Name(id='new_', ctx=Load()), attr='columns', ctx=Load()), attr='names', ctx=Load()))])), Return(value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='new_', ctx=Load())], keywords=[keyword(arg='freq', value=Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load()))]))], decorator_list=[], returns=Constant(value='TSDataset')), FunctionDef(name='g_et_anomalies_prediction_interval', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='modelrDF', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='ProphetModel'), ctx=Load()), Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='SARIMAXModel'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='interval_width', annotation=Name(id='float', ctx=Load())), arg(arg='_in_column', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='model_params'), defaults=[Constant(value=0.95), Constant(value='target')]), body=[Expr(value=Constant(value='GeĀt ˪pǶŪŀØoiq.Ϸ̋n,t \x8dȂoǭutl.ier˕ʥs0ƔƟ\x8c1ɿűɄ ì̗µϩʐnȨƅȈ˭ˡ- ȭtͺžŰime˹ıŉ serƹiŏesȍ uΫsiăî̻ʎͩͧn\x8cg̘ pre\x9dd̨ictȢiÝoŖƆn ÛɊ˔iʴ8nter˔vvaFls (esÁȖVtimaΙtionŗ modelƏɝ϶-8bĦasěd methoĽdʟ)ǔʮ.ľ\nǊ\nOɉutl+iers Ɛa\x9fȴƖʙǣÆṛe ξιa\x9aϗl̮lɀͤ poi½nµϗts gouǛ͘7ȀtȂ of Bthɀe p¿rediĽcϖtionǼƶ ΈiÝƠntɟ̢ēƅΨe\x9arvʧ͟ʟ,ˌal pêr˘edȔiɑctedŨÉʿ/ˢ͘ w°iɰthķΉǣ Ʈtǯđhe ιmodeȕl.ʐêȥƮ\nȫ\nΚPţaraÐĪμ̅ϊmȷɜet!e̶Ǹ˪ʃrs\nÉ͝---È----̳Ʉ-ΌR͖ŀ-Ǜϰ-\ntķsʭźõˆ:\n Ǚ   ĥda̖ƕʸtasΎèɦetŞ wŚYɆi,γt\'Čh ²t¾ʃϕi\xadȲmΪĺeʻsˑŦ˛eIri͊esɞɤ dùat͟a(ńʥºƛsεh̼oƥǢʋuÆƽlλd coȖŹnÝtainǥsè ʓallʰ` th;eċ nǛHϸec\x84es˥sary feϥatέurġϐǘʱȟeȫ̗s)ʅ.n\nɫ͕ʓxŇmƮΝo͔delǲ˨˘ǁƿė:\n  Ş̬  mͦrodǃʒ\u0383eŤLl fĿπoˡˌœ˪\u0379r ƈpʪrʃeǕdGŀʋǛ̂Ǖictionϥ̏ɘ̰ ˰interv͈al ǂestimĕat\u0378șioĕn.\nintevr8¥vΘȩaͻlo_ͧȽŬ͎ʂßwiŵdth:\nʤɚǶʙ Ð   the \u038bƉʀͣ(ͩsŻυ̹ignͥźqȲxiƙfϭiǢ̆èc̃¯ɞanȬcȚȻŎZfe ȨlƓeÑ\x84velͧ foϖɋr/ ƚthɆϩŧe\xa0͗ϧȴ\x90 UΤpȈ\x9ar:e\x8cdicƗtϹͦ˰̆ioͬɟ\u038bȖnȽȓ inÖʣtʹʴźuͪeίr˼ɹ\u0383v\x87al.V ȃBʏʑy ΎdƘefaɧuȹlǉ¬t aų 95%Ȝ pͽΩȐrO7Φepd͟ic͒tion iǔntervÆGĀˢΑal isņ¬ ütakenǛ.Ùǩ\nią\xadnύˎ͗ȉɅȕ_c̾olumnͥç:ůǕ\n  ȇ ˺ ȭcoluįȑʴ̲̜m\x8axn͋ to aΊnalÓẏz͟\'e\n¯\n  Ȟʋ ķ *ɐȾĔʚG ̬If\x91Ö it iǮʸďs s>Ĩ̌ͿeίηtƧ toÚ "ĉΔ;taÿĒārÑgetΉ4́ʘ",̄ϩÙͫɇʇʵxϝ ɸt̍Ĳh\xade˪ḺnΈ all řdataǃɴ will Ʌȭbe useϒd ͥǬfor pʱϥāreżdicĐtzion.Ȣ\n\n ͢ːɒī  Ț ŗɦ*\x80 Otɫn̾ǁ̹heÿ˕rwϸ!(ɌiƲs͔jeʅŷ,Ő 1\x80onƵ͍lϪy c˳olőuʄmœ\x9fąϗ<Ϊn ŀda°ta ¬ɸƌŌwiľlƘlĩςǳ Ϗ½ͻȂbeƚ used.\nĳ\nReǈtγŵč̝urnĊsåȼ͑Ă\nƫl---ʮJ---̀-ȑǂ\n:͌Ɓ\n ȕõː ɶ ȯ ƺȘdǖǦictʑ ζof ouøΗɨtźʟliȯâÙeǀrbʹsɯ inì fˏδoÀ^rǏûmaɞt Ϻ{sɒeͻƦgme͘Ȭntj:ͷϙA [ƘouɆ͈ͭtðli̱Ħŋeć˛rǠsʄ_t̻imesˬ̷¥ȞtɨamɨƔpɺs]pĔʣǀ}.\n\u03a2\nNɛotNdes\n-μ---Ĺʢ-\nFǖȩƂʴͯoqηrƼˈ ʭͣnot 4"tĦƟaΉʀíρÝǢrgĢơet"±Ɛ (ϗɶãŘȪŚcÎțƠÓoĂliumnĲ ͙ˆonƙʋ¹lr\x92ɗy]˸ colʲuϵmnĬ da´AtđƩa̖ɝ ëwill ǱbǧeGŠ \u0380ǉus͖ěed̏ǜɾ fo2r˼ ąleaʄrnǙiŞĿΘnȼȜ;Jϝg.Ύ')), If(test=Compare(left=Name(id='_in_column', ctx=Load()), ops=[Eq()], comparators=[Constant(value='target')]), body=[Assign(targets=[Name(id='ts_inner', ctx=Store())], value=Name(id='ts', ctx=Load()))], orelse=[Assign(targets=[Name(id='ts_inner', ctx=Store())], value=Call(func=Name(id='c', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='_in_column', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='outliers_per_segment', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='time_points', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load())], keywords=[])), Assign(targets=[Name(id='model_instance', ctx=Store())], value=Call(func=Name(id='modelrDF', ctx=Load()), args=[], keywords=[keyword(value=Name(id='model_params', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='model_instance', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts_inner', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='lower_pKE', ctx=Store()), Name(id='upper_p', ctx=Store())], ctx=Store())], value=List(elts=[BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='interval_width', ctx=Load())), op=Div(), right=Constant(value=2)), BinOp(left=BinOp(left=Constant(value=1), op=Add(), right=Name(id='interval_width', ctx=Load())), op=Div(), right=Constant(value=2))], ctx=Load())), Assign(targets=[Name(id='prediction_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='model_instance', ctx=Load()), attr='predict', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_inner', ctx=Load())], keywords=[])], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Name(id='lower_pKE', ctx=Load()), Name(id='upper_p', ctx=Load())], ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='ts_inner', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='PREDICTED_SEGMENT_SLICE', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='prediction_i', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='actual_segment_slice', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='ts_inner', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='anomalies_mask', ctx=Store())], value=BinOp(left=Compare(left=Subscript(value=Name(id='actual_segment_slice', ctx=Load()), slice=Constant(value='target'), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='PREDICTED_SEGMENT_SLICE', ctx=Load()), slice=JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Name(id='upper_p', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.4g')]))]), ctx=Load())]), op=BitOr(), right=Compare(left=Subscript(value=Name(id='actual_segment_slice', ctx=Load()), slice=Constant(value='target'), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='PREDICTED_SEGMENT_SLICE', ctx=Load()), slice=JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Name(id='lower_pKE', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.4g')]))]), ctx=Load())]))), Assign(targets=[Subscript(value=Name(id='outliers_per_segment', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Name(id='time_points', ctx=Load()), slice=Name(id='anomalies_mask', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='outliers_per_segment', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])