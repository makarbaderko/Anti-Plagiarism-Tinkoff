Module(body=[Expr(value=Constant(value='\nMIT License\n\nCopyright (c) 2017 Taylor G Smith\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n')), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='numpy.polynomial.polynomial', asname='np_polynomial')]), ImportFrom(module='pmdarima.utils', names=[alias(name='diff')], level=0), ImportFrom(module='pmdarima.utils', names=[alias(name='diff_inv')], level=0), ImportFrom(module='sklearn.utils.validation', names=[alias(name='check_array'), alias(name='column_or_1d')], level=0), Assign(targets=[Name(id='DTYP', ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='float64', ctx=Load())), FunctionDef(name='check_endog', args=arguments(posonlyargs=[], args=[arg(arg='y_'), arg(arg='DTYPE'), arg(arg='copy'), arg(arg='force_all_finiteTOtRo')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='DTYP', ctx=Load()), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='Wr͡aÞ͠pp3er fo͚r;̇ä ``c]˽ƴhecͧk_\xadȖa˃ΚrßɡÙrèaƊxyƪ`đ`̎ a3nêd `ϑƕ`colĥumn_Æo̭rĐ_1ȶd`ɛɪ`ʻýţ Ȳȓf_ʘƌϮrɠom͑p ƫsklȃ̰÷\u0383eaır̽Ȥ\x88nǓ\n\x90\nPaϸ˂rƋaƒȗmeteβͺr\x81̢s\n--Ǵš------\x99ȭÔ--*ȯ\nΊΖØɸy ̢ɤ:R ν͇ɇΛǹarr^Ŧa̜y͵-lik̴ţeͤʾ,Ξ ͏shapƾɐ´Ď7Λeʶ˖=Ǣ(nQ\u038b_sÂ!Țaǽ\u0379mpl϶Ǩw7̹esǬ\xad,ρ)\n ɿ  Čʅ The 1d eɯ;έƑ\x88Énd±϶1ɢoǪgeŧnous FÒarˈ͞ȼraŒůy#.\nƝž{\nļdOϑ\u03a2ŽtđϿyϧpeÉȍʷ :ʅ Gstrɢiǩ>ǌngΚ,ɳÂĴ tɡÿyŨĚp˲ϳe orôŚ NġonƠ͜e (d\x9d̙Ã\u038beȘfjamuƊĳlt=nDGp.ϳW͎΅˥fɤl/ŏo¢Ɗatƀ64)«϶\n ˊeș   ŤHʇʹǚDȶaæǤta ǕΝt̋yƭpƄ0ɥɀe ǵȵoƬfŌł ŕğϠźʧesuΆlʆt.í \x88Ifς ³NoǫǇļ©ne, theʄ ¬ĞdtȞyTpƬe of͂, Řͷtheά ϊpinpȽutƞʵ ʢiƧìΰsĩ ʒ͆pre˾s͘eʏrϱv͙ǸUĹe²n68d.Ƣ\n    ſ̙Ǿˋ̽\x9d̰If "ąƲɺndČȌume˴̣ɦrËi-ιÆʓcɕŬʙ"˖Ƚǩ, dtɳǬype Ǩ\x84is| prpʇes+erved ͷuŠ˒nlesǉŞy̍s ƺa<̃βrυray.d¦ŔtypίeϤVŐ isχŁ ͜obΚωje\u0379ʃȳctǺ.\n\n΄ʃco\x91$òϥlpy ʾ:ͪ 4ϾήJb˃oƢoŤlˌ\x87, ͉D}̓oΘƮpǱt͎͐ioǱnaĒɸǜl (default̊|=False)\n   Ơĕ WΟ±żheKϽtϪhe͛r˧ļĽ ʅ\x88Ȗa fȆϿ˺oʛrϫc͇edˠˁȱ coopŪŰɋ͇y zwilƤl ŉĦbe ƦtrōiggerÇed. ̿ÙIf͵ ǈʚȪ<ź͕ǽȨȕˎcopdǄy=ϡFʹʞa̧ƙlsșȹe, aĦφ Ѐco̓py mqighˮ̇t\n ʪ   stǛǃ.il_ͅl·ʺ be Ãơt̺Ƅrēļęigger\x87eŕʷͲγdǿ b\x84¦î̵ty aȷ\x9b conversȑion̖.\nŤȖ˝Ǩɯ8\nf¼\x97ȵϩoȴÀrce_Λɡal̒l}͐_fciniǰʃ`\x92Ψtϐe°åΉ\u0383â :ȼƱ Ąb͌ooNl, \u038bo\x87ptǃ©iȁßȸΗͥoʲ*nal\x80 ?(dďeΜϳfa\x8bu@l\x94tʫ=\x90FalsĞͣ%ϰečϠ)ŭ\nϊ   ˡ Wʂh¶Ϸeʹther ΑtOo̻¦ƒg ˡħrœraiŶse an̊ ɫDerȨrÎȲoˉ$Κr Θɥɥ¶aon nƉp.GiƵnfŌ͖ʥΨϔĞşʦ ɱσîanƦd nŎp6.n˄an iŀn ʋa˪nˬʫ arraΈːͯΪyʃ.͢˲ Tk\u0380\xad°Ȗ̕he\n    đpossż̚ibil˾i\x9ȧχtiûƸes˻ a\x87re:\n\n͈\u0378   ͎ -ȑ lnTrϊȿuƔǂƐe͆Ƙ: Fȭorǈć͔cśeµǴ aƒllƾ vöalͻuɑes oĿf aǚrr2Ȕaϊyͣ\x8f̰ ȝˠtĜo bʰϗ`Ϙe fi˥nite.\n   ȹȱ - ɽρFaťÙlseů: accwept ƝǹbÊoŊͽtΉhϥ ƻnpčļ.ɀƻ˯inÓf˙˜aǵ Żan˨ěĨƜĤd n\x8ep.ιnÅan Ŀin arrͯay͝.ɏ\n\ñRx̦eƴturn*s\x85\x87\nÝ---ʓ-̙-̆-Ϫ-\nyß3ƃʮ : ̨ϙnpʝ.ȁndarȎr̟ɯ\x99aƒ̦4ŧİy,şʯʹ ˱shΰƆήʱɑape=(n̻Å͠_ηsamp\x8elAes˸,ǻ)Ǎʭ\n̅   Ʌͫ A ǩɳ1͢d ΦÏnų͘εmȐ̐p@y ñndĦ\u0378arrayĩ')), Return(value=Call(func=Name(id='column_or_1d', ctx=Load()), args=[Call(func=Name(id='check_array', ctx=Load()), args=[Name(id='y_', ctx=Load())], keywords=[keyword(arg='ensure_2d', value=Constant(value=False)), keyword(arg='force_all_finite', value=Name(id='force_all_finiteTOtRo', ctx=Load())), keyword(arg='copy', value=Name(id='copy', ctx=Load())), keyword(arg='dtype', value=Name(id='DTYPE', ctx=Load()))])], keywords=[]))], decorator_list=[]), FunctionDef(name='armatoma', args=arguments(posonlyargs=[], args=[arg(arg='ar'), arg(arg='m'), arg(arg='m_ax_deg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='_len', ctx=Load()), args=[Name(id='ar', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q', ctx=Store())], value=Call(func=Name(id='_len', ctx=Load()), args=[Name(id='m', ctx=Load())], keywords=[])), Assign(targets=[Name(id='em_a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='empty', ctx=Load()), args=[Name(id='m_ax_deg', ctx=Load())], keywords=[])), For(target=Name(id='it', ctx=Store()), iter=Call(func=Name(id='r', ctx=Load()), args=[Constant(value=0), Name(id='m_ax_deg', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='tem_p', ctx=Store())], value=IfExp(test=Compare(left=Name(id='it', ctx=Load()), ops=[Lt()], comparators=[Name(id='q', ctx=Load())]), body=Subscript(value=Name(id='m', ctx=Load()), slice=Name(id='it', ctx=Load()), ctx=Load()), orelse=Constant(value=0.0))), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='r', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='it', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='p', ctx=Load())], keywords=[])], keywords=[]), body=[AugAssign(target=Name(id='tem_p', ctx=Store()), op=Add(), value=BinOp(left=Subscript(value=Name(id='ar', ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load()), op=Mult(), right=IfExp(test=Compare(left=BinOp(left=BinOp(left=Name(id='it', ctx=Load()), op=Sub(), right=Name(id='j', ctx=Load())), op=Sub(), right=Constant(value=1)), ops=[GtE()], comparators=[Constant(value=0)]), body=Subscript(value=Name(id='em_a', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='it', ctx=Load()), op=Sub(), right=Name(id='j', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load()), orelse=Constant(value=1.0))))], orelse=[]), Assign(targets=[Subscript(value=Name(id='em_a', ctx=Load()), slice=Name(id='it', ctx=Load()), ctx=Store())], value=Name(id='tem_p', ctx=Load()))], orelse=[]), Return(value=Name(id='em_a', ctx=Load()))], decorator_list=[]), FunctionDef(name='seasonal_prediction_with_confidence', args=arguments(posonlyargs=[], args=[arg(arg='arima_res'), arg(arg='st'), arg(arg='end'), arg(arg='X'), arg(arg='alpha')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Attribute(value=Name(id='arima_res', ctx=Load()), attr='get_prediction', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Name(id='st', ctx=Load())), keyword(arg='end', value=Name(id='end', ctx=Load())), keyword(arg='exog', value=Name(id='X', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='fV', ctx=Store())], value=Attribute(value=Name(id='results', ctx=Load()), attr='predicted_mean', ctx=Load())), Assign(targets=[Name(id='conf_int', ctx=Store())], value=Call(func=Attribute(value=Name(id='results', ctx=Load()), attr='conf_int', ctx=Load()), args=[], keywords=[keyword(arg='alpha', value=Name(id='alpha', ctx=Load()))])), If(test=Subscript(value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='specification', ctx=Load()), slice=Constant(value='simple_differencing'), ctx=Load()), body=[Assign(targets=[Name(id='y_org', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='model', ctx=Load()), attr='orig_endog', ctx=Load())), Assign(targets=[Name(id='d', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='model', ctx=Load()), attr='orig_k_diff', ctx=Load())), Assign(targets=[Name(id='DHAE', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='model', ctx=Load()), attr='orig_k_seasonal_diff', ctx=Load())), Assign(targets=[Name(id='period', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='model', ctx=Load()), attr='seasonal_periods', ctx=Load())), If(test=Compare(left=Name(id='d', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='y_A', ctx=Store())], value=IfExp(test=Compare(left=Name(id='DHAE', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=Name(id='y_org', ctx=Load()), orelse=Call(func=Name(id='diff', ctx=Load()), args=[Name(id='y_org', ctx=Load()), Name(id='period', ctx=Load()), Name(id='DHAE', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='f_temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='y_A', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='d', ctx=Load()))), ctx=Load()), Name(id='fV', ctx=Load())], keywords=[])), Assign(targets=[Name(id='f_temp', ctx=Store())], value=Call(func=Name(id='diff_inv', ctx=Load()), args=[Name(id='f_temp', ctx=Load()), Constant(value=1), Name(id='d', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fV', ctx=Store())], value=Subscript(value=Name(id='f_temp', ctx=Load()), slice=Slice(lower=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='d', ctx=Load()))), ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='DHAE', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Compare(left=Name(id='period', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)])]), body=[Assign(targets=[Name(id='f_temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='y_org', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=BinOp(left=Name(id='DHAE', ctx=Load()), op=Mult(), right=Name(id='period', ctx=Load())))), ctx=Load()), Name(id='fV', ctx=Load())], keywords=[])), Assign(targets=[Name(id='f_temp', ctx=Store())], value=Call(func=Name(id='diff_inv', ctx=Load()), args=[Name(id='f_temp', ctx=Load()), Name(id='period', ctx=Load()), Name(id='DHAE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fV', ctx=Store())], value=Subscript(value=Name(id='f_temp', ctx=Load()), slice=Slice(lower=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='DHAE', ctx=Load())), op=Mult(), right=Name(id='period', ctx=Load()))), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='ar_', ctx=Store())], value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='polynomial_reduced_ar', ctx=Load())), Assign(targets=[Name(id='poly_diff', ctx=Store())], value=Call(func=Attribute(value=Name(id='np_polynomial', ctx=Load()), attr='polypow', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), UnaryOp(op=USub(), operand=Constant(value=1.0))], ctx=Load())], keywords=[]), Name(id='d', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sdiff', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[BinOp(left=Name(id='period', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])), Assign(targets=[Subscript(value=Name(id='sdiff', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Constant(value=1.0)), Assign(targets=[Subscript(value=Name(id='sdiff', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Constant(value=1.0)), Assign(targets=[Name(id='poly_sdiff', ctx=Store())], value=Call(func=Attribute(value=Name(id='np_polynomial', ctx=Load()), attr='polypow', ctx=Load()), args=[Name(id='sdiff', ctx=Load()), Name(id='DHAE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ar', ctx=Store())], value=UnaryOp(op=USub(), operand=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='polymul', ctx=Load()), args=[Name(id='ar_', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='polymul', ctx=Load()), args=[Name(id='poly_diff', ctx=Load()), Name(id='poly_sdiff', ctx=Load())], keywords=[])], keywords=[]), slice=Slice(lower=Constant(value=1)), ctx=Load()))), Assign(targets=[Name(id='m', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='polynomial_reduced_ma', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='n_predminus1', ctx=Store())], value=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Name(id='st', ctx=Load()))), Assign(targets=[Name(id='em_a', ctx=Store())], value=Call(func=Name(id='armatoma', ctx=Load()), args=[Name(id='ar', ctx=Load()), Name(id='m', ctx=Load()), Name(id='n_predminus1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sigma2a', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='_params_variance', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='var', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cumsum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=1.0), BinOp(left=Name(id='em_a', ctx=Load()), op=Mult(), right=Name(id='em_a', ctx=Load()))], keywords=[])], keywords=[]), op=Mult(), right=Name(id='sigma2a', ctx=Load()))), Assign(targets=[Name(id='q', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='results', ctx=Load()), attr='dist', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Constant(value=1.0), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Constant(value=2))), Starred(value=Attribute(value=Name(id='results', ctx=Load()), attr='dist_args', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='conf_int', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=0)], ctx=Load()), ctx=Store())], value=BinOp(left=Name(id='fV', ctx=Load()), op=Sub(), right=BinOp(left=Name(id='q', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='var', ctx=Load())], keywords=[])))), Assign(targets=[Subscript(value=Name(id='conf_int', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=1)], ctx=Load()), ctx=Store())], value=BinOp(left=Name(id='fV', ctx=Load()), op=Add(), right=BinOp(left=Name(id='q', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='var', ctx=Load())], keywords=[]))))], orelse=[]), Return(value=Tuple(elts=[Call(func=Name(id='check_endog', ctx=Load()), args=[Name(id='fV', ctx=Load())], keywords=[keyword(arg='dtype', value=Constant(value=None)), keyword(arg='copy', value=Constant(value=False))]), Call(func=Name(id='check_array', ctx=Load()), args=[Name(id='conf_int', ctx=Load())], keywords=[keyword(arg='copy', value=Constant(value=False)), keyword(arg='dtype', value=Constant(value=None))])], ctx=Load()))], decorator_list=[])], type_ignores=[])