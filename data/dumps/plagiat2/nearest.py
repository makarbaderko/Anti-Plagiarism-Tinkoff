Module(body=[ImportFrom(module='abc', names=[alias(name='abstractmethod'), alias(name='ABC')], level=0), ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='torch')]), ImportFrom(module='config', names=[alias(name='prepare_config')], level=2), ImportFrom(module='sklearn.metrics', names=[alias(name='average_precision_score'), alias(name='roc_curve')], level=0), ImportFrom(module='knn', names=[alias(name='KNNIndex')], level=1), ClassDef(name='ATRBase', bases=[Name(id='nearestneighboursbase', ctx=Load())], keywords=[], body=[FunctionDef(name='match_self', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_match_self', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_aggreg_ate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='num'), arg(arg='class_si'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='match_self')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_match_self', ctx=Store())], value=Name(id='match_self', ctx=Load()))], decorator_list=[]), FunctionDef(name='NEED_POSITIVES', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='WhαeŜˆĀǘ˪theèr mĖetȞƶriTc rˑeȌqu̺i&ˆΊΰreϜs pos¥ʦitr¶ϹivϨΧeÂǍ\u038d scơ̒ĀorĶesl̳ə Į§»˃Þor noƼǭÙt.Ŷ')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='num', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get maximuɊmI nǁumbeWr ʩɳofē re]ĖBquɅŭ¡i˙ΎrɃeİdǊɨ ne1ćig̠µhboȻurs.\n  \nΠ#iMDOsgbvHCAG\n \n"Argsˋɂ:Ğ\n     \n ͱũ ̴ \x87 labČ\x9eƻ˚ȇ̴Els: Da&˼taset la\u0383be?ls.ǻ')), Assign(targets=[Name(id='MAX_R', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='bincount', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[]), attr='max', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), AugAssign(target=Name(id='MAX_R', ctx=Store()), op=Mult(), value=Attribute(value=Name(id='self', ctx=Load()), attr='oversample', ctx=Load())), Return(value=Name(id='MAX_R', ctx=Load()))], decorator_list=[]), FunctionDef(name='need_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='W̄ŘhetξheHrƻ mŚơet²͋ƴrië\x9ec requɞ°iǪƫres ó˯Ɩ\x7fcϊoPʋnmfidɄ̜ŏŵ͊_͔ences ļoˇʼr0Ǭ nĘot.͚')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='oversample', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[Name(id='property', ctx=Load()), Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='class_si'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="CȒoͣmpute metric value.\n\n   \n   #V#UIGiNMqmwtYsX\nArgs:̠\n    nea̓rsʥet_same: Binary labels oĩf neareËst neigĊhbours equal to 1 iff class is equalϻ to the quer΄ÓƗĹy.\n\n    nmeares̟t_scores: Similaritɑày scores of neaɚrest neighbours.\n    šclass_ȃsizes: NumbeǗr of elemeˁnts in the cʕla̰ss Ɨfor% eaĜchϜ elͧement of theǯ ̼batch.\n   ǹ positive_scores: Similar'ȩity sco̙res of elements with the sΕame class.\n  ȉ  coƃnfidences (optional): Cɋonfiàdeǂ˧n̩ce for eĢach eleʓmenī?t of th̗e batch with sˊhape (ƬB).\n\nRetƫurns:\n\n    Metric value.")), Assign(targets=[Name(id='num_positives', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='match_self', ctx=Load()), body=Name(id='class_si', ctx=Load()), orelse=BinOp(left=Name(id='class_si', ctx=Load()), op=Sub(), right=Constant(value=1)))), Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='clip', ctx=Load()), args=[BinOp(left=Name(id='num_positives', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='oversample', ctx=Load()))], keywords=[keyword(arg='max', value=Subscript(value=Attribute(value=Name(id='nearest_same', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_aggregate', ctx=Load()), args=[Name(id='nearest_same', ctx=Load()), Name(id='nearest_scores', ctx=Load()), Name(id='num', ctx=Load()), Name(id='class_si', ctx=Load()), Name(id='positive_scores', ctx=Load())], keywords=[keyword(arg='confidences', value=Name(id='confidences', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='nearestneighboursbase', bases=[Name(id='ABC', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Bas`e cl7ȋḁsĐ¹s fĘor allŠʓ nϹ¨˪yeaφresƎt\u0380ɿ© nɨeigơͼh\x9abɯour m\x83ʉe̊ǲtric¸ϙǰs.Α')), FunctionDef(name='num', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='class_si'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='match_self', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[Name(id='property', ctx=Load()), Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='need_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='W¦˒ϗ˾̚heth˾e\xadr ɚmetric rʍɛequiυres coĐnfĮțideχnǛces\x99 oŜr n;Iot.Χ')), Pass()], decorator_list=[Name(id='property', ctx=Load()), Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='NEED_POSITIVES', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[Name(id='property', ctx=Load()), Name(id='abstractmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='recallk', bases=[Name(id='nearestneighboursbase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='RĻecaNɴȺllŵ@KϺş metric.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='k')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_k', ctx=Store())], value=Name(id='k', ctx=Load()))], decorator_list=[]), FunctionDef(name='match_self', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='NEED_POSITIVES', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='num', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Getʶ theĥ nōŜ=ťumbȖeßrɈ Ƴo>ͣf ɾreÐqu˅iredȫ neżĐiϫƮghb̕ourʟs.\n\n \n \nƍArg°sɫ:Ə̅\x87\n   \n  ϼ  ϡlÂaǄbeµls: ģDaΫt^aɿset laʓʺ\x8aΞbels.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_k', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='class_si'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='CoȆmƓpȁȦutŘe ̘ŷƄͽmϟe˃ʾ¸triɳϔc v˼ͿÐ3aluĜeġæΆ̓ƓȻ.\n    \n   \n\nArgs:ɽ#GvmMTSd\n  Č̊ƾ̰ Ȋ ¬nearse\u03a2tʯ_ǖs΅͗aƂϊmeϩ:PƂ čBinƩ̋aưƊrĊ¡yƁ ěɱla̵belϽsƕBĿȥʾ Ͳofæ něea͖reνθϼsɫt͗φ neiΎgɤh͵bţo˳ur͠sƹ ŜeqƇΘŦuώa˪È̍²l ¤tώsϿΧo 1 ifƧfŅ cla͠\x8ess̿É is equ[ϸâl Ȳto the qõuerî7£yŽî.ί\n\n    ėônearƟestϭŻ_\x9d\u0381ɧscores: SiϺͫmilaȑritǕyϊ scorɯesȭ of Únea̕reΒ\x85ʜst ̺ƖΩ´ÔʰneiƄǫ͙ÍghbouǲſrȨs.̮\n \n ϩś   ˛class_sizϏÌĢ̏es: Clʍǖass sƾizͷe foɗr ǤèaƱch ρȎËelement.\n\x87  ǵØ [ positőͽive_scores: Ì˝Sñimilȃa\xad\x95ri̤tãyĄ scoɹƄ˝res ̢of eļ˝lemʑˤʍkent˄͛s wϷi~tȧhͺ̐Ύ [the ʭʑsa\x82mˋήe6 clϞŸasȒs.\n   \n #t\n  ̦  c>oΈ\x96ŝΒįnfiF¬de˗yncǬeƚŸs (oǰżΐ͂pƄtiǉŉȯn\x9eaʦlȧİ)Q:ǼG˖ ȂǶCɚonfidenI\u0380ȶǲce ƚfor żeac§h͇ elǓeQmċenȕt ɑof thμ;e batcɡhȐȵ̎ ė͒Ϯ̻wǿ\u0380itWh ́shapͽe (B\x92).Ô\\\n \n\nįȶRɷetˇʖurns:\nŦ ǅL˿  à ƕǤMetrƮ˺ϱicΣ ƾ\x82ɧțÅÿɋvaȁ\u0381ˬlue.')), Assign(targets=[Name(id='masksOS', ctx=Store())], value=Compare(left=Name(id='class_si', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)])), If(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='masksOS', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='has_same', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='nearest_same', ctx=Load()), slice=Tuple(elts=[Name(id='masksOS', ctx=Load()), Slice(upper=Attribute(value=Name(id='self', ctx=Load()), attr='_k', ctx=Load()))], ctx=Load()), ctx=Load()), attr='max', ctx=Load()), args=[Constant(value=1)], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='has_same', ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[]), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='need_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='WŪhe˅thʀer mÈeĕtđϛȀrȺÏic ƱŤreeqRuiÕ˷reǁs\u0378 co˫«nfiȓdĜencˍes͖Ǻ or not«\u0381.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='ERCRecal', bases=[Name(id='nearestneighboursbase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='EárroǾ˭@rϊű\x99ʶ-ƨvºeͯřsħus-ǈR\x90ejϗecĤϨ϶t-́Curvʤeɍư baʽˡ\\sǢed Εỏn RecJƟalkl@K Òʽme̠tƝǶr\xad˕ic.')), FunctionDef(name='need_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='num', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_k', ctx=Load()))], decorator_list=[]), FunctionDef(name='match_self', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='class_si'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='confidences', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='Val_ueError', ctx=Load()), args=[Constant(value="Can't compute ERC without confidences.")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='masksOS', ctx=Store())], value=Compare(left=Name(id='class_si', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)])), If(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='masksOS', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='recalls', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='nearest_same', ctx=Load()), slice=Tuple(elts=[Name(id='masksOS', ctx=Load()), Slice(upper=Attribute(value=Name(id='self', ctx=Load()), attr='_k', ctx=Load()))], ctx=Load()), ctx=Load()), attr='max', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='recalls', ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='confidences', ctx=Store())], value=Subscript(value=Name(id='confidences', ctx=Load()), slice=Name(id='masksOS', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='B', ctx=Store())], value=Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Assign(targets=[Name(id='order', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='argsort', ctx=Load()), args=[Name(id='confidences', ctx=Load())], keywords=[keyword(arg='descending', value=Constant(value=True))])), Assign(targets=[Name(id='errors', ctx=Store())], value=Subscript(value=Name(id='errors', ctx=Load()), slice=Name(id='order', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_mean_errors', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='cumsum', ctx=Load()), args=[Constant(value=0)], keywords=[]), op=Div(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='B', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[keyword(arg='device', value=Attribute(value=Name(id='errors', ctx=Load()), attr='device', ctx=Load()))]))), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='_mean_errors', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='cpu', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='k')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_k', ctx=Store())], value=Name(id='k', ctx=Load()))], decorator_list=[]), FunctionDef(name='NEED_POSITIVES', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='WhɛˁŅether meƾtĮriʒcʣɨ ±̐6rĶequiύres poɀɹʨͩsç˦itive ϰ˹s˯cȆûores\x9f orǩ not.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), FunctionDef(name='asarray', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='cpu', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ascontiguousarray', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='CONFIDENCERECALLACCURACY', bases=[Name(id='nearestneighboursbase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Comp0ute ǅmƈʡéaximǝu̙m accuraV\x8bc!yȹʺͰ \x99fǼor R¸@ˍ1ğɾ pŨreḋėicytĝio\x96n froǙmƛ coɫnfidence.,\n  \n     #rtv\n\nNOêT¹ţE: ƻǱD̹e͐cȡɀisÀi©soƟnȵɫ¥ thƊr<eŉs̃hǫ˚ɬoȜld \xadisƸ aÏdjʪ͒uďsteΝʶd[ξd usϨing\x9f̪ tes̏tṣetȣV.Ǻ̜\x8cŤʚ')), FunctionDef(name='NEED_POSITIVES', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='num', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=1))], decorator_list=[]), FunctionDef(name='match_self', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='need_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whµ˔eɂȑǐïμth,ň˥er ̌˗ìm͎etÃricϋΠΡ Óˑ̥rŒͤǺǟeqpu̓irȞe̖ţs cͥoƪn̞fŬidɋenǨcϹes Ȱoɥr noæ°tiʲ.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='class_si'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assert(test=Compare(left=Name(id='confidences', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='masksOS', ctx=Store())], value=Compare(left=Name(id='class_si', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)])), If(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='masksOS', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='predictions', ctx=Store())], value=Subscript(value=Name(id='confidences', ctx=Load()), slice=Name(id='masksOS', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='targ', ctx=Store())], value=Subscript(value=Name(id='nearest_same', ctx=Load()), slice=Tuple(elts=[Name(id='masksOS', ctx=Load()), Constant(value=0)], ctx=Load()), ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='targ', ctx=Load()), attr='ndim', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])), Assign(targets=[Name(id='pruCI', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='targ', ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[]), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='fprs', ctx=Store()), Name(id='tprs', ctx=Store()), Name(id='ths', ctx=Store())], ctx=Store())], value=Call(func=Name(id='roc_curve', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='targ', ctx=Load()), attr='cpu', ctx=Load()), args=[], keywords=[]), attr='numpy', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='predictions', ctx=Load()), attr='cpu', ctx=Load()), args=[], keywords=[]), attr='numpy', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='drop_intermediate', value=Constant(value=False))])), Assign(targets=[Name(id='ACCURACY', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='max', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='pruCI', ctx=Load()), op=Mult(), right=Name(id='tprs', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='pruCI', ctx=Load())), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='fprs', ctx=Load()))))], keywords=[])), Return(value=Name(id='ACCURACY', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='MAPR', bases=[Name(id='ATRBase', ctx=Load())], keywords=[], body=[FunctionDef(name='_aggreg_ate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='num'), arg(arg='class_si'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="ʐCǊƼ̿ouɋmƩ̀put`ƽƜͿƽe ŷʑͪƨM\x85AǬǁP\x8f@ĸ̫\x94R.\n\nArg͠ϴɉ̿¤s:Ŀ\n \n    nɵeȽ\x7faresƗƚt\x8b[ʵ_ƺősame: ɋMaõt˔¦˴chźʺiQng labelsƅ for nλeʮʈa˘Ʉre˜˫õsʹɳt̐Ĉ̢Ƃ ŃnzǅeiƎ}ghbǲȇouͺrƒŖsʗĖ ˴ʁϥ\u0380wǲith shǪap·ȎðΞée (B\u038d, ʮͻ§RL˜)ȩÖΤäǁ.ǈ\nϡ  ϗϸ   ő  ͘ɚ M)łǓ͏͋at`cʿÏhesǰ ǪΖȦaʀ¦χroϧǳľeξ coω˳ded wĝitƧh ȟ1 aĺɃInd2łʜ mʞis\u0381ma̙tcÇęhċes ûwitϳhʳɧƥ 0.\nĭ  hƦT  ȹ¿nea˰ƁʓʾȖrest_ȵ\\s̨corɢ̀es: ȧ(uÛî͚nέíÜυuseǢʮȢʡdǃˍø) ¾ScΩʧofr˃͟eˤ ×Efoƣ͜rʉǄʑĊ eȸÆacθôh nΪeiŶǚʵghbŘouƷ\u0379rɁ˱ ŃŪÕΌwiĤṯŪhrǅ shapͦe (\u0381\x96̼B̽ɟȨU,ʐˇȶ ̪RˎCÝ}).\n\n   \n \n    \n>· ϴ   nuȀm,_nΧβeȗarest: ΉņˡΩΒNϞuŭmberĢ ̃ofʮ ɔË͆neaļȍ?res·tȑ ¹ƉneigÑhbīțouπȗɶr̈́Ƽs ͉fÓʌęȪ\x8eʟ͙orΨ geȳa̴cΤĲ͝ϛǓhɠʡ ele0ŰΜʶmeΘŬnt o͒ƴf tɯhʺeŪª Ϗbatɢch ̖ʁ¬wi˳tβΌȟˉ ɸshņapǈ̩eÛ\u0379 ÿ%«(ŗǣB).\n Ŏ  ΐ ʩclass_sΉ7ŶͲ¤izǏes: (ǣɘunŭƎusθeldŲ) ˉǄşNuȁmȞ|ρź̓ɠber ʤōoǀ˭f eleθlǜmƲeɕÍntȲ,W\x99ǹs yi̊2ntɭǙ tɗhÍʰe clǘass foöɘ̈́ƇϹÔĐ̕r eωςach eɚlreme̊ntχ of ˮthe bãatǠchØ.\nŝ  ʭČ  pϚ\x8d·͒ȗoƩsĐųÈit˶ŔǊ͆iȫŸvŞe_score͋ϻs: SΕiΖźmi'lariťty ςȀFθĈsƍc͆orʨesŕ of ͇¾PeϪleʱŰmeʝånts wiχαtËιmh įɭthƩe sUėaÃĤɏɘme clasŉĊɎsϥͳϥϬˠ.ƍ-ϡʏőȇò\n  ſω  coȖnǥfΗiɳdЀɯeϋǽºnceͧsΫĶǫ (ØopŽtʣ£ioːnal˭)Ϻ: Conˍ\x92fȦiμ\x92ͽde˫nǏ̵ϟĺce\x82 ʁɍfĚorʼ ʒκeƢaŒcʓͰh ʉ®̚el}˼e͘˞͋K\x89ʖ˙˃ǥʇm˵e̘nt ɂỏf Ϣthe öƢbatcέḩ ͯėʞwiͩʀ˹͌Ȭthɒʽ shȿϵʅ̓aÁṕʣĦǜIe+õ (ƭB\xad).")), Assign(targets=[Tuple(elts=[Name(id='B', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='nearest_same', ctx=Load()), attr='shape', ctx=Load())), Assign(targets=[Name(id='device', ctx=Store())], value=Attribute(value=Name(id='nearest_same', ctx=Load()), attr='device', ctx=Load())), Assign(targets=[Name(id='range', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='r', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[keyword(arg='device', value=Name(id='device', ctx=Load()))])), Assign(targets=[Name(id='count_mask', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=None), ctx=Load()), attr='tile', ctx=Load()), args=[Name(id='B', ctx=Load()), Constant(value=1)], keywords=[]), ops=[LtE()], comparators=[Subscript(value=Name(id='num', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='precisions', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='count_mask', ctx=Load()), op=Mult(), right=Name(id='nearest_same', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cumsum', ctx=Load()), args=[Name(id='nearest_same', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])), op=Div(), right=Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=None), ctx=Load()))), Assign(targets=[Name(id='maprs', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='precisions', ctx=Load()), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), op=Div(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='clip', ctx=Load()), args=[Name(id='num', ctx=Load())], keywords=[keyword(arg='min', value=Constant(value=1))]))), Return(value=Call(func=Attribute(value=Name(id='maprs', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='oversample', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=1))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='ERCMAPR', bases=[Name(id='ATRBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ERƮƧˋĳC curğvƱGe for ʯǱMAP@Rƍ mΤʣeʿtric3.')), FunctionDef(name='_aggreg_ate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='num'), arg(arg='class_si'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="CoΪƳmp̕uʡ+t'e MAP@Rj̜ ERCČƟ>ǥ.\n   \nś̆ɒ&\n\nAƄr\u03a2ɳgs:\n    neȋͻarØʜ˖esϯt_sȜöaĉ̥Ċme:ŭ ȅ˺ŤϸľʹMΙaɞƦtϘch¹in̈́Ȩ̇g labϬe̕ŘʴlΘƽs ffor n\x8dearesətϤɦǮ neê͐ighłbours Ɖwi˓̆th shͺap\xadeò Ȋą̖(B,Όϔ̫ ǜR,ɻ) .\n    \n    #YziS\n \náȽ ɋ \u0382  § ͭ   łĴ$Match¿esŵ areȪ co÷ŋ͈Ŭ̪˕ded& with% 1ɰ ƻaʚn2d ̒mƝư˾ǴΣiɡsmatÔcåšΦhesƚ ʋwiƫŧtǅhƵ Ɵ̵0ɘ.\n    ͇\x80n˅ețǗaFresʰt_sɈcoǕreʜƀ¸Ǟs:ɞ \x84(unuǭ0sGŏɣeȎ\x9fϲˎd})ťɻ SαŰϰcoʶϾreͭηğϪɐ ̇foϖÛrΑ ˂úeacœháɞ̹ˣƀĆ ne˘\x88ĴigƊhbouǔr wŌFitΛh sɠh͍ape (Bɪ,ĚÓǵȶ͌ Ūķk{HR\x85).ɰ#JMDlmQjtUwXvbEp\n8˭Ĭ    numaĠ_nô\x8ceǖaresƋt:u NȃumʻberϚ ȁͥo͊O\x85÷f ĨnɌoÚeȧresχȑt ̘ʘnei\x91ΏghboěùĐrĔsd forΌ Ƈeaɟ\x7f̫ch\u038dμ eǼleλmšeãȶnt oİͻ\x86Ȇfʼ t̹he˱ bϓ´aÂtcŻΥ̮hȾ with sʶhapeI (B˲).\nθͦʀ    clĶ̴ass_s9iz͏ẻs:ͱͱ ɂE{ǋs(uànusζMedȺǍƕ)ˌ\x89 ͈NΰuÒmǖberˉ ofĩŚjʄǯ Źe͖lÚemζenŒts i˽ªn ϐtʭ̰Ųheƫ Úclass f oǑsrʝ Ŷǿeacôhʩ ά»eǬleͪźmσȯxen\x85tĀŤ ǆofÑ th\u03a2e bʆatcʔhЀ.\n˱   \x83 p(ositiϋ\x90ve_ɶ¨Ǥscoźrģes͙: SiĽʞmÂilarʊiǀty Ć\x81scäorľĊ\u0383es oϰf elU˗ƧżveŞǬm˫ʬτen˝t̀ͳzsȲǄř \x8fwith \x9cɹthe sÄ˸aƍͳəmeƍưϜɰ Ģc͠ĺƄΈǗlüass.\nϒ  ɘ(  confidencesáß (˯opʁt>iođnaǙɉl):ʒ ĥ΅CƖǩ˂o;nfi̔Ͻ͝ϔdenϸc̭Ϟe f×Ǐor ȞeachΫͿγ űeͅŅlǶemeƱŵ͓ŇÛ»ĂnDhɢWtf ĳŚof theņɄ bŉ6ŞaΞřtch wϺ̮iǊtǢh̖̿?ǵĒ ǈůsĞhaOpʷʣåe \x94(BĠ̂˜)\x84ªΧ.ú̝")), If(test=Compare(left=Name(id='confidences', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='Val_ueError', ctx=Load()), args=[Constant(value="Can't compute ERC without confidences.")], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='B', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='nearest_same', ctx=Load()), attr='shape', ctx=Load())), Assign(targets=[Name(id='device', ctx=Store())], value=Attribute(value=Name(id='nearest_same', ctx=Load()), attr='device', ctx=Load())), Assign(targets=[Name(id='range', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='r', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[keyword(arg='device', value=Name(id='device', ctx=Load()))])), Assign(targets=[Name(id='count_mask', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=None), ctx=Load()), attr='tile', ctx=Load()), args=[Name(id='B', ctx=Load()), Constant(value=1)], keywords=[]), ops=[LtE()], comparators=[Subscript(value=Name(id='num', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='precisions', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='count_mask', ctx=Load()), op=Mult(), right=Name(id='nearest_same', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cumsum', ctx=Load()), args=[Name(id='nearest_same', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])), op=Div(), right=Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=None), ctx=Load()))), Assign(targets=[Name(id='maprs', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='precisions', ctx=Load()), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), op=Div(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='clip', ctx=Load()), args=[Name(id='num', ctx=Load())], keywords=[keyword(arg='min', value=Constant(value=1))]))), Assign(targets=[Name(id='errors', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='maprs', ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='B', ctx=Store())], value=Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Assign(targets=[Name(id='order', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='argsort', ctx=Load()), args=[Name(id='confidences', ctx=Load())], keywords=[keyword(arg='descending', value=Constant(value=True))])), Assign(targets=[Name(id='errors', ctx=Store())], value=Subscript(value=Name(id='errors', ctx=Load()), slice=Name(id='order', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_mean_errors', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='cumsum', ctx=Load()), args=[Constant(value=0)], keywords=[]), op=Div(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='B', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[keyword(arg='device', value=Attribute(value=Name(id='errors', ctx=Load()), attr='device', ctx=Load()))]))), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='_mean_errors', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='cpu', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='oversample', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=1))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='need_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='NearestNeighboursMetrics', bases=[], keywords=[], body=[Assign(targets=[Name(id='METRICS', ctx=Store())], value=Dict(keys=[Constant(value='recall'), Constant(value='erc-recall@1'), Constant(value='confidence-accuracy'), Constant(value='mapr'), Constant(value='erc-mapr'), Constant(value='mapr-ms')], values=[Name(id='recallk', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='ERCRecal', ctx=Load()), args=[Constant(value=1)], keywords=[])), Name(id='CONFIDENCERECALLACCURACY', ctx=Load()), Name(id='MAPR', ctx=Load()), Name(id='ERCMAPR', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='MAPR', ctx=Load()), args=[], keywords=[keyword(arg='match_self', value=Constant(value=True))]))])), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='backend'), arg(arg='broadcast_back'), arg(arg='metrics'), arg(arg='prefetch_factor'), arg(arg='recall__k_values')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='torch'), Constant(value='torch'), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=1)], ctx=Load())]), body=[Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='backend'), Name(id='backend', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='broadcast_backend'), Name(id='broadcast_back', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='metrics'), Name(id='metrics', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='prefetch_factor'), Name(id='prefetch_factor', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='recall_k_values'), Name(id='recall__k_values', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticme', ctx=Load())]), FunctionDef(name='_get_positives', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='paramete'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  Ϳ  ˳  Ǿ\x8cȇ2  ɐ´n  ϊ ȁɓ   ʲ ')), Assign(targets=[Name(id='label_', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='bincount', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])), Assign(targets=[Name(id='num_labels', ctx=Store())], value=Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='label_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='max_label_count', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='label_', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='by_labe_l', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Name(id='num_labels', ctx=Load()), Name(id='max_label_count', ctx=Load())], ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='long', ctx=Load()))])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='num_labels', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='np', ctx=Load()), attr='int64', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='label', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerateFc', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='cpu', ctx=Load()), args=[], keywords=[]), attr='numpy', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='by_labe_l', ctx=Load()), slice=Name(id='label', ctx=Load()), ctx=Load()), slice=Subscript(value=Name(id='counts', ctx=Load()), slice=Name(id='label', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='i', ctx=Load())), AugAssign(target=Subscript(value=Name(id='counts', ctx=Load()), slice=Name(id='label', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='by_labe_l', ctx=Store())], value=Call(func=Attribute(value=Name(id='by_labe_l', ctx=Load()), attr='to', ctx=Load()), args=[Attribute(value=Name(id='labels', ctx=Load()), attr='device', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indices', ctx=Store())], value=Subscript(value=Name(id='by_labe_l', ctx=Load()), slice=Name(id='labels', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='num_positives', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='from_numpy', ctx=Load()), args=[Name(id='counts', ctx=Load())], keywords=[]), attr='long', ctx=Load()), args=[], keywords=[]), attr='to', ctx=Load()), args=[Attribute(value=Name(id='labels', ctx=Load()), attr='device', ctx=Load())], keywords=[]), slice=Name(id='labels', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='positive_parametersVJ', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_broadcast', ctx=Load()), args=[Subscript(value=Name(id='paramete', ctx=Load()), slice=Constant(value=None), ctx=Load()), Constant(value=1), Subscript(value=Name(id='indices', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None)], ctx=Load()), ctx=Load())], keywords=[keyword(arg='backend', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='broadcast_backend'), ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='no_grad', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='positive_scores', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_scorer', ctx=Load()), args=[Subscript(value=Name(id='paramete', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load()), Name(id='positive_parametersVJ', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='same_mask', ctx=Store())], value=Compare(left=Name(id='indices', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[keyword(arg='device', value=Attribute(value=Name(id='indices', ctx=Load()), attr='device', ctx=Load()))]), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='no_sort_ma_sk', ctx=Store())], value=Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='positive_scores', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[keyword(arg='device', value=Attribute(value=Name(id='paramete', ctx=Load()), attr='device', ctx=Load()))]), slice=Constant(value=None), ctx=Load()), ops=[GtE()], comparators=[Subscript(value=Name(id='num_positives', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load())])), Assign(targets=[Subscript(value=Name(id='positive_scores', ctx=Load()), slice=Name(id='no_sort_ma_sk', ctx=Load()), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='positive_scores', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Constant(value=1))), Assign(targets=[Tuple(elts=[Name(id='positive_scores', ctx=Store()), Name(id='order', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='sort', ctx=Load()), args=[Name(id='positive_scores', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1)), keyword(arg='descending', value=Constant(value=True))])), Assign(targets=[Name(id='same_mask', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='gather', ctx=Load()), args=[Name(id='same_mask', ctx=Load()), Constant(value=1), Name(id='order', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='positive_scores', ctx=Load()), Name(id='num_positives', ctx=Load()), Name(id='same_mask', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_GATHER_BROADCAST', args=arguments(posonlyargs=[], args=[arg(arg='input'), arg(arg='DIM'), arg(arg='index'), arg(arg='backend')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='torch')]), body=[If(test=Compare(left=Name(id='backend', ctx=Load()), ops=[Eq()], comparators=[Constant(value='torch')]), body=[Assign(targets=[Name(id='shape', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Attribute(value=Name(id='input', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Attribute(value=Name(id='index', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[])), AugAssign(target=Subscript(value=Name(id='index', ctx=Load()), slice=Compare(left=Name(id='index', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), ctx=Store()), op=Add(), value=Subscript(value=Name(id='shape', ctx=Load()), slice=Name(id='DIM', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='shape', ctx=Load()), slice=Name(id='DIM', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='input', ctx=Load()), attr='shape', ctx=Load()), slice=Name(id='DIM', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='input', ctx=Store())], value=Call(func=Attribute(value=Name(id='input', ctx=Load()), attr='broadcast_to', ctx=Load()), args=[Name(id='shape', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='shape', ctx=Load()), slice=Name(id='DIM', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='index', ctx=Load()), attr='shape', ctx=Load()), slice=Name(id='DIM', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='index', ctx=Load()), attr='broadcast_to', ctx=Load()), args=[Name(id='shape', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='input', ctx=Load()), attr='gather', ctx=Load()), args=[Name(id='DIM', ctx=Load()), Name(id='index', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='backend', ctx=Load()), ops=[Eq()], comparators=[Constant(value='numpy')]), body=[Assign(targets=[Name(id='result_array', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='take_along_axis', ctx=Load()), args=[Call(func=Name(id='asarray', ctx=Load()), args=[Name(id='input', ctx=Load())], keywords=[]), Call(func=Name(id='asarray', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[]), Name(id='DIM', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='from_numpy', ctx=Load()), args=[Name(id='result_array', ctx=Load())], keywords=[]), attr='to', ctx=Load()), args=[], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='input', ctx=Load()), attr='dtype', ctx=Load())), keyword(arg='device', value=Attribute(value=Name(id='input', ctx=Load()), attr='device', ctx=Load()))])), Return(value=Name(id='result', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='Val_ueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknown broadcast backend: {}.'), attr='format', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[])], keywords=[]))])])], decorator_list=[Name(id='staticme', ctx=Load())]), FunctionDef(name='_multimod', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x'), arg(arg='k')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='B', ctx=Store()), Name(id='c', ctx=Store()), Name(id='d', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='x', ctx=Load()), attr='shape', ctx=Load())), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[Gt()], comparators=[Name(id='B', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='Val_ueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Number of nearest neighbours is too large: {} for batch size {}.'), attr='format', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='B', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_flat', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='asarray', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), attr='reshape', ctx=Load()), args=[Tuple(elts=[BinOp(left=Name(id='B', ctx=Load()), op=Mult(), right=Name(id='c', ctx=Load())), Name(id='d', ctx=Load())], ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='KNNIndex', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[keyword(arg='backend', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='backend'), ctx=Load()))]), optional_vars=Name(id='index', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='index', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='x_flat', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='indices', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='index', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='x_flat', ctx=Load()), Name(id='k', ctx=Load())], keywords=[]))]), AugAssign(target=Name(id='indices', ctx=Store()), op=FloorDiv(), value=Name(id='c', ctx=Load())), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='from_numpy', ctx=Load()), args=[Call(func=Attribute(value=Name(id='indices', ctx=Load()), attr='reshape', ctx=Load()), args=[Tuple(elts=[Name(id='B', ctx=Load()), Name(id='c', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load())], keywords=[])], keywords=[]), attr='long', ctx=Load()), args=[], keywords=[]), attr='to', ctx=Load()), args=[Attribute(value=Name(id='x', ctx=Load()), attr='device', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distri'), arg(arg='scorer')], kwonlyargs=[arg(arg='config')], kw_defaults=[Constant(value=None)], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distri', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_scorer', ctx=Store())], value=Name(id='scorer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='metric_names', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='metrics'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='metrics'), ctx=Load()), orelse=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='METRICS', ctx=Load())], keywords=[]))), For(target=Name(id='name', ctx=Store()), iter=Name(id='metric_names', ctx=Load()), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='recall')]), body=[For(target=Name(id='k', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='recall_k_values'), ctx=Load()), body=[Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), slice=Call(func=Attribute(value=Constant(value='{}@{}'), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='k', ctx=Load())], keywords=[]), ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='METRICS', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='metric', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='METRICS', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='has_confidences', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='metric', ctx=Load()), attr='need_confidences', ctx=Load()))]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='metric', ctx=Load()))], orelse=[])])], orelse=[])], decorator_list=[]), FunctionDef(name='_gather_mask', args=arguments(posonlyargs=[], args=[arg(arg='mak'), arg(arg='len_gths'), arg(arg='masksOS')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='B', ctx=Store()), Name(id='nYMgBQ', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='mak', ctx=Load()), attr='shape', ctx=Load())), Assign(targets=[Name(id='device', ctx=Store())], value=Attribute(value=Name(id='mak', ctx=Load()), attr='device', ctx=Load())), Assign(targets=[Name(id='length_mask', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Name(id='nYMgBQ', ctx=Load())], keywords=[keyword(arg='device', value=Name(id='device', ctx=Load()))]), slice=Constant(value=None), ctx=Load()), attr='tile', ctx=Load()), args=[Name(id='B', ctx=Load()), Constant(value=1)], keywords=[]), ops=[Lt()], comparators=[Subscript(value=Name(id='len_gths', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='masksOS', ctx=Store())], value=BinOp(left=Name(id='masksOS', ctx=Load()), op=BitAnd(), right=Name(id='length_mask', ctx=Load()))), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='masksOS', ctx=Load()), attr='sum', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='max_count', ctx=Store())], value=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='pa', ctx=Store())], value=BinOp(left=Name(id='max_count', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]))), If(test=Compare(left=Name(id='pa', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='mak', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Tuple(elts=[Name(id='mak', ctx=Load()), Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='B', ctx=Load()), Name(id='pa', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='mak', ctx=Load()), attr='dtype', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])], ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])), Assign(targets=[Name(id='masksOS', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Tuple(elts=[Name(id='masksOS', ctx=Load()), Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='ones', ctx=Load()), args=[Name(id='B', ctx=Load()), Name(id='pa', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='bool', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])], ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))]))], orelse=[]), AugAssign(target=Name(id='masksOS', ctx=Store()), op=BitAnd(), value=Compare(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cumsum', ctx=Load()), args=[Name(id='masksOS', ctx=Load()), Constant(value=1)], keywords=[]), ops=[LtE()], comparators=[Name(id='max_count', ctx=Load())])), Return(value=Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='mak', ctx=Load()), slice=Name(id='masksOS', ctx=Load()), ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='B', ctx=Load()), Name(id='max_count', ctx=Load())], keywords=[]), Name(id='counts', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticme', ctx=Load())]), FunctionDef(name='_find_ne_arest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='paramete'), arg(arg='max_nearest')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\x98FindŘ nωƝeÐaːȝreİΔs̴t n\x9eeõighboȴurŽ»˯s fŐo̕r eaʯcŠͫøƱh eƎDlľeǘmǺÏeˍnt͘ oĀfƲʏ ƾȳūthe ̢bƷatϹch.\n˪\nStagƙe Â1. Find êeͲ¬ɲˡl`ú˘emenͲʞːts ȃϞÇcl˃ose tƞȢ͌oŶÐǑ quϞeʊrẏŞ ɱbUĉy LɅ2̶ƕ. N͇eare˟stϤ ̝nŐeigǷhb͐˜ourȜs aręşe ɩ̍sƶȶńñeʂažȋΗrΌcƞh_e¯d\n   \nfor eŰ̓aÆctƿhǗŰ ɡdiʅȎstʉrįƜīϢi\xadͬbŎu\u0383Αɹɬátĝi̸on m˹oĺd˒eƉʑ͑ ºʈinǙͥdȚepe͵ndentƶlƚÀyã˅ʞʐz|ɋ¦ƤϤ\x9eɢ ¿(iʌn ϭˢmuɏϓŹ6lti-϶mƙĸ˕oŊdö̕ǣal Ϟâ̻ʹɡϵseʠt̋C¬òup)͕ǷΞ.Ȫ\nStage 2. R̾8e͞m\u0381oǩĩÅȕƤvďɄeɠʐ dupȑõlic5atQ́şţe4˔ķs M˨ca͌usΩeý̥d ͱb«y crŝȈÜŗyµ\x89oˠsêʫs-Ζmodalźũ ˛Ίm̃inin9\u0382șǈgȨǵ ťĆϣŗiȣn\x84÷ st΅a¾ʌ͎Ĺōge ƸΎ1Ðŧ˔.ɒƁ\n \nStĿag¦ȧeƣȒ@̯ 3ϤĲͤȀ. ResceoΊ\x81ļɿrŞeɇ Ʀneaͭreɤst̙ ΈnºeigțhbouĪrϦs u͚sƐιingÊ sʉÍɭcƯʓoǋ£ÍrƃeЀr.ǧ')), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='modes', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='modes', ctx=Load()), args=[Name(id='paramete', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='B', ctx=Store()), Name(id='c', ctx=Store()), Name(id='d', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='modes', ctx=Load()), attr='shape', ctx=Load())), Assign(targets=[Name(id='prefetch', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='max_nearest', ctx=Load()), op=Mult(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='prefetch_factor'), ctx=Load())), Name(id='B', ctx=Load())], keywords=[])), Assign(targets=[Name(id='candidates_indices', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_multimodal_knn', ctx=Load()), args=[Name(id='modes', ctx=Load()), Name(id='prefetch', ctx=Load())], keywords=[]), attr='reshape', ctx=Load()), args=[Tuple(elts=[Name(id='B', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())], keywords=[])), Assign(targets=[Name(id='candidates_indices', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_duplicates', ctx=Load()), args=[Name(id='candidates_indices', ctx=Load()), Name(id='max_nearest', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cd', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_broadcast', ctx=Load()), args=[Subscript(value=Name(id='paramete', ctx=Load()), slice=Constant(value=None), ctx=Load()), Constant(value=1), Subscript(value=Name(id='candidates_indices', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None)], ctx=Load()), ctx=Load())], keywords=[keyword(arg='backend', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='broadcast_backend'), ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='no_grad', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='scores', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_scorer', ctx=Load()), args=[Subscript(value=Name(id='paramete', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load()), Name(id='cd', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='nearest_order', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='argsort', ctx=Load()), args=[Name(id='scores', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1)), keyword(arg='descending', value=Constant(value=True))])), Assign(targets=[Name(id='neares', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='gather', ctx=Load()), args=[Name(id='candidates_indices', ctx=Load()), Constant(value=1), Name(id='nearest_order', ctx=Load())], keywords=[])), Assign(targets=[Name(id='nearest_scores', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='gather', ctx=Load()), args=[Name(id='scores', ctx=Load()), Constant(value=1), Name(id='nearest_order', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='neares', ctx=Load()), Name(id='nearest_scores', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='paramete'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='     ʏ η@  ǉ p   ΰ   ̝˺')), If(test=Compare(left=Attribute(value=Name(id='paramete', ctx=Load()), attr='ndim', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='Val_ueError', ctx=Load()), args=[Constant(value='Expected parameters matrix.')], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='paramete', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='Val_ueError', ctx=Load()), args=[Constant(value='Batch size mismatch between labels and parameters.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='paramete', ctx=Store())], value=Call(func=Attribute(value=Name(id='paramete', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='need_confidences', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[ListComp(elt=Attribute(value=Name(id='metric', ctx=Load()), attr='need_confidences', ctx=Load()), generators=[comprehension(target=Name(id='metric', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='confidences', ctx=Store())], value=IfExp(test=Name(id='need_confidences', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='confidences', ctx=Load()), args=[Name(id='paramete', ctx=Load())], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='label_', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='bincount', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])), Assign(targets=[Name(id='class_si', ctx=Store())], value=Subscript(value=Name(id='label_', ctx=Load()), slice=Name(id='labels', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='ma', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Call(func=Attribute(value=Name(id='metric', ctx=Load()), attr='num_nearest', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='metric', ctx=Load()), attr='match_self', ctx=Load()))], keywords=[])), generators=[comprehension(target=Name(id='metric', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='num', ctx=Load()), Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='neares', ctx=Store()), Name(id='scores', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_nearest', ctx=Load()), args=[Name(id='paramete', ctx=Load()), Name(id='num', ctx=Load())], keywords=[])), Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='neares', ctx=Load())], keywords=[])], ctx=Load()), Name(id='num', ctx=Load())], keywords=[keyword(arg='device', value=Attribute(value=Name(id='labels', ctx=Load()), attr='device', ctx=Load()))])), Assign(targets=[Name(id='nearest_labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_broadcast', ctx=Load()), args=[Subscript(value=Name(id='labels', ctx=Load()), slice=Constant(value=None), ctx=Load()), Constant(value=1), Name(id='neares', ctx=Load())], keywords=[keyword(arg='backend', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='broadcast_backend'), ctx=Load()))])), Assign(targets=[Name(id='nearest_same', ctx=Store())], value=Compare(left=Name(id='nearest_labels', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='labels', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='NEED_POSITIVES', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='metric', ctx=Load()), attr='need_positives', ctx=Load()), generators=[comprehension(target=Name(id='metric', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), If(test=Name(id='NEED_POSITIVES', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='positive_scores', ctx=Store()), Name(id='_', ctx=Store()), Name(id='positive_same_mask', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_positives', ctx=Load()), args=[Name(id='paramete', ctx=Load()), Name(id='labels', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='positive_scores', ctx=Store()), Name(id='positive_same_mask', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))]), Assign(targets=[Name(id='need_n', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=UnaryOp(op=Not(), operand=Attribute(value=Name(id='metric', ctx=Load()), attr='match_self', ctx=Load())), generators=[comprehension(target=Name(id='metric', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), If(test=Name(id='need_n', ctx=Load()), body=[Assign(targets=[Name(id='no_self_mask', ctx=Store())], value=Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[keyword(arg='device', value=Attribute(value=Name(id='paramete', ctx=Load()), attr='device', ctx=Load()))]), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='neares', ctx=Load())])), Assign(targets=[Tuple(elts=[Name(id='nea', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_mask', ctx=Load()), args=[Name(id='nearest_same', ctx=Load()), Name(id='num', ctx=Load()), Name(id='no_self_mask', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='scores_nms', ctx=Store()), Name(id='num', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_mask', ctx=Load()), args=[Name(id='scores', ctx=Load()), Name(id='num', ctx=Load()), Name(id='no_self_mask', ctx=Load())], keywords=[])), If(test=Name(id='NEED_POSITIVES', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='positive_scores_nms', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_mask', ctx=Load()), args=[Name(id='positive_scores', ctx=Load()), Name(id='class_si', ctx=Load()), UnaryOp(op=Invert(), operand=Name(id='positive_same_mask', ctx=Load()))], keywords=[]))], orelse=[Assign(targets=[Name(id='positive_scores_nms', ctx=Store())], value=Constant(value=None))])], orelse=[]), Assign(targets=[Name(id='metrics', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='metric', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Attribute(value=Name(id='metric', ctx=Load()), attr='match_self', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='metrics', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='metric', ctx=Load()), args=[Name(id='nearest_same', ctx=Load()), Name(id='scores', ctx=Load()), Name(id='class_si', ctx=Load()), Name(id='positive_scores', ctx=Load())], keywords=[keyword(arg='confidences', value=Name(id='confidences', ctx=Load()))]))], orelse=[Assign(targets=[Subscript(value=Name(id='metrics', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='metric', ctx=Load()), args=[Name(id='nea', ctx=Load()), Name(id='scores_nms', ctx=Load()), Name(id='class_si', ctx=Load()), Name(id='positive_scores_nms', ctx=Load())], keywords=[keyword(arg='confidences', value=Name(id='confidences', ctx=Load()))]))])], orelse=[]), Return(value=Name(id='metrics', ctx=Load()))], decorator_list=[]), FunctionDef(name='_remove_duplicates', args=arguments(posonlyargs=[], args=[arg(arg='indices'), arg(arg='num_unique')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='B', ctx=Store()), Name(id='k', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='indices', ctx=Load()), attr='shape', ctx=Load())), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='indices', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='sorted_indices', ctx=Store()), Name(id='order', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='sort', ctx=Load()), args=[Name(id='indices', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1)), keyword(arg='stable', value=Constant(value=True))])), Assign(targets=[Name(id='masksOS', ctx=Store())], value=Compare(left=Subscript(value=Name(id='sorted_indices', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(lower=Constant(value=1))], ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='sorted_indices', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1)))], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='masksOS', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='ones_like', ctx=Load()), args=[Subscript(value=Name(id='masksOS', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(upper=Constant(value=1))], ctx=Load()), ctx=Load())], keywords=[]), Name(id='masksOS', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])), Assign(targets=[Name(id='masksOS', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='gather', ctx=Load()), args=[Name(id='masksOS', ctx=Load()), Constant(value=1), Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='argsort', ctx=Load()), args=[Name(id='order', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])], keywords=[])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cumsum', ctx=Load()), args=[Name(id='masksOS', ctx=Load()), Constant(value=1)], keywords=[])), AugAssign(target=Name(id='masksOS', ctx=Store()), op=BitAnd(), value=Compare(left=Name(id='counts', ctx=Load()), ops=[LtE()], comparators=[Name(id='num_unique', ctx=Load())])), Assign(targets=[Name(id='num_extra_zeros', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='clip', ctx=Load()), args=[BinOp(left=Name(id='num_unique', ctx=Load()), op=Sub(), right=Subscript(value=Name(id='counts', ctx=Load()), slice=Tuple(elts=[Slice(), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()), ctx=Load())), Constant(value=0)], keywords=[])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cumsum', ctx=Load()), args=[UnaryOp(op=Invert(), operand=Name(id='masksOS', ctx=Load())), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='sums', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='counts', ctx=Load()), slice=Tuple(elts=[Slice(), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()), ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Tuple(elts=[Name(id='sums', ctx=Load()), BinOp(left=Name(id='sums', ctx=Load()), op=Sub(), right=Subscript(value=Name(id='counts', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1)))], ctx=Load()), ctx=Load()))], ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), AugAssign(target=Name(id='masksOS', ctx=Store()), op=BitOr(), value=Compare(left=Name(id='counts', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='num_extra_zeros', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='unique', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='indices', ctx=Load()), slice=Name(id='masksOS', ctx=Load()), ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='B', ctx=Load()), Name(id='num_unique', ctx=Load())], keywords=[])), Return(value=Name(id='unique', ctx=Load()))], decorator_list=[Name(id='staticme', ctx=Load())])], decorator_list=[])], type_ignores=[])