Module(body=[Import(names=[alias(name='os')]), ImportFrom(module='random', names=[alias(name='SystemRandom')], level=0), Import(names=[alias(name='time')]), Import(names=[alias(name='optuna')]), Import(names=[alias(name='pytest')]), ImportFrom(module='joblib', names=[alias(name='Parallel')], level=0), ImportFrom(module='joblib', names=[alias(name='delayed')], level=0), ImportFrom(module='optuna.storages', names=[alias(name='RDBStorage')], level=0), ImportFrom(module='etna.auto.optuna', names=[alias(name='ConfigSampler')], level=0), FunctionDef(name='config_sampler', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='ConfigSampler', ctx=Load()), args=[], keywords=[keyword(arg='configs', value=ListComp(elt=Dict(keys=[Constant(value='x')], values=[Name(id='i_', ctx=Load())]), generators=[comprehension(target=Name(id='i_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=10)], keywords=[]), ifs=[], is_async=0)]))]))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='objective', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ȝ ˣƭ Ϙ ǫ    ō     ˽ έ Hʭ ňϩ\x8bä')), FunctionDef(name='objective', args=arguments(posonlyargs=[], args=[arg(arg='trialyUvrS', annotation=Attribute(value=Attribute(value=Name(id='optuna', ctx=Load()), attr='trial', ctx=Load()), attr='Trial', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rn_g', ctx=Store())], value=Call(func=Name(id='SystemRandom', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='config', ctx=Store())], value=Dict(keys=[None, None], values=[Attribute(value=Name(id='trialyUvrS', ctx=Load()), attr='relative_params', ctx=Load()), Attribute(value=Name(id='trialyUvrS', ctx=Load()), attr='params', ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[BinOp(left=Constant(value=10), op=Mult(), right=Call(func=Attribute(value=Name(id='rn_g', ctx=Load()), attr='random', ctx=Load()), args=[], keywords=[]))], keywords=[])), Return(value=BinOp(left=BinOp(left=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='x'), ctx=Load()), op=Sub(), right=Constant(value=2)), op=Pow(), right=Constant(value=2)))], decorator_list=[]), Return(value=Name(id='objective', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='sqlite_storage', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ʑ ̞  W ū      ')), Assign(targets=[Name(id='storage_name', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='monotonic', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value='.db')])), Expr(value=Yield(value=Call(func=Name(id='RDBStorage', ctx=Load()), args=[JoinedStr(values=[Constant(value='sqlite:///'), FormattedValue(value=Name(id='storage_name', ctx=Load()), conversion=-1)])], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='storage_name', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_config_sampl', args=arguments(posonlyargs=[], args=[arg(arg='objective'), arg(arg='config_sampler'), arg(arg='sqlite_storage'), arg(arg='n_jobs'), arg(arg='expected_pipeline')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=4), Dict(keys=[Constant(value='x')], values=[Constant(value=2)])]), body=[Expr(value=Constant(value='·  ǽ˦  ®     ')), Assign(targets=[Name(id='study', ctx=Store())], value=Call(func=Attribute(value=Name(id='optuna', ctx=Load()), attr='create_study', ctx=Load()), args=[], keywords=[keyword(arg='sampler', value=Name(id='config_sampler', ctx=Load())), keyword(arg='storage', value=Name(id='sqlite_storage', ctx=Load()))])), Expr(value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Name(id='n_jobs', ctx=Load()))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='study', ctx=Load()), attr='optimize', ctx=Load())], keywords=[]), args=[Name(id='objective', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_jobs', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assert(test=Compare(left=Subscript(value=Attribute(value=Attribute(value=Name(id='study', ctx=Load()), attr='best_trial', ctx=Load()), attr='user_attrs', ctx=Load()), slice=Constant(value='pipeline'), ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_pipeline', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_config_sampler_one_thread', args=arguments(posonlyargs=[], args=[arg(arg='objective'), arg(arg='config_sampler'), arg(arg='expected_pipeline')], kwonlyargs=[], kw_defaults=[], defaults=[Dict(keys=[Constant(value='x')], values=[Constant(value=2)])]), body=[Assign(targets=[Name(id='study', ctx=Store())], value=Call(func=Attribute(value=Name(id='optuna', ctx=Load()), attr='create_study', ctx=Load()), args=[], keywords=[keyword(arg='sampler', value=Name(id='config_sampler', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='study', ctx=Load()), attr='optimize', ctx=Load()), args=[Name(id='objective', ctx=Load())], keywords=[keyword(arg='n_trials', value=Constant(value=100))])), Assert(test=Compare(left=Subscript(value=Attribute(value=Attribute(value=Name(id='study', ctx=Load()), attr='best_trial', ctx=Load()), attr='user_attrs', ctx=Load()), slice=Constant(value='pipeline'), ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_pipeline', ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='le', ctx=Load()), args=[Attribute(value=Name(id='study', ctx=Load()), attr='trials', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='le', ctx=Load()), args=[Attribute(value=Name(id='config_sampler', ctx=Load()), attr='configs', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='TEST_CONFIG_SAMPLER_MULTITHREAD', args=arguments(posonlyargs=[], args=[arg(arg='objective'), arg(arg='config_sampler'), arg(arg='sqlite_storage'), arg(arg='n_jobs'), arg(arg='expected_pipeline')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=4), Dict(keys=[Constant(value='x')], values=[Constant(value=2)])]), body=[Assign(targets=[Name(id='study', ctx=Store())], value=Call(func=Attribute(value=Name(id='optuna', ctx=Load()), attr='create_study', ctx=Load()), args=[], keywords=[keyword(arg='sampler', value=Name(id='config_sampler', ctx=Load())), keyword(arg='storage', value=Name(id='sqlite_storage', ctx=Load()))])), Expr(value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Name(id='n_jobs', ctx=Load()))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='study', ctx=Load()), attr='optimize', ctx=Load())], keywords=[]), args=[Name(id='objective', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_jobs', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assert(test=Compare(left=Subscript(value=Attribute(value=Attribute(value=Name(id='study', ctx=Load()), attr='best_trial', ctx=Load()), attr='user_attrs', ctx=Load()), slice=Constant(value='pipeline'), ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_pipeline', ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='le', ctx=Load()), args=[Attribute(value=Name(id='study', ctx=Load()), attr='trials', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=BinOp(left=Call(func=Name(id='le', ctx=Load()), args=[Attribute(value=Name(id='config_sampler', ctx=Load()), attr='configs', ctx=Load())], keywords=[]), op=Add(), right=Name(id='n_jobs', ctx=Load())), op=Sub(), right=Constant(value=1))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='skip', ctx=Load()), args=[], keywords=[keyword(arg='reason', value=Constant(value='The number of trials is non-deterministic'))])])], type_ignores=[])