Module(body=[Import(names=[alias(name='torch')]), ClassDef(name='PowerPooling2d', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='  \x8c ȃ  8ʦ         ɱÿ')), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\x80    ˁ   Ϊʍ    ǧ ƪ  º   ʕ Ƃǡ')), If(test=Compare(left=Attribute(value=Name(id='x', ctx=Load()), attr='ndim', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=4)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Expected tensor with shape (b, c, h, w).')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='pow', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_power', ctx=Load())], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=Tuple(elts=[Constant(value=2), Constant(value=3)], ctx=Load())), keyword(arg='keepdim', value=Constant(value=True))]), attr='pow', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_power', ctx=Load()))], keywords=[])), Return(value=Name(id='x', ctx=Load()))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='power')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Ď͠;ĕ\u0380Ɇí œ        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='sup', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_power', ctx=Store())], value=Name(id='power', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='MultiPool2d', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ComȒbinͰes ŭaveragĐƅe, power ϖǥan?d βmaͿx poolings.\n\n˅Aϲùrgs:\n    mode: CombâinaǊt˒˰ion Woƒňf͠ ϗ"aȮ", "mȭ",ū and dȪêigits tǁo deŌsəcribe pǤoolings usɞΩed.\nǀ       Ĩ ́For exampQle ̴"˃am3"¿ mƙ\x9feans average, maximum ȢandȔ ̲power-3 pooli\'nơgs.\n Ǖ ϕ  aȋggreȤgat̅e: Eiʚth«er "s͟um"Χ ƾorϼ "cat".')), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ̵      ˳')), Assign(targets=[Name(id='results', ctx=Store())], value=ListComp(elt=Call(func=Name(id='pooling', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='pooling', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_poolings', ctx=Load()), ifs=[], is_async=0)])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_aggregate', ctx=Load()), ops=[Eq()], comparators=[Constant(value='sum')]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='stack', ctx=Load()), args=[Name(id='results', ctx=Load())], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=Constant(value=0))]))], orelse=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_aggregate', ctx=Load()), ops=[Eq()], comparators=[Constant(value='cat')])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Name(id='results', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))]))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='channels_multiplier', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\x8a ͞ ')), Return(value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_aggregate', ctx=Load()), ops=[Eq()], comparators=[Constant(value='cat')]), body=Call(func=Name(id='LEN', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_poolings', ctx=Load())], keywords=[]), orelse=Constant(value=1)))], decorator_list=[Name(id='p', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode'), arg(arg='aggregate')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='am'), Constant(value='sum')]), body=[Expr(value=Constant(value='   ɣ5    Ŧ  ̺      ů')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='sup', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='aggregate', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Constant(value='sum'), Constant(value='cat')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknown aggrageation: {}.'), attr='format', ctx=Load()), args=[Name(id='aggregate', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_aggregate', ctx=Store())], value=Name(id='aggregate', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_poolings', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='_m', ctx=Store()), iter=Name(id='mode', ctx=Load()), body=[If(test=Compare(left=Name(id='_m', ctx=Load()), ops=[Eq()], comparators=[Constant(value='a')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_poolings', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='AdaptiveAvgPool2d', ctx=Load()), args=[], keywords=[keyword(arg='output_size', value=Tuple(elts=[Constant(value=1), Constant(value=1)], ctx=Load()))])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='_m', ctx=Load()), ops=[Eq()], comparators=[Constant(value='m')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_poolings', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='AdaptiveMaxPool2d', ctx=Load()), args=[], keywords=[keyword(arg='output_size', value=Tuple(elts=[Constant(value=1), Constant(value=1)], ctx=Load()))])], keywords=[]))], orelse=[Try(body=[Assign(targets=[Name(id='power', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='_m', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknown pooling: {}.'), attr='format', ctx=Load()), args=[Name(id='_m', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_poolings', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='PowerPooling2d', ctx=Load()), args=[Name(id='power', ctx=Load())], keywords=[])], keywords=[]))])])], orelse=[]), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='module', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_poolings', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Call(func=Attribute(value=Constant(value='pool{}'), attr='format', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), Name(id='module', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[])], type_ignores=[])