Module(body=[ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), Import(names=[alias(name='torch')]), ImportFrom(module='_workarounds', names=[alias(name='ArcFace'), alias(name='CosFace')], level=2), Import(names=[alias(name='math')]), ImportFrom(module='config', names=[alias(name='prepare_config'), alias(name='ConfigError')], level=2), ImportFrom(module='distribution', names=[alias(name='NormalDistribution'), alias(name='VMFDistribution')], level=1), ImportFrom(module='parametrization', names=[alias(name='Parametrization')], level=1), ClassDef(name='LogLikeClassifiermgk', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Contains taʿrget Ϛcentroids ĳandʋ perforʢms log likelihooƅd estimation.\n\nLayer can add priĀorέž correction ĕin different formsϦÒ. If "pƻretrained"\nis used, loǪg priors from training set\u038b are added to logits. ąIf\n"trainable" is usɯed, bias vector isĂ trained for output logitês. By\nȦ̻default pǩrior correction is turned off.\n\nAȭrgs:\n    distr΄ibution: Distrģibution useńd in th̖e modeòl.\n    nu̻m_cl͗asses:Ƥ Number of oˁutput classˡes.\n    priors: Precomputed class priors. PriorsƤ can be· learned on-line if not provided.\nǈ\nInputs:\n    - parameters: DistribuÉtƳion parameters wiƟth shaȚpe (..., K).{\nȋ    - labels:¾ Positive labels used forξ margin ʫwińth shape (...Ȝ).\n    - κscoϷrerȣ: Unused.ɃƓ\n\nOutputsʻ:\n    - ɔlogits: Class logits with shɏașpeh (..., C).')), Assign(targets=[Name(id='TARGET_DISTRIBUTIONS', ctx=Store())], value=Dict(keys=[Constant(value='gmm'), Constant(value='vmf')], values=[Name(id='NormalDistribution', ctx=Load()), Name(id='VMFDistribution', ctx=Load())])), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='_self', ctx=Load()), attr='bias', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='parametersBAD'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='V', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Parameters and labels shape mismatch: {}, {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='shape', ctx=Load()), Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='targets', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=BinOp(left=List(elts=[Constant(value=1)], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dim_prefix', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load()), attr='shape', ctx=Load())], keywords=[])), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution'), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='parametersBAD', ctx=Store())], value=Call(func=Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='logitsRjdb', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logpdf', ctx=Load()), args=[Name(id='parametersBAD', ctx=Load()), Name(id='targets', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='embe_ddings', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parametersBAD', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='logitsRjdb', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='logpdf', ctx=Load()), args=[Name(id='targets', ctx=Load()), Name(id='embe_ddings', ctx=Load())], keywords=[]))]), If(test=Compare(left=Attribute(value=Name(id='_self', ctx=Load()), attr='bias', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='log_priors', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='_self', ctx=Load()), attr='bias', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='bias', ctx=Load()), Constant(value=0)], keywords=[]))), Assign(targets=[Name(id='logitsRjdb', ctx=Store())], value=BinOp(left=Name(id='log_priors', ctx=Load()), op=Add(), right=Name(id='logitsRjdb', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='logitsRjdb', ctx=Store())], value=Call(func=Name(id='additive_margin', ctx=Load()), args=[Name(id='logitsRjdb', ctx=Load()), Name(id='labels', ctx=Load()), Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='margin'), ctx=Load())], keywords=[])), Return(value=Name(id='logitsRjdb', ctx=Load()))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='distribution'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='_self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load())), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_target_distribution', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='TARGET_DISTRIBUTIONS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution'), ctx=Load()), ctx=Load()), args=[], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution_params'), ctx=Load()))])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='dim', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Predicted and target embeddings size mismatch: {} != {}.'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load()), Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='dim', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='is_spherical', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='distribution', ctx=Load()), attr='is_spherical', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Constant(value='Predicted and target embeddings normalization mismatch')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='FloatTensor', ctx=Load()), args=[Name(id='num_classes', ctx=Load()), Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='num_parameters', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='FloatTensor', ctx=Load()), args=[Name(id='num_classes', ctx=Load()), Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load())], keywords=[])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='init', ctx=Load()), attr='xavier_uniform_', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='priors'), ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value=None), Constant(value='none')], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='bias', ctx=Store())], value=Constant(value=None))], orelse=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='no_grad', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='log_priors', ctx=Store())], value=Call(func=Name(id='g', ctx=Load()), args=[Name(id='num_classes', ctx=Load()), Name(id='priors', ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='priors'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='pretrained')]), body=[If(test=Compare(left=Name(id='priors', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='V', ctx=Load()), args=[Constant(value='Need dataset priors for pretrained mode')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='trainable', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='priors'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='trainable')]), body=[Assign(targets=[Name(id='trainable', ctx=Store())], value=Constant(value=True))], orelse=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknown priors mode: {}.'), attr='format', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='priors'), ctx=Load())], keywords=[])], keywords=[]))])]), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='bias', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Name(id='log_priors', ctx=Load())], keywords=[keyword(arg='requires_grad', value=Name(id='trainable', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='STATISTICS', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='confidences', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='confidences', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='target_confidence/mean'), ctx=Store())], value=Call(func=Attribute(value=Name(id='confidences', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='target_confidence/std'), ctx=Store())], value=Call(func=Attribute(value=Name(id='confidences', ctx=Load()), attr='std', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='HAS_WEIGHT', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   Ɏ   ²  ɵ   Ơ ̪ ů ύ ͔ \x95   ')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='priors'), arg(arg='marginVEem'), arg(arg='target_distribution'), arg(arg='target_distribution_params')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='̆G\u0379etΰǏɵ ʮcưl¯˥ațĿDssʝi\x81Ϡ̠̎Ϩ́͊fierȵ· Ħcƙołnȍì´ʢuǿřfΕig˶.\n\n7ŴArg͠süʜ:̟Ưƈ\x8cŪ\n  Ě  ̢Ȑpriǅ˕or*Ϥ͌s:ȋ ŬTypΜƍeϤʧ of̷ prŠi\u038dǥˉor coɖrrectionǗ \xa0uεˑsΨe̛d Ɔ\u038d(onȳeʧͶªøŇ of `ĳ˟\u0380pˏreºt˭r˚aƎ̟NɿĶiÀǾǻΩnedǥ`̵́, `tČraiǽ\x92\x9cϞnʡóȪXable`Ƨ aġȮnñϚƑüȤdı ¼Ϸ`no͛neɼ`ɱȱ)˖.\nė\x98 ˸  ̲ \u03a2 t SŎʷſeqe des͈ácriptiğŠǉoɡn aboǧ͓\\v~eȂµ\x89ĺ>ͷ͂.̧ ʺBy def̜þa˅ulŊt͆ǁƾǟ όŹÃtuɅʥrˆŽǢânȢ͒χ̜ed oXʾ°0f1f.Ƙ\nȼ\x7f Øυï άζ˅ˤ͵ͺ  ϕm\u0381arˆζgiΓɥʦn̝͠: ɱLog prɤ´ob˃ʀabi˻ŁlityͭΜ sʯ±ubtʭrϋɔacΗΒĭtedȋɚ ŝfroƴɮm ˚positȩïɖĝoiʧve \x99logϊit.\n ͅ  ƶ targeɕltlǡ_diʅřͰϲsǊtǄr\x89ň\\ȠibɃ˥ʨutiļǆ¡nŊoʫˋƼ˕n:ǧĮƶ ˁC)omputɄσeľΗʯ l͗ikeőʊlńihood ǒofĢ t̤Ƅh˾e prŚediˢcŝΠtio̅ıƵÂ8nS\x80 us¹inȇ͎©g tar\xadȡgetɗǏȬ dʃʱòisXtrib\u038dut+io\x85ͻnŞsù.γǽȢɵ\nğ ɻĆƐW Ȱʏ   ÅƵ% UDæeÅfºa«Ĺϲu͇lt ͔iȽs Ūto δcom\u0382ϕpuʍάQteA ǽ̌tlɌʧɺγʲikeliƮhĢood̳ˢ of ˒͆·tʹheǍ taīrƸæŶΧ¿geɈųt uĖϷsȦƍ̊ȅiˁnώg ˺kϣϜĄpͼǢrɫǔʑeϣʨƝdiéħc̱͢teʻ˟ǋd distĤr°iοηϦɎɊ̄butionċ.')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='priors'), Name(id='priors', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='margin'), Name(id='marginVEem', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='target_distribution'), Name(id='target_distribution', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='target_distribution_params'), Name(id='target_distribution_params', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='STATICMETHOD', ctx=Load())]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ˬΣ  Ȑ ɩ ʝ ²  Ą  ')), Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='VMFClassifier', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_GET_SCALE', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='trainable')]), body=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='log_scale', ctx=Load()), attr='exp', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='exp', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='log_scale', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='parametersBAD'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='  ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='V', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Parameters and labels shape mismatch: {}, {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='shape', ctx=Load()), Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='DTYPE', ctx=Store())], value=Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='dtype', ctx=Load())), Assign(targets=[Name(id='device', ctx=Store())], value=Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='device', ctx=Load())), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parametersBAD', ctx=Load())], keywords=[])), Assign(targets=[Name(id='k', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample_size'), ctx=Load())), Assign(targets=[Name(id='c', ctx=Store())], value=Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Load())), Assign(targets=[Name(id='scale', ctx=Store())], value=Call(func=Attribute(value=Name(id='_self', ctx=Load()), attr='_get_scale', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='sample', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parametersBAD', ctx=Load()), BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Name(id='k', ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='sample', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Name(id='sample', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load()))]), body=[Assign(targets=[Name(id='sample_parameters', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='join_parameters', ctx=Load()), args=[], keywords=[keyword(arg='log_probs', value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='k', ctx=Load()), Constant(value=1)], keywords=[keyword(arg='dtype', value=Name(id='DTYPE', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])), keyword(arg='means', value=Call(func=Attribute(value=Name(id='sample', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), keyword(arg='hidden_ik', value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='ones', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='k', ctx=Load()), Constant(value=1), Constant(value=1)], keywords=[keyword(arg='dtype', value=Name(id='DTYPE', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))]), op=Div(), right=Name(id='scale', ctx=Load()))], keywords=[]))])), Assign(targets=[Name(id='logmls', ctx=Store())], value=Call(func=Attribute(value=Name(id='_self', ctx=Load()), attr='_logmls', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sample_parameters', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='k', ctx=Load()), Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load()), attr='reshape', ctx=Load()), args=[Constant(value=1), Constant(value=1), Name(id='c', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])], keywords=[])), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parametersBAD', ctx=Load())], keywords=[])), Assign(targets=[Name(id='TARGET_MEANS', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load()), slice=Name(id='labels', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='neg_lognum', ctx=Store())], value=BinOp(left=Name(id='scale', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=BinOp(left=Name(id='means', ctx=Load()), op=Mult(), right=Name(id='TARGET_MEANS', ctx=Load())), attr='sum', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))]))), Assign(targets=[Name(id='neg_logden', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Name(id='logmls', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=2))]), op=Sub(), right=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='scale', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='losses', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='neg_logden', ctx=Load()), attr='mean', ctx=Load()), args=[Constant(value=1)], keywords=[]), op=Sub(), right=Name(id='neg_lognum', ctx=Load()))), Assign(targets=[Name(id='logitsRjdb', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='empty', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='c', ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='DTYPE', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='logitsRjdb', ctx=Load()), attr='scatter_', ctx=Load()), args=[Constant(value=1), Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Constant(value=1)], keywords=[]), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='losses', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Constant(value=1)], keywords=[]))], keywords=[]))], orelse=[If(test=Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assert(test=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load())), Assign(targets=[Name(id='NWEIGHT', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parametersBAD', ctx=Load())], keywords=[])), Assign(targets=[Name(id='neg_lognum', ctx=Store())], value=BinOp(left=Name(id='scale', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=BinOp(left=Name(id='means', ctx=Load()), op=Mult(), right=Subscript(value=Name(id='NWEIGHT', ctx=Load()), slice=Name(id='labels', ctx=Load()), ctx=Load())), attr='sum', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))]))), Assign(targets=[Name(id='PRODUCTS', ctx=Store())], value=BinOp(left=Name(id='scale', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=BinOp(left=Subscript(value=Name(id='NWEIGHT', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load()), op=Mult(), right=Subscript(value=Name(id='sample', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load())), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))), Assign(targets=[Name(id='neg_logden', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Name(id='PRODUCTS', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=2))])), Assign(targets=[Name(id='losses', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='neg_logden', ctx=Load()), attr='mean', ctx=Load()), args=[Constant(value=1)], keywords=[]), op=Sub(), right=Name(id='neg_lognum', ctx=Load()))), Assign(targets=[Name(id='logitsRjdb', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='empty', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='c', ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='DTYPE', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='logitsRjdb', ctx=Load()), attr='scatter_', ctx=Load()), args=[Constant(value=1), Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Constant(value=1)], keywords=[]), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='losses', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Constant(value=1)], keywords=[]))], keywords=[]))], orelse=[If(test=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load()), body=[Assign(targets=[Name(id='target_sample', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='target_sample', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load()), List(elts=[Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='tk', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='target_sample', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='target_sample', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Name(id='target_sample', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='cosines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='linear', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sample', ctx=Load()), attr='reshape', ctx=Load()), args=[BinOp(left=Name(id='b', ctx=Load()), op=Mult(), right=Name(id='k', ctx=Load())), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), Call(func=Attribute(value=Name(id='target_sample', ctx=Load()), attr='reshape', ctx=Load()), args=[BinOp(left=Name(id='c', ctx=Load()), op=Mult(), right=Name(id='tk', ctx=Load())), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])], keywords=[])), Assign(targets=[Name(id='cosines', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cosines', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='k', ctx=Load()), Name(id='c', ctx=Load()), Name(id='tk', ctx=Load())], keywords=[]), attr='permute', ctx=Load()), args=[Constant(value=0), Constant(value=2), Constant(value=1), Constant(value=3)], keywords=[]), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='c', ctx=Load()), BinOp(left=Name(id='k', ctx=Load()), op=Mult(), right=Name(id='tk', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='scores', ctx=Store())], value=BinOp(left=Name(id='scale', ctx=Load()), op=Mult(), right=Name(id='cosines', ctx=Load()))), Assign(targets=[Name(id='PROBS', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='softmax', ctx=Load()), args=[Name(id='scores', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))]), attr='mean', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='logitsRjdb', ctx=Store())], value=Call(func=Attribute(value=Name(id='PROBS', ctx=Load()), attr='log', ctx=Load()), args=[], keywords=[]))])]), Return(value=Name(id='logitsRjdb', ctx=Load()))], decorator_list=[]), FunctionDef(name='STATISTICS', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='͘ΌCompute ϝͰusɬefulƤƓ ÍstaĐrǃtiėstiƠcȳʹs foǌr loĤgging.\n\nReɝğturns:\n    DiʎľːØcĭtiǓo\x80na̮ǭryL with floatingϙϝ-4ʺpoȩint ąsgútaǉ˥tisŐtics vaÙlues.')), Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='scale')], values=[Call(func=Attribute(value=Name(id='_self', ctx=Load()), attr='_get_scale', ctx=Load()), args=[], keywords=[])])), If(test=UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load())), body=[Assign(targets=[Name(id='target__hidden_ik', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load())], keywords=[]), slice=Constant(value=2), ctx=Load()), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='target_sqrt_ik', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='target__hidden_ik', ctx=Load())], keywords=[]), attr='sqrt', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='target_sqrt_inv_k/mean'), ctx=Store())], value=Call(func=Attribute(value=Name(id='target_sqrt_ik', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='target_sqrt_inv_k/std'), ctx=Store())], value=Call(func=Attribute(value=Name(id='target_sqrt_ik', ctx=Load()), attr='std', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_logmls', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='paramet'), arg(arg='PARAMETERS2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ǭЀ ʞźτ  Ƙł  Ř    ȃ ϡ  ɳ')), If(test=UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='approximate_logc'), ctx=Load())), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logmls', ctx=Load()), args=[Name(id='paramet', ctx=Load()), Name(id='PARAMETERS2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='log_probs1riI', ctx=Store()), Name(id='means1', ctx=Store()), Name(id='hidden_ik1wM', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='paramet', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='log_prob', ctx=Store()), Name(id='means2', ctx=Store()), Name(id='hidden_ik2', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='PARAMETERS2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pairwise_logmls', ctx=Store())], value=Call(func=Attribute(value=Name(id='_self', ctx=Load()), attr='_vmf_logmls', ctx=Load()), args=[], keywords=[keyword(arg='means1', value=Subscript(value=Name(id='means1', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load())), keyword(arg='hidden_ik1', value=Subscript(value=Name(id='hidden_ik1wM', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load())), keyword(arg='means2', value=Subscript(value=Name(id='means2', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load())), keyword(arg='hidden_ik2', value=Subscript(value=Name(id='hidden_ik2', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load()))])), Assign(targets=[Name(id='pairwise_logprobs', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='log_probs1riI', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(), Constant(value=None)], ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='log_prob', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None), Slice()], ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='pairwise_logmls', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load())), Assign(targets=[Name(id='logmls', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Call(func=Attribute(value=BinOp(left=Name(id='pairwise_logprobs', ctx=Load()), op=Add(), right=Name(id='pairwise_logmls', ctx=Load())), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())), ctx=Load())], keywords=[])], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Return(value=Name(id='logmls', ctx=Load()))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='distribution'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='               ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isin', ctx=Load()), args=[Name(id='distribution', ctx=Load()), Name(id='VMFDistribution', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='V', ctx=Load()), args=[Constant(value='Expected vMF distribution for vMF loss.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='_self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load())), Assign(targets=[Name(id='l', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='kappa_confidence'), ctx=Load())), Assign(targets=[Name(id='d_im', ctx=Store())], value=Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load())), If(test=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load()), body=[Assign(targets=[Name(id='means', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='randn', ctx=Load()), args=[Name(id='num_classes', ctx=Load()), Name(id='d_im', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='l', ctx=Load())), op=Div(), right=BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='l', ctx=Load()), op=Mult(), right=Name(id='l', ctx=Load())))), op=Mult(), right=BinOp(left=Name(id='d_im', ctx=Load()), op=Sub(), right=Constant(value=1))), op=Div(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='d_im', ctx=Load())], keywords=[]))), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Name(id='means', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='means', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='randn', ctx=Load()), args=[Name(id='num_classes', ctx=Load()), Constant(value=1), Name(id='d_im', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='l', ctx=Load())), op=Div(), right=BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='l', ctx=Load()), op=Mult(), right=Name(id='l', ctx=Load())))), op=Mult(), right=BinOp(left=Name(id='d_im', ctx=Load()), op=Sub(), right=Constant(value=1))), op=Div(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='d_im', ctx=Load())], keywords=[]))), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='distribution', ctx=Load()), attr='join_parameters', ctx=Load()), args=[], keywords=[keyword(arg='log_probs', value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='num_classes', ctx=Load()), Constant(value=1)], keywords=[])), keyword(arg='means', value=Name(id='means', ctx=Load())), keyword(arg='hidden_ik', value=Call(func=Attribute(value=Attribute(value=Name(id='distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[Name(id='means', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='keepdim', value=Constant(value=True))]))], keywords=[]))])], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='log_scale', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='trainable')]), body=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[], ctx=Load()), Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_log_scale'), ctx=Load())], keywords=[])], keywords=[]), orelse=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='log', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='kappa_confidence', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='kappa_confidence'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='HAS_WEIGHT', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ž  ')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='scale'), arg(arg='initial_log_scale'), arg(arg='kappa_confidence'), arg(arg='sample_size'), arg(arg='approximate_logc'), arg(arg='deterministic_target')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='trainable'), Constant(value=2.773), Constant(value=0.7), Constant(value=10), Constant(value=True), Constant(value=False)]), body=[Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='scale'), Name(id='scale', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='initial_log_scale'), Name(id='initial_log_scale', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='kappa_confidence'), Name(id='kappa_confidence', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='sample_size'), Name(id='sample_size', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='approximate_logc'), Name(id='approximate_logc', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='deterministic_target'), Name(id='deterministic_target', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='STATICMETHOD', ctx=Load())]), FunctionDef(name='_vmf__logc', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='k')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  Ƅ   8 ')), Assign(targets=[Name(id='d_im', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='dim', ctx=Load())), Assign(targets=[Name(id='_nm14', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='d_im', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Div(), right=Constant(value=4))), Assign(targets=[Name(id='n', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='d_im', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Div(), right=Constant(value=2))), Assign(targets=[Name(id='_np12', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='d_im', ctx=Load()), op=Add(), right=Constant(value=1)), op=Div(), right=Constant(value=2))), Assign(targets=[Name(id='n_m12sq', ctx=Store())], value=BinOp(left=Name(id='n', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='np12sq', ctx=Store())], value=BinOp(left=Name(id='_np12', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='KSQ', ctx=Store())], value=BinOp(left=Name(id='k', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='sqrtm', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='n_m12sq', ctx=Load()), op=Add(), right=Name(id='KSQ', ctx=Load())), attr='sqrt', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='SQRTP', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='np12sq', ctx=Load()), op=Add(), right=Name(id='KSQ', ctx=Load())), attr='sqrt', ctx=Load()), args=[], keywords=[])), Return(value=BinOp(left=BinOp(left=Name(id='_nm14', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Attribute(value=BinOp(left=Name(id='n', ctx=Load()), op=Add(), right=Name(id='sqrtm', ctx=Load())), attr='log', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=BinOp(left=Name(id='n', ctx=Load()), op=Add(), right=Name(id='SQRTP', ctx=Load())), attr='log', ctx=Load()), args=[], keywords=[]))), op=Sub(), right=BinOp(left=Constant(value=0.5), op=Mult(), right=BinOp(left=Name(id='sqrtm', ctx=Load()), op=Add(), right=Name(id='SQRTP', ctx=Load())))))], decorator_list=[]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_vmf_logmls', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='means1'), arg(arg='hidden_ik1wM'), arg(arg='means2'), arg(arg='hidden_ik2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Co˾mǵʝp˷uαte LoÕȲɫÊNkIg̀ ͦMLS for4ç̓ ǫuņÀniʓȝmǓ¹Ʌoαρdalƌ diůstrȋưȠi;buńƂ͵tioŜns.X')), Assign(targets=[Name(id='k1', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik1wM', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='k', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik2', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='k1', ctx=Load()), op=Mult(), right=Name(id='means1', ctx=Load())), op=Add(), right=BinOp(left=Name(id='k', ctx=Load()), op=Mult(), right=Name(id='means2', ctx=Load())))], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='keepdim', value=Constant(value=True))])), Assign(targets=[Name(id='lo', ctx=Store())], value=Call(func=Attribute(value=Name(id='_self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='k1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='logc2', ctx=Store())], value=Call(func=Attribute(value=Name(id='_self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])), Assign(targets=[Name(id='logc', ctx=Store())], value=Call(func=Attribute(value=Name(id='_self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=BinOp(left=BinOp(left=Name(id='lo', ctx=Load()), op=Add(), right=Name(id='logc2', ctx=Load())), op=Sub(), right=Name(id='logc', ctx=Load())), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='linearclassifier', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Linear', ctx=Load())], keywords=[], body=[FunctionDef(name='set_variance', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='valu')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='hidden', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_variance_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='tensor', ctx=Load()), args=[Name(id='valu', ctx=Load())], keywords=[])], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='hidden_variance', ctx=Load()), attr='data', ctx=Load()), attr='fill_', ctx=Load()), args=[Name(id='hidden', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='STATISTICS', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\nReturns:\n    Dictionary with floating-point statistics values.')), Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='HAS_WEIGHT', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='variance', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ͫ Ž Ź      ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_variance_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='hidden_variance', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ý  úͦ  ')), Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  Ͷ  ')), Return(value=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='clip_variance', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='max')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='max_hidden', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_variance_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='tensor', ctx=Load()), args=[Name(id='max', ctx=Load())], keywords=[])], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='hidden_variance', ctx=Load()), attr='data', ctx=Load()), attr='clip_', ctx=Load()), args=[], keywords=[keyword(arg='max', value=Name(id='max_hidden', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='distribution'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='_self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load()), Name(id='num_classes', ctx=Load())], keywords=[keyword(arg='bias', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load())), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_scale'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), body=[AugAssign(target=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load()), attr='data', ctx=Store()), op=Mult(), value=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_scale'), ctx=Load())), If(test=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()), body=[AugAssign(target=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='bias', ctx=Load()), attr='data', ctx=Store()), op=Mult(), value=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_scale'), ctx=Load()))], orelse=[])], orelse=[]), If(test=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_variance'), ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_variance_parametrization', ctx=Store())], value=Call(func=Name(id='Parametrization', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='variance_parametrization'), ctx=Load())], keywords=[keyword(arg='center', value=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='variance_center'), ctx=Load())), keyword(arg='scale', value=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='variance_scale'), ctx=Load()))])), Assign(targets=[Name(id='initial_variance', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_variance'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='initial_hidden_varian_ce', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_variance_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='initial_variance', ctx=Load())], keywords=[])], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='hidden_variance', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='initial_hidden_varian_ce', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='float', ctx=Load()))])], keywords=[keyword(arg='requires_grad', value=UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='freeze_variance'), ctx=Load())))]))], orelse=[])], decorator_list=[]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='parametersBAD'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample'), ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='embe_ddings', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parametersBAD', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='embe_ddings', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parametersBAD', ctx=Load())], keywords=[]))]), If(test=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='normalize_weights'), ctx=Load()), body=[Assign(targets=[Name(id='weight', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load()), attr='flatten', ctx=Load()), args=[], keywords=[])], keywords=[]))), Assign(targets=[Name(id='bias', ctx=Store())], value=Attribute(value=Name(id='_self', ctx=Load()), attr='bias', ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='weight', ctx=Store()), Name(id='bias', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='bias', ctx=Load())], ctx=Load()))]), Assign(targets=[Name(id='logitsRjdb', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='linear', ctx=Load()), args=[Name(id='embe_ddings', ctx=Load()), Name(id='weight', ctx=Load()), Name(id='bias', ctx=Load())], keywords=[])), Return(value=Name(id='logitsRjdb', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='sample'), arg(arg='use_bias'), arg(arg='initial_scale'), arg(arg='normalize_weigh'), arg(arg='use_variance'), arg(arg='initial_variance'), arg(arg='variance_parametrization'), arg(arg='freeze_variance'), arg(arg='variance_center'), arg(arg='VARIANCE_SCALE')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=True), Constant(value=1), Constant(value=False), Constant(value=False), Constant(value=1), Constant(value='exp'), Constant(value=False), Constant(value=0), Constant(value=1)]), body=[Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='sample'), Name(id='sample', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='use_bias'), Name(id='use_bias', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='initial_scale'), Name(id='initial_scale', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='normalize_weights'), Name(id='normalize_weigh', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='use_variance'), Name(id='use_variance', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='initial_variance'), Name(id='initial_variance', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='variance_parametrization'), Name(id='variance_parametrization', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='freeze_variance'), Name(id='freeze_variance', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='variance_center'), Name(id='variance_center', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='variance_scale'), Name(id='VARIANCE_SCALE', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='STATICMETHOD', ctx=Load())]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ǅǿ       cŶϱo    \u0382ίȡ͚ ʃ Į   ̮̓Ǉʪ')), Return(value=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_variance'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='ArcFaceClassifier', bases=[Name(id='ArcFace', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=';7ArċFͣĪʣ~Ƈ̉ºace cʦþlăO]Yƕϵ̞Πassʞϕi²fiH\x8bcati\x8eésoɬȰnΎ headŷɺˏϥ witď\x8ahϯ trƭain̜̩͈able ̵tarƄget cħ\x8blassþ@eʄÎƒsπ̀ƭ ce\x8enöteϊrs.B\n\nAúr×gs:\nʲ   ϴ ȿdȏiȥÆstrρiȌbution:Ā ͒ʛDiËs|bt͔͋ribȐutionğ ŞusedŢ͊ ͙ïȣn̆ʪ t\u0379ȶʹhe moȝdřel.̴\n    Čn\xadƣuβm_classes: NuXmbe\x85ʘμr͒ of oˉĈuótͳpš˅ut Ξɧc͝lasses.\n ́ Ϳ  pȓri\x82ors (unusľeḑƷ): PrecˀoʯmputeÓΞȎƫdσ cl[ʂǙaīss pȗǣriʡorsǡ. ˃Pʖ̸rio˙rs\x9fȹ ǇcaÍ[˯ʇn ̽beċ lÔeɦarne2dƩ o\x84n-l\u038dine i̸f notΡ provϷiśded.\n\nInȖΛϠputs:\nǨ    - BparaėãmeʮterǦsʯ: ˬDɰ\x90Φist̩riĹbutio˩n paʜrȞaͼmeteɿrs wɊĠ\u0380ith shapÕƒe Ό(..ĺ., K͢\x86ź).ð\n    - labeɱlsʚ: τIf prov͠\x9diıdɶȀed, uϦsed forŹɷ ArcF̱ƞɸŞacˈ\xa0°e lōΰogit corοrecĵtioϲLnȉȪ.? CñomȓputŠǄJe cosiXneŹy o²\x97therwiũseˌɳ.ķ\n   ĴÝ -ĺ˼ sˎcoreϰr: Unused.Ν\n\n˾ȃϐOuĬtpəutǲs:\n  Ȃ͇Ŝφ\x8e  - lo˙gŷits: Class lo˹gits withɀ Ωshawp˕e \x9bϼ(ƚȴ.\u0379.ǔ.,ε CϞ).')), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='sample'), arg(arg='scale'), arg(arg='marginVEem')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=64.0), Constant(value=0.5)]), body=[Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='sample'), Name(id='sample', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='scale'), Name(id='scale', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='margin'), Name(id='marginVEem', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='STATICMETHOD', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='parametersBAD'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='     ˝φ     γ\x84̮   Ν ȎĊ ')), If(test=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample'), ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='embe_ddings', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parametersBAD', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='embe_ddings', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parametersBAD', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='embe_ddings', ctx=Store())], value=Call(func=Attribute(value=Name(id='embe_ddings', ctx=Load()), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Subscript(value=Attribute(value=Name(id='embe_ddings', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=IfExp(test=Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='flatten', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='logitsRjdb', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='forward', ctx=Load()), args=[Name(id='embe_ddings', ctx=Load())], keywords=[keyword(arg='target', value=Name(id='labels', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='logitsRjdb', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=List(elts=[BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Load())], ctx=Load()))], ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='distribution'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value=' ͇   ·      Ÿ ͱ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='distribution', ctx=Load()), attr='is_spherical', ctx=Load())), body=[Raise(exc=Call(func=Name(id='V', ctx=Load()), args=[Constant(value='Spherical distrubution is expected.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='_self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Name(id='scale', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='trainable')]), body=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='ones', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[]), orelse=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()))), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load()), Name(id='num_classes', ctx=Load())], keywords=[keyword(arg='m', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='margin'), ctx=Load())), keyword(arg='s', value=Name(id='scale', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load()))], decorator_list=[]), FunctionDef(name='HAS_WEIGHT', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ē    ơǢ ')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='STATISTICS', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ComputeÎϤ ʘuseful sΦtatistics ̦for ŏ͟Ýlogȹgi2ʹnβg.\n\nReturns:\n ÍΣ  ΐ Dictionđary wi\u0378?th̠ Ήfloaɭȴting-pȮoȁint st˷at)ist˹icͱsÐ% vaĻlues.')), Assign(targets=[Name(id='scale', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='trainable')]), body=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='s', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[]), orelse=Attribute(value=Name(id='_self', ctx=Load()), attr='s', ctx=Load()))), Return(value=Dict(keys=[Constant(value='scale')], values=[Name(id='scale', ctx=Load())]))], decorator_list=[]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='CosFaceClassifier', bases=[Name(id='CosFace', ctx=Load())], keywords=[], body=[FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='parametersBAD'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='embe_ddings', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parametersBAD', ctx=Load())], keywords=[])), Assign(targets=[Name(id='embe_ddings', ctx=Store())], value=Call(func=Attribute(value=Name(id='embe_ddings', ctx=Load()), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Subscript(value=Attribute(value=Name(id='embe_ddings', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=IfExp(test=Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='flatten', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='logitsRjdb', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='forward', ctx=Load()), args=[Name(id='embe_ddings', ctx=Load())], keywords=[keyword(arg='target', value=Name(id='labels', ctx=Load()))])), If(test=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='symmetric'), ctx=Load()), body=[AugAssign(target=Name(id='logitsRjdb', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=Constant(value=0.5), op=Mult(), right=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='margin'), ctx=Load())), op=Mult(), right=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load())))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='logitsRjdb', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=List(elts=[BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Load())], ctx=Load()))], ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='scale'), arg(arg='marginVEem'), arg(arg='symmetric')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=64.0), Constant(value=0.35), Constant(value=False)]), body=[Expr(value=Constant(value='Getȭ ũcl8assMifǅieÈȾrƲ cZȁYonLfǐÙig.\n\n̅ÚArgs:ϒǃ\nǵ ΥɁ   \x8dscaleʞ: 4Oǿu\x99ǒϤtD^ŸpϞϨuĘĨ²t Ƅs̄cɍale.\n    m^argǮ\x9eiɰn:Tɾϻď\x83¼ ĞΌņCɚosFɪacγɴeʶ mǶ½argɝin.͎Ȟ\n˗ǎ   ϰ sʒymǪmetr̈Úic:ό Iȕfxͺǭ\x94 Cƪ̇ƈ̵͋̐t*rue˝ŭϿϰƼ, aƹĖǟdd ámʤľaɻrgin ̒to¦ɝ̞̈ Knegati˔ʊơveɐs̓{͟ ɬ(usǉeful ƣf¹įʆor Pžƅr˟ǏovȜxyŌϖ̗ͳ-ÚAncʍŲŷͳ)\u0379Éɮhor làȗoƒsʸˇsɬ).ʿ')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='scale'), Name(id='scale', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='margin'), Name(id='marginVEem', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='symmetric'), Name(id='symmetric', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='STATICMETHOD', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='distribution'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='distribution', ctx=Load()), attr='is_spherical', ctx=Load())), body=[Raise(exc=Call(func=Name(id='V', ctx=Load()), args=[Constant(value='Spherical distrubution is expected.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='_self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load()), Name(id='num_classes', ctx=Load())], keywords=[keyword(arg='m', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='margin'), ctx=Load())), keyword(arg='s', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load()))], decorator_list=[]), FunctionDef(name='STATISTICS', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CŦʃomÛputeϟ uǜ͞sĭefulϑ ±statǜisti°cs for ͅloggƑȩθinȶgcϘΘ.êʱ\n̟͆ͫ\nReƃ˾turÎɛnčs:̜\n    D͠ƘictišonɉarŻCy ϭwith Țfloating̝-poiǪnʕt ̞ƝǧΡstảʹ˓ɴtˋistȪic̍s vʂalŲues.')), Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='       ')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='HAS_WEIGHT', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Ś    ˡȂ ċ    ώő,    ƻɚ')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    Ȳ͖    ¾ ř˗')), Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='additive_margin', args=arguments(posonlyargs=[], args=[arg(arg='logitsRjdb'), arg(arg='labels'), arg(arg='marginVEem')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0)]), body=[Expr(value=Constant(value='ƗȫAdd̗Ʌ ǿmaɐwrginÉ if labels are prȯvided.')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='marginVEem', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='one__hot', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros_like', ctx=Load()), args=[Name(id='logitsRjdb', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='one__hot', ctx=Load()), attr='scatter_', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), attr='long', ctx=Load()), args=[], keywords=[]), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='logitsRjdb', ctx=Store())], value=BinOp(left=Name(id='logitsRjdb', ctx=Load()), op=Sub(), right=BinOp(left=Name(id='one__hot', ctx=Load()), op=Mult(), right=Name(id='marginVEem', ctx=Load()))))], orelse=[]), Return(value=Name(id='logitsRjdb', ctx=Load()))], decorator_list=[]), FunctionDef(name='g', args=arguments(posonlyargs=[], args=[arg(arg='num_classes'), arg(arg='priors')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='priors', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isin', ctx=Load()), args=[Name(id='priors', ctx=Load()), Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='priors', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='tensor', ctx=Load()), args=[Name(id='priors', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='priors', ctx=Load()), attr='shape', ctx=Load()), ops=[NotEq()], comparators=[Tuple(elts=[Name(id='num_classes', ctx=Load())], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='V', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Expected initial priors with shape ({},), got: {}.'), attr='format', ctx=Load()), args=[Name(id='num_classes', ctx=Load()), Attribute(value=Name(id='priors', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='log_priors', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='priors', ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[]), attr='log', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='log_priors', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='num_classes', ctx=Load())], keywords=[]))]), Return(value=Name(id='log_priors', ctx=Load()))], decorator_list=[]), ClassDef(name='SPEClassifier', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Extr5actǠŇɛsʗ tϸargǰet Ʃcϸentr͟oϷids Ƌfroʼm elem϶ents\u0383 oκf t\x93Ɇhe Ęsˀame batèch andŗ compuϦtŽeĂs ȇ̅ŀStochasǗtic ProÌtotype Embeϭdȣdiώngs lʅogƾitƴ˩s.\n\n(See "\x94St̡ocʆhas̕ticζ Pārotæotype EȞmb̗edŐdin_ʔgs." ʼ^Ǽ(2̺019)ː for details.\n\nǀArgs:Ķ\n  ǚȋȪ  distrNϰib̦utϤion:̾ Dis̥tribution used iɎn tάhe modέϾel.\n    nċu~m_classes: Numb˴er of output classƕeƓs.\n\nIŚnŷpƢuts:±Ȯ\nț    - ȇȌªparame2te\x86r˝ˀs:\x85 ſ̂Diˬstribution parʌÿaÏ\x89meters Ƌwɶith úshape (...̝, K).\n   ƙ -\x8a labelsč˫: ϵPoʑs̽itive ɃlÕabiÅ·els usɚed fRo̙r margÛͪi΄n withʎ̓ shʪape (...).\n   ̛ - scorƐer: Unʒused.\n\nOutputsı:ˋɻ\n  ȡʭ  - \x96ȒlĶogits˱: ClaËʦscs ɓlĕogits wiʐth shape (ˉ...,g̾ß C).')), Assign(targets=[Name(id='log_eps', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=100.0))), FunctionDef(name='_group_by__class', args=arguments(posonlyargs=[], args=[arg(arg='embe_ddings'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='embe_ddings', ctx=Load()), attr='ndim', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='V', ctx=Load()), args=[Constant(value='Expected tensor with shape (B, P).')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='bincount', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])), Assign(targets=[Name(id='counts', ctx=Store())], value=Subscript(value=Name(id='counts', ctx=Load()), slice=Compare(left=Name(id='counts', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), ctx=Load())), If(test=Call(func=Attribute(value=Compare(left=Name(id='counts', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='counts', ctx=Load()), slice=Constant(value=0), ctx=Load())]), attr='any', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='runtimeerror', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Need uniform balanced sampling: {}.'), attr='format', ctx=Load()), args=[Name(id='counts', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='unique_labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='unique', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indices', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='stack', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='nonzero', ctx=Load()), args=[Compare(left=Name(id='labels', ctx=Load()), ops=[Eq()], comparators=[Name(id='label', ctx=Load())])], keywords=[]), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), generators=[comprehension(target=Name(id='label', ctx=Store()), iter=Name(id='unique_labels', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='dim', value=Constant(value=1))])), Assign(targets=[Name(id='by_class', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='stack', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='embe_ddings', ctx=Load()), slice=Compare(left=Name(id='labels', ctx=Load()), ops=[Eq()], comparators=[Name(id='label', ctx=Load())]), ctx=Load()), generators=[comprehension(target=Name(id='label', ctx=Store()), iter=Name(id='unique_labels', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='dim', value=Constant(value=1))])), Assert(test=Compare(left=Attribute(value=Name(id='by_class', ctx=Load()), attr='ndim', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)])), Return(value=Tuple(elts=[Name(id='by_class', ctx=Load()), Name(id='indices', ctx=Load()), Name(id='unique_labels', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='STATICMETHOD', ctx=Load())]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='train_epsilon'), arg(arg='sample_size')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=16)]), body=[Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='train_epsilon'), Name(id='train_epsilon', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='sample_size'), Name(id='sample_size', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='STATICMETHOD', ctx=Load())]), FunctionDef(name='_compute_prototypes', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='embe_ddings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='0 Þ  Ƙ DǢ     ù   ̈Ʀͫ Ř ʹMϥ pΌʼ  Ě ')), If(test=Compare(left=Attribute(value=Name(id='embe_ddings', ctx=Load()), attr='ndim', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=3)]), body=[Raise(exc=Call(func=Name(id='V', ctx=Load()), args=[Constant(value='Expected grouped embeddings with shape (B, L, P).')], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='logprobs', ctx=Store()), Name(id='mean', ctx=Store()), Name(id='hidden_var', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='embe_ddings', ctx=Load())], keywords=[])), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='_self', ctx=Load()), attr='variance', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_var', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='_new_var', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=BinOp(left=Constant(value=1), op=Div(), right=Name(id='v', ctx=Load())), attr='sum', ctx=Load()), args=[Constant(value=0)], keywords=[]))), Assign(targets=[Name(id='new_mean', ctx=Store())], value=BinOp(left=Name(id='_new_var', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=BinOp(left=Name(id='mean', ctx=Load()), op=Div(), right=Name(id='v', ctx=Load())), attr='sum', ctx=Load()), args=[Constant(value=0)], keywords=[]))), Assign(targets=[Name(id='new_hid_den_var', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='_self', ctx=Load()), attr='variance', ctx=Load()), op=Add(), right=Name(id='_new_var', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='prototypes', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='join_parameters', ctx=Load()), args=[Subscript(value=Name(id='logprobs', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='new_mean', ctx=Load()), Name(id='new_hid_den_var', ctx=Load())], keywords=[])), Return(value=Name(id='prototypes', ctx=Load()))], decorator_list=[]), FunctionDef(name='_compute_logits', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='quer'), arg(arg='suppo_rt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CoĄ̌͝mpʞʎutǀ˜eă SPE ʦɯl\x81Ķƫoŧgiˬɽtsć.\n̸Ɂ\nA˻ͪĜŕrgǃs:\n   ɭȖ*ˣƍ - q.ČuĒery:Λ Querēièeͼs ǀwưİƘʑi̯th˷Ł shȊaȴpe (B, Lǻ,Ȭĳ~ P) to ϓcoɫŨϩǋʵmpute \x95ʯXlˑo˻gdoʨęͿˣiσtsϥ¡±¸ çρfo¤rʞ.ʒʧ\n L* Λ  Ď-ȴ s̐þ̤h̸upΞĵʀpoΨķr͛tɶ:ßʯǕ EʴmϾϡŋƹbeḓmdingɳ̎s Ŗ&ƨσusăTed ¢afo̅ȇʼrͲè ļÜpro\x94[ΌtÏotype coǍmp\x89uta˝[tion ˾ʱwǍit_h shapɓϵe Éʲǣ(B̞\', Lčʾœ,äi ΰP)."\nÚRîʺeĺturľn͚s:ż\n   \u0382 SPEJ̨ loşϣgοʞύ#i²ŒCtŔsŏ̤Ǉ wˠith ̻Úƃs?haŎϷȳɘ˯əpe\x87ˠŁ (NǮĄB,˷ȼʣ Lˏ).')), Assign(targets=[Name(id='prototypes', ctx=Store())], value=Call(func=Attribute(value=Name(id='_self', ctx=Load()), attr='_compute_prototypes', ctx=Load()), args=[Name(id='suppo_rt', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='prod_distribution', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='pdf_product', ctx=Load()), args=[Subscript(value=Name(id='quer', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load()), Subscript(value=Name(id='prototypes', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample_size'), ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Tuple(elts=[Name(id='b', ctx=Store()), Name(id='l', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='quer', ctx=Load()), attr='shape', ctx=Load())), Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample_size'), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='sample', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='prod_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Subscript(value=Name(id='p', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load()), List(elts=[Name(id='b', ctx=Load()), Name(id='l', ctx=Load()), Name(id='s', ctx=Load()), Name(id='l', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='sample', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='prod_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=3))], keywords=[]))]), Assign(targets=[Name(id='logmls', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logmls', ctx=Load()), args=[Subscript(value=Name(id='quer', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load()), Subscript(value=Name(id='prototypes', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='tar_get_logpdfs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logpdf', ctx=Load()), args=[Subscript(value=Name(id='prototypes', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()), Name(id='sample', ctx=Load())], keywords=[])), Assign(targets=[Name(id='l', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Name(id='tar_get_logpdfs', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='keepdim', value=Constant(value=True))])), Assign(targets=[Name(id='logitsRjdb', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='logmls', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='l', ctx=Load()))], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=2)))])), op=Sub(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='log', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))), Return(value=Name(id='logitsRjdb', ctx=Load()))], decorator_list=[]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='STATISTICS', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Co̥mĤputč˫e͜ uͯseful Ůs̲ta£tľistĹiŽȈcǤs˧ łfŸor log·şgi{ʞnǻ˺g.şϱ\n\núRɬńe̳Ît¨urϬ̆Ȭns̓ψ:ŷ\n ʅĐɥ ˔ ʵ DictionaryϠΠɤϰ with ˸1ϲfĜlŰoati͕Ǌnɋg-"ɹpɯ˲oinǫt sáϒt̴γˢaȢĬtis˛ωt,\x9a?icŪs ²ʅσvįaͮčluϫʦeY̒ǧs.ǥȭ')), Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='parametersBAD'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='labels', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Starred(value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Load())], ctx=Load())), ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='dtype', ctx=Load())), keyword(arg='device', value=Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='device', ctx=Load()))]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='ndim', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='notimplementederror', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Expected embeddings with shape (B, N), got: {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())]), body=[Raise(exc=Call(func=Name(id='V', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Parameters and labels shape mismatch: {}, {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='shape', ctx=Load()), Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='by_class', ctx=Store()), Name(id='order', ctx=Store()), Name(id='la_bel_map', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='_self', ctx=Load()), attr='_group_by_class', ctx=Load()), args=[Name(id='parametersBAD', ctx=Load()), Name(id='labels', ctx=Load())], keywords=[])), Assign(targets=[Name(id='k', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='by_class', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))), Assign(targets=[Name(id='logits1', ctx=Store())], value=Call(func=Attribute(value=Name(id='_self', ctx=Load()), attr='_compute_logits', ctx=Load()), args=[Subscript(value=Name(id='by_class', ctx=Load()), slice=Slice(upper=Name(id='k', ctx=Load())), ctx=Load()), Subscript(value=Name(id='by_class', ctx=Load()), slice=Slice(lower=Name(id='k', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='logits2', ctx=Store())], value=Call(func=Attribute(value=Name(id='_self', ctx=Load()), attr='_compute_logits', ctx=Load()), args=[Subscript(value=Name(id='by_class', ctx=Load()), slice=Slice(lower=Name(id='k', ctx=Load())), ctx=Load()), Subscript(value=Name(id='by_class', ctx=Load()), slice=Slice(upper=Name(id='k', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='logitsRjdb', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[List(elts=[Name(id='logits1', ctx=Load()), Name(id='logits2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=0))])), Assign(targets=[Name(id='all_logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[Subscript(value=Attribute(value=Name(id='logitsRjdb', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Attribute(value=Name(id='logitsRjdb', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Load())], ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='LOG_EPS', ctx=Load())], keywords=[keyword(arg='device', value=Attribute(value=Name(id='logitsRjdb', ctx=Load()), attr='device', ctx=Load())), keyword(arg='dtype', value=Attribute(value=Name(id='logitsRjdb', ctx=Load()), attr='dtype', ctx=Load()))])), Assign(targets=[Name(id='indices', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='la_bel_map', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()), attr='tile', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='logitsRjdb', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Attribute(value=Name(id='logitsRjdb', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='all_logits', ctx=Load()), attr='scatter_', ctx=Load()), args=[Constant(value=2), Name(id='indices', ctx=Load()), Name(id='logitsRjdb', ctx=Load())], keywords=[])), Assign(targets=[Name(id='all_logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='all_logits', ctx=Load()), attr='reshape', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[]), Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Load())], keywords=[])), Assign(targets=[Name(id='all_logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='all_logits', ctx=Load()), attr='take_along_dim', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='argsort', ctx=Load()), args=[Call(func=Attribute(value=Name(id='order', ctx=Load()), attr='flatten', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1)], keywords=[]), Constant(value=0)], keywords=[])), Return(value=Name(id='all_logits', ctx=Load()))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='distribution'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isin', ctx=Load()), args=[Name(id='distribution', ctx=Load()), Name(id='NormalDistribution', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='V', ctx=Load()), args=[Constant(value='Expected GMM distribution for SPE loss.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='_self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load())), If(test=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='train_epsilon'), ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='hidden_epsilon', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[], ctx=Load()), BinOp(left=Constant(value=0.01), op=Pow(), right=BinOp(left=Constant(value=2), op=Div(), right=Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load())))], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='float', ctx=Load()))])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='variance', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='train_epsilon'), ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='hidden_epsilon', ctx=Load()), attr='exp', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Constant(value=0))])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='HAS_WEIGHT', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='           ̻  ̢')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='train_epsilon'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='ScorerClas', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Linear', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Clas̹ǋɈsify͔ using Ƃs\x93coǡres.\n\nArϛgs$:\n  ώ  di/ʖstriʥbϫution: Diͤstributʛ˜ion usedÜmʫ in t̛he model.\nÐ    nnum_classes: ΑNu\x9amber oċf 6outpʕut ŏclasses.\n    p"ΰ˚ri˟ors (ξunuseΔϦd): Preϖcomputed cͿ˦lasȠs prioŏrs. ȭPɗrior¨s ~Ȳcan be Ʒͭlâ̼ΙeaΧrned Úon-linæe˅ if not provided.\n\nΖInputňs:\n    ͞- parameters̢:`\x9d DiϼstrĀib̳̋utionɣ paΐϩǣr˚ameƛÉteɟrs with shğaÇpe (..., K).\n Ω   - labels: Unused.̋Ͽ\n ¡ č  - s̋cЀoķrerɝ: ȋ\x90Scoʸrer ƌused fǡ˞oØr lɾođg̓its compuŧϷtatΤƣâioǎn.\n\nOutputs:\nĄ  Ǎ \x83 - loŀgits: ˂ClŌass̎ lΌÈoŹmϨgits with s4ϦhˍapϜe Ǯ(ʡ.Ȍ..,ρ C).')), FunctionDef(name='STATISTICS', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parametersBAD', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), attr='unpack_parameters', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='covariance'), ops=[In()], comparators=[Name(id='parametersBAD', ctx=Load())]), body=[Assign(targets=[Name(id='KEY', ctx=Store())], value=Constant(value='std')), Assign(targets=[Name(id='valu', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='parametersBAD', ctx=Load()), slice=Constant(value='covariance'), ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='k'), ops=[In()], comparators=[Name(id='parametersBAD', ctx=Load())]), body=[Assign(targets=[Name(id='KEY', ctx=Store())], value=Constant(value='vmf_sqrt_inv_k')), Assign(targets=[Name(id='valu', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='parametersBAD', ctx=Load()), slice=Constant(value='k'), ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[]), attr='sqrt', ctx=Load()), args=[], keywords=[])))], orelse=[Return(value=Dict(keys=[], values=[]))])]), Return(value=Dict(keys=[Call(func=Attribute(value=Constant(value='target_{}/mean'), attr='format', ctx=Load()), args=[Name(id='KEY', ctx=Load())], keywords=[]), Call(func=Attribute(value=Constant(value='target_{}/std'), attr='format', ctx=Load()), args=[Name(id='KEY', ctx=Load())], keywords=[])], values=[Call(func=Attribute(value=Name(id='valu', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='valu', ctx=Load()), attr='std', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='HAS_WEIGHT', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ϋ  ƺ')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='_self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='parametersBAD'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='prefixlchNn', ctx=Store())], value=Call(func=Name(id='tupl_e', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='target_distributions', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=BinOp(left=List(elts=[Constant(value=1)], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefixlchNn', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='_self', ctx=Load()), attr='weight', ctx=Load()), attr='shape', ctx=Load())], keywords=[])), ctx=Load())], keywords=[])), Assign(targets=[Name(id='logitsRjdb', ctx=Store())], value=Call(func=Name(id='scorer', ctx=Load()), args=[Call(func=Attribute(value=Name(id='parametersBAD', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[]), Name(id='target_distributions', ctx=Load())], keywords=[])), Return(value=Name(id='logitsRjdb', ctx=Load()))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='_self'), arg(arg='distribution'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value=' ˟  ɜ ή  \\º   Ά\x87  ª ̛ͫŝ ß\x97̥ ')), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='_self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='num_parameters', ctx=Load()), Name(id='num_classes', ctx=Load())], keywords=[keyword(arg='bias', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='use_bias')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Get claƩssifi͊er confi˹g.')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='use_bias'), Name(id='use_bias', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='STATICMETHOD', ctx=Load())])], decorator_list=[])], type_ignores=[])