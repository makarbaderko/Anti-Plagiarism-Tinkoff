Module(body=[Import(names=[alias(name='os')]), ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), Import(names=[alias(name='torch')]), ImportFrom(module='torchvision', names=[alias(name='transforms')], level=0), ImportFrom(module='config', names=[alias(name='prepare_config'), alias(name='ConfigError')], level=2), ImportFrom(module='imagenetlt', names=[alias(name='ImageNetLTDataset')], level=1), ImportFrom(module='stanforddogs', names=[alias(name='StanfordDogsDataset')], level=1), ImportFrom(module='cub200', names=[alias(name='CUB200SplitClassesDataset')], level=1), ImportFrom(module='transform', names=[alias(name='TransformDataset'), alias(name='RepeatDataset'), alias(name='PreloadDataset'), alias(name='SamplePairsDataset')], level=1), ImportFrom(module='mxnet', names=[alias(name='CASIA_TESTS'), alias(name='MS1MV2_TESTS'), alias(name='MS1MV3_TESTS')], level=1), ImportFrom(module='transform', names=[alias(name='split_crossval_classes'), alias(name='split_crossval_elements')], level=1), ImportFrom(module='flower102', names=[alias(name='Flower102Dataset')], level=1), ImportFrom(module='dummy', names=[alias(name='EmptyDataset')], level=1), ImportFrom(module='transform', names=[alias(name='ImageTransform'), alias(name='ImageTestTransform'), alias(name='ImageAugmenter')], level=1), ImportFrom(module='inshop', names=[alias(name='InShopClothesDataset')], level=1), ImportFrom(module='debug', names=[alias(name='DebugDataset')], level=1), ImportFrom(module='lfw', names=[alias(name='LFWDataset'), alias(name='CrossLFWTestset')], level=1), ImportFrom(module='mnist', names=[alias(name='MnistDataset'), alias(name='MnistSplitClassesDataset')], level=1), ImportFrom(module='svhn', names=[alias(name='SVHNDataset')], level=1), ImportFrom(module='cars196', names=[alias(name='Cars196SplitClassesDataset')], level=1), ImportFrom(module='mxnet', names=[alias(name='MXNetTrainset'), alias(name='MXNetValset'), alias(name='SerializedDataset')], level=1), ImportFrom(module='sop', names=[alias(name='SOPDataset')], level=1), ImportFrom(module='sampler', names=[alias(name='ShuffledClassBalancedBatchSampler'), alias(name='SameClassMixupCollator')], level=1), ImportFrom(module='imagenette', names=[alias(name='ImagenetteDataset')], level=1), ImportFrom(module='imagenet', names=[alias(name='ImageNetDataset')], level=1), ImportFrom(module='transform', names=[alias(name='LossyDataset'), alias(name='MergedDataset'), alias(name='ClassMergedDataset')], level=1), ImportFrom(module='cifar', names=[alias(name='CIFAR10Dataset'), alias(name='CIFAR100Dataset')], level=1), FunctionDef(name='discard_', args=arguments(posonlyargs=[], args=[arg(arg='mapping'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mapping', ctx=Store())], value=Call(func=Attribute(value=Name(id='mapping', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Delete(targets=[Subscript(value=Name(id='mapping', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Del())]), Return(value=Name(id='mapping', ctx=Load()))], decorator_list=[]), ClassDef(name='DatasetCollection', bases=[], keywords=[], body=[Assign(targets=[Name(id='DEVSETSbyrI', ctx=Store())], value=Dict(keys=[Constant(value='casia-openset'), Constant(value='ms1mv2-openset'), Constant(value='ms1mv3-openset'), Constant(value='lfw-openset'), Constant(value='clfw-openset'), Constant(value='lfw-joined-openset'), Constant(value='cub200-openset'), Constant(value='cars196-openset'), Constant(value='cub200-interleave-openset'), Constant(value='cars196-interleave-openset'), Constant(value='sop-openset'), Constant(value='inshop-openset'), Constant(value='mnist-openset'), Constant(value='imagenette'), Constant(value='tinyimagenet'), Constant(value='imagenet'), Constant(value='stanforddogs'), Constant(value='flower102'), Constant(value='imagenetlt'), Constant(value='cifar10'), Constant(value='cifar100'), Constant(value='mnist'), Constant(value='svhn'), Constant(value='serialized-openset'), Constant(value='debug-openset')], values=[Name(id='MXNetTrainset', ctx=Load()), Name(id='MXNetTrainset', ctx=Load()), Name(id='MXNetTrainset', ctx=Load()), Name(id='LFWDataset', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='EmptyDataset', ctx=Load()), args=[], keywords=[keyword(arg='classification', value=Constant(value=True)), keyword(arg='openset', value=Constant(value=True))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='EmptyDataset', ctx=Load()), args=[], keywords=[keyword(arg='classification', value=Constant(value=True)), keyword(arg='openset', value=Constant(value=True))])), Name(id='CUB200SplitClassesDataset', ctx=Load()), Name(id='Cars196SplitClassesDataset', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='CUB200SplitClassesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='interleave', value=Constant(value=True))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='Cars196SplitClassesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='interleave', value=Constant(value=True))])), Name(id='SOPDataset', ctx=Load()), Name(id='InShopClothesDataset', ctx=Load()), Name(id='MnistSplitClassesDataset', ctx=Load()), Name(id='ImagenetteDataset', ctx=Load()), Name(id='ImagenetteDataset', ctx=Load()), Name(id='ImageNetDataset', ctx=Load()), Name(id='StanfordDogsDataset', ctx=Load()), Name(id='Flower102Dataset', ctx=Load()), Name(id='ImageNetLTDataset', ctx=Load()), Name(id='CIFAR10Dataset', ctx=Load()), Name(id='CIFAR100Dataset', ctx=Load()), Name(id='MnistDataset', ctx=Load()), Name(id='SVHNDataset', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Call(func=Attribute(value=Name(id='SerializedDataset', ctx=Load()), attr='from_folder', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[]), slice=Constant(value='train'), ctx=Load())), Name(id='DebugDataset', ctx=Load())])), Assign(targets=[Name(id='valsetsi', ctx=Store())], value=Dict(keys=[Constant(value='flower102'), Constant(value='imagenetlt')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='Flower102Dataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='annotation_key', value=Constant(value='valid'))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='ImageNetLTDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='mode', value=Constant(value='val'))]))])), Assign(targets=[Name(id='TESTSETS', ctx=Store())], value=Dict(keys=[Constant(value='casia-openset'), Constant(value='ms1mv2-openset'), Constant(value='ms1mv3-openset'), Constant(value='lfw-openset'), Constant(value='clfw-openset'), Constant(value='lfw-joined-openset'), Constant(value='cub200-openset'), Constant(value='cars196-openset'), Constant(value='cub200-interleave-openset'), Constant(value='cars196-interleave-openset'), Constant(value='sop-openset'), Constant(value='inshop-openset'), Constant(value='mnist-openset'), Constant(value='imagenette'), Constant(value='tinyimagenet'), Constant(value='imagenet'), Constant(value='stanforddogs'), Constant(value='flower102'), Constant(value='imagenetlt'), Constant(value='cifar10'), Constant(value='cifar100'), Constant(value='mnist'), Constant(value='svhn'), Constant(value='serialized-openset'), Constant(value='debug-openset')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='OrderedDict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Name(id='name_', ctx=Load()), Call(func=Name(id='MXNetValset', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), BinOp(left=Name(id='name_', ctx=Load()), op=Add(), right=Constant(value='.bin'))], keywords=[])], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='name_', ctx=Store()), iter=Name(id='CASIA_TESTS', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='OrderedDict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Name(id='name_', ctx=Load()), Call(func=Name(id='MXNetValset', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), BinOp(left=Name(id='name_', ctx=Load()), op=Add(), right=Constant(value='.bin'))], keywords=[])], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='name_', ctx=Store()), iter=Name(id='MS1MV2_TESTS', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='OrderedDict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Name(id='name_', ctx=Load()), Call(func=Name(id='MXNetValset', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), BinOp(left=Name(id='name_', ctx=Load()), op=Add(), right=Constant(value='.bin'))], keywords=[])], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='name_', ctx=Store()), iter=Name(id='MS1MV3_TESTS', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='LFWDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False)), keyword(arg='classification', value=Constant(value=False))])), Name(id='CrossLFWTestset', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='ClassMergedDataset', ctx=Load()), args=[Call(func=Name(id='LFWDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[]), Call(func=Name(id='LFWDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='CUB200SplitClassesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='Cars196SplitClassesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='CUB200SplitClassesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False)), keyword(arg='interleave', value=Constant(value=True))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='Cars196SplitClassesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False)), keyword(arg='interleave', value=Constant(value=True))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='SOPDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='InShopClothesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='MnistSplitClassesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='ImagenetteDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='ImagenetteDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='ImageNetDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='StanfordDogsDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='Flower102Dataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='annotation_key', value=Constant(value='tstid'))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Dict(keys=[Constant(value='imagenetlt-overall'), Constant(value='imagenetlt-many-shot'), Constant(value='imagenetlt-medium-shot'), Constant(value='imagenetlt-few-shot')], values=[Call(func=Name(id='ImageNetLTDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='mode', value=Constant(value='test')), keyword(arg='test_setup', value=Constant(value='overall'))]), Call(func=Name(id='ImageNetLTDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='mode', value=Constant(value='test')), keyword(arg='test_setup', value=Constant(value='many-shot'))]), Call(func=Name(id='ImageNetLTDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='mode', value=Constant(value='test')), keyword(arg='test_setup', value=Constant(value='medium-shot'))]), Call(func=Name(id='ImageNetLTDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='mode', value=Constant(value='test')), keyword(arg='test_setup', value=Constant(value='few-shot'))])])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='CIFAR10Dataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='CIFAR100Dataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='MnistDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='SVHNDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='split', value=Constant(value='test'))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='discard_', ctx=Load()), args=[Call(func=Attribute(value=Name(id='SerializedDataset', ctx=Load()), attr='from_folder', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[]), Constant(value='train')], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='DebugDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))]))])), Assign(targets=[Name(id='MIXUP', ctx=Store())], value=Dict(keys=[Constant(value='same_class')], values=[Name(id='SameClassMixupCollator', ctx=Load())])), FunctionDef(name='num_train_classes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ͳGǐ΄etÌɢ ̽tŸota͛lϑ ϼmnuɟmber ŉoņf cŞlasses iƚn traińͼϿ.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()))], decorator_list=[Name(id='propertylrSL', ctx=Load())]), FunctionDef(name='_get_loader', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dataset'), arg(arg='tra')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ώ ȧȲ ɩˋ    ȶϻ')), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='num_workers', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_workers'), ctx=Load())), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='tra', ctx=Load())), Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_valid_workers'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='num_workers', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_valid_workers'), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='batc_h_size', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='batch_size'), ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='tra', ctx=Load()), Attribute(value=Name(id='dataset', ctx=Load()), attr='classification', ctx=Load()), Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='samples_per_class'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[If(test=UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='shuffle_train'), ctx=Load())), body=[Raise(exc=Call(func=Name(id='VALUEERROR', ctx=Load()), args=[Constant(value='Balanced sampling requires shuffling.')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='batch_sampler'), ctx=Store())], value=Call(func=Name(id='ShuffledClassBalancedBatchSampler', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='batch_size', value=Name(id='batc_h_size', ctx=Load())), keyword(arg='samples_per_class', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='samples_per_class'), ctx=Load())), keyword(arg='uniform', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='uniform_sampling'), ctx=Load()))]))], orelse=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='batch_size'), ctx=Store())], value=Name(id='batc_h_size', ctx=Load())), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='drop_last'), ctx=Store())], value=Name(id='tra', ctx=Load())), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='shuffle'), ctx=Store())], value=IfExp(test=Name(id='tra', ctx=Load()), body=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='shuffle_train'), ctx=Load()), orelse=Constant(value=False)))]), If(test=BoolOp(op=And(), values=[Name(id='tra', ctx=Load()), Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='mixup_type'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='collate_fn'), ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='MIXUP', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='mixup_type'), ctx=Load()), ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='utils', ctx=Load()), attr='data', ctx=Load()), attr='DataLoader', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='num_workers', value=Name(id='num_workers', ctx=Load())), keyword(arg='pin_memory', value=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='cuda', ctx=Load()), attr='device_count', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])), keyword(arg='persistent_workers', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='persistent_workers'), ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='DATA_ROOT')], kwonlyargs=[arg(arg='config')], kw_defaults=[None], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Constant(value='Dataset type must be provided')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data_root', ctx=Store())], value=Name(id='DATA_ROOT', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_image_transform', ctx=Store())], value=Call(func=Name(id='ImageTransform', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='transform_params'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_image_test_transform', ctx=Store())], value=Call(func=Name(id='ImageTestTransform', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='image_size', ctx=Load())], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='transform_test_params'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_augmenter', ctx=Store())], value=Call(func=Name(id='ImageAugmenter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='image_size', ctx=Load())], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='augmenter_params'), ctx=Load()))])), Assign(targets=[Name(id='trainset', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_trainset', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Constant(value=False))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Attribute(value=Name(id='trainset', ctx=Load()), attr='num_classes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_openset', ctx=Store())], value=Attribute(value=Name(id='trainset', ctx=Load()), attr='openset', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_priors', ctx=Store())], value=Attribute(value=Name(id='trainset', ctx=Load()), attr='priors', ctx=Load()))], decorator_list=[]), FunctionDef(name='image_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get dataset image size.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_image_transform', ctx=Load()), attr='image_size', ctx=Load()))], decorator_list=[Name(id='propertylrSL', ctx=Load())]), FunctionDef(name='get_testsets', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transform')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='GetŜ di´ctionary of testseŝtsʝ̢.')), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='TESTSETS', ctx=Load())]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='base_testsets', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='TESTSETS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data_root', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='base_testsets', ctx=Load()), Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='OrderedDict', ctx=Load())], ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='base_testsets', ctx=Store())], value=Dict(keys=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load())], values=[Name(id='base_testsets', ctx=Load())]))], orelse=[]), Assign(targets=[Name(id='base_testsets', ctx=Store())], value=DictComp(key=BinOp(left=Constant(value='infer-'), op=Add(), right=Name(id='k', ctx=Load())), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='base_testsets', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='add_lossy_testsets'), ctx=Load()), body=[For(target=Tuple(elts=[Name(id='name_', ctx=Store()), Name(id='dataset', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list_', ctx=Load()), args=[Call(func=Attribute(value=Name(id='base_testsets', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Attribute(value=Name(id='dataset', ctx=Load()), attr='classification', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='base_testsets', ctx=Load()), slice=BinOp(left=Name(id='name_', ctx=Load()), op=Add(), right=Constant(value='-lossy')), ctx=Store())], value=Call(func=Name(id='LossyDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='lossy_params'), ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='testse', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='name_', ctx=Store()), Name(id='dataset', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='base_testsets', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Name(id='transform', ctx=Load()), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='Compose', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='ToTensor', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_image_test_transform', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_image_transform', ctx=Load())], ctx=Load())], keywords=[])), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='preload'), ctx=Load()), body=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='PreloadDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='image_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='image_size', ctx=Load())), keyword(arg='num_workers', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_workers'), ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='TransformDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='transform', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='testse', ctx=Load()), slice=Name(id='name_', ctx=Load()), ctx=Store())], value=Name(id='dataset', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='dataset', ctx=Load()), attr='classification', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='add_verification_testsets'), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='testse', ctx=Load()), slice=BinOp(left=Name(id='name_', ctx=Load()), op=Add(), right=Constant(value='-pairs')), ctx=Store())], value=Call(func=Name(id='SamplePairsDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='testse', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_trainset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transform'), arg(arg='augment')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=True)]), body=[Expr(value=Constant(value='Get training dataset.')), Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='DEVSETS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data_root', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_fold'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='VALSETS', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Constant(value="`validation_fold` is not None. Cannot perform validation split,because this dataset has author's validation split.")], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='dataset', ctx=Load()), attr='openset', ctx=Load()), body=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Subscript(value=Call(func=Name(id='split_crossval_classes', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='i', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_fold'), ctx=Load())), keyword(arg='k', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_validation_folds'), ctx=Load())), keyword(arg='interleave', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_split_interleave'), ctx=Load()))]), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Subscript(value=Call(func=Name(id='split_crossval_elements', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='i', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_fold'), ctx=Load())), keyword(arg='k', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_validation_folds'), ctx=Load())), keyword(arg='interleave', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_split_interleave'), ctx=Load()))]), slice=Constant(value=0), ctx=Load()))])], orelse=[]), If(test=Name(id='transform', ctx=Load()), body=[If(test=Name(id='augment', ctx=Load()), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='Compose', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_augmenter', ctx=Load()), Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='ToTensor', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_image_transform', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='Compose', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='ToTensor', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_image_transform', ctx=Load())], ctx=Load())], keywords=[]))]), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='preload'), ctx=Load()), body=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='PreloadDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='image_size', value=Call(func=Name(id='intRXKem', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='image_size', ctx=Load()), op=Mult(), right=Constant(value=1.5))], keywords=[])), keyword(arg='num_workers', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_workers'), ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='RepeatDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='train_repeat'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='TransformDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='transform', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='dataset', ctx=Load()))], decorator_list=[]), FunctionDef(name='openset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_openset', ctx=Load()))], decorator_list=[Name(id='propertylrSL', ctx=Load())]), FunctionDef(name='_get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='name_'), arg(arg='validation_fold'), arg(arg='NUM_VALIDATION_FOLDS'), arg(arg='validat_ion_split_interleave'), arg(arg='trans'), arg(arg='transform_test'), arg(arg='augmenter_params'), arg(arg='mixup_type'), arg(arg='batc_h_size'), arg(arg='samples_per_class'), arg(arg='u'), arg(arg='num_workers'), arg(arg='num_valid_workers'), arg(arg='PERSISTENT_WORKERS'), arg(arg='shuffle_train'), arg(arg='train_repeat'), arg(arg='PRELOAD'), arg(arg='add_lossy_valsets'), arg(arg='add_lossy_testsets'), arg(arg='lossy_params'), arg(arg='add_verification_valsets'), arg(arg='add_verification_testsetssk'), arg(arg='validate_on_test')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=4), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=256), Constant(value=4), Constant(value=False), Constant(value=8), Constant(value=None), Constant(value=False), Constant(value=True), Constant(value=1), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=False), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='Ge3ɭɪtˍɲaɽƛ Ǩcǈƛăollοȭeͯctioän ǝ˪paƀra͛ǝmΖe̶͛ˡters.\nƉ\nuϜAͫ¤rgsǰ:\n Θ  t˩ nƠɽ"ȃć\x8f_ΧímΗýe: TypʒıŨe Nof ýͮtBόɪhe γtra\'in΅i͜¹Ȱngϙ¥ȫ data̋ĳ«Ûʎsˍeåt 8ĒFū¼͗(º`cɡȸasȹȷiaðƺ`ţ, `ȑƴmΜs1mǀv2`, `mǖ˩Ĵ̶ϒ̉(̆s1mͧvː3ɿǄɕͷƆĺ`Ť, `ˏlfΰˡE[w`,ā `cȬɇ̙ŋub2ʛü00`ͳ,ŗ˓K ΖÜ`ƫǈca.ɖrɲsƜʉ196÷ƊđǊ` orÃ Č`ôΥsˆopɬ`)Ĕ.\n   Ǘgă vali<datƒèiġon_fϱoldŲ̒: ǽFoldūΠʟ̉Ø ind̡͆Öex Ųu\x85se¼d ɌfΫǖɺo¼rŹ%> Ɯǉvalidaātioɉ͢nŏƴͤ.ϗǂ\n ͜  ϗ ΐϋnum_valϱid˦ģatùÕiƙΉoş͛nÌƑ_̌ɀĝfoldǳs: N©u̓Κmɪbe̍r o˦ʁŞΩf ÚțΖɇvÜal\u0383iÚdaňtɨ\u03a2ēion spÍͯĬlits\x9f.\n ˭  ¯̇̄θì͙ʥ vaˋlidϿLatΪµi͔ƨo-ǬϻnˉȔȷ_spli͆ɘt_ãi¿n\x9eterlϓeˆȜałvÞe: Iʂμf True, use ͳπșiƭnŌΖōterleaũ=Țvʡ\u0383/eϡ\x9dŔ ˿ĬsplƉɯiętĎtƳϟiνȪng scëhem̢e̿Ϟ\'.RϵΕɥ S\x95pĬʀlĴiÇt |ʜusiΤngΙ seƄϫ˴ϲ˼gÊmeǨnts oφΐʐtê˭ŉȿhΐʕeĀrwi\x87se.Õɒ\n /  ϻ tra§nɯǂs̿ī_fo\x8eéÓɔrḿ_pϦaramˮs:!r ƬàPasïŰ¤rameƲ͐teʦθ̂rs Ɣof :cl̡aƼsʱėsʂ:ʩˣ`ŐImagΒe\u0381TraΕn;sfo rΐm̆`.\n    trϨaƊ̸Žnsfoț[Ѐrŭm_ΟÝϨȐʟtǅȅȭest_paōǢramÆƁs: ParŽƦaƨ0ǏʿmYeđ¡͊òtˏeʪǪrțs˵ o·f Ų:ƕcla(Řʔ̤ssɂő:Ǿď̥`ƔImϛaÉgeTestǋΞ\x97Traͬ¼ʃnsforŞm`Ń uÐsoeɆŀd*̣ ŠKdĮurɞ͕ingʧťȋ teƤ͎st˗ª΄inȌŷgǮ.\nI ɫƅ  \x92ʽȭ Ϥaug̯Ⱦɛm̙ϾenJƮɮt̰er_ȬƿϙpǶaτramsƃ: Pūaʁrªameters oĈfɈ :cǾȝκɓl/assʓ:έ`K͟Imag͗ːͦeA̓ÐˁugmͱDKeÄnƴter` usÑedǏ.ǜ dϊˋur˫i˹\u03a2ngØ ˸Ļ\x88trǦÑaini·nīg.Ϭʨƍ^&Ļ\n̢ϵ    miǡǬqČx͢up_ȞƁ8͢t̾y\u038d\x8fp¯HŨeƩĵ;˻: 1Ty˾pΎƢΘ¹˪͋xĥ˭eƈ ŗȰÔͲof mǓi˗ŮxËuÍʘK»ϴp sĬ«tŜra\u0380\u038bĳtȒϔǣəȤegİyʔ̥ føoςr ϮǍcßĘɓlasΡϩsifŎģic̗ĀaPtioǘn¸ dƗƅaȀtasˉetʯƽ͝s. ό(None δɎ͔Ʊ´orΕȭ "Ⱥϧ-saΞm͕e_͛ĜΪcXl`asλs\x89ϋǵ")iÆ.Ȼ\n ɲõ ̕Ǵ u badłtŶc5ǚh_ĹsiuzeɄ: Bʇϕa͠]tϧ̤cŨɓh ̦ǺsizeǾÚʱX.Ć\nqκ˵ˡ ˛Ώͩ   sampleƑs_4Ƙper_cˋlass:Īòβ Iͽf ɕ˲fnoťt\x98 Nɑone, ˫̰̈́s\x81am̬pͣlĝe c̃\x8aƚlasɘsϫȒes uɴnơŰ\x9aɐiIɧfoͬ̽gƤrΥNʉmly̡ wiʚΣɠ4th ǵtheώÄɍȡŋ Ĭ\x98givϟenϖ numbˠ>eƿ@rǳƟ ǿof ơsamìpͿles per ͼclÐ̓úaȪ6IʎsɞǼɆsĪ.ĶĆ\n  ̢ ̑,͐ ǰu͢Ϙ³niϤfĩ¢oʠ@rmȫʪ_sa;ȮGȒčtmȡplςʮing: If tϳrBuΧ͟eĢ anƌd Lūs1˸aȜmϐpgle@sɕͩ_tʏpeȳ˺r_ƋcϬͪlaͿƵs̏ƕ̸͚ȗˌέs i͖s no ąt NΠo8nǆĴe\x95, ɡcΕ¢ʯ\x9claȀs˄se\x81aˌs aÓ̮ΉɥreǮ ͜Ósaʟm,ple͛d unÃǇLĈƒifƀo\xad¢rmlΕyΟ for eaɣƕcͿhɛ ƺ3ĸƵĳbĴatc¹ʿh.˒\n ȴɰ̀ζ Ϗ  ϣϹnʢu̓m_w¯oÏȇrkers: N?uϰmber ofǟþ loaĄǕȅderIǢŢ Ͽworkers.\n ę \x96  ȡnum_ȐϦˀvʖaˎȸFlid_workƞeɄȈr\x9eÀs: NumĔbʯe\x9br Γof wGo͖rȾkæĐers ̊̚ˏću·sed fɹoʝrŉ vaɣlŽidaɕĳt\x97ȱɉiÓǳonLǻ. SɄeƎȭtɓ ϺNaûone ͓stʶαo uϩʂse the same nuŽmĀbeɃr Ķaɲ\x92ɠsɛ inξΙŎȘ trai\x98n.ϥ\nȅʿŒ   Ȑ˲ ĈϋpŞcʠersistΐent_work8ers˽\'ɣ: K\u0381eЀeχʥpʸ lŤożWader®U wôƛǭoPȏȌrkerǎϫs\x97 alive ȬĄaΙfterê iteraǔtſiŞ£on.ɩ\n  µ  shuľȏ\x9cιЀfŕ\u0378ɛ`f+ɑl̾e˃˙˂_ûtr̋Á¾aͥĆin: WʧihetʑhċˋȕΠer tʞȱo sAhϡȴuϕfΡfȲle ĺtŐÌrain˧ oɗrͱ˓˃YH nŲϫoɮȑtǱ.Ȥř\n   ȕƦȘ tȆȤË̚Ϸr˾ain_repeaŲt͓:͢ ̥ʚNu¾mber of ít̝̀raijninˡgϵ sϭĻƮeΏt rǭe=petitκÊʹMĿi̧onɴ kƭˉduring˂ ɆepocɊhfC ̆(usefuēl foτr\x8b± sΝmaʭl͍lȐç da³ƃŁǫ̣Αtaê¸ɳ϶setďs).İ\n  ËɁ  p˙ǨƏreload:ȋ LoaüƂdͽ ȜɎf\u0381̈́uĈllûÛ ũȵdatïςaseÈ˼t˥ ʸto Ž͍ǰthi~̱eƑ :memoɜʁrǻy beʹΩfoƥre traɞininēg.\n˗ ű  ɩ aγddɑ˜_ıl˼ΖosĄsy_ěʆƑvaðˮlǍϵsýe\u03a2ts: Add0 losŸ˻s&ȏɞy variήant\\Ȁ̟Úȶs˔ of Ζvali̸ɨɢdŉa}tŐiǫoʄn setȌͶHs.\n  \u0383Ø Γ adəΡdŻ_lʧÄǼossʜ;͌y_tesǸtsδet͇s: Add̘ ǺloȂss4ȦĀ͏y ʛvarianϣOtǮüsǙ o\x8a˷͂fʏ HtɅest se˞ts.Ȕʌ\nĕ  ̒ O lo·˛~s©sǵy_pͱŃaɜrŐ¡ams:\x8aL˛ Paĵɣr̻ametʡͳƲers of Ƃlͨϵossyϰ datasƢś͛ʑe˿tsǑ\x8f.\nδ    aĦ\x9cddλȹºlŧy_ȯʧve°ǙriȞœŷf˚͎icɚǴatz͚ioǝnu_\x9fvtalūɀsɡ̅ʹets̼:ģ ȰWˎĵheɅʴt¬ȅǳhϑǐøȩ͡eZr to add veȢrͲiɆǪǁficaʁtŊ>ǌƱ͆Μio\x98nx ϫvalϡƑidatȷϡiʆ̜orŀn· æΨƠΜsetΞsʋ iˌn aƶddƠiϨŌtioƎn ˵to cl˸ɾʀ͎aɵŬssi7f\x91ÁiπɊcŦationʬǐʾ.ͦ3ɨŬ}Λʿ\nϾ ͌%ǩ   ̤ϵʗadd̴_vL:erifͬicϤatÝio͂-¥Ɛʒn_tŉeṷ̂ˡsŞǬtđʩΠseũtös:Ƴ ÖW̸λhͽȧƚ¯eƔʹʬtΣher to ad̕d ȒveʓriƤɌfȔŽϠπicϗYat\x9ciɮoǾn teȀ˺sΑt΄setʩƴs ƅǁ̠iǈn addiɓtϘiǃ\x9cʇon tʺʙΩofɴ classificatiͤoÉʟϽn.ï\nǂƯ  ę  v̄alϣidatež_onˡ̓_̼t̵estǕ:ŗ C5omŀputeȅύ \x96tesīt metϗrϋĚics b\x8eφȉǙe˥tňĮweeŪ̾n epιƉocͽĄhs.')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='name'), Name(id='name_', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='validation_fold'), Name(id='validation_fold', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='num_validation_folds'), Name(id='NUM_VALIDATION_FOLDS', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='validation_split_interleave'), Name(id='validat_ion_split_interleave', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='transform_params'), Name(id='trans', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='transform_test_params'), Name(id='transform_test', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='augmenter_params'), Name(id='augmenter_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='mixup_type'), Name(id='mixup_type', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='batch_size'), Name(id='batc_h_size', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='samples_per_class'), Name(id='samples_per_class', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='uniform_sampling'), Name(id='u', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='num_workers'), Name(id='num_workers', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='persistent_workers'), Name(id='PERSISTENT_WORKERS', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='num_valid_workers'), Name(id='num_valid_workers', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='shuffle_train'), Name(id='shuffle_train', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='train_repeat'), Name(id='train_repeat', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='preload'), Name(id='PRELOAD', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='add_lossy_valsets'), Name(id='add_lossy_valsets', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='add_lossy_testsets'), Name(id='add_lossy_testsets', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='lossy_params'), Name(id='lossy_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='add_verification_testsets'), Name(id='add_verification_testsetssk', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='add_verification_valsets'), Name(id='add_verification_valsets', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='validate_on_test'), Name(id='validate_on_test', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='static', ctx=Load())]), FunctionDef(name='ge', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transform')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_fold'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='VALSETS', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Constant(value="`validation_fold` is not None. Cannot perform validation split,because this dataset has author's validation split.")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='DEVSETS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data_root', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='dataset', ctx=Load()), attr='openset', ctx=Load()), body=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Subscript(value=Call(func=Name(id='split_crossval_classes', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='i', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_fold'), ctx=Load())), keyword(arg='k', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_validation_folds'), ctx=Load())), keyword(arg='interleave', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_split_interleave'), ctx=Load()))]), slice=Constant(value=1), ctx=Load()))], orelse=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Subscript(value=Call(func=Name(id='split_crossval_elements', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='i', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_fold'), ctx=Load())), keyword(arg='k', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_validation_folds'), ctx=Load())), keyword(arg='interleave', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_split_interleave'), ctx=Load()))]), slice=Constant(value=1), ctx=Load()))])], orelse=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='VALSETS', ctx=Load())]), body=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='VALSETS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data_root', ctx=Load())], keywords=[]))], orelse=[Return(value=Dict(keys=[], values=[]))])]), Assign(targets=[Name(id='base__valsets', ctx=Store())], value=Dict(keys=[Constant(value='valid')], values=[Name(id='dataset', ctx=Load())])), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='add_lossy_valsets'), ctx=Load()), body=[For(target=Tuple(elts=[Name(id='name_', ctx=Store()), Name(id='dataset', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list_', ctx=Load()), args=[Call(func=Attribute(value=Name(id='base__valsets', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Attribute(value=Name(id='dataset', ctx=Load()), attr='classification', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='base__valsets', ctx=Load()), slice=BinOp(left=Name(id='name_', ctx=Load()), op=Add(), right=Constant(value='-lossy')), ctx=Store())], value=Call(func=Name(id='LossyDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='lossy_params'), ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='valsets', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='name_', ctx=Store()), Name(id='dataset', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='base__valsets', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Name(id='transform', ctx=Load()), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='Compose', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='ToTensor', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_image_test_transform', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_image_transform', ctx=Load())], ctx=Load())], keywords=[])), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='preload'), ctx=Load()), body=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='PreloadDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='image_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='image_size', ctx=Load())), keyword(arg='num_workers', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_workers'), ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='TransformDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='transform', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='valsets', ctx=Load()), slice=Name(id='name_', ctx=Load()), ctx=Store())], value=Name(id='dataset', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='dataset', ctx=Load()), attr='classification', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='add_verification_valsets'), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='valsets', ctx=Load()), slice=BinOp(left=Name(id='name_', ctx=Load()), op=Add(), right=Constant(value='-pairs')), ctx=Store())], value=Call(func=Name(id='SamplePairsDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='valsets', ctx=Load()))], decorator_list=[]), FunctionDef(name='validation_fold', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='         ǂ ')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_fold'), ctx=Load()))], decorator_list=[Name(id='propertylrSL', ctx=Load())]), FunctionDef(name='get_datasets', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tra'), arg(arg='transform'), arg(arg='augment_train')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=True), Constant(value=True)]), body=[Assign(targets=[Name(id='datasets', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), If(test=Name(id='tra', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='datasets', ctx=Load()), slice=Constant(value='train'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_trainset', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Name(id='transform', ctx=Load())), keyword(arg='augment', value=Name(id='augment_train', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='datasets', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_valsets', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Name(id='transform', ctx=Load()))])], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='tra', ctx=Load())), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validate_on_test'), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='datasets', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testsets', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Name(id='transform', ctx=Load()))])], keywords=[]))], orelse=[]), Return(value=Name(id='datasets', ctx=Load()))], decorator_list=[]), FunctionDef(name='train_priors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_priors', ctx=Load()))], decorator_list=[Name(id='propertylrSL', ctx=Load())]), FunctionDef(name='get_loaders', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tra'), arg(arg='transform'), arg(arg='augment_train')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=True), Constant(value=True)]), body=[Expr(value=Constant(value='Get dataset loadeτrs.')), Assign(targets=[Name(id='datasets', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_datasets', ctx=Load()), args=[], keywords=[keyword(arg='train', value=Name(id='tra', ctx=Load())), keyword(arg='transform', value=Name(id='transform', ctx=Load())), keyword(arg='augment_train', value=Name(id='augment_train', ctx=Load()))])), Assign(targets=[Name(id='loaders', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Name(id='name_', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_loader', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='train', value=Compare(left=Name(id='name_', ctx=Load()), ops=[Eq()], comparators=[Constant(value='train')]))])], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='name_', ctx=Store()), Name(id='dataset', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='datasets', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='loaders', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])