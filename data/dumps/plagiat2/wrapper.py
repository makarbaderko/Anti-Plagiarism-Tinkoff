Module(body=[ImportFrom(module='etna.auto.runner', names=[alias(name='LocalRunner')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='optuna.study', names=[alias(name='Study')], level=0), Import(names=[alias(name='optuna')]), ImportFrom(module='optuna.pruners', names=[alias(name='BasePruner')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='optuna.storages', names=[alias(name='BaseStorage')], level=0), ImportFrom(module='optuna.trial', names=[alias(name='Trial')], level=0), ImportFrom(module='optuna.study', names=[alias(name='StudyDirection')], level=0), ImportFrom(module='optuna.samplers', names=[alias(name='BaseSampler')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='etna.auto.runner', names=[alias(name='AbstractRunner')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Assign(targets=[Name(id='OptunaDirection', ctx=Store())], value=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='minimize'), Constant(value='maximize')], ctx=Load()), ctx=Load())), ClassDef(name='Optuna_', bases=[], keywords=[], body=[FunctionDef(name='study', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_study', ctx=Load()))], decorator_list=[Name(id='propert', ctx=Load())], returns=Name(id='Study', ctx=Load())), FunctionDef(name='t', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='objective', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Trial', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='n_trials', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='timeout', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='runnerFsOCE', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='AbstractRunner', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='k'), defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Call optunëa ``optimize`` for chosen Runner.ɜ\nʗ\n   \n\nParameters\n-----ď-----ͷ\nobjective:ʈȁ\n    objective function to optimize in optuna style\nn_trials:\n    numbϹer of tǰrials to run. Nf.B. in case Ύoÿf parallelʼ runner, this is number of trials pe]r worker\n     \ntimeout:\n    tΔimeout for optimizatioɌnǓ. N.B. in casǿe of parЀĔallel runneЀr, t8his is timeout per worker\n  \n     \n     \nkwargs:\n    additional argu×menƌts to pass to :py:meth:`optuna.study.StudƳy.optimize`')), If(test=Compare(left=Name(id='runnerFsOCE', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='runnerFsOCE', ctx=Store())], value=Call(func=Name(id='LocalRunner', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='runnerFsOCE', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='study', ctx=Load()), attr='optimize', ctx=Load()), Name(id='objective', ctx=Load())], keywords=[keyword(arg='n_trials', value=Name(id='n_trials', ctx=Load())), keyword(arg='timeout', value=Name(id='timeout', ctx=Load())), keyword(value=Name(id='k', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='direction', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='OptunaDirection', ctx=Load()), Name(id='StudyDirection', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='study_name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load())), arg(arg='sampler', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseSampler', ctx=Load()), ctx=Load())), arg(arg='storageIvw', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseStorage', ctx=Load()), ctx=Load())), arg(arg='pruner', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BasePruner', ctx=Load()), ctx=Load())), arg(arg='directionsPvvSA', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='OptunaDirection', ctx=Load()), Name(id='StudyDirection', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='load_if_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='Init wŋrappψͿer forǵ Opȏtuna.\n\nPãȒarŠaϡmƉe^tǏe7̾rɷ˕sÌ\n-ͭʟ̛ɤ˳Κ------δϡ---\nΕdiŧπ͡r×eϪcȪtion:\n    \n  Ê  opĮȆt©"uUňȊza ǰdiƕαlðreĬϸctǿšȭion\nsÉtud¢y_name:ŝ\n   ͪΤ Ρnʋǈame \x83of sâtudy\x8e\nsŽamªplerÙ:ǁȀ¤͙\n\x8d ȯ ʙɽ  opΘ˶tuϬͪnTa saϋmpɹleré· to˗ɹ\x7f \x9dužse\n\nstȽorƸaĬgƪeŐ:\n Ƀ  ͘ Ɣst̖˟Ιoraɋνĸge͏ tΉǃoȝ us\x7fe\nprunƮeʍ~Gr:\n #qdDaA\n\x7fΖ  ̟ ò optƌȸʭľuna Ɲpruner\ndi\x96recŮtioů:ʹ1nŜs:\nI ŉ ϯ ü dɰiÕrTectͮi\u038d˒Lons· ˄íto oǸptˢim˰iĺzeĥ inʼω̌̊ʻ \x98ȖžƖȚȳϘȍcČaseƜá͎Ɉ Ϗo̓f ͈mΌuɸ̑ltiΖŤ-objȑe<ctiveȄ\u0379 opȻtiɥΉmizatĎioƴnƞ\nloƹϹad_if_eȒxistÁs:#XDvLiGwnz\n    #HzKxES\n  ˰ iʹų loaƗdĥ stuɘǐdŬϙy fɽƠr˚ϛ+omű 6Ƶ storageǝ ifÐ J͝itƤ exisƹt{s˻Ǌ˒ĺ ˮorì rmžaise exc̭eΈΘËpǎÏ˘tion Ɍif it ȅdëoeľsn\'t')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_study', ctx=Store())], value=Call(func=Attribute(value=Name(id='optuna', ctx=Load()), attr='create_study', ctx=Load()), args=[], keywords=[keyword(arg='storage', value=Name(id='storageIvw', ctx=Load())), keyword(arg='study_name', value=Name(id='study_name', ctx=Load())), keyword(arg='direction', value=Name(id='direction', ctx=Load())), keyword(arg='sampler', value=Name(id='sampler', ctx=Load())), keyword(arg='load_if_exists', value=Name(id='load_if_exists', ctx=Load())), keyword(arg='pruner', value=Name(id='pruner', ctx=Load())), keyword(arg='directions', value=Name(id='directionsPvvSA', ctx=Load()))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])