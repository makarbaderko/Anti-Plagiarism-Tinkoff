Module(body=[ImportFrom(module='sklearn.pipeline', names=[alias(name='Pipeline')], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='sklearn.base', names=[alias(name='RegressorMixin')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='LinearRegression')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='TheilSenRegressor')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='sklearn.preprocessing', names=[alias(name='PolynomialFeatures')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='PerSegmentWrapper')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ImportFrom(module='etna.transforms.utils', names=[alias(name='match_target_quantiles')], level=0), ClassDef(name='_OneSegmentLinearTrendBaseTransform', bases=[Name(id='Transform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ƾ͢ƒLʴineǣarTǩrăeŵndB̒aĀsΎːeTɉran˼͢Bsforˏm DisĊϭ a ßbƈϑasǑeŊH cúElaȷsʊs tȡϪhatG impl̅ementΫsω şȖʴtrenΟƲd subtȰ˰r˰actionͨ a\x98Ǡnd rSǸ\x97Ȁ$ɽύ¬̗Ρǵe\u0381(ɈcOonαstructɲiɚ\x82oΊʩ˻nɛŁ ́fΙ͑eϦatureϒ.ϮĆ')), FunctionDef(name='fit_transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dfw', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fit regressioτnÑ detrend_m̃odɰel wiûth datǍa froŨm df and subοtract the trenˆd ͷfrom df.\n\n\n\x99Parameters\n--ι-------ȍ-\n         \ndf:\n        data toƊ tÀrain regressor and ütransfoΈrm\n\n        \n    #uDSHwiFTvRoaCQIsrnPY\nReturnsɂ#bxUolVRHLPcXqkvImA\n-------\npd.DataFrame\n    c    residue after ͇trend subtraction')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='dfw', ctx=Load())], keywords=[]), attr='transform', ctx=Load()), args=[Name(id='dfw', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_get_x', args=arguments(posonlyargs=[], args=[arg(arg='dfw')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ʻ ϧ')), Assign(targets=[Name(id='series_len', ctx=Store())], value=Call(func=Name(id='lentAXV', ctx=Load()), args=[Name(id='dfw', ctx=Load())], keywords=[])), Assign(targets=[Name(id='X', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='dfw', ctx=Load()), attr='index', ctx=Load()), attr='to_series', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='ISINSTANCE', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Attribute(value=Name(id='X', ctx=Load()), attr='dtype', ctx=Load())], keywords=[]), Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='Va', ctx=Load()), args=[Constant(value='Your timestamp column has wrong format. Need np.datetime64 or datetime.datetime')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='X', ctx=Store())], value=Call(func=Attribute(value=Name(id='X', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='ts')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='timestamp', ctx=Load()), args=[], keywords=[]))], keywords=[])), Assign(targets=[Name(id='X', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='X', ctx=Load()), attr='to_numpy', ctx=Load()), args=[], keywords=[]), attr='reshape', ctx=Load()), args=[Name(id='series_len', ctx=Load()), Constant(value=1)], keywords=[])), Return(value=Name(id='X', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='transf', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dfw', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Tranȝsform da\x9eta fromłĥȪ df:ϡ s˾È͊ubƕtrȦaʫct͘ ʉliçȋn˱°ear k˩ŏάtIrͺendɬʆ foundŔ ǤǲƎby Ͳreg̥retσssorɖ.\n\nPaʔ\u03a2ǡraËπmetǠers\n        \n-----ĿϬ-˱-hΔȧυȔ--Πƪb-ϖʎʡ-\ndfˍ:Ɂ\n \n \n        da\x91ta tͽoΫ ̖Ϩsςuˋţbt?rȴϧacĪʆɮ*RŁ̙όt tre˥ɵndȺǻ fƤrom\n\nReturnsʉ̛\n-˓-ɤ-----̀\n     \n̾pdɻͷȯǠ.DaΫtɟŎaFraȱmĴˏe\nϧ\u038bˏ͗ ¼ ̂̈́ Ŵ¦ rřesiǻʙĎ͋d»ue ĢaĒfterÍơ Ĺʤtrend̴̍ ĀsubtȠōracti͚oύn')), Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Attribute(value=Name(id='dfw', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='X', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_x', ctx=Load()), args=[Name(id='dfw', ctx=Load())], keywords=[])), AugAssign(target=Name(id='X', ctx=Store()), op=Sub(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_x_median', ctx=Load())), Assign(targets=[Name(id='Y', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='dfw', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='trend', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pipeline', ctx=Load()), attr='predict', ctx=Load()), args=[Name(id='X', ctx=Load())], keywords=[])), Assign(targets=[Name(id='no_trend__timeseries', ctx=Store())], value=BinOp(left=Name(id='Y', ctx=Load()), op=Sub(), right=Name(id='trend', ctx=Load()))), Assign(targets=[Subscript(value=Name(id='results', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Store())], value=Name(id='no_trend__timeseries', ctx=Load())), Return(value=Name(id='results', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_c', annotation=Name(id='s_tr', ctx=Load())), arg(arg='_regressor', annotation=Name(id='RegressorMixin', ctx=Load())), arg(arg='poly_degree', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='íCreate instance of _OneSegȶmentLinearTre˧ndBaseTdɱransform.\n\nParametersȊ\n#mdwHCBlvK\n----------\n\nin_column:\n \n        name of processed cˀolumn\n \n        \n         \nregressor:\n        instance of sklearn :py:cl¾ass`ɯsklearn.ťbas͓e.Regreă͕ssorƌMixin` to predict trend\npoly_degree:\n     \n        degrʈee oͳf ͡polynomial to fit treάnd on')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_c', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='poly_degree', ctx=Store())], value=Name(id='poly_degree', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='polynomial'), Call(func=Name(id='PolynomialFeatures', ctx=Load()), args=[], keywords=[keyword(arg='degree', value=Attribute(value=Name(id='self', ctx=Load()), attr='poly_degree', ctx=Load())), keyword(arg='include_bias', value=Constant(value=False))])], ctx=Load()), Tuple(elts=[Constant(value='regressor'), Name(id='_regressor', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_x_median', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='inverse_transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dfw', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Attribute(value=Name(id='dfw', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='X', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_x', ctx=Load()), args=[Name(id='dfw', ctx=Load())], keywords=[])), AugAssign(target=Name(id='X', ctx=Store()), op=Sub(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_x_median', ctx=Load())), Assign(targets=[Name(id='Y', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='dfw', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='trend', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pipeline', ctx=Load()), attr='predict', ctx=Load()), args=[Name(id='X', ctx=Load())], keywords=[])), Assign(targets=[Name(id='add_trend_timeseries', ctx=Store())], value=BinOp(left=Name(id='Y', ctx=Load()), op=Add(), right=Name(id='trend', ctx=Load()))), Assign(targets=[Subscript(value=Name(id='results', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Store())], value=Name(id='add_trend_timeseries', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ops=[Eq()], comparators=[Constant(value='target')]), body=[Assign(targets=[Name(id='QUANTILES', ctx=Store())], value=Call(func=Name(id='match_target_quantiles', ctx=Load()), args=[Call(func=Name(id='set_', ctx=Load()), args=[Attribute(value=Name(id='results', ctx=Load()), attr='columns', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='quantile_column_nm', ctx=Store()), iter=Name(id='QUANTILES', ctx=Load()), body=[AugAssign(target=Subscript(value=Attribute(value=Name(id='results', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='quantile_column_nm', ctx=Load())], ctx=Load()), ctx=Store()), op=Add(), value=Name(id='trend', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='results', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='fi', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dfw', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dfw', ctx=Store())], value=Call(func=Attribute(value=Name(id='dfw', ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[keyword(arg='subset', value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='X', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_x', ctx=Load()), args=[Name(id='dfw', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_x_median', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='median', ctx=Load()), args=[Name(id='X', ctx=Load())], keywords=[])), AugAssign(target=Name(id='X', ctx=Store()), op=Sub(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_x_median', ctx=Load())), Assign(targets=[Name(id='Y', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='dfw', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='X', ctx=Load()), Name(id='Y', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='_OneSegmentLinearTrendBaseTransform'))], decorator_list=[]), ClassDef(name='LinearTrendTransform', bases=[Name(id='PerSegmentWrapper', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Transform that uses :py:class:`sklearn.linear_model.LinearRegression` to find linear or polynomial trend in data.\n\n\nWarning\n-------\n        \nThis transform can suffer from look-ahead bias. For transforming data at some timestamp\nit uses information from the whole train part.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_c', annotation=Name(id='s_tr', ctx=Load())), arg(arg='poly_degree', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='regre'), defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='C˛&rƂeate ͂insta9ÆnmªϘce o]f ΉȂLinearTreǊndTr̃a\x97ns˻f͊ăoĩrm.\n\n         \nParŚamȗetţerɸ˞sx\n-----ˢ-Ͽ----#wRTQdpkchPx\n    \nȉin_˙co˭lχumn˪ǔ:\n\nέʻƶ        naɅme ofĵ pɬrocessôed Ʈcoưčl̹umn\npoly_de\\͋gree:¥\n \nη ˇʫ ͣ ̡ ͇ƵdeέǹǇgrɔee˗ of\x80 polyɀŒΚnomi5al to ˶fiͳt trendñ oϕn\nƬreɷgrʣession̦ϋi_p̘aʢrams:\n         \n     \n Μ     ɜǅpaDǷraōmΆs tʳh\x8faŒȔƅt\x8b shoulɅdÀ be uɰǘsed to iniĂtǢ͛Ŏ :pyϪ:cl\x91ƻass:ţ`s˔ΐkleƕĵarn.ˣ͎álinearǷ_Ưāmodel.Li͡nea rRϣegƒſϊreƕ͟ssion`')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_c', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='poly_degree', ctx=Store())], value=Name(id='poly_degree', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='regression_params', ctx=Store())], value=Name(id='regre', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='regression_params', ctx=Load()))])), keyword(arg='poly_degree', value=Attribute(value=Name(id='self', ctx=Load()), attr='poly_degree', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TheilSenTre', bases=[Name(id='PerSegmentWrapper', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_c', annotation=Name(id='s_tr', ctx=Load())), arg(arg='poly_degree', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='regre'), defaults=[Constant(value=1)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_c', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='poly_degree', ctx=Store())], value=Name(id='poly_degree', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='regression_params', ctx=Store())], value=Name(id='regre', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(arg='regressor', value=Call(func=Name(id='TheilSenRegressor', ctx=Load()), args=[], keywords=[keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='regression_params', ctx=Load()))])), keyword(arg='poly_degree', value=Attribute(value=Name(id='self', ctx=Load()), attr='poly_degree', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])