Module(body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.clustering.distances.dtw_distance', names=[alias(name='DTWDistance')], level=0), ImportFrom(module='etna.clustering.distances.dtw_distance', names=[alias(name='simple_dist')], level=0), ImportFrom(module='etna.clustering.distances.euclidean_distance', names=[alias(name='EuclideanDistance')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), FunctionDef(name='two_seriesrpdaH', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Gʿȑene˧Mra͏\x98Ήteϸĺ˾ ɮtwŐo seriÝrƤeʡs pwiσ̜th ÏȘdifȔferàϾeǜ̑nͶəǘɿt ΡtƴiʸmμϼeʙstȫaϼmƎp ɜΤƏŋϔranΖ͗Ϸge.\u0383ķ˖')), Assign(targets=[Name(id='x1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Constant(value=10))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='x1', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=6), Constant(value=7), Constant(value=8)], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x1', ctx=Load()), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[keyword(arg='inplace', value=Constant(value=True))])), Assign(targets=[Name(id='x2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-02')], keywords=[keyword(arg='periods', value=Constant(value=10))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='x2', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=6), Constant(value=7), Constant(value=8), Constant(value=9)], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x2', ctx=Load()), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[keyword(arg='inplace', value=Constant(value=True))])), Return(value=Tuple(elts=[Subscript(value=Name(id='x1', ctx=Load()), slice=Constant(value='target'), ctx=Load()), Subscript(value=Name(id='x2', ctx=Load()), slice=Constant(value='target'), ctx=Load())], ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='pattern', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='xRaew', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=List(elts=[Constant(value=1)], ctx=Load()), op=Mult(), right=Constant(value=5)), op=Add(), right=List(elts=[Constant(value=20), Constant(value=3), Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=5)), UnaryOp(op=USub(), operand=Constant(value=7)), UnaryOp(op=USub(), operand=Constant(value=8)), UnaryOp(op=USub(), operand=Constant(value=9)), UnaryOp(op=USub(), operand=Constant(value=10)), UnaryOp(op=USub(), operand=Constant(value=7.5)), UnaryOp(op=USub(), operand=Constant(value=6.5)), UnaryOp(op=USub(), operand=Constant(value=5)), UnaryOp(op=USub(), operand=Constant(value=4)), UnaryOp(op=USub(), operand=Constant(value=3)), UnaryOp(op=USub(), operand=Constant(value=2)), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=1)], ctx=Load())), op=Add(), right=BinOp(left=List(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()), op=Mult(), right=Constant(value=11)))), Return(value=Name(id='xRaew', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_path', args=arguments(posonlyargs=[], args=[arg(arg='matrix', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())), arg(arg='expe_cted_path', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CheckĬ\u0382 that DTWDistance reconstructs ͪpath correcȣtly.')), Assign(targets=[Name(id='dtw', ctx=Store())], value=Call(func=Name(id='DTWDistance', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='dtw', ctx=Load()), attr='_get_path', ctx=Load()), args=[], keywords=[keyword(arg='matrix', value=Name(id='matrix', ctx=Load()))])), Assert(test=Compare(left=Call(func=Name(id='le_n', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='le_n', ctx=Load()), args=[Name(id='expe_cted_path', ctx=Load())], keywords=[])])), For(target=Tuple(elts=[Name(id='coords', ctx=Store()), Name(id='expected_coords', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='expe_cted_path', ctx=Load())], keywords=[]), body=[Assert(test=Compare(left=Name(id='coords', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_coords', ctx=Load())]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='matrix,expected_path'), Tuple(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Constant(value=3), Constant(value=10), Constant(value=16), Constant(value=20)], ctx=Load()), List(elts=[Constant(value=7), Constant(value=3), Constant(value=4), Constant(value=7)], ctx=Load()), List(elts=[Constant(value=12), Constant(value=4), Constant(value=5), Constant(value=8)], ctx=Load()), List(elts=[Constant(value=14), Constant(value=10), Constant(value=9), Constant(value=8)], ctx=Load()), List(elts=[Constant(value=15), Constant(value=13), Constant(value=11), Constant(value=8)], ctx=Load())], ctx=Load())], keywords=[]), List(elts=[Tuple(elts=[Constant(value=4), Constant(value=3)], ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value=3)], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=1), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=0)], ctx=Load())], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Constant(value=3), Constant(value=7), Constant(value=12), Constant(value=13), Constant(value=15), Constant(value=28), Constant(value=34)], ctx=Load()), List(elts=[Constant(value=3), Constant(value=4), Constant(value=6), Constant(value=8), Constant(value=13), Constant(value=29), Constant(value=31)], ctx=Load()), List(elts=[Constant(value=4), Constant(value=3), Constant(value=4), Constant(value=7), Constant(value=13), Constant(value=30), Constant(value=31)], ctx=Load()), List(elts=[Constant(value=6), Constant(value=4), Constant(value=3), Constant(value=7), Constant(value=14), Constant(value=31), Constant(value=31)], ctx=Load()), List(elts=[Constant(value=9), Constant(value=8), Constant(value=8), Constant(value=4), Constant(value=6), Constant(value=19), Constant(value=25)], ctx=Load())], ctx=Load())], keywords=[]), List(elts=[Tuple(elts=[Constant(value=4), Constant(value=6)], ctx=Load()), Tuple(elts=[Constant(value=4), Constant(value=5)], ctx=Load()), Tuple(elts=[Constant(value=4), Constant(value=4)], ctx=Load()), Tuple(elts=[Constant(value=4), Constant(value=3)], ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value=1), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=0)], ctx=Load())], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_euclidean_distance_no_trim_series', args=arguments(posonlyargs=[], args=[arg(arg='two_seriesrpdaH', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='trim_series', annotation=Name(id='boo', ctx=Load())), arg(arg='expected', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test Áɜȥeuclid̹vϭƄeaf\x98n d\u0381ispζtanĈÀceǍďǆ ǫȅinȚɳ Ścaʵseͺ ȊoǊċfŌ noˀ tǰriΪm sƵġeǅǸries.')), Assign(targets=[Tuple(elts=[Name(id='x1', ctx=Store()), Name(id='x2', ctx=Store())], ctx=Store())], value=Name(id='two_seriesrpdaH', ctx=Load())), Assign(targets=[Name(id='di', ctx=Store())], value=Call(func=Name(id='EuclideanDistance', ctx=Load()), args=[], keywords=[keyword(arg='trim_series', value=Name(id='trim_series', ctx=Load()))])), Assign(targets=[Name(id='d_', ctx=Store())], value=Call(func=Name(id='di', ctx=Load()), args=[Name(id='x1', ctx=Load()), Name(id='x2', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='d_', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='trim_series,expected'), Tuple(elts=[Tuple(elts=[Constant(value=True), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=False), Constant(value=3)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='te', args=arguments(posonlyargs=[], args=[arg(arg='x1', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='x2', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='expected', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="ˤCh˞̳eck kdtwǙ wȜϋišt˻h ¦dϼiffɾňe͓ɷ>ϮrƐent serie˵ΏȆΫs'í Ǉleŕɳngˌths¥ȳŒ.")), Assign(targets=[Name(id='x1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[Name(id='x1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[Name(id='x2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dtw', ctx=Store())], value=Call(func=Name(id='DTWDistance', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='d_', ctx=Store())], value=Call(func=Name(id='dtw', ctx=Load()), args=[], keywords=[keyword(arg='x1', value=Name(id='x1', ctx=Load())), keyword(arg='x2', value=Name(id='x2', ctx=Load()))])), Assert(test=Compare(left=Name(id='d_', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='x1,x2,expected'), Tuple(elts=[Tuple(elts=[List(elts=[Constant(value=1), Constant(value=5), Constant(value=4), Constant(value=2)], ctx=Load()), List(elts=[Constant(value=1), Constant(value=2), Constant(value=4), Constant(value=1)], ctx=Load()), Constant(value=3)], ctx=Load()), Tuple(elts=[List(elts=[Constant(value=1), Constant(value=5), Constant(value=4), Constant(value=2)], ctx=Load()), List(elts=[Constant(value=1), Constant(value=2), Constant(value=4)], ctx=Load()), Constant(value=4)], ctx=Load()), Tuple(elts=[List(elts=[Constant(value=1), Constant(value=5), Constant(value=4)], ctx=Load()), List(elts=[Constant(value=1), Constant(value=2), Constant(value=4), Constant(value=1)], ctx=Load()), Constant(value=5)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_dtw_distance_no_trim_series', args=arguments(posonlyargs=[], args=[arg(arg='two_seriesrpdaH', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='trim_series', annotation=Name(id='boo', ctx=Load())), arg(arg='expected', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ϊT5eMstǪ Άdtȴw di\x8cʝ̑ǱϮsȯ˛tǒϥ˥Ŧance i~ʻn cĵaƴs˺e oϖMÔgǄʘɝf nφo t!r\u03a2imÄ sʨerͼiȚÔm̓ηexs.')), Assign(targets=[Tuple(elts=[Name(id='x1', ctx=Store()), Name(id='x2', ctx=Store())], ctx=Store())], value=Name(id='two_seriesrpdaH', ctx=Load())), Assign(targets=[Name(id='di', ctx=Store())], value=Call(func=Name(id='DTWDistance', ctx=Load()), args=[], keywords=[keyword(arg='trim_series', value=Name(id='trim_series', ctx=Load()))])), Assign(targets=[Name(id='d_', ctx=Store())], value=Call(func=Name(id='di', ctx=Load()), args=[Name(id='x1', ctx=Load()), Name(id='x2', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='d_', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='trim_series,expected'), Tuple(elts=[Tuple(elts=[Constant(value=True), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=False), Constant(value=1)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_dtw_build_matrix', args=arguments(posonlyargs=[], args=[arg(arg='x1', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())), arg(arg='x2', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())), arg(arg='expected', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='WϠł͔đÓ÷͠ŹTeϏsŰɘ̡t datwʳ âmªϏaͬtrixˠ ȴcomͧɱputnation.ɾ')), Assign(targets=[Name(id='dtw', ctx=Store())], value=Call(func=Name(id='DTWDistance', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='matrix', ctx=Store())], value=Call(func=Attribute(value=Name(id='dtw', ctx=Load()), attr='_build_matrix', ctx=Load()), args=[Name(id='x1', ctx=Load()), Name(id='x2', ctx=Load())], keywords=[keyword(arg='points_distance', value=Name(id='simple_dist', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Name(id='matrix', ctx=Load()), Name(id='expected', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='x1,x2,expected'), Tuple(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=8), Constant(value=9), Constant(value=2), Constant(value=5)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=4), Constant(value=8), Constant(value=7), Constant(value=5)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Constant(value=3), Constant(value=10), Constant(value=16), Constant(value=20)], ctx=Load()), List(elts=[Constant(value=7), Constant(value=3), Constant(value=4), Constant(value=7)], ctx=Load()), List(elts=[Constant(value=12), Constant(value=4), Constant(value=5), Constant(value=8)], ctx=Load()), List(elts=[Constant(value=14), Constant(value=10), Constant(value=9), Constant(value=8)], ctx=Load()), List(elts=[Constant(value=15), Constant(value=13), Constant(value=11), Constant(value=8)], ctx=Load())], ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=6), Constant(value=3), Constant(value=2), Constant(value=1), Constant(value=6)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=3), Constant(value=2), Constant(value=1), Constant(value=5), Constant(value=8), Constant(value=19), Constant(value=0)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Constant(value=3), Constant(value=7), Constant(value=12), Constant(value=13), Constant(value=15), Constant(value=28), Constant(value=34)], ctx=Load()), List(elts=[Constant(value=3), Constant(value=4), Constant(value=6), Constant(value=8), Constant(value=13), Constant(value=29), Constant(value=31)], ctx=Load()), List(elts=[Constant(value=4), Constant(value=3), Constant(value=4), Constant(value=7), Constant(value=13), Constant(value=30), Constant(value=31)], ctx=Load()), List(elts=[Constant(value=6), Constant(value=4), Constant(value=3), Constant(value=7), Constant(value=14), Constant(value=31), Constant(value=31)], ctx=Load()), List(elts=[Constant(value=9), Constant(value=8), Constant(value=8), Constant(value=4), Constant(value=6), Constant(value=19), Constant(value=25)], ctx=Load())], ctx=Load())], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='dtw_t', args=arguments(posonlyargs=[], args=[arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get df with complex pat͠tern with timestamp lĵag.')), Assign(targets=[Name(id='dfs', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='_range', ctx=Load()), args=[Constant(value=1), Constant(value=8)], keywords=[]), body=[Assign(targets=[Name(id='date_range', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[JoinedStr(values=[Constant(value='2020-01-0'), FormattedValue(value=Call(func=Name(id='strIoEFt', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[keyword(arg='periods', value=Constant(value=35))])), Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Name(id='date_range', ctx=Load())])], keywords=[])), Assign(targets=[Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Call(func=Name(id='strIoEFt', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Name(id='pattern', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='dfs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Name(id='dfs', ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='ty', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='D'))])), Return(value=Name(id='ty', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='test_dtw_get_average', args=arguments(posonlyargs=[], args=[arg(arg='dtw_t', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ä\x90Cˎϸhec=Ϛk thatñ dtKΊwϙ ЀʈϜ˷Ɍʨceȫntro²iιd ǭ´ϫǬơç¢ʣcȬaǈtcheϫs˿ŋ ̈ɀĳt͒Ƅȓhe pa\x93ttƚʋern ofʑ° ëd̈f ϟƎ¾se@rieɬsϓÛ.')), Assign(targets=[Name(id='dtw', ctx=Store())], value=Call(func=Name(id='DTWDistance', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='centroid', ctx=Store())], value=Call(func=Attribute(value=Name(id='dtw', ctx=Load()), attr='get_average', ctx=Load()), args=[Name(id='dtw_t', ctx=Load())], keywords=[])), Assign(targets=[Name(id='percentiles', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='linspace', ctx=Load()), args=[Constant(value=0), Constant(value=1), Constant(value=19)], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='dtw_t', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='dtw_t', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[])), For(target=Name(id='p', ctx=Store()), iter=Name(id='percentiles', ctx=Load()), body=[Assert(test=Compare(left=Call(func=Name(id='absgC', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='centroid', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='values', ctx=Load()), Name(id='p', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='values', ctx=Load()), Name(id='p', ctx=Load())], keywords=[]))], keywords=[]), ops=[Lt()], comparators=[Constant(value=0.3)]))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])