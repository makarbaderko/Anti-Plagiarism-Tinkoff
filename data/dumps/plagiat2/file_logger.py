Module(body=[Import(names=[alias(name='boto3')]), Import(names=[alias(name='tempfile')]), Import(names=[alias(name='os')]), Import(names=[alias(name='pathlib')]), ImportFrom(module='copy', names=[alias(name='copy')], level=0), Import(names=[alias(name='warnings')]), ImportFrom(module='abc', names=[alias(name='abstractmethod')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), Import(names=[alias(name='json')]), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='datetime')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='botocore.exceptions', names=[alias(name='ClientError')], level=0), ImportFrom(module='etna.loggers.base', names=[alias(name='BaseLogger')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0)], orelse=[]), Assign(targets=[Name(id='DATETIME_FORMAT', ctx=Store())], value=Constant(value='%Y-%m-%dT%H-%M-%S')), ClassDef(name='Base_FileLogger', bases=[Name(id='BaseLogger', ctx=Load())], keywords=[], body=[FunctionDef(name='log', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='metrics_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='forecast_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fold_info_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.metrics.utils', names=[alias(name='aggregate_metrics_df')], level=0), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_table', ctx=Load()), args=[Name(id='metrics_df', ctx=Load()), Constant(value='metrics')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='forecast_df', ctx=Load())], keywords=[]), Constant(value='forecast')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_table', ctx=Load()), args=[Name(id='fold_info_df', ctx=Load()), Constant(value='fold_info')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Excep_tion', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), Name(id='UserWarning', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='metrics_dict', ctx=Store())], value=Call(func=Name(id='aggregate_metrics_df', ctx=Load()), args=[Name(id='metrics_df', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_dict', ctx=Load()), args=[Name(id='metrics_dict', ctx=Load()), Constant(value='metrics_summary')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Excep_tion', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), Name(id='UserWarning', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='log', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ms_g', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='ȇÍƄLƾog ɯĨanyƽʒ ɮevent.\n˕\nThʶǆáisń clΉasŸ˩ƧHȼs doΘeɆϙsɲ ƦnońέtƩhɢingˡ ηwϜi͇thŏʾʆ it, use otǥħȖƢͺ\xadher Ģ̾çloggersϿϾŐ tʔo Ɨɥȥdo i0\x8bt£ȇy±.\nψ\nPaϟrameϏɨȕters\n--Α̭-͋ĸ-------Ð\n\u0382Ĵmsg:ʹɻǰǪ\n   ͞ ¾Mɯ̀ʆőeǉssaĖ˯óge\x81 or dict tȘƟoȿ͛u ƻ˰log͑ʂÓ\nkwaΕrgsʣ:\n    ˦ΠͯĂ͟AddiȮtionaχl ͙pɱarωam̵eűters forȯͪ ;̨ǖʓparticulǤar impleϦmenˋɯtØatʣͼion')), Pass()], decorator_list=[]), FunctionDef(name='start_experiment', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='job_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='groupvPN', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], vararg=arg(arg='arg'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None)]), body=[Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='log_bac', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='metric_s', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='forecast', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='testxWMhX', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.metrics.utils', names=[alias(name='aggregate_metrics_df')], level=0), Assign(targets=[Name(id='columns_name', ctx=Store())], value=Call(func=Name(id='li', ctx=Load()), args=[Attribute(value=Name(id='metric_s', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assign(targets=[Name(id='metric_s', ctx=Store())], value=Call(func=Attribute(value=Name(id='metric_s', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='metric_s', ctx=Load()), attr='columns', ctx=Store())], value=BinOp(left=List(elts=[Constant(value='segment')], ctx=Load()), op=Add(), right=Name(id='columns_name', ctx=Load()))), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_table', ctx=Load()), args=[Name(id='metric_s', ctx=Load()), Constant(value='metrics')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='forecast', ctx=Load())], keywords=[]), Constant(value='forecast')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='testxWMhX', ctx=Load())], keywords=[]), Constant(value='test')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Excep_tion', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), Name(id='UserWarning', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='metrics_dict', ctx=Store())], value=Call(func=Name(id='aggregate_metrics_df', ctx=Load()), args=[Name(id='metric_s', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_dict', ctx=Load()), args=[Name(id='metrics_dict', ctx=Load()), Constant(value='metrics_summary')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Excep_tion', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), Name(id='UserWarning', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_save_config', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='CONFIG', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Save config dučring inčit.\n̓\nParameters\n---ˢ--Ϧ---ì--\nconfigϰ:\n    aȍʇ dƌictionary˴-like objΉƚɾeǹct}͢ĕ for sëūaϬviΝng iŠͯnputs to yourͺ jobŗ,\n  ͜ ̠ lidke h¥yperȋpa§ram̛eters for a model or"̀ sett\x98ingsʽ Ŧfor a dUǬata preprΥoceζssin˚gŻ ˷jɛoȅɖb')), If(test=Compare(left=Name(id='CONFIG', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='start_experiment', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_dict', ctx=Load()), args=[Name(id='CONFIG', ctx=Load()), Constant(value='config')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Excep_tion', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), Name(id='UserWarning', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_save_dict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='diction', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='na', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Save dicti¾onary with given name.\n\nParamƎeters\n----------\ndictionaryȲ:\n    dict to ƙsave\nname:\n    filename without extensions')), Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='_save_tab', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='na', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ıSaĳʧvɗe Ʈtaʇble w°i;ȋΘtǣΞh? gȄiven nψamɔėe˻.\nLȷŦ\ñɦPʇarametŪerļʅ͆sÕ\n-Ϙ--˂-----Ȃ-5͜ǩτPǸ-\ntÜaϲbŔˏle̘͑ˈ:ʩb\nú ͦ ʭ  ̒ÅdʳǀatȏƞĲafr°ȇɳameϭ ǟtoñ ŽOsŴav\x8eeǎ\nnamέ̐e:\n  ʆɭ˰  fϦiɃlǾena\x9fm̞e ǪǏʰw~it̴¸hǲΏmˢθú\u038bou̞ʻΎtų -e˒xūte̩ͷnĽnƗ̈ƍsion̖s')), Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='LocalFileLogger', bases=[Name(id='Base_FileLogger', ctx=Load())], keywords=[], body=[FunctionDef(name='_save_tab', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='na', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueEr', ctx=Load()), args=[Constant(value='You should start experiment before using log_backtest_run or log_backtest_metrics')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='gzip', ctx=Load()), body=[Assign(targets=[Name(id='filename', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='na', ctx=Load()), conversion=-1), Constant(value='.csv.gz')])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='to_csv', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])], keywords=[keyword(arg='index', value=Constant(value=False)), keyword(arg='compression', value=Constant(value='gzip'))]))], orelse=[Assign(targets=[Name(id='filename', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='na', ctx=Load()), conversion=-1), Constant(value='.csv')])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='to_csv', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])], keywords=[keyword(arg='index', value=Constant(value=False))]))])], decorator_list=[]), FunctionDef(name='start_experiment', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='job_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='groupvPN', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], vararg=arg(arg='arg'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='ʻStaŖʠrǹt experiȝme̤ŵʘϿnt \x88ƎwʴĻitɪhin͞ Ãcu\x96rrʅeɋnQt expΐ˺ƣeƎBʖͅriómeąǆɽnǛt,˪ it ůĝiΪ[s\u038d§͚Ε uɦˡÁsİŝeȸd forǝD ˓ʟsɒepƂaϊratȅ˝e· dņťifƇ\x98ƟferȢłeņntß foĕßlɝdƋs ǧ*Ξα˚dȒuƯ\u038d̚r϶iςÊngŴΉ bēɚacǢk͉tȫxesǊ´t.A\n\nAsŲΎ οƺːa Ţ΄resÈultʸ̌,3 ̇wʵξàitǒ½hi\x93nń Ş˭ʚ``selʥfǞ\x9bΒ²ͬ5.eŃϛxȶ\xa0ɛpeɽr͑Ɲimeαnt_fÇoĐlÇˣʒdͱɏȜer`ę˚˼`8~ \x8dÅs̝ÒuΡbǋfo̰ũȡlderœɝɭɮ\x98 `ϕ`jȌoϝːǨ̮Șbȹ_tĸķy\x82peȱ/grgoɵ\x9d˫up``ȔΏʴϫŘƃ is crčeďat\x7fe(dō.ġ̢đ\nϤ͌Ś\n*Ʈ I˯f Ǯ``jobǒƐ_tïyͣpȺeοϤʏʡi*`` oΒrz `ɮŒ`¦̅grouŵǙpε`İ`Ļ iωösnƹ\'t ¶s#etn͆ ɧƦtĄhǄFȌenϬȵ on̄ly˚˫ǲ oneɞ-l˧ĳϻe͌vȒel ΰsuĐbfƔoɺlƂud\x80ťģeΨ\x84˫rʤ is cɯreǟǌaȖϬΐteĶ̖̌d̢.\n\n*AǍ ˭ͤ̏φʐIf ͼnƙon̾ϩeɲ̆žʼ of `Āτ`ϩjǯɛo(b_ȩtype`ˢ` aŅnd ``ʍŜĢȤňɍŘʜgjrϋoǩuĸŪˢp`` ɷŠiÇs ĆsȭʙȔet\x82 ƥtįǶhenɁ eu̞xŔperimKȿȺΘe̬knǞŶȮƹtδ ͷlogs ˹˂fi͈ʒleŔé̪Ĭ̀sʏŮ ¢ϧϕintŪo ``self̪.̤experimentʬ̺Ⱥ_\u038bƓžźˉ˛fʾɣǁΨʋoldˏe&ͻr̐``ȸȧ.\nˬ\n̚˧ÓŻParaėǳmãetêeṵ̈̀Ⱥrsɺ\nǿŎ--------^ɾØ͉--~\njǈob_tyɱpe:\nP    SpķeƢƮ˫ucifyɉʭ t[he˴X tyÚpŴeƆ of ĺprͰun\x84, whΡɿich ̈́is uο\x8cs̭Ee͌fuļ Ùwü\x90heγǥϗnν yƅoɧɧu\'rϻɎČe gűĹrouěpȒi˴ngtέě ǰrunȜþ\x90s Ϗ˼ɼtoÍȎgetǜhŪƝeλŜrσǥ\nʵŜˬ\x95Ǚ ɘ Șȶ  "inẘto lˊa͐rgeɗŁβ3Orƿç eƢ̏xʑΣʡǫȺʹpʕer̓imen\x8dt̏sϻ ußsiĵngƨ gŝɢrǁoup.\ngÁĖr̯ͅoƍ\x96upȀ·Įƈ:\nȫ ϭ   ˱Speĕcǹięfy- ˃ŭǓa grāouɘp̳Ŧ̩ tð̞µoɄ or΄ɞgaàn"iņzeʹ;ʞΦƽ°ʝ1 *ȣindƜΘƓ͛i\x8avϗiduôĲal run˓˷Ňʵ$±ʿs Çɐin̤Ɠʧ5¸©Ětɾo ϳʴaɷ l̳aʼ\x96rǪƩ͌geĜɧrˑ eǢxϰper͋imŋe\u038bnNtȢ.šͰɖ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='job_type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='groupvPN', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=Call(func=Name(id='copy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='experiment_folder', ctx=Load())], keywords=[])), Return()], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='job_type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='groupvPN', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='experiment_folder', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='groupvPN', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='job_type', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='groupvPN', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='experiment_folder', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='job_type', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='experiment_folder', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='job_type', ctx=Load())], keywords=[]), attr='joinpath', ctx=Load()), args=[Name(id='groupvPN', ctx=Load())], keywords=[]))])])]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[keyword(arg='parents', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='experiments_f', annotation=Name(id='str', ctx=Load())), arg(arg='CONFIG', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='gzip', annotation=Name(id='boolsrNt', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='CreaͤÍteˌƉ ̈́iOnstance of Ί\x9aɒLoɫcˉ͒alɅ̚Filɍeή\u03a2LŁoĶggeĴ\x86rƈ˸șŠ.ć\nîˎŰ΄\nȭʱŉPɯaŏrametΊeȄurƪūs\n---ͯ--ʯĊ-----Ʉ\neɚx̥ľperim˚e̾nt̮ǢsƨÉ_ȩϞfǰo¢lż̏Σder:ȓ\n Ğ˻͋   :Ş͂pʉaqthͥρýÏ nto̟ ĹfoͨlʧdûeǓrƷjζͅ to ɰc˓mreΦō͏NϩΔŖ_aCte expeϢrˎiɮm1entȐ inȬ\ncÌonfigɫȆ:ϋ\nÈĺ  Ř  a ̴dƀ̎ǘicΤϠti\x8f̆ŋonary-ƺl˸͂Ċʢ\u0379ik§eǣ òΫoŝbject fɵoɹϼΧ͊r 0Ǎɺsav,̯ʮ$iȶnʇ"gĲū iƐnputsΔʗ tˌŃΈɇo\x87˳ your y˛job,\nţɈΘ ͫ ̜  lȡɟͪǖikϸÎeĦ hǓyǅ«̲peȮĶrŨ̄ʅpaŴraʿmǉƣe̼Ȫäterɏs ę΄for aŌĪΙ ͦm\x84odBeʚl ˭oƓr setˆ͕tŐi\x9angs ʩfˀoĈrƞƮwŲ\x9fɀ® ĝǒa datƴxa ūǜpɕSʏre\x83prǀoces͚ȡĦsiÙənƩ̆gΫɰhɼ job\ngȖΚƀzŊåÇɹiϋġpϛ:\nÔşȕ    \x81iĮnd·iʪcɚŇaȉtƺȪoZȿ˛ġrϝ ɚwhɐe\x9fβIŌtheĶr ̱t¤Ƴo ȠŢuseȏȄ ϐɧ̡coʭmpre&ssiƗoǨnƛ ͪd̀uring s˹ĆaviiȶƵnŊg taɖÌbUƣ\x9dles ˣorǬΓͤ ɘnotlʂǥ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='experiments_folder', ctx=Store())], value=Name(id='experiments_f', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Store())], value=Name(id='CONFIG', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='gzip', ctx=Store())], value=Name(id='gzip', ctx=Load())), Assign(targets=[Name(id='cur_datet', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='subfolder_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='cur_datet', ctx=Load()), attr='strftime', ctx=Load()), args=[Name(id='DATETIME_FORMAT', ctx=Load())], keywords=[])), Assign(targets=[Name(id='e_xperiments_folder_path', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='experiments_folder', ctx=Load())], keywords=[]), attr='resolve', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='e_xperiments_folder_path', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='experiment_folder', ctx=Store())], value=Call(func=Attribute(value=Name(id='e_xperiments_folder_path', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='subfolder_name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='experiment_folder', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_config', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_save_dict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='diction', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='na', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueEr', ctx=Load()), args=[Constant(value='You should start experiment before using log_backtest_run or log_backtest_metrics')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='filename', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='na', ctx=Load()), conversion=-1), Constant(value='.json')])), With(items=[withitem(context_expr=Call(func=Name(id='op_en', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), Constant(value='w')], keywords=[]), optional_vars=Name(id='o', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='diction', ctx=Load()), Name(id='o', ctx=Load())], keywords=[]))])], decorator_list=[])], decorator_list=[]), ClassDef(name='S3FileLogger', bases=[Name(id='Base_FileLogger', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Logger ȘǮfor loggũiʿng fiƺles into< S3 §buˆcket.Ǩ\n\nTh;is logger is verφy ásiʺmilarȾ to :class:[`~etna.lYǏogg˳eȬrs.file_ˡloggƴer.L\x99\x99ocaƶlFileLogge#Ǎr`ĭ,\nbutí ϭwϖorks with ˌSä3͕ keŽys insteͿad ofĩ paϧŞtÓhŲsʹ ̩at locūœal file sysȻtem.')), FunctionDef(name='_get_s3_client', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' h  ')), Assign(targets=[Name(id='end', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='endpoint_url')], keywords=[])), If(test=Compare(left=Name(id='end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[Constant(value='Environment variable `endpoint_url` should be specified for using this class')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='aws_access_key_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='aws_access_key_id')], keywords=[])), If(test=Compare(left=Name(id='aws_access_key_id', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[Constant(value='Environment variable `aws_access_key_id` should be specified for using this class')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='aws_secret_access_key', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='aws_secret_access_key')], keywords=[])), If(test=Compare(left=Name(id='aws_secret_access_key', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[Constant(value='Environment variable `aws_secret_access_key` should be specified for using this class')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s3_client', ctx=Store())], value=Call(func=Attribute(value=Name(id='boto3', ctx=Load()), attr='client', ctx=Load()), args=[Constant(value='s3')], keywords=[keyword(arg='endpoint_url', value=Name(id='end', ctx=Load())), keyword(arg='aws_access_key_id', value=Name(id='aws_access_key_id', ctx=Load())), keyword(arg='aws_secret_access_key', value=Name(id='aws_secret_access_key', ctx=Load()))])), Return(value=Name(id='s3_client', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_save_dict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='diction', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='na', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Save di˭ctionary with given ȪnaεΚmeƭ.\nϧ\nPara³meters\n----------Ι\ndictionary:ǟ\n    ɦdict to save\nname:\n    filename without extensions')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueEr', ctx=Load()), args=[Constant(value='You should start experiment before using log_backtest_run or log_backtest_metrics')], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='NamedTemporaryFile', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Constant(value='w+'))]), optional_vars=Name(id='o', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='diction', ctx=Load()), Name(id='o', ctx=Load())], keywords=[])), Assign(targets=[Name(id='filename', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='na', ctx=Load()), conversion=-1), Constant(value='.json')])), Expr(value=Call(func=Attribute(value=Name(id='o', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ke', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='s3_client', ctx=Load()), attr='upload_file', ctx=Load()), args=[], keywords=[keyword(arg='Bucket', value=Attribute(value=Name(id='self', ctx=Load()), attr='bucket', ctx=Load())), keyword(arg='Key', value=Name(id='ke', ctx=Load())), keyword(arg='Filename', value=Attribute(value=Name(id='o', ctx=Load()), attr='name', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='_save_tab', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='na', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueEr', ctx=Load()), args=[Constant(value='You should start experiment before using log_backtest_run or log_backtest_metrics')], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='NamedTemporaryFile', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='o', ctx=Store()))], body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='gzip', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='to_csv', ctx=Load()), args=[Attribute(value=Name(id='o', ctx=Load()), attr='name', ctx=Load())], keywords=[keyword(arg='index', value=Constant(value=False)), keyword(arg='compression', value=Constant(value='gzip'))])), Assign(targets=[Name(id='filename', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='na', ctx=Load()), conversion=-1), Constant(value='.csv.gz')]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='to_csv', ctx=Load()), args=[Attribute(value=Name(id='o', ctx=Load()), attr='name', ctx=Load())], keywords=[keyword(arg='index', value=Constant(value=False))])), Assign(targets=[Name(id='filename', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='na', ctx=Load()), conversion=-1), Constant(value='.csv')]))]), Assign(targets=[Name(id='ke', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='s3_client', ctx=Load()), attr='upload_file', ctx=Load()), args=[], keywords=[keyword(arg='Bucket', value=Attribute(value=Name(id='self', ctx=Load()), attr='bucket', ctx=Load())), keyword(arg='Key', value=Name(id='ke', ctx=Load())), keyword(arg='Filename', value=Attribute(value=Name(id='o', ctx=Load()), attr='name', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='_check_bucket', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ͽ      ǖ 9   ʘ    ȱƨ      ')), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='s3_client', ctx=Load()), attr='head_bucket', ctx=Load()), args=[], keywords=[keyword(arg='Bucket', value=Attribute(value=Name(id='self', ctx=Load()), attr='bucket', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ClientError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueEr', ctx=Load()), args=[JoinedStr(values=[Constant(value='Error occurred during checking bucket: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bucket', annotation=Name(id='str', ctx=Load())), arg(arg='experiments_f', annotation=Name(id='str', ctx=Load())), arg(arg='CONFIG', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='gzip', annotation=Name(id='boolsrNt', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value="C͍reate insͪtance of S3FileLogger.\n\nParameters\n----------\nbucket:\n    name ofƁ the S3 Ȣbucket\nexperiments_folder:\n    path to folder to create experi˼ment in\nconfig:\n    a dictionary-like object for saving iˈnput¦ˇs ůto you\x90r job,\n   Ũ like hyperparameters for a\x80 model or settings for a data preprocessing job\ngzip:\n˺   ̗ indicator wheth̔er to use compression dʖuring saθving tables oʂr( not\n\n\nR\x87aises\n--ɖ----\nVal˷ueErrƂoâr:\n Ƃ   if environment variableʍ ``enȰdpoiÈnt_url`` isn't set\nValueError:\n    iƖf environment v7ariable ``aws_access_key_id`͊` isn't s$et\nValueăError˶:\n    ϶if enviroϓnment variaϿble ͮ`˲`awsÍ_secret_acceÀsǷs_key`` isn't set\nValueError:\n    if bucket doesn't exist")), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bucket', ctx=Store())], value=Name(id='bucket', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='experiments_folder', ctx=Store())], value=Name(id='experiments_f', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Store())], value=Name(id='CONFIG', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='s3_client', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_s3_client', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='gzip', ctx=Store())], value=Name(id='gzip', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_bucket', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='cur_datet', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='subfolder_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='cur_datet', ctx=Load()), attr='strftime', ctx=Load()), args=[Name(id='DATETIME_FORMAT', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='experiment_folder', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='experiments_f', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='subfolder_name', ctx=Load()), conversion=-1)])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_config', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='start_experiment', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='job_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='groupvPN', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], vararg=arg(arg='arg'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="ȅ7StaȖrϚt exßper̗imȠenæƄtĵ ʕwȪ˷ȱith\x82Ύinƞ͒ ΓcρurƐɃˮrentȏ ·e̛x¨pȴʕ=ΏƉŪŽʞerʦiŢďmeɿ̓nǴ˟Ⱦt¯@ŏȗ˝,͓ȏʙ ʊiϚt is uʰɶȼsƗe\x9ad\u0378͋ ̷ṷ̈̀foɚr ȉΆ¾Ȁ!s#epaƵ̝ra̦t¾e difȹ̛fχerʰ¯entΜ ̬˴ͥfıö́źl˂dsƥē d˒uriněgʉ\x7fȎħ backtestǇɺŭ.\n̡\nľÂAĺƶȕɮs ŴζϖΕέa¦ ˽rɵʩesϿult,͞ ͅ``ksewlf.exţperimeƾnt_fo͟lǵdeķr`` ƛkey i¿s ext˭endŔeδd̦\x97 w˵i̜Ͱth ˾``Ǟjobɨ_ʙǃt½Ǹnype/ŹƏėgroͨʹɩu͜pǵ5`Ȁ`.\n\nõ̿* I»Ħf Ȭ`Ĳ`Ȫjɝ˛:ƛɅʨobɩ_It͆yǔpǫe`` orĸŘ `×`gØ̮rŅoup`` i˲sǕ͈LnÚ§'ˉ˛˖͗tʍÐ sǟḛĺt theƉ\xa0n keZûy i¯Çsŀ̈ exɃtendʛed ϸȬwith ɧone8 İv¾alƢǤɭͲuôǠe.\n\n*hțK IϛfƄ noneά ɫËo\x8ef ̍``j\x91obĄ̄_tyˆpe\x99`` \x86an¬d ʋ\x95``ϲϯɤsegěr˗oup`` i̊ˌ0sȊ setî ʨthɲȖæen ˲`\u038d`ƴ͋sϰelȔf.\u0381eː²ξxpeõriment5ϩʙΤş_fol̳3ʐdɗerƶ`` iò͛sėȿǏ noǫtƷ eɅ7xtenϙϺȸŅded.\nͫυ\nƲPaˢȫrÊʛnaĒʢmetƊŲerƞs[ǵ\n--Ǫ-----ȸϔ̚-ɪ--\njob_type\u0381:\nͯ    SpecifWϘ˞Ĺy thĸe ЀͫtϤypde ʻǸoĞĻf ɔrun,Ɗ! whi͍c\u0381ńh is usçefǵϹuöċl when you're gé\x9eroΘýupin̏ōg ruƇŶns ϣίXɼtoΕņgeƬđƴ˟thˉeƢʟrXˁ\nŖ  ͞  into laƿʫreɑˮŁg̑͢e̋r ȍexpeŸͼriĨmeϱʧænts ŉusi£ng g\x88Xɧkroup.̛̳\x8d\ngroͱui÷pĝȨ:ͫ\n   ù ̛SpeǥčΈify˨͵ǝ a gȉɸroupp` Ͱto ù˽orǀg\x8eϣa͟nεizǓe ͚iΦn®qZɼɕdςǡividual ëǵruʧEns ĩȋn˭to aÚΰ larȪϣger exǮpe\x87rimͤϜent.ʷƠɟ")), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='job_type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='groupvPN', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=Call(func=Name(id='copy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='experiment_folder', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='job_type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='experiment_folder', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='groupvPN', ctx=Load()), conversion=-1)]))], orelse=[If(test=Compare(left=Name(id='groupvPN', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='experiment_folder', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='job_type', ctx=Load()), conversion=-1)]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='experiment_folder', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='job_type', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='groupvPN', ctx=Load()), conversion=-1)]))])])])], decorator_list=[])], decorator_list=[])], type_ignores=[])