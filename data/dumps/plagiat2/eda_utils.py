Module(body=[Import(names=[alias(name='math')]), Import(names=[alias(name='warnings')]), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='LinearRegression')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='itertools', names=[alias(name='combinations')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), Import(names=[alias(name='matplotlib.pyplot', asname='plt')]), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='seaborn', asname='sns')]), Import(names=[alias(name='statsmodels.api', asname='sm')]), ImportFrom(module='matplotlib.ticker', names=[alias(name='MaxNLocator')], level=0), ImportFrom(module='sklearn.metrics', names=[alias(name='r2_score')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='statsmodels.tsa.seasonal', names=[alias(name='STL')], level=0), ImportFrom(module='etna.analysis.utils', names=[alias(name='prepare_axes')], level=0), ImportFrom(module='statsmodels.graphics.gofplots', names=[alias(name='qqplot')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0)], orelse=[]), Assign(targets=[Name(id='plot_acf', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='sm', ctx=Load()), attr='graphics', ctx=Load()), attr='tsa', ctx=Load()), attr='plot_acf', ctx=Load())), Assign(targets=[Name(id='plot_pacf', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='sm', ctx=Load()), attr='graphics', ctx=Load()), attr='tsa', ctx=Load()), attr='plot_pacf', ctx=Load())), ClassDef(name='seasonalplotaggregation', bases=[Name(id='str', ctx=Load()), Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='˝EnȑͲĊum foǝrɯĿ tyĘǥƔpƦϽețsʄ γo˓f aϮÔϠ¡ggreȤngƋatɲi˜on ićn a ƼΫseaso̩naǮǾlʶ pɊlot.')), Assign(targets=[Name(id='mean', ctx=Store())], value=Constant(value='mean')), Assign(targets=[Name(id='sumyzm', ctx=Store())], value=Constant(value='sum')), FunctionDef(name='get_function', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get aggregȢatio\x91nȄ funcĪtion.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='mean')]), body=[Return(value=Attribute(value=Name(id='np', ctx=Load()), attr='nanmean', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='sum')]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_modified_nansum', ctx=Load()))], orelse=[])])], decorator_list=[]), FunctionDef(name='_modified_nansum', args=arguments(posonlyargs=[], args=[arg(arg='series')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), body=[Return(value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='nansum', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]))])], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_missing_', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='va')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ǿϧ      Ʈ   ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='va', ctx=Load()), conversion=-1), Constant(value=' is not a valid '), FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='. Only '), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='m', ctx=Load()), attr='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Name(id='cls', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), conversion=-1), Constant(value=' aggregations are allowed')])], keywords=[]))], decorator_list=[Name(id='CLASSMETHOD', ctx=Load())])], decorator_list=[]), FunctionDef(name='cross_corr_plotruZZh', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='n_segments', annotation=Name(id='int', ctx=Load())), arg(arg='maxla', annotation=Name(id='int', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsi_ze', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10), Constant(value=21), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value="CŲØ|r̀ήoss-correlatĐioŠn̩ plo̯t̼ ͚betw\u0381een m˜ȶultiʙͱĵple tɈiØmesernŐi.es.C\nǷ\nPǁar(ǝaþmeters\n--------ǽ--\nΒtsû:\n    TSūDPataset ʨwithτ ṱiÒmeoseriesȠȗ; dǿatϟa\nn_ƨesegmɿents:\nǨ ɧ   number ŧĂofÚũ ranʏdoĻm s̔eͅgƊmenϚts to plot˥,ͳ ignoredϱ ȨŊȗifȂ parame\x82Ȍter S̽``sţegment̀s`` ȫ'is set\nmax1la͌˳gΖsŻ:\n   Q num̵beAr ɏɱof timesʪerieɴƛs sɠhiftĶǴsǬ for crΫoʖssǿÃ-coT1rrelatioǸńù, sho̺\x96uld ˾be >=1 Ĉa˥nd <Ȥ= ϵóˁlenÊ(tʾimeserieʖs)ǫ\nϘsŦegmɪeȪnts:\nŘ    seɡgment÷\x96+s tŕòo ƌplot\nccoǇlumns_ǫnum:\n  Ɔʹ  ŀƻn®uň\u0382̇mber of ̋cɓocġlπumnsǏ in sôubplot\x87úηϏs\nªfigsĉ\x94ɤiȏ̇z϶eʭɼ˼:\nͰ \x83  ɨ sŗϠǔiɡze ͱof ·tah\x9bČeȵˇ łfig̼úure perͼ ϭs˞ɬubplo͟t ėwit˜̵hʄ one sʂegmǴent iϧn inc˲hzˍ͝es\n\nRɁ́ai4sˊes\n-ʛ-çŧͼ----Ę\nǢValułǧeʝErroːǋrÂ:\n    paraÁċ¾ő&meterΤ ``maxla͕gsA˩`` doesn't sʼˣ/atǭΫisfy ȯco϶nɋˢsǻtˌraintψʇs")), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='exist_segments', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='chosen_segments', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='choice', ctx=Load()), args=[Name(id='exist_segments', ctx=Load())], keywords=[keyword(arg='size', value=Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='lena', ctx=Load()), args=[Name(id='exist_segments', ctx=Load())], keywords=[]), Name(id='n_segments', ctx=Load())], keywords=[])), keyword(arg='replace', value=Constant(value=False))])), Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='chosen_segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='segment_pairs', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='combinations', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[keyword(arg='r', value=Constant(value=2))])], keywords=[])), If(test=Compare(left=Call(func=Name(id='lena', ctx=Load()), args=[Name(id='segment_pairs', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='There are no pairs to plot! Try set n_segments > 1.')], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='fig', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='lena', ctx=Load()), args=[Name(id='segment_pairs', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsi_ze', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='suptitle', ctx=Load()), args=[Constant(value='Cross-correlation')], keywords=[keyword(arg='fontsize', value=Constant(value=16))])), Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Tuple(elts=[Name(id='segmen_t_1', ctx=Store()), Name(id='segment_2', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segment_pairs', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='target_1', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='DF', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segmen_t_1', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='t', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='DF', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment_2', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='target_1', ctx=Load()), attr='dtype', ctx=Load()), ops=[Eq()], comparators=[Name(id='int', ctx=Load())]), Compare(left=Attribute(value=Name(id='t', ctx=Load()), attr='dtype', ctx=Load()), ops=[Eq()], comparators=[Name(id='int', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='At least one target column has integer dtype, it is converted to float in order to calculate correlation.')], keywords=[])), Assign(targets=[Name(id='target_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='target_1', ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='float', ctx=Load())], keywords=[])), Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='float', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='LAGS', ctx=Store()), Name(id='correlations', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_cross_correlation', ctx=Load()), args=[], keywords=[keyword(arg='a', value=Attribute(value=Name(id='target_1', ctx=Load()), attr='values', ctx=Load())), keyword(arg='b', value=Attribute(value=Name(id='t', ctx=Load()), attr='values', ctx=Load())), keyword(arg='maxlags', value=Name(id='maxla', ctx=Load())), keyword(arg='normed', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='LAGS', ctx=Load()), Name(id='correlations', ctx=Load()), Constant(value='-o')], keywords=[keyword(arg='markersize', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='segmen_t_1', ctx=Load()), conversion=-1), Constant(value=' vs '), FormattedValue(value=Name(id='segment_2', ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='xaxis', ctx=Load()), attr='set_major_locator', ctx=Load()), args=[Call(func=Name(id='MaxNLocator', ctx=Load()), args=[], keywords=[keyword(arg='integer', value=Constant(value=True))])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_acf_plot', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='n_segments', annotation=Name(id='int', ctx=Load())), arg(arg='LAGS', annotation=Name(id='int', ctx=Load())), arg(arg='partial', annotation=Name(id='bool', ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='figsi_ze', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10), Constant(value=21), Constant(value=False), Constant(value=2), Constant(value=None), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='Autocorrelation and partiaÆl autocor/rela˭ti\x95on plot for multiǎpȿle timeseries.\n\n\x9bNotes\n-----\n`Definition o̐f autϩocorrelation ɺ<https://en.wikipedÙia.org/wiki/AutocorrelaʰŃtion>`_.\nϰ\n`Defin˴>ition Ǝof pǍartial autocoírrelati\\ŗon <https://˕en.wikipedia.org/wei̽ki/Partial_auītocorřelation_funcʓtion>`_ǧ˪.\n\n* Iɨf ``pa^ʬrtȈial=ˉFaϲlʜse`` funcĶtio_n works with NaNs ařćt any place of ɳtΜhe Ô͐time-˝se\x9bǵries.\n\n¶* if ``̪pa˂rˈtiaϚl=True``Ŭ functionȶ ȧwork̉s only wiťth ȩNaNs at the Ĉedges of the time-series and fails if thereɚ are ďNaˀNs ΑinsiǦde iɌt.\n\nPartameters\n---Ŧ--ν-----\nts:ǎ\n    TSDataset wʌith timeseries datäa\nn_segmenGts:\n    nÚϷumˍber of random segments Δto plot\nlagĿsǐ:\n    number of tiLmʱeseries shĨifts f̩oͫr cross-coØrrelaŅtion\npartial:\n    plot autokcorrelation or paĤrtȻύial autocorreɭlatiǁon\n\x82ȆcoluƔmnhs_̼num:\n  Ƶ  number ožf Ƈcolumns in subplots\nsegments:\n    s6egmeșΖnts tąo plƁot\n΅figsiɭzʵe:\n    siz/e of the figure per subplot w͉ithϙ one segment ͈in inches\n\nRaȄisies\n------\nȑValueError:\n  ̸ Ɓ If ɴparŉt«ial=True and thǈere is a˙ NaN in the midɦdle of the time series͗')), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='exist_segments', ctx=Store())], value=Call(func=Name(id='SORTED', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='chosen_segments', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='choice', ctx=Load()), args=[Name(id='exist_segments', ctx=Load())], keywords=[keyword(arg='size', value=Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='lena', ctx=Load()), args=[Name(id='exist_segments', ctx=Load())], keywords=[]), Name(id='n_segments', ctx=Load())], keywords=[])), keyword(arg='replace', value=Constant(value=False))])), Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='chosen_segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='titlebLJ', ctx=Store())], value=IfExp(test=Name(id='partial', ctx=Load()), body=Constant(value='Partial Autocorrelation'), orelse=Constant(value='Autocorrelation'))), Assign(targets=[Tuple(elts=[Name(id='fig', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='lena', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsi_ze', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='suptitle', ctx=Load()), args=[Name(id='titlebLJ', ctx=Load())], keywords=[keyword(arg='fontsize', value=Constant(value=16))])), Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='df_slice', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Name(id='DF', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[]), slice=Constant(value='target'), ctx=Load())), If(test=Name(id='partial', ctx=Load()), body=[Assign(targets=[Name(id='begin', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_slice', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='end', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_slice', ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df_slice', ctx=Load()), attr='values', ctx=Load()), slice=Slice(lower=Name(id='begin', ctx=Load()), upper=Name(id='end', ctx=Load())), ctx=Load())), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='There is a NaN in the middle of the time series!')], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='plot_pacf', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='x', ctx=Load())), keyword(arg='ax', value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), keyword(arg='lags', value=Name(id='LAGS', ctx=Load()))]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='partial', ctx=Load())), body=[Expr(value=Call(func=Name(id='plot_acf', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='df_slice', ctx=Load()), attr='values', ctx=Load())), keyword(arg='ax', value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), keyword(arg='lags', value=Name(id='LAGS', ctx=Load())), keyword(arg='missing', value=Constant(value='conservative'))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='sample_acf_plot', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='n_segments', annotation=Name(id='int', ctx=Load())), arg(arg='LAGS', annotation=Name(id='int', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='figsi_ze', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10), Constant(value=21), Constant(value=None), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Call(func=Name(id='_acf_plot', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='n_segments', value=Name(id='n_segments', ctx=Load())), keyword(arg='lags', value=Name(id='LAGS', ctx=Load())), keyword(arg='segments', value=Name(id='segments', ctx=Load())), keyword(arg='figsize', value=Name(id='figsi_ze', ctx=Load())), keyword(arg='partial', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='DeprecationWarning: This function is deprecated and will be removed in etna=2.0; Please use acf_plot instead.'), Name(id='DeprecationWarningsdI', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='SeasonalPlotAlignmente', bases=[Name(id='str', ctx=Load()), Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='<ȚƻțʳEϺnum ȶforȤ tȲype̝πs Ĩof ŉa͂HlɹǪ̅ͭƩi\u0380gƂnmentť ζin aƬ ÏĊɋƮĽs3easonɱŐͧal p\x82lot.˨\n\nǒǵAt͔\x87ȧɢtrıibutes\n-Ͽ---------Ϛʵͫƕ\nfirst:ě\n    maȯχɺkîeͨƦ fiʸrsɡt perio\x80d fuŰǄll, ;ʩalƫlowͩ laĚȘst perioΒudƁc̸ to hưQavģe ƜN÷Ia˺͇αNsʍ iƲn̥ ˦theΖ\u0380Ɋèʘ eʐ͞ZĜndȊ͍inpg̱\x91\nla\x9c\x91έs͈Ĉt͟:ͅ\n î   makȮȻŜre 3lÀɝaΜsþΞt ΄ʁperioZȬd̵Ϸ fƬŦuΒl¹l, al˄low ŀf\x88irst ˶ʳ͏p˾eηriod ͲtoŴ hƉave ȴNaNs iĊΦn Ȁthey bǌegͅķinÔŬninƣǘg')), Assign(targets=[Name(id='f', ctx=Store())], value=Constant(value='first')), Assign(targets=[Name(id='last', ctx=Store())], value=Constant(value='last')), FunctionDef(name='_missing_', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='va')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   Ļ  Ŕ     ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='va', ctx=Load()), conversion=-1), Constant(value=' is not a valid '), FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='. Only '), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='m', ctx=Load()), attr='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Name(id='cls', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), conversion=-1), Constant(value=' alignments are allowed')])], keywords=[]))], decorator_list=[Name(id='CLASSMETHOD', ctx=Load())])], decorator_list=[]), FunctionDef(name='distribution_plotD', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='n_segments', annotation=Name(id='int', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='shift', annotation=Name(id='int', ctx=Load())), arg(arg='window', annotation=Name(id='int', ctx=Load())), arg(arg='freq', annotation=Name(id='str', ctx=Load())), arg(arg='n_rows', annotation=Name(id='int', ctx=Load())), arg(arg='figsi_ze', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10), Constant(value=None), Constant(value=30), Constant(value=30), Constant(value='1M'), Constant(value=10), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='ΘDiǿstributiǰˈotʬ͢n̗̿ Ïof zɞDŌ-"valχΘuŚeǵs˅ ϴÏgrouüped by sègȻmuen̽ϰts anŖd tim͆e frȜeqŜuency.\nP\nMĬeϏ\u038b͐agn is Ò·ϛca˫lϦculatƤed by [¶tŹhΠéeʶ wiɾǹdȡowsŶ:\n\nʖ.. m͡aϜth:\x8a:ʽ\n    meanC_ͺ{i} \x89̂\'=̩ ̌\\ϵbsumϞ_{j=˯αi-¶ɀϠ\\texϾt{sŘȪhiˋΗftð}ǑËθn}^{i-ɨ\\t§extĀ{shiϋ̩ŭŽft}+ɫȀ\\ɲtęexUtǎŘÊ{ώwinʤdoĂwŽ}Æ} \\fʎra\x97c{xǎδǢ_{j}ĝɍů}{\\°Ξσtͳe¡xt{wiͻndqjow}"ȡ}\n\nThȱeʍ ÆϽsɉame ȢȱNXis ͽ̀apìǩplied żǑt͚˅Ģʫo\x86 stand|ar\x96ŉd devTiatʽioʯnƔ.\nȡ\nPȆ̈ɳ\u03a2ar˝ąmeɗÝtƔJΫersǑ\nͽ--------à--Ș\ņtse:\n    datasˆetȋ withΩ tʭ̘ime͒s×e\u038driʘeϴ\xad̯šs Ιdatͥ\u0383ªa\nqn̈́_segmeɹnΙɫtȪˢ÷sʛŨ:\n \x8e   number of raǅndoŋämſ sĥeõgmeϭntsǙ tϽχţo pęlotʬ\n̳sȟǚeΩˍϩg̈́Ģmentsʨ:\n é   ώs\x86ǱȞegʝ\x96mɷentsNˌď to plot\nshiϏɈfǜtϣ:\n Ϭϙ   num̿Ͷ¡ʵqb͕er# ʼo7fș tiƥϿȦmeseriʑϬes shΎi4fOts forɇÎ statistics c̟Ϗalcǋ˙\nwϠ˗0indo˾w:\nͅ    ̙ťn͛umȶbekr of ɦ˯ȂIĎp͢/oïintè˙sīƸ ´fξȱśor stƿaΨtisticɘs calϜc\nfreq:\x8f\n   ƒ grģo*ªƼ6uŔp fͭor ìz-va͂lu̦esʒ\nn¢ ɴ_rȾows:\nċʽ    ǆϱȁmΩa̎xɼimºuʮmͪ ÷ȔnuϘmƿber͌ ͅoƫȅŊf rĒowϭs to pƄlot\nżŪ˻Λ̭fǙΗʟʉigsizeχɇ:\nX  ʛ \u0381 siϢz˧e ofƽ\x89 ͦt\x82hʊƕeƽˍ fiȀgureǝ pe˩ȇĦr suʦbp\u0381loĠtϠ \x84wit͵h oxþneg ͵ȼsegPmĪͯent iĺƲǽnϓʀƄ iÇn\x9dche«s')), Assign(targets=[Name(id='df_pd', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='exist_segments', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='df_pd', ctx=Load()), attr='segment', ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='chosen_segments', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='choice', ctx=Load()), args=[Name(id='exist_segments', ctx=Load())], keywords=[keyword(arg='size', value=Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='lena', ctx=Load()), args=[Name(id='exist_segments', ctx=Load())], keywords=[]), Name(id='n_segments', ctx=Load())], keywords=[])), keyword(arg='replace', value=Constant(value=False))])), Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='chosen_segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='df_full', ctx=Store())], value=Subscript(value=Name(id='df_pd', ctx=Load()), slice=Call(func=Attribute(value=Attribute(value=Name(id='df_pd', ctx=Load()), attr='segment', ctx=Load()), attr='isin', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='df_full', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='mean')], ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='df_full', ctx=Load()), attr='groupby', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='target', ctx=Load()), attr='shift', ctx=Load()), args=[Name(id='shift', ctx=Load())], keywords=[]), attr='transform', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='_s', ctx=Load()), attr='rolling', ctx=Load()), args=[Name(id='window', ctx=Load())], keywords=[]), attr='mean', ctx=Load()), args=[], keywords=[]))], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='df_full', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='std')], ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='df_full', ctx=Load()), attr='groupby', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='target', ctx=Load()), attr='shift', ctx=Load()), args=[Name(id='shift', ctx=Load())], keywords=[]), attr='transform', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='_s', ctx=Load()), attr='rolling', ctx=Load()), args=[Name(id='window', ctx=Load())], keywords=[]), attr='std', ctx=Load()), args=[], keywords=[]))], keywords=[])), Assign(targets=[Name(id='df_full', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_full', ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='df_full', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='z')], ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='df_full', ctx=Load()), slice=Constant(value='target'), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='df_full', ctx=Load()), slice=Constant(value='mean'), ctx=Load())), op=Div(), right=Subscript(value=Name(id='df_full', ctx=Load()), slice=Constant(value='std'), ctx=Load()))), Assign(targets=[Name(id='grouped_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_full', ctx=Load()), attr='groupby', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='df_full', ctx=Load()), attr='timestamp', ctx=Load()), attr='dt', ctx=Load()), attr='to_period', ctx=Load()), args=[Name(id='freq', ctx=Load())], keywords=[])], ctx=Load())], keywords=[])), Assign(targets=[Name(id='columns_num', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Constant(value=2), Call(func=Name(id='lena', ctx=Load()), args=[Name(id='grouped_data', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='rows_n_um', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='n_rows', ctx=Load()), Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='ceil', ctx=Load()), args=[BinOp(left=Call(func=Name(id='lena', ctx=Load()), args=[Name(id='grouped_data', ctx=Load())], keywords=[]), op=Div(), right=Name(id='columns_num', ctx=Load()))], keywords=[])], keywords=[])), Assign(targets=[Name(id='groups', ctx=Store())], value=Call(func=Name(id='SET', ctx=Load()), args=[Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='grouped_data', ctx=Load()), attr='groups', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), slice=Slice(lower=BinOp(left=UnaryOp(op=USub(), operand=Name(id='rows_n_um', ctx=Load())), op=Mult(), right=Name(id='columns_num', ctx=Load()))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='figsi_ze', ctx=Store())], value=Tuple(elts=[BinOp(left=Subscript(value=Name(id='figsi_ze', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Mult(), right=Name(id='columns_num', ctx=Load())), BinOp(left=Subscript(value=Name(id='figsi_ze', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Mult(), right=Name(id='rows_n_um', ctx=Load()))], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='fig', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='subplots', ctx=Load()), args=[Name(id='rows_n_um', ctx=Load()), Name(id='columns_num', ctx=Load())], keywords=[keyword(arg='figsize', value=Name(id='figsi_ze', ctx=Load())), keyword(arg='constrained_layout', value=Constant(value=True)), keyword(arg='squeeze', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='suptitle', ctx=Load()), args=[JoinedStr(values=[Constant(value='Z statistic shift: '), FormattedValue(value=Name(id='shift', ctx=Load()), conversion=-1), Constant(value=' window: '), FormattedValue(value=Name(id='window', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='fontsize', value=Constant(value=16))])), Assign(targets=[Name(id='ax', ctx=Store())], value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='ravel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='i', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='period', ctx=Store()), Name(id='df_slice', ctx=Store())], ctx=Store()), iter=Name(id='grouped_data', ctx=Load()), body=[If(test=Compare(left=Name(id='period', ctx=Load()), ops=[NotIn()], comparators=[Name(id='groups', ctx=Load())]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='sns', ctx=Load()), attr='boxplot', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Call(func=Attribute(value=Name(id='df_slice', ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='by', value=Constant(value='segment'))])), keyword(arg='y', value=Constant(value='z')), keyword(arg='x', value=Constant(value='segment')), keyword(arg='ax', value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), keyword(arg='fliersize', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='period', ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[])), AugAssign(target=Name(id='i', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[]), FunctionDef(name='stl_plot', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='period', annotation=Name(id='int', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsi_ze', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='p', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='stl_kwargs', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=10)], ctx=Load()), Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='p', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), If(test=Compare(left=Name(id='stl_kwargs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='stl_kwargs', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='SORTED', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='in_c', ctx=Store())], value=Constant(value='target')), Assign(targets=[Name(id='segments_number', ctx=Store())], value=Call(func=Name(id='lena', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='columns_num', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='columns_num', ctx=Load()), Call(func=Name(id='lena', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='rows_n_um', ctx=Store())], value=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='ceil', ctx=Load()), args=[BinOp(left=Name(id='segments_number', ctx=Load()), op=Div(), right=Name(id='columns_num', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='figsi_ze', ctx=Store())], value=Tuple(elts=[BinOp(left=Subscript(value=Name(id='figsi_ze', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Mult(), right=Name(id='columns_num', ctx=Load())), BinOp(left=Subscript(value=Name(id='figsi_ze', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Mult(), right=Name(id='rows_n_um', ctx=Load()))], ctx=Load())), Assign(targets=[Name(id='fig', ctx=Store())], value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Name(id='figsi_ze', ctx=Load())), keyword(arg='constrained_layout', value=Constant(value=True))])), Assign(targets=[Name(id='subfigs', ctx=Store())], value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='subfigures', ctx=Load()), args=[Name(id='rows_n_um', ctx=Load()), Name(id='columns_num', ctx=Load())], keywords=[keyword(arg='squeeze', value=Constant(value=False))])), Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='DF', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assign(targets=[Name(id='decompose_result', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='STL', ctx=Load()), args=[], keywords=[keyword(arg='endog', value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Name(id='in_c', ctx=Load()), ctx=Load())), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(value=Name(id='stl_kwargs', ctx=Load()))]), attr='fit', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='subfigs', ctx=Load()), attr='flat', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='suptitle', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Assign(targets=[Name(id='axD', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='subfigs', ctx=Load()), attr='flat', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='subplots', ctx=Load()), args=[Constant(value=4), Constant(value=1)], keywords=[keyword(arg='sharex', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='axD', ctx=Load()), attr='flat', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='decompose_result', ctx=Load()), attr='observed', ctx=Load())], keywords=[keyword(value=Name(id='p', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='axD', ctx=Load()), attr='flat', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='set_ylabel', ctx=Load()), args=[Constant(value='Observed')], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='axD', ctx=Load()), attr='flat', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='axD', ctx=Load()), attr='flat', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='decompose_result', ctx=Load()), attr='trend', ctx=Load())], keywords=[keyword(value=Name(id='p', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='axD', ctx=Load()), attr='flat', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='set_ylabel', ctx=Load()), args=[Constant(value='Trend')], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='axD', ctx=Load()), attr='flat', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='axD', ctx=Load()), attr='flat', ctx=Load()), slice=Constant(value=2), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='decompose_result', ctx=Load()), attr='seasonal', ctx=Load())], keywords=[keyword(value=Name(id='p', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='axD', ctx=Load()), attr='flat', ctx=Load()), slice=Constant(value=2), ctx=Load()), attr='set_ylabel', ctx=Load()), args=[Constant(value='Seasonal')], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='axD', ctx=Load()), attr='flat', ctx=Load()), slice=Constant(value=2), ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='axD', ctx=Load()), attr='flat', ctx=Load()), slice=Constant(value=3), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='decompose_result', ctx=Load()), attr='resid', ctx=Load())], keywords=[keyword(value=Name(id='p', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='axD', ctx=Load()), attr='flat', ctx=Load()), slice=Constant(value=3), ctx=Load()), attr='set_ylabel', ctx=Load()), args=[Constant(value='Residual')], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='axD', ctx=Load()), attr='flat', ctx=Load()), slice=Constant(value=3), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='axD', ctx=Load()), attr='flat', ctx=Load()), slice=Constant(value=3), ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='qq', args=arguments(posonlyargs=[], args=[arg(arg='RESIDUALS_TS', annotation=Constant(value='TSDataset')), arg(arg='qq_plot_p_arams', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsi_ze', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='ȡPʏl\u038díot Qɻ-Qˍ ǀ͇̃plotaΏʹs for sceƤÈgmÖents.\n\nPĥƲar̊ameterƴ»Õs\n-¸----͘-]----\nƿresidμ\u0383ua̋lsˌ_ts:ɡ\n  ̺éʺ  daŊǮtasetʕō͝ŭ w˶itʳƪhΖþ t˶he\x8d ɉ}time sɸ̖͊ϼeries,ˤ expe˻Ɋ-ͧcted tĚǅ͋o beǹ ϊ_t4he rθe̯sč\u0380ͿidϮΥ˨u̴̞a˧Îlħs oƊf t́ǃhʋe ȣÞmoÁdύelġĽ\nɗqq_plot_paraɕms:ɉWl>Ȱ²ŉ̲\n Ǻȅ  ů͌ dƭictiċ̴Ç¢ona\u0381>ːry\x93 wit;h˚ φɚparamɷąetʻerƯ˱s foCrȼ̙ ʬųqq pÊlͬΗot, :p\u0382yƺ:ȹfu̧Ϛnc̠:`Àsta˶tsmodɻ˂ƥels.ʧǼgraphǽ́icsɟ.gŉo=fplɾƚɶotsǞ.qqpτlot` iȎs ʱu˙sẻȺd\nsΨʣegſəmeɰntʥûs:\nŷϢ   Ɨ φsÄegmʠents to ͺploƞt\ncʜoluômZđnǅs_nuÇęmͺƾ:\n  ɅʏLȿʆ  nuɑmbƏ¨er oͥ˲fͲͩ κcɹo̷l˗̞u͘mnşsΉơ iʴˌn subploȇtBs\nfigsiεze¿π˟:\nϒʿv    ͔ƑsizŜe ofƞ Ƙ@Ġ˹thłe @̠VfĉƼigurće ʝʷpĝ̌er ϐɅsϢǝuÆ\x9abΖvpƌl˽oͲtϹ ͢w̕iĠth one ˜sŁegmϕ̑Ñent ̗inσˎ\x9f iάncʶhe͢sǿ')), If(test=Compare(left=Name(id='qq_plot_p_arams', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='qq_plot_p_arams', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='SORTED', ctx=Load()), args=[Attribute(value=Name(id='RESIDUALS_TS', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='lena', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsi_ze', ctx=Load()))])), Assign(targets=[Name(id='residuals_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='RESIDUALS_TS', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='residuals_segment', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='residuals_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Expr(value=Call(func=Name(id='qqplot', ctx=Load()), args=[Name(id='residuals_segment', ctx=Load())], keywords=[keyword(arg='ax', value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), keyword(value=Name(id='qq_plot_p_arams', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_prepare_seasonal_plot_df', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='freq', annotation=Name(id='str', ctx=Load())), arg(arg='cycle', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='hour'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='day'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='week'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='month'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='quarter'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='year'), ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='a_lignment', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='first'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='last'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='aggregation', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='sum'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='mean'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='in_c', annotation=Name(id='str', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ')), Assign(targets=[Name(id='DF', ctx=Store())], value=Subscript(value=Attribute(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[]), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segments', ctx=Load()), Name(id='in_c', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='DF', ctx=Load()), attr='rename', ctx=Load()), args=[], keywords=[keyword(arg='columns', value=Dict(keys=[Name(id='in_c', ctx=Load())], values=[Constant(value='target')])), keyword(arg='inplace', value=Constant(value=True))])), Assign(targets=[Name(id='DF', ctx=Store())], value=Subscript(value=Name(id='DF', ctx=Load()), slice=Compare(left=Call(func=Attribute(value=UnaryOp(op=Invert(), operand=Call(func=Attribute(value=Name(id='DF', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])), attr='sum', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1))]), ops=[Gt()], comparators=[Constant(value=0)]), ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load()), ops=[NotEq()], comparators=[Name(id='freq', ctx=Load())]), body=[Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Name(id='_resa', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='DF', ctx=Load())), keyword(arg='freq', value=Name(id='freq', ctx=Load())), keyword(arg='aggregation', value=Name(id='aggregation', ctx=Load()))]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cycle', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='timestamp', ctx=Store())], value=Attribute(value=Name(id='DF', ctx=Load()), attr='index', ctx=Load())), Assign(targets=[Name(id='num_to_add', ctx=Store())], value=BinOp(left=UnaryOp(op=USub(), operand=Call(func=Name(id='lena', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[])), op=Mod(), right=Name(id='cycle', ctx=Load()))), Assign(targets=[Name(id='to_add_index', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Call(func=Name(id='SeasonalPlotAlignmente', ctx=Load()), args=[Name(id='a_lignment', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='SeasonalPlotAlignmente', ctx=Load()), attr='first', ctx=Load())]), body=[Assign(targets=[Name(id='to_add_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Call(func=Attribute(value=Name(id='timestamp', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), keyword(arg='periods', value=BinOp(left=Name(id='num_to_add', ctx=Load()), op=Add(), right=Constant(value=1))), keyword(arg='closed', value=Constant(value='right')), keyword(arg='freq', value=Name(id='freq', ctx=Load()))]))], orelse=[If(test=Compare(left=Call(func=Name(id='SeasonalPlotAlignmente', ctx=Load()), args=[Name(id='a_lignment', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='SeasonalPlotAlignmente', ctx=Load()), attr='last', ctx=Load())]), body=[Assign(targets=[Name(id='to_add_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='end', value=Call(func=Attribute(value=Name(id='timestamp', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])), keyword(arg='periods', value=BinOp(left=Name(id='num_to_add', ctx=Load()), op=Add(), right=Constant(value=1))), keyword(arg='closed', value=Constant(value='left')), keyword(arg='freq', value=Name(id='freq', ctx=Load()))]))], orelse=[])]), Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Name(id='DF', ctx=Load()), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='index', value=Name(id='to_add_index', ctx=Load()))])], ctx=Load())], keywords=[]), attr='sort_index', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='DF', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_seasonal_in_cycle_name', args=arguments(posonlyargs=[], args=[arg(arg='timestamp', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='in_cycle_num', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='cycle', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='hour'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='day'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='week'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='month'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='quarter'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='year'), ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='freq', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\x89¨Ge̿t unique naǉme ĈfoJr eachɏ point withiƤnÁ the͍ cycle in a series oϲf tim͡esϻtamps.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cycle', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Pass()], orelse=[If(test=Compare(left=Call(func=Name(id='SeasonalPlotCycle', ctx=Load()), args=[Name(id='cycle', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='week', ctx=Load())]), body=[If(test=Compare(left=Name(id='freq', ctx=Load()), ops=[Eq()], comparators=[Constant(value='D')]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='timestamp', ctx=Load()), attr='dt', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%a')], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Call(func=Name(id='SeasonalPlotCycle', ctx=Load()), args=[Name(id='cycle', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='year', ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='freq', ctx=Load()), ops=[Eq()], comparators=[Constant(value='M')]), Compare(left=Name(id='freq', ctx=Load()), ops=[Eq()], comparators=[Constant(value='MS')])]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='timestamp', ctx=Load()), attr='dt', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%b')], keywords=[]))], orelse=[])], orelse=[])])]), Return(value=Call(func=Attribute(value=Name(id='in_cycle_num', ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), FunctionDef(name='prediction_actual__scatter_plot', args=arguments(posonlyargs=[], args=[arg(arg='forecast_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsi_ze', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='SORTED', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='lena', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsi_ze', ctx=Load()))])), Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='forecast_segment_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='DF', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='forecast_segment_df', ctx=Load()), attr='index', ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x', ctx=Store())], value=Attribute(value=Name(id='forecast_segment_df', ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Name(id='segment_df', ctx=Load())), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='X', value=Subscript(value=Name(id='x', ctx=Load()), slice=Tuple(elts=[Slice(), Attribute(value=Name(id='np', ctx=Load()), attr='newaxis', ctx=Load())], ctx=Load()), ctx=Load())), keyword(arg='y', value=Name(id='y', ctx=Load()))])), Assign(targets=[Name(id='r2', ctx=Store())], value=Call(func=Name(id='r2_score', ctx=Load()), args=[], keywords=[keyword(arg='y_true', value=Name(id='y', ctx=Load())), keyword(arg='y_pred', value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='predict', ctx=Load()), args=[Subscript(value=Name(id='x', ctx=Load()), slice=Tuple(elts=[Slice(), Attribute(value=Name(id='np', ctx=Load()), attr='newaxis', ctx=Load())], ctx=Load()), ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='x_min', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='y', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='_x_max', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='y', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])], keywords=[])), AugAssign(target=Name(id='x_min', ctx=Store()), op=Sub(), value=BinOp(left=Constant(value=0.05), op=Mult(), right=BinOp(left=Name(id='_x_max', ctx=Load()), op=Sub(), right=Name(id='x_min', ctx=Load())))), AugAssign(target=Name(id='_x_max', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=0.05), op=Mult(), right=BinOp(left=Name(id='_x_max', ctx=Load()), op=Sub(), right=Name(id='x_min', ctx=Load())))), Assign(targets=[Name(id='xlim', ctx=Store())], value=Tuple(elts=[Name(id='x_min', ctx=Load()), Name(id='_x_max', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='ylim', ctx=Store())], value=Name(id='xlim', ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='scatter', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[keyword(arg='label', value=JoinedStr(values=[Constant(value='R2: '), FormattedValue(value=Name(id='r2', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))]))])), Assign(targets=[Name(id='x_grid', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='linspace', ctx=Load()), args=[Starred(value=Name(id='xlim', ctx=Load()), ctx=Load()), Constant(value=100)], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='x_grid', ctx=Load()), Name(id='x_grid', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='identity')), keyword(arg='linestyle', value=Constant(value='dotted')), keyword(arg='color', value=Constant(value='grey'))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='x_grid', ctx=Load()), Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='predict', ctx=Load()), args=[Subscript(value=Name(id='x_grid', ctx=Load()), slice=Tuple(elts=[Slice(), Attribute(value=Name(id='np', ctx=Load()), attr='newaxis', ctx=Load())], ctx=Load()), ctx=Load())], keywords=[])], keywords=[keyword(arg='label', value=JoinedStr(values=[Constant(value='best fit: '), FormattedValue(value=Subscript(value=Attribute(value=Name(id='model', ctx=Load()), attr='coef_', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' x + '), FormattedValue(value=Attribute(value=Name(id='model', ctx=Load()), attr='intercept_', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])), keyword(arg='linestyle', value=Constant(value='dashed')), keyword(arg='color', value=Constant(value='black'))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_xlabel', ctx=Load()), args=[Constant(value='$\\widehat{y}$')], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_ylabel', ctx=Load()), args=[Constant(value='$y$')], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_xlim', ctx=Load()), args=[Starred(value=Name(id='xlim', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_ylim', ctx=Load()), args=[Starred(value=Name(id='ylim', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='sample_pacf_plot', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='n_segments', annotation=Name(id='int', ctx=Load())), arg(arg='LAGS', annotation=Name(id='int', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='figsi_ze', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10), Constant(value=21), Constant(value=None), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Call(func=Name(id='_acf_plot', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='n_segments', value=Name(id='n_segments', ctx=Load())), keyword(arg='lags', value=Name(id='LAGS', ctx=Load())), keyword(arg='segments', value=Name(id='segments', ctx=Load())), keyword(arg='figsize', value=Name(id='figsi_ze', ctx=Load())), keyword(arg='partial', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='DeprecationWarning: This function is deprecated and will be removed in etna=2.0; Please use acf_plot instead.'), Name(id='DeprecationWarningsdI', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_seasonal_cycle_name', args=arguments(posonlyargs=[], args=[arg(arg='timestamp', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='cycle', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='hour'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='day'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='week'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='month'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='quarter'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='year'), ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='cycle_functions', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='SeasonalPlotCycle', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())], ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='hour', ctx=Load()), Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='day', ctx=Load()), Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='week', ctx=Load()), Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='month', ctx=Load()), Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='quarter', ctx=Load()), Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='year', ctx=Load())], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='dt', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%Y-%m-%d %H')], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='dt', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%Y-%m-%d')], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='dt', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%Y-%W')], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='dt', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%Y-%b')], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='x', ctx=Load()), attr='year', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Attribute(value=Name(id='x', ctx=Load()), attr='quarter', ctx=Load()), conversion=-1)]))], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='dt', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%Y')], keywords=[]))]), simple=1), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cycle', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='row_n_umbers', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='lena', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=BinOp(left=BinOp(left=Name(id='row_n_umbers', ctx=Load()), op=FloorDiv(), right=Name(id='cycle', ctx=Load())), op=Add(), right=Constant(value=1)), attr='astype', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Subscript(value=Name(id='cycle_functions', ctx=Load()), slice=Call(func=Name(id='SeasonalPlotCycle', ctx=Load()), args=[Name(id='cycle', ctx=Load())], keywords=[]), ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), FunctionDef(name='_get_seasonal_in_cycle_num', args=arguments(posonlyargs=[], args=[arg(arg='timestamp', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='cycle_name', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='cycle', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='hour'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='day'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='week'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='month'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='quarter'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='year'), ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='freq', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='cycle_functions', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='SeasonalPlotCycle', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())], ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Tuple(elts=[Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='hour', ctx=Load()), Constant(value='T')], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='day', ctx=Load()), Constant(value='H')], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='week', ctx=Load()), Constant(value='D')], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='month', ctx=Load()), Constant(value='D')], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='quarter', ctx=Load()), Constant(value='D')], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='year', ctx=Load()), Constant(value='D')], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='year', ctx=Load()), Constant(value='Q')], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='year', ctx=Load()), Constant(value='QS')], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='year', ctx=Load()), Constant(value='M')], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='SeasonalPlotCycle', ctx=Load()), attr='year', ctx=Load()), Constant(value='MS')], ctx=Load())], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='dt', ctx=Load()), attr='minute', ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='dt', ctx=Load()), attr='hour', ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='dt', ctx=Load()), attr='weekday', ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='dt', ctx=Load()), attr='day', ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Attribute(value=BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='PeriodIndex', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='Q'))]), attr='start_time', ctx=Load())), attr='dt', ctx=Load()), attr='days', ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='dt', ctx=Load()), attr='dayofyear', ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='dt', ctx=Load()), attr='quarter', ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='dt', ctx=Load()), attr='quarter', ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='dt', ctx=Load()), attr='month', ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='dt', ctx=Load()), attr='month', ctx=Load()))]), simple=1), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cycle', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Pass()], orelse=[Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='SeasonalPlotCycle', ctx=Load()), args=[Name(id='cycle', ctx=Load())], keywords=[]), Name(id='freq', ctx=Load())], ctx=Load())), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='cycle_functions', ctx=Load())]), body=[Return(value=Call(func=Subscript(value=Name(id='cycle_functions', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='cycle_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='cycle_name')], values=[Call(func=Attribute(value=Name(id='timestamp', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='cycle_name', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])])], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cycle_df', ctx=Load()), attr='sort_values', ctx=Load()), args=[Constant(value='timestamp')], keywords=[]), attr='groupby', ctx=Load()), args=[Constant(value='cycle_name')], keywords=[]), attr='cumcount', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), ClassDef(name='SeasonalPlotCycle', bases=[Name(id='str', ctx=Load()), Name(id='Enum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='ho', ctx=Store())], value=Constant(value='hour')), Assign(targets=[Name(id='_day', ctx=Store())], value=Constant(value='day')), Assign(targets=[Name(id='wee', ctx=Store())], value=Constant(value='week')), Assign(targets=[Name(id='month', ctx=Store())], value=Constant(value='month')), Assign(targets=[Name(id='quarterTkuqb', ctx=Store())], value=Constant(value='quarter')), Assign(targets=[Name(id='year', ctx=Store())], value=Constant(value='year')), FunctionDef(name='_missing_', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='va')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='va', ctx=Load()), conversion=-1), Constant(value=' is not a valid '), FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='. Only '), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='m', ctx=Load()), attr='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Name(id='cls', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), conversion=-1), Constant(value=' cycles are allowed')])], keywords=[]))], decorator_list=[Name(id='CLASSMETHOD', ctx=Load())])], decorator_list=[]), FunctionDef(name='_seasonal_split', args=arguments(posonlyargs=[], args=[arg(arg='timestamp', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='freq', annotation=Name(id='str', ctx=Load())), arg(arg='cycle', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='hour'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='day'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='week'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='month'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='quarter'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='year'), ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create ſaʧ seasonal spliġt ēinto cycles of a μgiven timeˊstamp.\n\nParametͭersƃ\n---------Ɨ-\ntimestamƍp:\n    series with timestaʰļ\x8am̨ps\nfreq:\n ǰ   fǨrequŸency \\of Ťdataframe\ncyϯcle6ɏ:\n    period of seĈasonality to capĶt͗ure (see :py:class:`Η~etna.analBysis.eda͍_utils.SeasonϸalPlotCycle`)\n\nRet\x83urns\n--ɧ-----\nrņ̛esult: pd.DataFrame\n Ɏ   dataframe wişth timestamps öand Řcor̬óâreĔ\u038bsponding cycle names and in Ȓcyclǳeƅ namesŋ')), Assign(targets=[Name(id='cycles_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='timestamp', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='cycles_df', ctx=Load()), slice=Constant(value='cycle_name'), ctx=Store())], value=Call(func=Name(id='_get_seasonal_cycle_name', ctx=Load()), args=[], keywords=[keyword(arg='timestamp', value=Subscript(value=Name(id='cycles_df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load())), keyword(arg='cycle', value=Name(id='cycle', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='cycles_df', ctx=Load()), slice=Constant(value='in_cycle_num'), ctx=Store())], value=Call(func=Name(id='_get_seasonal_in_cycle_num', ctx=Load()), args=[], keywords=[keyword(arg='timestamp', value=Subscript(value=Name(id='cycles_df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load())), keyword(arg='cycle_name', value=Subscript(value=Name(id='cycles_df', ctx=Load()), slice=Constant(value='cycle_name'), ctx=Load())), keyword(arg='cycle', value=Name(id='cycle', ctx=Load())), keyword(arg='freq', value=Name(id='freq', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='cycles_df', ctx=Load()), slice=Constant(value='in_cycle_name'), ctx=Store())], value=Call(func=Name(id='_get_seasonal_in_cycle_name', ctx=Load()), args=[], keywords=[keyword(arg='timestamp', value=Subscript(value=Name(id='cycles_df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load())), keyword(arg='in_cycle_num', value=Subscript(value=Name(id='cycles_df', ctx=Load()), slice=Constant(value='in_cycle_num'), ctx=Load())), keyword(arg='cycle', value=Name(id='cycle', ctx=Load())), keyword(arg='freq', value=Name(id='freq', ctx=Load()))])), Return(value=Name(id='cycles_df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_resa', args=arguments(posonlyargs=[], args=[arg(arg='DF', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='freq', annotation=Name(id='str', ctx=Load())), arg(arg='aggregation', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='sum'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='mean'), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), Assign(targets=[Name(id='AGG_ENUM', ctx=Store())], value=Call(func=Name(id='seasonalplotaggregation', ctx=Load()), args=[Name(id='aggregation', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='DF', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[]), attr='groupby', ctx=Load()), args=[List(elts=[Constant(value='segment'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Grouper', ctx=Load()), args=[], keywords=[keyword(arg='freq', value=Name(id='freq', ctx=Load()))])], ctx=Load())], keywords=[]), attr='agg', ctx=Load()), args=[Call(func=Attribute(value=Name(id='AGG_ENUM', ctx=Load()), attr='get_function', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Return(value=Name(id='DF', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='se', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='freq', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='cycle', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='hour'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='day'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='week'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='month'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='quarter'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='year'), ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='a_lignment', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='first'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='last'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='aggregation', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='sum'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='mean'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='in_c', annotation=Name(id='str', ctx=Load())), arg(arg='plot_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='cmap', annotation=Name(id='str', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsi_ze', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value='year'), Constant(value='last'), Constant(value='sum'), Constant(value='target'), Constant(value=None), Constant(value='plasma'), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value="PȷU|lʞo*t e_a\x80ch ̱sƤșΰeaȤso\x8e̱nǄǎ̑ƥä ȄÍoŢ\x8an one ɛcaȅnƲővaΓs ȼ\x99ťfor eϞa˘ch̔ ľsegmǾΠe̓nt.\n\nƆʭɰPƉaώ\x8b½oąɳrameυtϵe̲ǓrsƆ\n§Ѐ͙¨RÌ-ϸ-ά×---ϔ--ϳ͎ʖϽ--\u0383\u03a2ʐ-˜\ntƟs:\nƕ ¤ ř Ɠ datήaseŉɠ˾t Ȅͪđɥǁ̞\u0378wʜmͱi̛Ƞthƞ ãtimκeĦseries ÌdƋưataĐ˄\n̮Μfɰreq̣ͧ;Û:ã\ṉŊ ϼʨ å̙ Z frɂeqưbžǷue˓ně$c:˷y tǊo anȫalyβ˕͝zeˤ̭ ʄseļaǎsÜoƹϨnsO:D\n\nʦ˟̤ϒʴ    *Ņş if i˪sn't˩Òθ̩ set, Ƚtǃ͍he ǁ\x9dfźreqɇueϵʛŵnɼcĸyͺ\u0383 oϭf˻Π ``ts`ũ` ƈwillǯ b˴e u˄ĴȄsǴƁe͋Ϊʾd;Ώ\nɸΈ\n  #Ǣ  Ü*H ɼŹiϷfă se\x8eÓtǙĒ,µ űr\x93es¬ɇampɚlȉ̀îΙϹ˽iĆng÷ w̝ill ϴbe \u0380̗mʽaŢĐd̈́äe u²sÕ͘inʮg̳ `ȿ`aǩgOgregatʪˠ¨ioƓn˦``ʙ ȔpʪÝĚaraȣƦmetɦerʓ\x85.\n ǂ¹ ț    @IͺfǄ ˦SǓgżivȇ̉n frǄȝΨequenΪɅɽcy\x9eŉ ȖțiŮϬ\u038bs2 t΄oΝo čɽlowόÍ, theǍnǝ theĞ ƺŊfreqɱYueϓncʇyϛ of -`Ũ`ts`Ȯ` wiħͼlɖäƝl ˌCƭbːeď ȋþusǇe\x8c#̋d.\nƍ\ncηycɩl͂Į̈ețôζɯ:ɤΣ˻ɫ˟\n ȳ cι ˠ ȢΓʨÛħpļƯăªeriod īof ˏ\xa0seasonƀal˓̚Ηƶφl˼iϨǝt̲y to ƲƢcapƟtureʞ (sͪee :claŀǏssƫ6ˁ:`ųƲΡǬ~ĢeƂtͯ́n̓a.anaΡl\x8byο\x7fsis.ǣe~Ǘďa_utͮǾķďʁil8sș.ǄSeasoˋnalPĭl˫˞ˉȘơͱotɬʲCyclɷe`)\n\x94ƠaʁlʶigʒnmeˏntΦǭ:=\n  Άˎ  how t˾o a͚ǡȽliƓgnį\u0383ϭ datafraÑ\xa0me ˕iOn ȓ·ÒcaseyǸ\u038d of͐ intɍǽegerΚ cȑ̔ĩǨyƴϊΣɼc\u0382Ȗɚlƹe Ē(ǽs̵ϲ\x8e͗ee :ʒΆpy:clĝ˻Ša΄kssʚ:`ċʚ~ǓŅet˟nģ̥a.Ɲ˲ˮanalys̹is1.ed\x93a˛ʵ̤Ę_utʥiĺʛās.Seasonal·ʙPδlotAʔæșlêiɚgnømeɏnt;`Ȕ)\naggb¶reâ͗ƶɶgaˊtÎǵi!ʉon˷:̺\nɵǢɆ ̑Ž ¬ζ ąś̏ċƀɻư h͆ow toķ aggreςgaŉte ½vɃƽaɧlˤu ěs ͉BƯ¦ĝːdʞuąriƧng ĝrbȕesČǇampl\x93]iǯnôgË ç{(s¡ɑeeǫ :̳p̬y:ϺʻcΒla{õsʦsi̹ƅǪ:ʟƍ̩`ɩ~˲eʂtψna.ǓyΎÃaσ<nalǓBysiˡs.edͼΗa_utǍÇȧilΏsç.ϧĖSea̝soƜΖnalŲPģl9oǾ\x8e̾tAg\x98̅gŰregaˮtio̅n`)\nin_̵̯colu\x8bîmn:\n  ̜ǌƥγǤį  ŏcuo̡lu˼mn t˻o ȪΉuseÎ\ncmaǿűpϔ:\nƉΉĜ  \x8c ȥ nȞèaǔ\x8dme ofʴ ơϷcoŘloɝrmaͽõp forP ̈ǲpǄlottiǱn̓g͇ê ǭˌňdif\x7ffǂeΓØrǈe̊ƹƅntȖĳ̯Ϝ cyȬclʱes\x83Ͷť\nŨ Ƭȅˀʘ  Ɍʦ (seο̈ǋ͔ǃe `Cʿ̈ÀhooÍsŤi\u038bμtng Coloβʳr˾mǈaÀ͑ƾps in Ma̱tpȀƠlϟotl+ib G\xa0ɵ\x86Ϛ<h͕t͈t̋υpsϾϱȿǢ:ĝ/̞/m8aüÏ˚ŘʀtțɉpƤlǆotlib.orϏgíʘŦ/3.5.ͨΡ1Ǚǈ/tutoriͅalYsȥ/cĩolorơΪsȢ/coƈlȲorˏmaɘps̸̺.htĜmlϓ>`G_)Α͋\nϤ͍ploş˅t_pȿȃaȸǉrȊͮͼams:\n#ɺ ʃą Ιȫ lΞ dictǳiĵona̶r\u0383̩y wiɩth pa͆ȭrame\x99ters fo̟r ʙ̪pl˼o3tʒtiΝrʽn̓˃ôg, :̯΅Óͅ$pyͳ:mʌe¼t\x9ah:`mǹatplo?tlibĴ.axes.ϞAģϳxeȀsʏȍ̶.plʡǤot` CĘis usełļɚd\nseͻgmĵenřtƻ·ŋs:\n œ  Ďϥ ǰsegmʐȟenηtƻƍ̷ϒsɗ toë ήÈƹuƾse\nΉcoluƗmnsƸ_nuřm:\nĎ͢  ë  numľbɡenr; of c¥ɡʊoƚlɘumnɫs ɔin suΓbvƘͼpƜlͭoƥtsƂːƃĊ\nfigsizeȐ:\n  Ĭˎ  ͆sizeʹ o2f¹˘ thše figurĂe p̨e͂rɎ subploǒt ̍'w\x9f¤ĎitǤĊƥh Ƽǽ̰o˰neÔ segmǾ˹ǚ̉entyƢ ¬iȇĶn řinƄcǓhƝ΄ǏèǈsͣȷÃ")), If(test=Compare(left=Name(id='plot_params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='plot_params', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), If(test=Compare(left=Name(id='freq', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='freq', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='SORTED', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Name(id='_prepare_seasonal_plot_df', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='freq', value=Name(id='freq', ctx=Load())), keyword(arg='cycle', value=Name(id='cycle', ctx=Load())), keyword(arg='alignment', value=Name(id='a_lignment', ctx=Load())), keyword(arg='aggregation', value=Name(id='aggregation', ctx=Load())), keyword(arg='in_column', value=Name(id='in_c', ctx=Load())), keyword(arg='segments', value=Name(id='segments', ctx=Load()))])), Assign(targets=[Name(id='SEASONAL_DF', ctx=Store())], value=Call(func=Name(id='_seasonal_split', ctx=Load()), args=[], keywords=[keyword(arg='timestamp', value=Call(func=Attribute(value=Attribute(value=Name(id='DF', ctx=Load()), attr='index', ctx=Load()), attr='to_series', ctx=Load()), args=[], keywords=[])), keyword(arg='freq', value=Name(id='freq', ctx=Load())), keyword(arg='cycle', value=Name(id='cycle', ctx=Load()))])), Assign(targets=[Name(id='colors', ctx=Store())], value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='get_cmap', ctx=Load()), args=[Name(id='cmap', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='lena', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsi_ze', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='DF', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='cyc', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='SEASONAL_DF', ctx=Load()), slice=Constant(value='cycle_name'), ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='cycle_name', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='cyc', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='co', ctx=Store())], value=Call(func=Name(id='colors', ctx=Load()), args=[BinOp(left=Name(id='j', ctx=Load()), op=Div(), right=Call(func=Name(id='lena', ctx=Load()), args=[Name(id='cyc', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='cycle_df', ctx=Store())], value=Subscript(value=Name(id='SEASONAL_DF', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='SEASONAL_DF', ctx=Load()), slice=Constant(value='cycle_name'), ctx=Load()), ops=[Eq()], comparators=[Name(id='cycle_name', ctx=Load())]), ctx=Load())), Assign(targets=[Name(id='segme', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='loc', ctx=Load()), slice=Subscript(value=Name(id='cycle_df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Subscript(value=Name(id='cycle_df', ctx=Load()), slice=Constant(value='in_cycle_num'), ctx=Load()), Subscript(value=Name(id='segme', ctx=Load()), slice=Subscript(value=Name(id='cycle_df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), ctx=Load())], keywords=[keyword(arg='color', value=Name(id='co', ctx=Load())), keyword(arg='label', value=Name(id='cycle_name', ctx=Load())), keyword(value=Name(id='plot_params', ctx=Load()))]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='SEASONAL_DF', ctx=Load()), slice=Constant(value='in_cycle_name'), ctx=Load()), attr='str', ctx=Load()), attr='isnumeric', ctx=Load()), args=[], keywords=[])], keywords=[])), body=[Assign(targets=[Name(id='ticks_dic', ctx=Store())], value=DictComp(key=Name(id='key', ctx=Load()), value=Name(id='va', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='va', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='SEASONAL_DF', ctx=Load()), slice=Constant(value='in_cycle_num'), ctx=Load()), Subscript(value=Name(id='SEASONAL_DF', ctx=Load()), slice=Constant(value='in_cycle_name'), ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='ticks', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ticks_dic', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='ticks_labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ticks_dic', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='idx', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argsort', ctx=Load()), args=[Name(id='ticks', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_xticks', ctx=Load()), args=[], keywords=[keyword(arg='ticks', value=Subscript(value=Name(id='ticks', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load())), keyword(arg='labels', value=Subscript(value=Name(id='ticks_labels', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_xlabel', ctx=Load()), args=[Name(id='freq', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[keyword(arg='loc', value=Constant(value='upper center')), keyword(arg='bbox_to_anchor', value=Tuple(elts=[Constant(value=0.5), UnaryOp(op=USub(), operand=Constant(value=0.12))], ctx=Load())), keyword(arg='ncol', value=Constant(value=6))]))], orelse=[])], decorator_list=[]), FunctionDef(name='_cross_correlation', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='b', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='maxla', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='normed', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[If(test=Compare(left=Call(func=Name(id='lena', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='lena', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Lengths of arrays should be equal')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='length', ctx=Store())], value=Call(func=Name(id='lena', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='maxla', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='maxla', ctx=Store())], value=BinOp(left=Name(id='length', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='maxla', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), Compare(left=Name(id='maxla', ctx=Load()), ops=[GtE()], comparators=[Name(id='length', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Parameter maxlags should be >= 1 and < len(a)')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='re', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='LAGS', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='maxla', ctx=Load())), BinOp(left=Name(id='maxla', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])), For(target=Name(id='lag', ctx=Store()), iter=Name(id='LAGS', ctx=Load()), body=[If(test=Compare(left=Name(id='lag', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='cur_a', ctx=Store())], value=Subscript(value=Name(id='a', ctx=Load()), slice=Slice(upper=Name(id='lag', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='c', ctx=Store())], value=Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='lag', ctx=Load()))), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='lag', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='cur_a', ctx=Store())], value=Name(id='a', ctx=Load())), Assign(targets=[Name(id='c', ctx=Store())], value=Name(id='b', ctx=Load()))], orelse=[Assign(targets=[Name(id='cur_a', ctx=Store())], value=Subscript(value=Name(id='a', ctx=Load()), slice=Slice(lower=Name(id='lag', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='c', ctx=Store())], value=Subscript(value=Name(id='b', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Name(id='lag', ctx=Load()))), ctx=Load()))])]), Assign(targets=[Name(id='dot_product', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='nansum', ctx=Load()), args=[BinOp(left=Name(id='cur_a', ctx=Load()), op=Mult(), right=Name(id='c', ctx=Load()))], keywords=[])), If(test=Name(id='normed', ctx=Load()), body=[Assign(targets=[Name(id='nan_mask_a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Name(id='cur_a', ctx=Load())], keywords=[])), Assign(targets=[Name(id='nan_mask_b', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])), Assign(targets=[Name(id='nan_m', ctx=Store())], value=BinOp(left=Name(id='nan_mask_a', ctx=Load()), op=BitOr(), right=Name(id='nan_mask_b', ctx=Load()))), Assign(targets=[Name(id='normed_dot_prod', ctx=Store())], value=BinOp(left=Name(id='dot_product', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='cur_a', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Name(id='nan_m', ctx=Load())), ctx=Load()), op=Mult(), right=Subscript(value=Name(id='cur_a', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Name(id='nan_m', ctx=Load())), ctx=Load()))], keywords=[]), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='c', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Name(id='nan_m', ctx=Load())), ctx=Load()), op=Mult(), right=Subscript(value=Name(id='c', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Name(id='nan_m', ctx=Load())), ctx=Load()))], keywords=[]))], keywords=[]))), Assign(targets=[Name(id='normed_dot_prod', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='nan_to_num', ctx=Load()), args=[Name(id='normed_dot_prod', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='normed_dot_prod', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='dot_product', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Tuple(elts=[Name(id='LAGS', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='re', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])