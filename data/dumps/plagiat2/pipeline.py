Module(body=[ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='ContextIgnorantModelType')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='get_args')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='etna.pipeline.base', names=[alias(name='BasePipeline')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='ContextRequiredModelType')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='ModelType')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='PredictionIntervalContextIgnorantAbstractModel')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='PredictionIntervalContextRequiredAbstractModel')], level=0), ImportFrom(module='typing', names=[alias(name='cast')], level=0), ImportFrom(module='etna.pipeline.mixins', names=[alias(name='ModelPipelinePredictMixin')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ClassDef(name='Pipeline', bases=[Name(id='ModelPipelinePredictMixin', ctx=Load()), Name(id='BasePipeline', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model', annotation=Name(id='ModelType', ctx=Load())), arg(arg='transforms', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Transform', ctx=Load()), ctx=Load())), arg(arg='horizon', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load()), Constant(value=1)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Name(id='model', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Store())], value=Name(id='transforms', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='horizon', value=Name(id='horizon', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='f', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\x80Fit ϣϻtɧhë ȠPipel5iΦne͑.ϚŬȿġΆ\n\n \n@ȟ\nFit anǴ͓d ʴap̔pl͇ϊy gƨiven ƣt̓Ȣrͻansfȍrms ʅ͂to theǧ̣̙\xa0ʣ ˣʨdata,\x8d ̓xthȊʐŅƴenƲʄ ʀfit tͩheɥ ΏʀmoƵd̩el\u0378ЀǓ oȹn t%heº tǲránǡîɗsfoωrmedŝ<I ˡǪdatʸƷt7a.\n   \n \nb6\naʆParaʅ\x93mΰȠe̼tϹer˩sġøȅ\nŔæ˧-ǐ̃-ɋZd--̬F-ʹ!˃-----\n   \ntǛ£s̱:\n\x8f ¡̦ͬ   ˌǱĹŇ̚Ƙ˘Datıaset wƖitʺhϐ tæiRƬmχeseĈrŹiň2e˂s įdata#VlEctardykoWifOv#YHDVZPAJbFrWusQmy\n   \n\nņ»RɂǵetÎuˍrǪĬns\n   \n  \nÜ-ɫ-̨--ƑΝȾ-ʶϬ--ɡÐƭ_΄\n \n   \n:ʦϨʭ͜\x94βĞX\n Ð ͨ  őFittŨeȹūŨ˟ͦFd ϲĊPipelΝineΎ insDtancȩ˜˥̈́e')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Store())], value=Name(id='ts', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='fit', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='Pipeline')), FunctionDef(name='_forecast', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Make\x88D ˈ͚predʴi˪ctĬΆiΏʺ3onsť.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Something went wrong, ts is None!')], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstancejcW', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), Call(func=Name(id='get_args', ctx=Load()), args=[Name(id='ContextRequiredModelType', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='ContextRequiredModelType', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Attribute(value=Name(id='self', ctx=Load()), attr='horizon', ctx=Load())), keyword(arg='tail_steps', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='context_size', ctx=Load()))])), Assign(targets=[Name(id='predictions', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='future', ctx=Load())), keyword(arg='prediction_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='horizon', ctx=Load()))]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='ContextIgnorantModelType', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Attribute(value=Name(id='self', ctx=Load()), attr='horizon', ctx=Load()))])), Assign(targets=[Name(id='predictions', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='future', ctx=Load()))]))]), Return(value=Name(id='predictions', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='foreca', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prediction_interval', annotation=Name(id='boolkvNev', ctx=Load())), arg(arg='quantiles', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='N_FOLDS', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Tuple(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()), Constant(value=3)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' is not fitted! Fit the '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' before calling forecast method.')])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_quantiles', ctx=Load()), args=[], keywords=[keyword(arg='quantiles', value=Name(id='quantiles', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_backtest_n_folds', ctx=Load()), args=[], keywords=[keyword(arg='n_folds', value=Name(id='N_FOLDS', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Name(id='prediction_interval', ctx=Load()), Call(func=Name(id='isinstancejcW', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), Name(id='PredictionIntervalContextIgnorantAbstractModel', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Attribute(value=Name(id='self', ctx=Load()), attr='horizon', ctx=Load()))])), Assign(targets=[Name(id='predictions', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='future', ctx=Load())), keyword(arg='prediction_interval', value=Name(id='prediction_interval', ctx=Load())), keyword(arg='quantiles', value=Name(id='quantiles', ctx=Load()))]))], orelse=[If(test=BoolOp(op=And(), values=[Name(id='prediction_interval', ctx=Load()), Call(func=Name(id='isinstancejcW', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), Name(id='PredictionIntervalContextRequiredAbstractModel', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Attribute(value=Name(id='self', ctx=Load()), attr='horizon', ctx=Load())), keyword(arg='tail_steps', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='context_size', ctx=Load()))])), Assign(targets=[Name(id='predictions', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='future', ctx=Load())), keyword(arg='prediction_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='horizon', ctx=Load())), keyword(arg='prediction_interval', value=Name(id='prediction_interval', ctx=Load())), keyword(arg='quantiles', value=Name(id='quantiles', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='predictions', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='prediction_interval', value=Name(id='prediction_interval', ctx=Load())), keyword(arg='quantiles', value=Name(id='quantiles', ctx=Load())), keyword(arg='n_folds', value=Name(id='N_FOLDS', ctx=Load()))]))])]), Return(value=Name(id='predictions', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load()))], decorator_list=[])], type_ignores=[])