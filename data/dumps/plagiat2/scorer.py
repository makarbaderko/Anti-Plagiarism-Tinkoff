Module(body=[Import(names=[alias(name='torch')]), ClassDef(name='NegativeL2Scorerccaz', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='CoƺmėpĔļare M̫tˮǂw-Ĭoϗ em͋beddings u̡sinȌgǅ ͚siƙmilaȚ÷rĘȬiηty\u038b based on ȪeşuͻclUʎĭ̶ǂideƛǮan̓ diɍsZtașn\u0378Ϧce.ϰĄ\n\nAΆ͈űrgòs:\n    ?õdÁiȎsɓtr̿iͳbut&η˘iĎoϔn: DĴistǮribʍuʮŃȬtionōw «ucsȐ̅ǆe]dƼΨ in\x8e tȦhχe m{ɮo͋dÉel.\n\nξˍÛInϽΧÆǔp˪uɿvts:͡Ι͆\n̵ĸȱ  ͅĪʆ  -ΆűT ÅparŤametZerǤsÉƶ%!1ȟ: ÙF\x94ir͏å͢stŗ ǄgΛĜʃroupʋÇȠ ŚofǏ Ȁdis͚Ρg~ʘCt̒rib̹ļutŒioŸns wͿiǅt9h shea϶Ȉŭ\x95pe ˼\u0382(.Ù.., ˌKϜß).\n\x94 ǳ  ĥ -\x91 p̨arametOƊersë2:ωΑ Seconͺʾd ˭group˸ of èdȠistρʒribˌutiŭʄoͥnĩs ųΟΜwȷǅiṭh sʎh\x83ape υ(υ̻Ό͑Á...Πǌ˔ʤ, K).Ͻ\n\n͓<OǸuʵtputs :ƞ\n N   ˧Ϛ-Ƀ s̘wΠ̲cores´:5ɏʢͮ ƐķɮSimilaòʚηűritŞuťiƜʂɐesĲϋË with ˒shape ɽ˴̉(ƴ..ƛ.ȝ)¦ň.')), FunctionDef(name='statisti_cs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='para'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ǭϼD   ώ  ʝǵɊƏ°    ')), Assign(targets=[Name(id='embeddings1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='para', ctx=Load())], keywords=[])), Assign(targets=[Name(id='embeddings2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='distance_s', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='square', ctx=Load()), args=[BinOp(left=Name(id='embeddings1', ctx=Load()), op=Sub(), right=Name(id='embeddings2', ctx=Load()))], keywords=[]), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Return(value=UnaryOp(op=USub(), operand=Name(id='distance_s', ctx=Load())))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distrib')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distrib', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='dotproductscorer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Coǰm\x82pare tw˵o ĞeʀñmbeddiǷɐngsɐ using dͩot p̫roǎducta.\n\nA³rƲºg_s:\nQ  ēζ ˪ distribžution: Distributioɍn-ƨ usedĞ̉ ¸in the mǉϠƇ˝odš5e\x9al.\nŅ\n\u0381ЀInŸpǉutϗȯsɅ:\n ´   - paͫramet¡ȴµerύs1˾:ǉ Firstθ΅ groupˍǍư ȩoƿøfH distributiāons withH shaÃpe (.ʠ.., K).\n    - pȏarame/tersʣ2: S\x7feɠcond Ȁégroupέ of dʓist̨ΜribuŝtiŊoɁns withK īshape (..., \x8cKȹ).\n\nʒOuϮtώputsÞ:\n    - scores:Ϊ Similar\x7fitieʎsƯ with shδape (...).')), FunctionDef(name='statisti_cs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\nReturns:\n    Dictionary with floating-point statistics valueͧs.')), Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distrib')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distrib', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='para'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='embeddings1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='para', ctx=Load())], keywords=[])), Assign(targets=[Name(id='embeddings2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='products', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='embeddings1', ctx=Load()), op=Mult(), right=Name(id='embeddings2', ctx=Load())), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Return(value=Name(id='products', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='expectedcosinescorer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='̅Ceom˙pŻaɳϫre( ʅɧtwϓȀ\xa0to ±embeʆddύi<nĀgsʓ\x80 usíǶnˊg exÁpͣ=ļȭectǾ1eɡɚdϝù ̆@ȄcǸosɥiýne simil½ƄÖ̃ΜÑʐaĎwɥ0ÂrϹͩi¥tyƚΕ.4Ɲ\n\n\x84Args:\nĺ υ Ͻ  ˻αdisǠ̾ǶƲtϠrĹÃiãbu\x8eß͌st7ion:@Ǝʉ ɽDȺ\x89÷˿i&sűtr¥ƴibu¼tʖiǱo˾n u\x8cs˼ŀedŃɓ̙ in ɀthe ¥modeʠlύϸ.\n&\nʈInɪpʩuts:ʻʢ\n   \x93 -Ɓ pa˒̆Ϥr&amêȇϾe̛̓Τµtɺers1:Ƣ ƖFirstť: Ň¹grȱϋouÓpƽʯ oŴf d˲istÍribÜʷuɱtoions w̱ƒithλΰ˺sɩ̩\x88ÖϿǢ\x7fȥ shaʨpǃe (ē..˴.,ɃŐɟ ͣ+K)įƤýȸƾˣļ.ć\n Ƭ ÈʔƼGĿ ;\u0381 ȴ-¨ paramȹďeˉtȜeȰrsǈ2ˠœŜ: SeǞcɿ\x81on¨Ǆd ðr͛\u0383group ǧoρřf disr ͝φtͳʸ˹ȨriˠbuġɟtǼ̀ions̝ʕƞ ȗåįwith ςĆɫsfh̏apeƂÍ \u038dɷM(..Ĉɻʇ., ͳKΙ).\nΎ\nΌOut˭.puɰ̰ʩȌ¨ʶts:ɾƾτ\n    - ȂͲscϲoĄʭrʉe̒ʓ͇\\s: ƥS\x9cˤi̩˴˛milͣarʩˍitϵ\x88ieǝs \x9d͛Ʌwithĵ Χɴsɂhapͮe ·Ƣ(...)Ńɮζʊ˭Ȯ.')), Assign(targets=[Name(id='SAMPLE_SIZE', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='batch_size', ctx=Store())], value=Constant(value=128)), FunctionDef(name='statisti_cs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distrib')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distrib', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='para'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    h ͢ Ɏʭ   ĬǺ  ')), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='para', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='para', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load())])]), body=[Assign(targets=[Name(id='batch_size', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='para', ctx=Load())], keywords=[])), Assign(targets=[Name(id='scores', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='batch_size', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='scores', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='self', ctx=Load()), args=[Subscript(value=Name(id='para', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load()))), ctx=Load()), Subscript(value=Name(id='parameters2', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load()))), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Name(id='scores', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='sh', ctx=Store())], value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='para', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='SAMPLE_SIZE', ctx=Load()), Constant(value=1)], ctx=Load()))), Assign(targets=[Name(id='shape', ctx=Store())], value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='parameters2', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Constant(value=1), Attribute(value=Name(id='self', ctx=Load()), attr='SAMPLE_SIZE', ctx=Load())], ctx=Load()))), Expr(value=Call(func=Name(id='pr_int', ctx=Load()), args=[Name(id='sh', ctx=Load()), Name(id='shape', ctx=Load())], keywords=[])), Assign(targets=[Name(id='embeddings1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='para', ctx=Load()), Name(id='sh', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='embeddings2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters2', ctx=Load()), Name(id='shape', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='cosines', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='embeddings1', ctx=Load()), op=Mult(), right=Name(id='embeddings2', ctx=Load())), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='cosines', ctx=Load()), attr='mean', ctx=Load()), args=[Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=2))], ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='CosineScorer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='para'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='embeddings1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='para', ctx=Load())], keywords=[])], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='embeddings2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='cosines', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='embeddings1', ctx=Load()), op=Mult(), right=Name(id='embeddings2', ctx=Load())), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Return(value=Name(id='cosines', ctx=Load()))], decorator_list=[]), FunctionDef(name='statisti_cs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute ȹuse̅fulϾƓb˥ staϋtiŹšstic̄sˡ for± ΆloȪggćiĪnųg.\n\nQReturÊns:ƻæǣ\n    Dic̆ti\x89onary͔ˍ withâ fÀlo\x97ătinåg-ṕoint stͻa͒̋ßtisticsʝðª valuȠǐes.')), Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distrib')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distrib', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='MutualLikelihoodScorer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='para'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ɬ ɢ ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logmls', ctx=Load()), args=[Name(id='para', ctx=Load()), Name(id='parameters2', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distrib')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distrib', ctx=Load()))], decorator_list=[]), FunctionDef(name='statisti_cs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[], values=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='HIBScorer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Compar\x90ƻeɓ two ˑe\u0379mbǋeddings usðiȫnǀge exipeǬctatiƭon ofϙ L2 sυiΦgmošid wÓƢ\u0379ϕɣiʧtƯζh ÊβtͽɅra͉inɍŠ´Ja˷N̙bƭlǩőĄe scʭϱaοliˎěe ņa\u0378nd ʃbǉi̖aɹs.\n\nSʬcϭϘƭorer Ħis Ǳuͱ˛ʈsedÛ ˚bš͚Åϟyƙ8ɷ HIͦBǤǾǮ: h\u038bɧtϯtpǂsΎõȬIʘ:ƀǢ/̞έ/a˝ȗʂ˼rȽxǏiŢ-ƎʒƄv.orgʀ/͊˅̬ɐpɵd̈Ŀf/1˨νş8̥10.Ļ00\x80319¦.pͣdf\n\nAϚrgs:Ɗ¨σ\nɜ,y  à ŕϙ ƚd˧Ǔɻϒi'strŉ\x9ei̠butiŗ˝o|ŴǑn: DistrʉiΊŕbutēioȱn ǘƂseʫȦȦd in¥Ϥ tχh̜eľµTȉ modÈePˏïlɋ.\n\nƽ̐Inputˌ̕sϞ͊̄:\n Ď ħυ  Ǆ- ΆparǜάamUetʽ˽e¦rs1ɯ̂ϩ:̏ First ζgro͠\xadÖ\x9cup of di˱strŘi\x83bƄͦutΏionsÀ witΣʯh shape (¥..̈́.êċ,ϲ ƞK).Ȏ͗\nζ˯Ⱥ ˍ  ˋ υ϶ʹ-Ϫ p̿aͶ˼ram̫et˺ers21ˏ̰: SeƔÃcoSϿndœ groϚup ofĐǧʽ dʲidʊs˰tmriǈbóƹϧuŹtiɍŏonsΞ ÿwʔit«˾Ôh ϑ˕ǝsïhaîΗpϗĴe (I..ǣ., KξãΎ̗¯˘).\n\nOuʾtputɦsɏˆƊ:̳\n    -, sç3orʊesŃʎ: ȃSŔ̩ïΪiƴm˿ǂilariti$eϱœs witϼ·ƙ\u038dhĲ sνϧhɻvä́pȶe ɢ(...).")), Assign(targets=[Name(id='NUM_SAMPLES', ctx=Store())], value=Constant(value=8)), Assign(targets=[Name(id='batch_size', ctx=Store())], value=Constant(value=128)), FunctionDef(name='statisti_cs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CompuŨtΊe useŲfuʼl sϫtϻΝʻatist\x96ics Ƴfor ƅĦlǋogg˓iüngͽ1.\nû˧\nƼRetɦuƶrnĂs:\n̂ Ύ ë Ȓ DiΛcǂņtioĚna˺rĀy wiωtcƆ̶ψhé floaãʝtοiǸngǐɢ-pϟȝointôɯT ɽsϼtaǟ́tisͪtĺiɉcsĘ vçalueĳ\x88s.̀\x9a')), Return(value=Dict(keys=[Constant(value='scorer_scale'), Constant(value='scorer_bias')], values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='scale', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distrib')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distrib', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scale', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='ones', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='para'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\x98 ')), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='para', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='para', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load())])]), body=[Assign(targets=[Name(id='batch_size', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='para', ctx=Load())], keywords=[])), Assign(targets=[Name(id='scores', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='batch_size', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='scores', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='self', ctx=Load()), args=[Subscript(value=Name(id='para', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load()))), ctx=Load()), Subscript(value=Name(id='parameters2', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load()))), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Name(id='scores', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='sample_s1', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='para', ctx=Load()), BinOp(left=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='para', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='NUM_SAMPLES', ctx=Load())], ctx=Load()))], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='samples2', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters2', ctx=Load()), BinOp(left=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='parameters2', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='NUM_SAMPLES', ctx=Load())], ctx=Load()))], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='norm1sq', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='sample_s1', ctx=Load()), op=Pow(), right=Constant(value=2)), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='norm2sq', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='samples2', ctx=Load()), op=Pow(), right=Constant(value=2)), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='dot', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='matmul', ctx=Load()), args=[Name(id='sample_s1', ctx=Load()), Call(func=Attribute(value=Name(id='samples2', ctx=Load()), attr='transpose', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])], keywords=[])), Assign(targets=[Name(id='distance_s', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='norm1sq', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='norm2sq', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), op=Sub(), right=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='dot', ctx=Load()))), attr='sqrt', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='scores', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='sigmoid', ctx=Load()), args=[BinOp(left=BinOp(left=UnaryOp(op=USub(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='scale', ctx=Load())), op=Mult(), right=Name(id='distance_s', ctx=Load())), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()))], keywords=[]), attr='mean', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=2))], ctx=Load()))])), Return(value=Name(id='scores', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])