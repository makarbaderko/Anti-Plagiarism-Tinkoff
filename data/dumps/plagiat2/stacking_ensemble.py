Module(body=[ImportFrom(module='etna.loggers', names=[alias(name='tslogger')], level=0), ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='joblib', names=[alias(name='Parallel')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='typing', names=[alias(name='cast')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='joblib', names=[alias(name='delayed')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='MAE')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='LinearRegression')], level=0), Import(names=[alias(name='warnings')]), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='etna.ensembles', names=[alias(name='EnsembleMixin')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='sklearn.base', names=[alias(name='RegressorMixin')], level=0), ImportFrom(module='etna.pipeline.base', names=[alias(name='BasePipeline')], level=0), ClassDef(name='StackingEnsemble', bases=[Name(id='BasePipeline', ctx=Load()), Name(id='EnsembleMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ƶStaʭɷɚψockǉiǑȿĄȚ͏̡ėˈȍɄĈnȮɼ*ʓg\u0382En̎Zϊ\xadąʹsőemble ͒is MƐ˒aΕ̣ ƹpipćeȉςlinŞeʨɻ thǒat Ĳfore͞xcȌͽɕʃƺǥaÝ3ȳːst fŷuǹϵ©̔ˡturˬeO< ǅusin͚gzˎ ǴǲƵthe metģƬΆ¥aʧmode͓l toã tǩЀcombƷiĬ\\ne¡ the foÙĝĤ\x81r\x8cecaƓsts of®ϩĶ tàwhe basîeΙǵʹǳ mΉodel\x8esƑ.ɴ\n\u0381˯ʒɇ\nE\x9bxaĩGmpȊ\x8alʚƥœžes\n-ɿ-ƺĎʙ-͂--Ѐ--Ü-\n>]Ⱦ˲Ĕ>> frɮ΅͕om eǈƆǚItnɢaų.÷d˛ͱȰϕȱaɧtaȲsets ǵ̇ΩimpĐor2ZtŦ gyʍeneIrɄϭ:¯ate¤Ɖ_΄aǻrö_dɍȂf\nű>ǵ>Ƅŵ>ʘ ¶from×ʘ\u0381 eʻtøθnaÿ.ĞɼǮɿdatÿMʪʚas˪eΊȂtŠεs Ν];import T!ƒSDaþt·aZseƣ¯t˓ȇ͟ɳ\n˿Ǹ>>̆ʷ> ¯̤ɘfrǏo͒ˆmϸ e\x88tnǞɨa.AeĐnsĽǽemblesǧ iϊmpoǭrtǚ VotinʝgEϚn̺semble\n>̲>>ŕ φʮfɫrom ɅetþǨna͐.mode9ls iτmε˹poŔɤȊúrƨʚʨt NƲaiÏvẽMode̶ýql\nɃˏύ>>˶®ȗ> fèrȓɨϺom Ûʱ×̭eĳ\xadtn{a.modʴ̭Ąelsv\x96 ˌãimporkt εMo϶ͼvæýin\x82ʲgAvera˛geɄòMoȦdeŎy9ŹlVȐką\n>ÍɍΪh˳>ˌ> frňom͏ ʭetna.ďȿípiÉāpÍel\\įφneņ ̈́iɓmpo̩rƎt ʛPˠƫʒǓip͝elɶine|\n*>ǧ>>Ȇ iʴmp¨oǶ̴rt ǫp-aȗ˼˛nƻǧd̓aǈsȖ ʼaȸs pd\n>\x85>> ƨpmɕ́d.oιpȀ͙t˔2ioɍnǸs.ͦdƺispl¹aȸy.ϵflƨ»̖oat_\x93fŶorm1at = \'C{:,ε&ā.˅2fʒ}l\'.͈fήíoĕrʒ˚ȬmƬÿaƪt\nȭ>>> ʧdƜϴȑfͳ\u0378 ƷȾ= ŰώgenŀeȤr͞͠ate_Ɍar_dɣf(ʵ˃9periodϗs̒=1ͥ10̃06,\u038b sͮt̕art_Ů\u0381tǃͻiÜ̹Δ˻meĝΉ=¢Z="̭ȥǆ202Ş1-0è6ǘˎ-0ů̮1"Ûï˻,Ófi arNƽȐ_coefìï̚ʵ=_[0š.̆8§Ȟ]Ȕ,̡ȝƑ´ n_ɋsegme\x7fȈnŵͯtsC=3ĝ)\n>͑>> ȢɈdfı_\u038dƓtΫs_foorƖńmat Ϛ= \x8b̽ɕ̂T7SDatƂaʥ͊seɖtƏ.tƪ)Ĉo˩˿ł_1ɲƢődaĉǰtRasȲeƃ/uƗtΪ(ϭĂdȯʓf)$Ɂ\n>>Ëʋ>Έ̇ˍ \x8dƩts Ȝ=͖ TSDaŬtaseͩtȆϗń¯(df_ɒtǑͣsJ_ǾĜfoľ͒rm̍a\x8aˌtśϤ,\x82a "̯D")˞ä\nϣ>͉>> maͲ¦;ϒ_pipe\x9flƔine = [ȜPiÎ£peliηnǘƸ˖ĉe(Ömod̗elɯ=ØƁMovinļ¹PgAʬĊđ ϓverageMĹâodʿeľl(wėʚindowt͝=5)ϧȐ, t͂r\x83̟ansfoǾrȧĂmsĮ=ͪ[ÂΡΒ]1\x8b, hoĈ|rųiɫzoϒ\x94n=7©)ś˂ʹ\n>>> naive_pƧi͠pπ̾ʡ·eơƼɟŝlǿ)̣¯ainʊeÖŧĿ = PVi͌A˷pɼe͠ˆli̦Ŭnƍάǵe(äȎmYŏoȗǠdeǜăl=Na\x88iĿ̙vneEMoΎdüȏel(˚lȵaǛǧg=ĵ10)Đ, ɄtrĨūaŐnsfÇ÷ǱȠo¾rms=̈́[ǃ]\u038b, horʤȘiϟ\x91z͌onć́ȣ=7ƣ)\n>>> enâ;ŵʩɭsem̴Όũble ú=͕͗Ʋ ͟StackόǡingEnsȼȡemblɗe˕\'(Üpiɸϼ˷pɀelinΞe͘ϻsɆ=̍ç[Ƌm͟˿\x9ca̼_pipOeliɖ¬ne, ŗnaéive\x83_Ѐ˚Ȉp˝ǈÏƤĳip˼eʜʚ²liɊne])Ǭ\n>>ǖ̩> ǫ_Ƶ ɾ=Ζ ́ensϱ̅Ǭ˧Ĺemb΅lqeƲ.ġfƉiǯt(t͟sœ=»t̡s)Ŵ\n;>F>Ǚ> ˒fΞǙoȨAreca˭§Ɛst̽ =Ι ǎĘenʿsŲembɜΪle ƢΫƂ.forecaƋ«Ǎs̟t()̴\n>>Ɩ> \x97forʾecaƃsʂtǚǐ[̛ˏ:,:,όą"taōƀĻrgeơ\x81tƈ"ʼ]̘\nš\x95ɇΌbsƁŵ˯¯eϫgment ƨ ă  sǼÿegm64entɛ_0ǕǠ ŏsegmeϩnz\\Gtɥ_1 seφgɓmenͮt_2\nfe̅ʑ"ƪŹatŹǨ˰ure ÜǇŻϔʧ   ǋ; ŞΦ  tǢarget    tarʞ̯ʰgɚet ʮ͗ ϳ ͩ tarʭçge\x83t\ntΎͱimÕʬeɟήĜńɦőäsǠ̿taʢ\x91mpƛˣ\nž2ķ0ˈʖ2Ø1-09ʌī-09̵ Ȣă; ̔δ    ɢ0ʾ.7»0ǵˋ      1É.\u03824Ȧ7      ȝ0.20͐ϰ®ǭǇ[\n2ˡ0I2[1ϕH-ǼƤËǙ09Η=-1͕ȏ0 Ȩ ˴Ǣ "   Ν\x9a0Ŭ˵V˦.̆6ǭʚ2 ρŘ     1.53  ɐƙ  ÛǄ ɖÛ 0ͬ.26ƒ\n2yȿ021L-09-ϯ11  Ǐ    Ǚœ0.5±Ǭ0  ˏɂ Ǟ  Ć ʺ1Ȇó.Ě7ωΠ8ǥƚ ̃  wβΛ̎   Ϝ0.36ĆΖƂ\n20ʾ21ϧ-͚0Ĉ9-\x811Ϯ@Ôɧ2ɬ ƈ\xa0ˀ̡  ˮ ƒ̡ ˓ǭ\x82 0ĦΑ.37      1.88   Ľ¾˝ȣʝĭ  ĐŦȾˁǺͳ 0.ȯ2,1́ěÚ\n20ȥ¨Àͥ21¼ͤ-09-\u03811Œ3  Η TĒ   Ɨ0.Ð46çá ŭ ¿ ̣  ǵ 1ː.\x9687 MʽϿͺ  Q ÖɝÕ  0.25\n2̽0ǻĠǐǕ2Ȝ1-09-14 }¤̧ͤ   āQ ɶ 0.Ć44\x88 ̴ƣ \x83Ǵ  \x7f ɺ̲ 1.ȩɫʃǭȹ̽4Ĥ9   ˋƅɭǽ ů ͈ ȷš͞N0̈́͐.2ήˊ1Τ\n2ɊĈʉˠɩ0źĹ2ʐ1͑ƕ-0ȚǄ<9ʸ¶Ɖě\x88-C15Ȟ ȳ͌ I˙   ʠāÜ ɰ¿0ƃ.Ȕƪʾ-36 } ˃ʇ Υ<\xa0x̏Ʈ ƪ  1.56 ʬ  Ř   0.ɿ30')), FunctionDef(name='_forecast', args=arguments(posonlyargs=[], args=[arg(arg='sel')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='sel', ctx=Load()), attr='ts', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Something went wrong, ts is None!')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='forecasts', ctx=Store())], value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='sel', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(value=Attribute(value=Name(id='sel', ctx=Load()), attr='joblib_params', ctx=Load()))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='sel', ctx=Load()), attr='_forecast_pipeline', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pipeline', value=Name(id='pipeline', ctx=Load()))]), generators=[comprehension(target=Name(id='pipeline', ctx=Store()), iter=Attribute(value=Name(id='sel', ctx=Load()), attr='pipelines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='sel', ctx=Load()), attr='_process_forecasts', ctx=Load()), args=[], keywords=[keyword(arg='forecasts', value=Name(id='forecasts', ctx=Load()))])), Return(value=Name(id='forecast', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='sel'), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="F̟it ʖǻχϝthe ensƔ\xa0ɒeͣm»bl̚Ȅ\u038de.\n\nPaĆαrČaƳżmƬŀeƫteʙrkϐs\nĊ-̇--©ʕ--ǃ͗̌--ǆ---\nṯs:BɊ\x83\nïÉ ɭ   ƘTSD'̢ataseǭtÓ t͌o Úfɋnßi#t ensemblľ͕eZ.\xa0̩\n\nRe̤tΐur®Îns\nɸώʙʧ-Cɍʣ-ǈ-ì-Ɋ`Ư--XǬ\u0379Ȼ-\ns̗ǋʀe͙ώʷǤlf:\nȓ  ϝ  ̡FÈȨƾϿittŭedȡ enɿsembǢşlνeiůȄΦǌǑ̟.")), Assign(targets=[Attribute(value=Name(id='sel', ctx=Load()), attr='ts', ctx=Store())], value=Name(id='ts', ctx=Load())), Assign(targets=[Name(id='forecasts', ctx=Store())], value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='sel', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(value=Attribute(value=Name(id='sel', ctx=Load()), attr='joblib_params', ctx=Load()))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='sel', ctx=Load()), attr='_backtest_pipeline', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pipeline', value=Name(id='pipeline', ctx=Load())), keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[]))]), generators=[comprehension(target=Name(id='pipeline', ctx=Store()), iter=Attribute(value=Name(id='sel', ctx=Load()), attr='pipelines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='sel', ctx=Load()), attr='filtered_features_for_final_model', ctx=Store())], value=Call(func=Attribute(value=Name(id='sel', ctx=Load()), attr='_filter_features_to_use', ctx=Load()), args=[Name(id='forecasts', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='X', ctx=Store()), Name(id='y', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='sel', ctx=Load()), attr='_make_features', ctx=Load()), args=[], keywords=[keyword(arg='forecasts', value=Name(id='forecasts', ctx=Load())), keyword(arg='train', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sel', ctx=Load()), attr='final_model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='X', ctx=Load()), Name(id='y', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='sel', ctx=Load()), attr='pipelines', ctx=Store())], value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='sel', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(value=Attribute(value=Name(id='sel', ctx=Load()), attr='joblib_params', ctx=Load()))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='sel', ctx=Load()), attr='_fit_pipeline', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pipeline', value=Name(id='pipeline', ctx=Load())), keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[]))]), generators=[comprehension(target=Name(id='pipeline', ctx=Store()), iter=Attribute(value=Name(id='sel', ctx=Load()), attr='pipelines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='sel', ctx=Load()))], decorator_list=[], returns=Constant(value='StackingEnsemble')), FunctionDef(name='_process_fo', args=arguments(posonlyargs=[], args=[arg(arg='sel'), arg(arg='forecasts', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TSDataset', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ')), Assign(targets=[Tuple(elts=[Name(id='X', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='sel', ctx=Load()), attr='_make_features', ctx=Load()), args=[], keywords=[keyword(arg='forecasts', value=Name(id='forecasts', ctx=Load())), keyword(arg='train', value=Constant(value=False))])), Assign(targets=[Attribute(value=Name(id='sel', ctx=Load()), attr='ts', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='TSDataset', ctx=Load()), Attribute(value=Name(id='sel', ctx=Load()), attr='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sel', ctx=Load()), attr='final_model', ctx=Load()), attr='predict', ctx=Load()), args=[Name(id='X', ctx=Load())], keywords=[])), Assign(targets=[Name(id='num_segments', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='forecasts', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='y', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='y', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='num_segments', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), attr='T', ctx=Load())), Assign(targets=[Name(id='num_timestamps', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='y', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='segment_col', ctx=Store())], value=ListComp(elt=Name(id='segme', ctx=Load()), generators=[comprehension(target=Name(id='segme', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='sel', ctx=Load()), attr='ts', ctx=Load()), attr='segments', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='num_timestamps', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Subscript(value=Attribute(value=Name(id='X', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='segment')], ctx=Load()), ctx=Store())], value=Name(id='segment_col', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='X', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='timestamp')], ctx=Load()), ctx=Store())], value=Attribute(value=Attribute(value=Name(id='X', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='X', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='forecasts', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='target')], ctx=Load()), ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Slice(), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NAN', ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Attribute(value=Attribute(value=Name(id='sel', ctx=Load()), attr='ts', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load()))])), Assign(targets=[Subscript(value=Attribute(value=Name(id='result', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Slice(), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Name(id='y', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='_make_features', args=arguments(posonlyargs=[], args=[arg(arg='sel'), arg(arg='forecasts', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TSDataset', ctx=Load()), ctx=Load())), arg(arg='train', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=Compare(left=Attribute(value=Name(id='sel', ctx=Load()), attr='ts', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='StackingEnsemble is not fitted! Fit the StackingEnsemble before calling forecast method.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='targetsUGV', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='target')], ctx=Load()), ctx=Load()), attr='rename', ctx=Load()), args=[Dict(keys=[Constant(value='target')], values=[JoinedStr(values=[Constant(value='regressor_target_'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1)])])], keywords=[keyword(arg='axis', value=Constant(value=1))]), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='forecast', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='forecasts', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='targetsUGV', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Name(id='targetsUGV', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Name(id='features', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='sel', ctx=Load()), attr='filtered_features_for_final_model', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='features_in_forecasts', ctx=Store())], value=ListComp(elt=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='forecast', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), attr='intersection', ctx=Load()), args=[Attribute(value=Name(id='sel', ctx=Load()), attr='filtered_features_for_final_model', ctx=Load())], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='forecast', ctx=Store()), iter=Name(id='forecasts', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='features', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Subscript(value=Name(id='features_in_forecasts', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='forecast', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='forecasts', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Name(id='features', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='features', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), UnaryOp(op=Invert(), operand=Call(func=Attribute(value=Attribute(value=Name(id='features', ctx=Load()), attr='columns', ctx=Load()), attr='duplicated', ctx=Load()), args=[], keywords=[]))], ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='features_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='features', ctx=Load()), Name(id='targetsUGV', ctx=Load())], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Name(id='X', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[ListComp(elt=Subscript(value=Attribute(value=Name(id='features_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segme', ctx=Load())], ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='segme', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='sel', ctx=Load()), attr='ts', ctx=Load()), attr='segments', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='axis', value=Constant(value=0))])), If(test=Name(id='train', ctx=Load()), body=[Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[ListComp(elt=Subscript(value=Attribute(value=Name(id='sel', ctx=Load()), attr='ts', ctx=Load()), slice=Tuple(elts=[Slice(lower=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='forecasts', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='forecasts', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), Name(id='segme', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='segme', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='sel', ctx=Load()), attr='ts', ctx=Load()), attr='segments', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='axis', value=Constant(value=0))])), Return(value=Tuple(elts=[Name(id='X', ctx=Load()), Name(id='y', ctx=Load())], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Name(id='X', ctx=Load()), Constant(value=None)], ctx=Load()))])], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_predict', args=arguments(posonlyargs=[], args=[arg(arg='sel'), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='start_timestamp', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load())), arg(arg='end_timesta', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load())), arg(arg='prediction_interval', annotation=Name(id='bool', ctx=Load())), arg(arg='quanti', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='flo_at', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='prediction_interval', ctx=Load()), body=[Raise(exc=Call(func=Name(id='NotImplementedErro', ctx=Load()), args=[JoinedStr(values=[Constant(value='Ensemble '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='sel', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=" doesn't support prediction intervals!")])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='predictions', ctx=Store())], value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='sel', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(value=Attribute(value=Name(id='sel', ctx=Load()), attr='joblib_params', ctx=Load()))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='sel', ctx=Load()), attr='_predict_pipeline', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='pipeline', value=Name(id='pipeline', ctx=Load())), keyword(arg='start_timestamp', value=Name(id='start_timestamp', ctx=Load())), keyword(arg='end_timestamp', value=Name(id='end_timesta', ctx=Load()))]), generators=[comprehension(target=Name(id='pipeline', ctx=Store()), iter=Attribute(value=Name(id='sel', ctx=Load()), attr='pipelines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='prediction', ctx=Store())], value=Call(func=Attribute(value=Name(id='sel', ctx=Load()), attr='_process_forecasts', ctx=Load()), args=[], keywords=[keyword(arg='forecasts', value=Name(id='predictions', ctx=Load()))])), Return(value=Name(id='prediction', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='_backtest_pipeline', args=arguments(posonlyargs=[], args=[arg(arg='sel'), arg(arg='pipeline', annotation=Name(id='BasePipeline', ctx=Load())), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get foϓrecasts fýrķom backɅte͚sˇtϋ Ȧfor ǃgiŶveɠn pipelineά.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='disable', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='forecasts', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='n_folds', value=Attribute(value=Name(id='sel', ctx=Load()), attr='n_folds', ctx=Load()))]))]), Assign(targets=[Name(id='forecasts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='forecasts', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load()))])), Return(value=Name(id='forecasts', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='sel'), arg(arg='pipelines', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='BasePipeline', ctx=Load()), ctx=Load())), arg(arg='final_model', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='RegressorMixin', ctx=Load()), ctx=Load())), arg(arg='n_folds', annotation=Name(id='in_t', ctx=Load())), arg(arg='features_to_use', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='s_tr', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='n_jo', annotation=Name(id='in_t', ctx=Load())), arg(arg='joblib_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='s_tr', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=3), Constant(value=None), Constant(value=1), Constant(value=None)]), body=[Expr(value=Constant(value='Iɏnit Stackiɰn̦gEnΩsǀȴµɹembΏlʼe.\u038d̞Ē\n<ǽ\n\x9eParaɽĀmeϬ\u0381ιteǖ͈úΫrʩs\n-ǟ-̏Ν-----ͷ˂---\x95\npiˁíɪǬpǮϠ͑e^lʡϔinœeΨs:\n    Lis̈́fͭtάͲ ϒ˅oĥf pƄΰǳɓiȴp\x8feli̜nesΐŏƥ˦ĥV tȩ̹ɐhaṭ ƇĒshouʿldʮϠ be æusƜ̧ΞϿed iŏͩϻɔn ȩn)sΰʛ]eŸʇm̰̎blȹ³e.\nfʩ[iΙnaɊ˸˾bl_ÒɆ̺m̾ˣo̊delǔ:\nɫɻ ˮà   ʇʌReļTMʪgrŽeϤǾs[sʔȒìi×on modƶel wġi˿ˌtϒh fiıt/p³redĤOʐɌiħȔɱ̄cΞt˼ Ȅinte˭rɉfacˆ\x88ϲe ͘w̩hiȣch wiu˨lǸ̃l "ḅeο u̐seVdΑĀɺ̫ to cóĮÜcƪȣombi\u0381̄nʟe t˻hľΉeǘ basẹ0ˀϥ es˪timËéatǴo̜ɌeÚɴǎɱųƿϴrsʯ.\nƵ̕Ϊn_ǦÈ̡΄foĹƭlȣdϲl̝s:ϥ͚̋\n5  ɼ ̒ϻ̼ ǌNuĪmÚʦbǚ˛ÓɤřerNd̥ł ͘]oʞ͖\x95ĲΎ\x8ff\x92Ąþ ĉåfĠolds\xa0 ȳtͷ̧oŊˎΘ ˰uΈ˸sƚʻ̇şe ɭin ȇtΛhe bǙ˫a˙ckte\x98st. ƨBackt̬esʙƔP̢ėtȺ ǎ̒is nęʵot̛ ΰuą#sbeȏdƹÉ ΘfoϷr m%o\x96̙ƓkĐdelČ ɻ\u03a2Ƭ˺ćeƪvƹaĢluˢatio͋Ȼn ŵbɃuγt ɛΣfoǪrƳ ȶψɱpredƢɲict̛Hion.\nũfeatʅuresb_toʟΓ_\x90hͫu;ďse:\nȘɹ >\x97˯ͦ G  Feaĥtures ΐÚexcǩepĨϏtƤ tϬhēpeʥ µforeǚcas̺tʄO|ǘs of thedϔƨƄ ȧ˧bas͓e ƾʶ\x8b͵Lm)od΄:ƔeÖìlÈϖm̑͞ζÅϙs to useθʍÛʔ inƷͱ ti˵he ``fơin˖aķʩ+șl_ΕʜmǇΉoʵdel``\x9f.ͩǬ˞\nnë͔_jobsϳ:͔\n  ɘ; ʥƳ͎ɸČƞΫθ NĿumber oˁ\x98ƠͰǊ©̇fͩ j̺oĵbs Ɛto r͙unǟϫ ǔin Ģp͡Ćaçϱǭ˴ŹυτƞraϙÎ\x8bȫlĨlƚǟeǿɗlͿ.ºƇǛG\nϪjϪŁoǴǊbįlʥib_par̗\x84ąmĵåsƒ:\nίɣγς  ϊʈƀ ñĉǊàϴ A϶Ǥ|dditioʝn"al pθaraȟmʫǠetʭƨeȁrs fʹoαôr :\u0379ɒpyƾɦˆ:̠cΐlΧθass:`ƽĉjoȘbƛlib.˲ParǖǻąalƠlˎel`.ţ\nʎȜ\nRaiseȫ½ȸȶŝʐs\n\x82--ȈƵO----\nVŠaΠlvuʭeȻƯEƅ»ϔrǩǝÕ̹roˊ̫r:Ğæ\n ǑŎƭň ŝ Ʈ I̙Ͳf\x86 Ēth˴Ăεe\x8f\x81˧ ϡn̽ąumbeͦr̂ ˞ofȰ ŝɳthe ͒OpBÖͬiǹ͌pelǵiÍɩnes ɒȍΐisŧÒƧ lessĔˍ Ϛ˃ͦtϞhǮyaƳƃǩnŜƇϨ ɭ2 ĤorȀʢrϟΗĸ ϣͥMpɆipelin΅ã̔Πe"s Ohaveɍ d^\x99i˪νffOϥe˜rű\x98ɅeΐntϿ hʹƤo̾rizoË\x92nWs.')), Expr(value=Call(func=Attribute(value=Name(id='sel', ctx=Load()), attr='_validate_pipeline_number', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=Name(id='pipelines', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='sel', ctx=Load()), attr='pipelines', ctx=Store())], value=Name(id='pipelines', ctx=Load())), Assign(targets=[Attribute(value=Name(id='sel', ctx=Load()), attr='final_model', ctx=Store())], value=IfExp(test=Compare(left=Name(id='final_model', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[]), orelse=Name(id='final_model', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='sel', ctx=Load()), attr='_validate_backtest_n_folds', ctx=Load()), args=[Name(id='n_folds', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='sel', ctx=Load()), attr='n_folds', ctx=Store())], value=Name(id='n_folds', ctx=Load())), Assign(targets=[Attribute(value=Name(id='sel', ctx=Load()), attr='features_to_use', ctx=Store())], value=Name(id='features_to_use', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='sel', ctx=Load()), attr='filtered_features_for_final_model', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='s_tr', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='sel', ctx=Load()), attr='n_jobs', ctx=Store())], value=Name(id='n_jo', ctx=Load())), If(test=Compare(left=Name(id='joblib_params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='sel', ctx=Load()), attr='joblib_params', ctx=Store())], value=Call(func=Name(id='di', ctx=Load()), args=[], keywords=[keyword(arg='verbose', value=Constant(value=11)), keyword(arg='backend', value=Constant(value='multiprocessing')), keyword(arg='mmap_mode', value=Constant(value='c'))]))], orelse=[Assign(targets=[Attribute(value=Name(id='sel', ctx=Load()), attr='joblib_params', ctx=Store())], value=Name(id='joblib_params', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='horizon', value=Call(func=Attribute(value=Name(id='sel', ctx=Load()), attr='_get_horizon', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=Name(id='pipelines', ctx=Load()))]))]))], decorator_list=[]), FunctionDef(name='_filter_features_to_us_e', args=arguments(posonlyargs=[], args=[arg(arg='sel'), arg(arg='forecasts', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TSDataset', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='features_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[ListComp(elt=Attribute(value=Name(id='forecast', ctx=Load()), attr='df', ctx=Load()), generators=[comprehension(target=Name(id='forecast', ctx=Store()), iter=Name(id='forecasts', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Name(id='available_features', ctx=Store())], value=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='features_df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), op=Sub(), right=Set(elts=[Constant(value='fold_number')]))), Assign(targets=[Name(id='features_to_use', ctx=Store())], value=Attribute(value=Name(id='sel', ctx=Load()), attr='features_to_use', ctx=Load())), If(test=Compare(left=Name(id='features_to_use', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='features_to_use', ctx=Load()), ops=[Eq()], comparators=[Constant(value='all')]), body=[Return(value=BinOp(left=Name(id='available_features', ctx=Load()), op=Sub(), right=Set(elts=[Constant(value='target')])))], orelse=[If(test=Call(func=Name(id='i', ctx=Load()), args=[Name(id='features_to_use', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='features_to_use_unique', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='features_to_use', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='features_to_use_unique', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[If(test=Call(func=Attribute(value=Name(id='features_to_use_unique', ctx=Load()), attr='issubset', ctx=Load()), args=[Name(id='available_features', ctx=Load())], keywords=[]), body=[Return(value=Name(id='features_to_use_unique', ctx=Load()))], orelse=[Assign(targets=[Name(id='unavailable_features', ctx=Store())], value=BinOp(left=Name(id='features_to_use_unique', ctx=Load()), op=Sub(), right=Name(id='available_features', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Features '), FormattedValue(value=Name(id='unavailable_features', ctx=Load()), conversion=-1), Constant(value=' are not found and will be dropped!')])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='features_to_use_unique', ctx=Load()), attr='intersection', ctx=Load()), args=[Name(id='available_features', ctx=Load())], keywords=[]))])])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Feature list is passed in the wrong format.Only the base models' forecasts will be used for the final forecast.")], keywords=[])), Return(value=Constant(value=None))])])])], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='s_tr', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])