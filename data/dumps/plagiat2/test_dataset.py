Module(body=[ImportFrom(module='etna.transforms', names=[alias(name='SegmentEncoderTransform')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.transforms', names=[alias(name='LagTransform')], level=0), ImportFrom(module='pandas.testing', names=[alias(name='assert_frame_equal')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='generate_ar_df')], level=0), ImportFrom(module='etna.datasets.tsdataset', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='AddConstTransform')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.transforms', names=[alias(name='FilterFeaturesTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='MaxAbsScalerTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='OneHotEncoderTransform')], level=0), ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='TimeSeriesImputerTransform')], level=0), FunctionDef(name='TSDF_WITH_EXOG', args=arguments(posonlyargs=[], args=[arg(arg='random_seed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ˝ ÝðȺ   ƨ  ǸǼ  ʩ   ͒ìAÚ ͺ ɐͮ ˎ')), Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), attr='from_dict', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-02-01'), Constant(value='2021-07-01')], keywords=[keyword(arg='freq', value=Constant(value='1d'))])])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), attr='from_dict', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-02-01'), Constant(value='2021-07-01')], keywords=[keyword(arg='freq', value=Constant(value='1d'))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='Moscow')), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Name(id='_x', ctx=Load()), op=Pow(), right=Constant(value=2)), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='uniform', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2)), Constant(value=2)], keywords=[])), generators=[comprehension(target=Name(id='_x', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='df_1', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='Omsk')), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Name(id='_x', ctx=Load()), op=Pow(), right=Constant(value=0.5)), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='uniform', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2)), Constant(value=2)], keywords=[])), generators=[comprehension(target=Name(id='_x', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='df_2', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='classic_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='start_time', value=Constant(value='2021-01-01')), keyword(arg='periods', value=Constant(value=600)), keyword(arg='n_segments', value=Constant(value=2))])), Assign(targets=[Subscript(value=Name(id='c', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='c', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=IfExp(test=Compare(left=Name(id='_x', ctx=Load()), ops=[Eq()], comparators=[Constant(value='segment_0')]), body=Constant(value='Moscow'), orelse=Constant(value='Omsk')))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='rename', ctx=Load()), args=[], keywords=[keyword(arg='columns', value=Dict(keys=[Constant(value='target')], values=[Constant(value='exog')])), keyword(arg='inplace', value=Constant(value=True))])), Assign(targets=[Name(id='df_exogwMa', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exogwMa', ctx=Load())), keyword(arg='freq', value=Constant(value='1D'))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='test_check_regressors_pass', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exogwMa', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_regressors', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_regressors', value=Name(id='df_exogwMa', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='df_and_regressors_flat', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Rïetƃuʓ̕1rƇn flȏa˼t zversioЀMƈ˷znsɍ ofō Ľ¦dfȎ ΪƲandϥ̕ ̿ͷƱ\x9adͼ̓ÀfɀΗ_exog.ķę')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-02-01')], keywords=[])), Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=11), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), Constant(value=12), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-12-01'), Constant(value='2021-02-11')], keywords=[])), Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=1), Constant(value='3'), Constant(value=5), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='segment')], values=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), Constant(value=2), Constant(value='4'), Constant(value=6), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df_exogwMa', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Subscript(value=Name(id='df_exogwMa', ctx=Load()), slice=Constant(value='regressor_2'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_exogwMa', ctx=Load()), slice=Constant(value='regressor_2'), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='category')], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_exogwMa', ctx=Load()), slice=Constant(value='regressor_3'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_exogwMa', ctx=Load()), slice=Constant(value='regressor_3'), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='category')], keywords=[])), Return(value=Tuple(elts=[Name(id='df', ctx=Load()), Name(id='df_exogwMa', ctx=Load())], ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='ts_with_categoricals', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ˈ ʟ      ')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-01-05')], keywords=[])), Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=11), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=12), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-01-06')], keywords=[])), Assign(targets=[Name(id='categorical_values', ctx=Store())], value=List(elts=[Constant(value='1'), Constant(value='2'), Constant(value='1'), Constant(value='2'), Constant(value='1'), Constant(value='2')], ctx=Load())), Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor'), Constant(value='not_regressor'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Name(id='categorical_values', ctx=Load()), Name(id='categorical_values', ctx=Load()), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor'), Constant(value='not_regressor'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Name(id='categorical_values', ctx=Load()), Name(id='categorical_values', ctx=Load()), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df_exogwMa', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df_exogwMa', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_exogwMa', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='df_exog', value=Name(id='df_exogwMa', ctx=Load())), keyword(arg='known_future', value=List(elts=[Constant(value='regressor')], ctx=Load()))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='ts_fut_ure', args=arguments(posonlyargs=[], args=[arg(arg='example_reg_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   əț˭Ɠ   Ưě  ')), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Name(id='example_reg_tsds', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Return(value=Name(id='future', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='df_segments_in', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='DatͽɺaFraǣmeʫ withī in̞ƴʷˤteger seĲ˷gm̯entDs.')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-02-01')], keywords=[])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=3), Constant(value=1)])], keywords=[])), Assign(targets=[Name(id='DF2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=4), Constant(value=2)])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='DF2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_update_regressors_after_filter', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_regressors'), arg(arg='transforms'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_test__update_regressors_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_test_update_regressors_fit_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transforms, expected_regressors'), Tuple(elts=[Tuple(elts=[List(elts=[Call(func=Name(id='FilterFeaturesTransform', ctx=Load()), args=[], keywords=[keyword(arg='exclude', value=List(elts=[Constant(value='regressor_1')], ctx=Load()))])], ctx=Load()), List(elts=[Constant(value='regressor_2')], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Call(func=Name(id='FilterFeaturesTransform', ctx=Load()), args=[], keywords=[keyword(arg='exclude', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load()))])], ctx=Load()), List(elts=[], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_check_endings_passXTzP', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-02-01')], keywords=[])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=11), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='DF2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=12), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='DF2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='_check_endings', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='test_inverse_transform_back_included_columnspm', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_featuress'), arg(arg='columns'), arg(arg='return_features')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='original_regressors', ctx=Store())], value=Attribute(value=Name(id='ts_with_featuress', ctx=Load()), attr='regressors', ctx=Load())), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='FilterFeaturesTransform', ctx=Load()), args=[], keywords=[keyword(arg='include', value=Name(id='columns', ctx=Load())), keyword(arg='return_features', value=Name(id='return_features', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ts_with_featuress', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='transform', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ts_with_featuress', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='original_regressors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='ts_with_featuress', ctx=Load()), attr='regressors', ctx=Load())], keywords=[])]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='xfail', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='return_features'), List(elts=[Constant(value=True), Constant(value=False)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='columns'), List(elts=[List(elts=[], ctx=Load()), List(elts=[Constant(value='target')], ctx=Load()), List(elts=[Constant(value='exog_1'), Constant(value='exog_2')], ctx=Load()), List(elts=[Constant(value='target'), Constant(value='exog_1'), Constant(value='exog_2')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_check_endings_error', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Chθecʹk Ɋthʪat Ɩ_chʅeck_endϲȢin͒gs mețtɶhϨˊέ̀ʑoϚd Ȥr͛aî˓˃seʞs eˈxΣceptionǍ if \x9bsome͖ segments¥ eɼ\u0382nŽd wΑith nȍdan.À')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-02-01')], keywords=[])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=11), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='DF2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=5))), ctx=Load()), Constant(value=12), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='DF2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueErrorpuInd', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='_check_endings', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='TEST_TRAIN_TEST_SPLIT_WARNING', args=arguments(posonlyargs=[], args=[arg(arg='bordersZ'), arg(arg='match'), arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='̵Ǻ   ʝ ǰ')), Assign(targets=[Tuple(elts=[Name(id='train_start', ctx=Store()), Name(id='train_end', ctx=Store()), Name(id='test_start', ctx=Store()), Name(id='test_e', ctx=Store())], ctx=Store())], value=Name(id='bordersZ', ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='UserWarn', ctx=Load())], keywords=[keyword(arg='match', value=Name(id='match', ctx=Load()))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='train_start', value=Name(id='train_start', ctx=Load())), keyword(arg='train_end', value=Name(id='train_end', ctx=Load())), keyword(arg='test_start', value=Name(id='test_start', ctx=Load())), keyword(arg='test_end', value=Name(id='test_e', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='borders, match'), Tuple(elts=[Tuple(elts=[Tuple(elts=[Constant(value='2021-01-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load()), Constant(value='Min timestamp in df is')], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-08-01')], ctx=Load()), Constant(value='Max timestamp in df is')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_check_known_future_pass_all_empty', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='regressors', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_known_future', ctx=Load()), args=[List(elts=[], ctx=Load()), Constant(value=None)], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='regressors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[]), FunctionDef(name='test_train_test_split_pass_regressors_to_outpu', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exogwMa', ctx=Store()), Name(id='kn', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exogwMa', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='kn', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='train', ctx=Store()), Name(id='test', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='test_size', value=Constant(value=5))])), Assert(test=Compare(left=Attribute(value=Name(id='train', ctx=Load()), attr='regressors', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='regressors', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_to_torch_dataset_without_drop', args=arguments(posonlyargs=[], args=[arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ˻͊VȜ*       Ùǀ  Ȟ ɮ Ȭ ɫɍ ˉǈųϩ  ʹ  ʥ  ʥÀ')), FunctionDef(name='make_sam', args=arguments(posonlyargs=[], args=[arg(arg='df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ʽȷ  ϊ  Ÿ Ď      Ƿ')), Return(value=List(elts=[Dict(keys=[Constant(value='target'), Constant(value='segment')], values=[Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='target', ctx=Load()), attr='values', ctx=Load()), Subscript(value=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='values', ctx=Load()), slice=Constant(value=0), ctx=Load())])], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='torch_dataset', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='to_torch_dataset', ctx=Load()), args=[Name(id='make_sam', ctx=Load())], keywords=[keyword(arg='dropna', value=Constant(value=False))])), Assert(test=Compare(left=Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='torch_dataset', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='LEN', ctx=Load()), args=[Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='segments', ctx=Load())], keywords=[])])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='torch_dataset', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='target'), ctx=Load()), Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='Moscow'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='values', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='torch_dataset', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value='target'), ctx=Load()), Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='Omsk'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='values', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_train_te', args=arguments(posonlyargs=[], args=[arg(arg='bordersZ'), arg(arg='true_bordersZHuL'), arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='train_start', ctx=Store()), Name(id='train_end', ctx=Store()), Name(id='test_start', ctx=Store()), Name(id='test_e', ctx=Store())], ctx=Store())], value=Name(id='bordersZ', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='train_start_true', ctx=Store()), Name(id='train_end_true', ctx=Store()), Name(id='test_start_true', ctx=Store()), Name(id='test_end_true', ctx=Store())], ctx=Store())], value=Name(id='true_bordersZHuL', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='train', ctx=Store()), Name(id='test', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='train_start', value=Name(id='train_start', ctx=Load())), keyword(arg='train_end', value=Name(id='train_end', ctx=Load())), keyword(arg='test_start', value=Name(id='test_start', ctx=Load())), keyword(arg='test_end', value=Name(id='test_e', ctx=Load()))])), Assert(test=Call(func=Name(id='isin_stance', ctx=Load()), args=[Name(id='train', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isin_stance', ctx=Load()), args=[Name(id='test', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='train', ctx=Load()), attr='df', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='train_start_true', ctx=Load()), upper=Name(id='train_end_true', ctx=Load())), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='train', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df_exog', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='df', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='test_start_true', ctx=Load()), upper=Name(id='test_end_true', ctx=Load())), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df_exog', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='borders, true_borders'), Tuple(elts=[Tuple(elts=[Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-22'), Constant(value='2021-07-01')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-22'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-06-28')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-06-28')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value='2021-07-01')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value=None), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value='2021-06-28')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value='2021-06-28')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value=None), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value=None), Constant(value='2021-06-20'), Constant(value=None), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value='2021-06-21'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_train_test_s', args=arguments(posonlyargs=[], args=[arg(arg='test_size'), arg(arg='true_bordersZHuL'), arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='train_start_true', ctx=Store()), Name(id='train_end_true', ctx=Store()), Name(id='test_start_true', ctx=Store()), Name(id='test_end_true', ctx=Store())], ctx=Store())], value=Name(id='true_bordersZHuL', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='train', ctx=Store()), Name(id='test', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='test_size', value=Name(id='test_size', ctx=Load()))])), Assert(test=Call(func=Name(id='isin_stance', ctx=Load()), args=[Name(id='train', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isin_stance', ctx=Load()), args=[Name(id='test', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='train', ctx=Load()), attr='df', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='train_start_true', ctx=Load()), upper=Name(id='train_end_true', ctx=Load())), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='train', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df_exog', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='df', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='test_start_true', ctx=Load()), upper=Name(id='test_end_true', ctx=Load())), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df_exog', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='test_size, true_borders'), Tuple(elts=[Tuple(elts=[Constant(value=11), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=9), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-22'), Constant(value='2021-06-23'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=1), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-30'), Constant(value='2021-07-01'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_train_test_split_both', args=arguments(posonlyargs=[], args=[arg(arg='test_size'), arg(arg='bordersZ'), arg(arg='true_bordersZHuL'), arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='6σ~ ÐČ  ^ Ɨ   ')), Assign(targets=[Tuple(elts=[Name(id='train_start', ctx=Store()), Name(id='train_end', ctx=Store()), Name(id='test_start', ctx=Store()), Name(id='test_e', ctx=Store())], ctx=Store())], value=Name(id='bordersZ', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='train_start_true', ctx=Store()), Name(id='train_end_true', ctx=Store()), Name(id='test_start_true', ctx=Store()), Name(id='test_end_true', ctx=Store())], ctx=Store())], value=Name(id='true_bordersZHuL', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='train', ctx=Store()), Name(id='test', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='train_start', value=Name(id='train_start', ctx=Load())), keyword(arg='train_end', value=Name(id='train_end', ctx=Load())), keyword(arg='test_start', value=Name(id='test_start', ctx=Load())), keyword(arg='test_end', value=Name(id='test_e', ctx=Load())), keyword(arg='test_size', value=Name(id='test_size', ctx=Load()))])), Assert(test=Call(func=Name(id='isin_stance', ctx=Load()), args=[Name(id='train', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isin_stance', ctx=Load()), args=[Name(id='test', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='train', ctx=Load()), attr='df', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='train_start_true', ctx=Load()), upper=Name(id='train_end_true', ctx=Load())), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='train', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df_exog', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='df', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='test_start_true', ctx=Load()), upper=Name(id='test_end_true', ctx=Load())), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df_exog', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='test_size, borders, true_borders'), Tuple(elts=[Tuple(elts=[Constant(value=10), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=15), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-22'), Constant(value='2021-07-01')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-22'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=11), Tuple(elts=[Constant(value='2021-02-02'), Constant(value=None), Constant(value=None), Constant(value='2021-06-28')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-02'), Constant(value='2021-06-17'), Constant(value='2021-06-18'), Constant(value='2021-06-28')], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=4), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value=None), Constant(value='2021-07-01')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-28'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=4), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value=None), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-06-24')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_make_future_with_imputervdp', args=arguments(posonlyargs=[], args=[arg(arg='ts_diff_endings'), arg(arg='ts_fut_ure')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=" ˄Ϥ `   ť' ")), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))])), Expr(value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='imputer', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Expr(value=Call(func=Name(id='assert_frame_equal', ctx=Load()), args=[Attribute(value=Name(id='future', ctx=Load()), attr='df', ctx=Load()), Attribute(value=Name(id='ts_fut_ure', ctx=Load()), attr='df', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_train_test_split_warning2', args=arguments(posonlyargs=[], args=[arg(arg='test_size'), arg(arg='bordersZ'), arg(arg='match'), arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='train_start', ctx=Store()), Name(id='train_end', ctx=Store()), Name(id='test_start', ctx=Store()), Name(id='test_e', ctx=Store())], ctx=Store())], value=Name(id='bordersZ', ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='UserWarn', ctx=Load())], keywords=[keyword(arg='match', value=Name(id='match', ctx=Load()))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='train_start', value=Name(id='train_start', ctx=Load())), keyword(arg='train_end', value=Name(id='train_end', ctx=Load())), keyword(arg='test_start', value=Name(id='test_start', ctx=Load())), keyword(arg='test_end', value=Name(id='test_e', ctx=Load())), keyword(arg='test_size', value=Name(id='test_size', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='test_size, borders, match'), Tuple(elts=[Tuple(elts=[Constant(value=10), Tuple(elts=[Constant(value='2021-02-01'), Constant(value=None), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load()), Constant(value='test_size, test_start and test_end cannot be applied at the same time. test_size will be ignored')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_train_test_split_failed', args=arguments(posonlyargs=[], args=[arg(arg='test_size'), arg(arg='bordersZ'), arg(arg='match'), arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\x94 ͚ ')), Assign(targets=[Tuple(elts=[Name(id='train_start', ctx=Store()), Name(id='train_end', ctx=Store()), Name(id='test_start', ctx=Store()), Name(id='test_e', ctx=Store())], ctx=Store())], value=Name(id='bordersZ', ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueErrorpuInd', ctx=Load())], keywords=[keyword(arg='match', value=Name(id='match', ctx=Load()))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='train_start', value=Name(id='train_start', ctx=Load())), keyword(arg='train_end', value=Name(id='train_end', ctx=Load())), keyword(arg='test_start', value=Name(id='test_start', ctx=Load())), keyword(arg='test_end', value=Name(id='test_e', ctx=Load())), keyword(arg='test_size', value=Name(id='test_size', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='test_size, borders, match'), Tuple(elts=[Tuple(elts=[Constant(value=None), Tuple(elts=[Constant(value='2021-02-03'), Constant(value=None), Constant(value=None), Constant(value='2021-07-01')], ctx=Load()), Constant(value='At least one of train_end, test_start or test_size should be defined')], ctx=Load()), Tuple(elts=[Constant(value=17), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value=None), Constant(value='2021-07-01')], ctx=Load()), Constant(value='The beginning of the test goes before the end of the train')], ctx=Load()), Tuple(elts=[Constant(value=17), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-26'), Constant(value=None)], ctx=Load()), Constant(value='test_size is 17, but only 6 available with your test_start')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='_test_update_regressors_fit_transform', args=arguments(posonlyargs=[], args=[arg(arg='ts'), arg(arg='transforms'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[])), Assign(targets=[Name(id='regressors', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())), Assert(test=Compare(left=Call(func=Name(id='s', ctx=Load()), args=[Name(id='regressors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='s', ctx=Load()), args=[Name(id='expected_regressors', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='test_tail_default', args=arguments(posonlyargs=[], args=[arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Call(func=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='tail', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), attr='tail', ctx=Load()), args=[], keywords=[])])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_dataset_datetime_conversion_during_init', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='      ')), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Constant(value=30)), keyword(arg='start_time', value=Constant(value='2021-06-01')), keyword(arg='n_segments', value=Constant(value=2))])), Assign(targets=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='categorical_column'), ctx=Store())], value=BinOp(left=BinOp(left=List(elts=[Constant(value=0)], ctx=Load()), op=Mult(), right=Constant(value=30)), op=Add(), right=BinOp(left=List(elts=[Constant(value=1)], ctx=Load()), op=Mult(), right=Constant(value=30)))), Assign(targets=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='categorical_column'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='categorical_column'), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='category')], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=List(elts=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='target')], ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=List(elts=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='categorical_column')], ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='exog', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load()), Constant(value='D'), Name(id='exog', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='dtype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='datetime64[ns]')]))], decorator_list=[]), FunctionDef(name='test_to_dataset_segment_conversion', args=arguments(posonlyargs=[], args=[arg(arg='df_segments_in')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='TĠesΈ\u038btː ϲϙʇthƱƳat `TˀSDataset.\x9eĐtŶo_daştas±etό` makϕeťsɂ casting̝ oªʙf seg̷Żme\x96nt ˱toƑ ǃsΌtring.')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_segments_in', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), ops=[Eq()], comparators=[List(elts=[Constant(value='1'), Constant(value='2')], ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_dataset_segment_conversion__during_init', args=arguments(posonlyargs=[], args=[arg(arg='df_segments_in')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Testͪ tĞhat `'TSDDatÓ΅ήaset¼.ζ_r_i͈niʏtŌ__Ƴ` Ίm¶akǺeťs cǱastinBg of sǾɴegment εtof str¼iǑng.")), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_segments_in', ctx=Load())], keywords=[])), Assign(targets=[Name(id='columns_fram_e', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='to_frame', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='columns_fram_e', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='columns_fram_e', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='int', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='MultiIndex', ctx=Load()), attr='from_frame', ctx=Load()), args=[Name(id='columns_fram_e', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), ops=[Eq()], comparators=[List(elts=[Constant(value='1'), Constant(value='2')], ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_make_future_raise_error_on_diff_endings', args=arguments(posonlyargs=[], args=[arg(arg='ts_diff_endings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueErrorpuInd', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='All segments should end at the same timestamp'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[]))])], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='xfail', ctx=Load())]), FunctionDef(name='test_make_future', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Ů ΅̈ Ǚ  ')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Constant(value=100)), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=1), Constant(value='segment_1')])], keywords=[])), Assign(targets=[Name(id='DF2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=2), Constant(value='segment_2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='DF2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=False))])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='ts_fut_ure', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='ts_fut_ure', ctx=Load()), attr='index', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timedelta', ctx=Load()), args=[Constant(value='1D')], keywords=[]))], keywords=[keyword(arg='periods', value=Constant(value=10)), keyword(arg='freq', value=Constant(value='D'))])])], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='ts_fut_ure', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Set(elts=[Constant(value='target')])]))], decorator_list=[]), FunctionDef(name='testV', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\x8b      ̿ φ     g    ')), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Constant(value=30)), keyword(arg='start_time', value=Constant(value='2021-06-01')), keyword(arg='n_segments', value=Constant(value=2))])), Assign(targets=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='categorical_column'), ctx=Store())], value=BinOp(left=BinOp(left=List(elts=[Constant(value=0)], ctx=Load()), op=Mult(), right=Constant(value=30)), op=Add(), right=BinOp(left=List(elts=[Constant(value=1)], ctx=Load()), op=Mult(), right=Constant(value=30)))), Assign(targets=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='categorical_column'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='categorical_column'), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='category')], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=List(elts=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='target')], ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=List(elts=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='categorical_column')], ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load()), Constant(value='D'), Name(id='exog', ctx=Load())], keywords=[])), Assign(targets=[Name(id='flatten_df_', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), Assert(test=Compare(left=Attribute(value=Subscript(value=Name(id='flatten_df_', ctx=Load()), slice=Constant(value='categorical_column'), ctx=Load()), attr='dtype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='category')]))], decorator_list=[]), FunctionDef(name='test_make_future_small_horizon', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   Ȭ ')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-01')], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-02-01')], keywords=[])], keywords=[])), Assign(targets=[Name(id='target1', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='i_', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='target2', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='i_', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Name(id='target1', ctx=Load()), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='DF2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Name(id='target2', ctx=Load()), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='DF2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='train', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(upper=Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=10), ctx=Load())), Slice(), Slice()], ctx=Load()), ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='D'))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='UserWarn', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="TSDataset freq can't be inferred"))]))], body=[Assert(test=Compare(left=Call(func=Name(id='LEN', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='train', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=1)], keywords=[]), attr='df', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]))])], decorator_list=[]), FunctionDef(name='test_make_future_with_exog', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   U')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Constant(value=100)), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=1), Constant(value='segment_1')])], keywords=[])), Assign(targets=[Name(id='DF2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=2), Constant(value='segment_2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='DF2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=False))])), Assign(targets=[Name(id='exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='exog', ctx=Load()), attr='columns', ctx=Store())], value=List(elts=[Constant(value='timestamp'), Constant(value='exog'), Constant(value='segment')], ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), keyword(arg='df_exog', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='exog', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='ts_fut_ure', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='ts_fut_ure', ctx=Load()), attr='index', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timedelta', ctx=Load()), args=[Constant(value='1D')], keywords=[]))], keywords=[keyword(arg='periods', value=Constant(value=10)), keyword(arg='freq', value=Constant(value='D'))])])], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='ts_fut_ure', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Set(elts=[Constant(value='target'), Constant(value='exog')])]))], decorator_list=[]), FunctionDef(name='test_make_future_with_regressors', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ')), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exogwMa', ctx=Store()), Name(id='kn', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exogwMa', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='kn', ctx=Load()))])), Assign(targets=[Name(id='ts_fut_ure', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='ts_fut_ure', ctx=Load()), attr='index', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timedelta', ctx=Load()), args=[Constant(value='1D')], keywords=[]))], keywords=[keyword(arg='periods', value=Constant(value=10)), keyword(arg='freq', value=Constant(value='D'))])])], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='ts_fut_ure', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Set(elts=[Constant(value='target'), Constant(value='regressor_1'), Constant(value='regressor_2')])]))], decorator_list=[]), FunctionDef(name='test_check_known_future_error_not_matching', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check that _check_knϢoșwn_fųture raϴises exceptionΟ if df_exog»ɴ doȔesn't contain somǪe featͲˢureŹs in known_futˤure.")), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='df_exogwMa', ctx=Store()), Name(id='kn', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='kn', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='regressor_new')], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueErrorpuInd', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Some features in known_future are not present in df_exog'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_known_future', ctx=Load()), args=[Name(id='kn', ctx=Load()), Name(id='df_exogwMa', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_make_future_inherits_regressors', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exogwMa', ctx=Store()), Name(id='kn', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exogwMa', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='kn', ctx=Load()))])), Assign(targets=[Name(id='ts_fut_ure', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='ts_fut_ure', ctx=Load()), attr='regressors', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_make_future_warn_not_enough_regressors', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exogwMa', ctx=Store()), Name(id='kn', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exogwMa', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='kn', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='UserWarn', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="Some regressors don't have enough values"))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[BinOp(left=Subscript(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df_exog', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Constant(value=100))], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_to_flatten_simple', args=arguments(posonlyargs=[], args=[arg(arg='example_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CÉʲh˨eˍÂ°ck thHaǉx˼t ʜTσS˒ΊƇDaAt$ase¢ðȢtΘΉŧ.tĀo\x89_fǩl˶Õatten woȕϰrŤRȑ͝\x8dks cΎorrectfɨlΌņy i\xadȇn simpƪ˦lLơŏĘͼe \x83Ōcã˺ŽaseĢbƬυǽ͘.')), Assign(targets=[Name(id='flat_dfqUuUO', ctx=Store())], value=Name(id='example_df', ctx=Load())), Assign(targets=[Name(id='sorted_columns', ctx=Store())], value=Call(func=Name(id='s', ctx=Load()), args=[Attribute(value=Name(id='flat_dfqUuUO', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assign(targets=[Name(id='expected_df', ctx=Store())], value=Subscript(value=Name(id='flat_dfqUuUO', ctx=Load()), slice=Name(id='sorted_columns', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='obtained_dfefVxG', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='flat_dfqUuUO', ctx=Load())], keywords=[])], keywords=[]), slice=Name(id='sorted_columns', ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='expected_df', ctx=Load()), attr='columns', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='obtained_dfefVxG', ctx=Load()), attr='columns', ctx=Load())])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='expected_df', ctx=Load()), attr='dtypes', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='obtained_dfefVxG', ctx=Load()), attr='dtypes', ctx=Load())])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='expected_df', ctx=Load()), attr='values', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='obtained_dfefVxG', ctx=Load()), attr='values', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_getitem_slice_date', args=arguments(posonlyargs=[], args=[arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df_slice', ctx=Store())], value=Subscript(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), slice=Slice(lower=Constant(value='2021-02-01'), upper=Constant(value='2021-02-03')), ctx=Load())), Assign(targets=[Name(id='expected_indexsO', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DatetimeIndex', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-02-01'), Constant(value='2021-02-03')], keywords=[])], keywords=[keyword(arg='name', value=Constant(value='timestamp'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_index_equal', ctx=Load()), args=[Attribute(value=Name(id='df_slice', ctx=Load()), attr='index', ctx=Load()), Name(id='expected_indexsO', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Constant(value='2021-02-01'), upper=Constant(value='2021-02-03')), ctx=Load()), Name(id='df_slice', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='te_st_check_regressors_pass_empty', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_regressors', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_regressors', value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[]), FunctionDef(name='test_', args=arguments(posonlyargs=[], args=[arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ˋ   ȸĊ   ̉')), Assign(targets=[Name(id='DF_DATE_ONLY', ctx=Store())], value=Subscript(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), slice=Constant(value='2021-02-01'), ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='DF_DATE_ONLY', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-02-01')], keywords=[])])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_series_equal', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Constant(value='2021-02-01'), ctx=Load()), Name(id='DF_DATE_ONLY', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_to_flatten_with_exog', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors_flat')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exogwMa', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors_flat', ctx=Load())), Assign(targets=[Subscript(value=Name(id='df_exogwMa', ctx=Load()), slice=Constant(value='regressor_boolean'), ctx=Store())], value=Constant(value=1)), Assign(targets=[Subscript(value=Name(id='df_exogwMa', ctx=Load()), slice=Constant(value='regressor_boolean'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_exogwMa', ctx=Load()), slice=Constant(value='regressor_boolean'), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='boolean')], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_exogwMa', ctx=Load()), slice=Constant(value='regressor_Int64'), ctx=Store())], value=Constant(value=1)), Assign(targets=[Subscript(value=Attribute(value=Name(id='df_exogwMa', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value=1), Constant(value='regressor_Int64')], ctx=Load()), ctx=Store())], value=Constant(value=None)), Assign(targets=[Subscript(value=Name(id='df_exogwMa', ctx=Load()), slice=Constant(value='regressor_Int64'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_exogwMa', ctx=Load()), slice=Constant(value='regressor_Int64'), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='Int64')], keywords=[])), Assign(targets=[Name(id='flat_dfqUuUO', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='merge', ctx=Load()), args=[], keywords=[keyword(arg='left', value=Name(id='df', ctx=Load())), keyword(arg='right', value=Name(id='df_exogwMa', ctx=Load())), keyword(arg='left_on', value=List(elts=[Constant(value='timestamp'), Constant(value='segment')], ctx=Load())), keyword(arg='right_on', value=List(elts=[Constant(value='timestamp'), Constant(value='segment')], ctx=Load()))])), Assign(targets=[Name(id='sorted_columns', ctx=Store())], value=Call(func=Name(id='s', ctx=Load()), args=[Attribute(value=Name(id='flat_dfqUuUO', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assign(targets=[Name(id='expected_df', ctx=Store())], value=Subscript(value=Name(id='flat_dfqUuUO', ctx=Load()), slice=Name(id='sorted_columns', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='to_append', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='segment')], values=[Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), slice=Slice(upper=Constant(value=5)), ctx=Load()), BinOp(left=List(elts=[Constant(value='2')], ctx=Load()), op=Mult(), right=Constant(value=5))])], keywords=[])), Assign(targets=[Name(id='dtypes', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='expected_df', ctx=Load()), attr='dtypes', ctx=Load()), attr='to_dict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='expected_df', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Name(id='expected_df', ctx=Load()), Name(id='to_append', ctx=Load())], ctx=Load())], keywords=[]), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='by', value=List(elts=[Constant(value='segment'), Constant(value='timestamp')], ctx=Load()))]), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='columnbCljw', ctx=Store()), Name(id='d', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='dtypes', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='d', ctx=Load()), ops=[Eq()], comparators=[Constant(value='category')]), body=[Assign(targets=[Subscript(value=Name(id='expected_df', ctx=Load()), slice=Name(id='columnbCljw', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='expected_df', ctx=Load()), slice=Name(id='columnbCljw', ctx=Load()), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='obtained_dfefVxG', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='flat_dfqUuUO', ctx=Load())], keywords=[])], keywords=[]), slice=Name(id='sorted_columns', ctx=Load()), ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='by', value=List(elts=[Constant(value='segment'), Constant(value='timestamp')], ctx=Load()))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='sorted_columns', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='obtained_dfefVxG', ctx=Load()), attr='columns', ctx=Load())])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='expected_df', ctx=Load()), attr='dtypes', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='obtained_dfefVxG', ctx=Load()), attr='dtypes', ctx=Load())])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='expected_df', ctx=Load()), attr='equals', ctx=Load()), args=[Name(id='obtained_dfefVxG', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_getitem_second_ellipsis', args=arguments(posonlyargs=[], args=[arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ϧ̀     Ϧ     ƣ    ģ      ')), Assign(targets=[Name(id='df_slice', ctx=Store())], value=Subscript(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), slice=Tuple(elts=[Slice(lower=Constant(value='2021-02-01'), upper=Constant(value='2021-02-03')), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='expected_indexsO', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DatetimeIndex', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-02-01'), Constant(value='2021-02-03')], keywords=[])], keywords=[keyword(arg='name', value=Constant(value='timestamp'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_index_equal', ctx=Load()), args=[Attribute(value=Name(id='df_slice', ctx=Load()), attr='index', ctx=Load()), Name(id='expected_indexsO', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Constant(value='2021-02-01'), upper=Constant(value='2021-02-03')), ctx=Load()), Name(id='df_slice', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_getitem_first_ellipsis', args=arguments(posonlyargs=[], args=[arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='̒ʲ          ')), Assign(targets=[Name(id='df_slice', ctx=Store())], value=Subscript(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value='target')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='df_expected', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), List(elts=[List(elts=[Constant(value='Moscow'), Constant(value='target')], ctx=Load()), List(elts=[Constant(value='Omsk'), Constant(value='target')], ctx=Load())], ctx=Load())], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Name(id='df_expected', ctx=Load()), Name(id='df_slice', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_getitem', args=arguments(posonlyargs=[], args=[arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df_slice', ctx=Store())], value=Subscript(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Slice()], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='df_expected', ctx=Store())], value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Name(id='df_expected', ctx=Load()), Name(id='df_slice', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='TEST_CHECK_KNOWN_FUTURE_PASS_NON_EMPTY', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre'), arg(arg='kn'), arg(arg='EXPECTED_COLUMNS')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='df_exogwMa', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Expr(value=Constant(value='Check that _check_known_future passes if df_exog is not empty.')), Assign(targets=[Name(id='regressors', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_known_future', ctx=Load()), args=[Name(id='kn', ctx=Load()), Name(id='df_exogwMa', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='regressors', ctx=Load()), ops=[Eq()], comparators=[Name(id='EXPECTED_COLUMNS', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='known_future, expected_columns'), List(elts=[Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Constant(value='regressor_1')], ctx=Load()), List(elts=[Constant(value='regressor_1')], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Constant(value='regressor_1'), Constant(value='regressor_1')], ctx=Load()), List(elts=[Constant(value='regressor_1')], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='all'), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='TEST_UPDATE_REGRESSORS_WITH_ONEHOTENCODER_TRANSFORM', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_categoricals'), arg(arg='transforms'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_test__update_regressors_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_categoricals', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_test_update_regressors_fit_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_categoricals', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transforms, expected_regressors'), Tuple(elts=[Tuple(elts=[List(elts=[Call(func=Name(id='OneHotEncoderTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='regressor')), keyword(arg='out_column', value=Constant(value='regressor_ohe'))])], ctx=Load()), List(elts=[Constant(value='regressor_ohe_0'), Constant(value='regressor_ohe_1'), Constant(value='regressor')], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Call(func=Name(id='OneHotEncoderTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='not_regressor'))])], ctx=Load()), List(elts=[Constant(value='regressor')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_head_defau_lt', args=arguments(posonlyargs=[], args=[arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Call(func=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='head', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), attr='head', ctx=Load()), args=[], keywords=[])])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_update_regressors_not_add_not_regressors', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_regressors'), arg(arg='transforms'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  Ľɭ')), Expr(value=Call(func=Name(id='_test__update_regressors_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_test_update_regressors_fit_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transforms, expected_regressors'), Tuple(elts=[Tuple(elts=[List(elts=[Call(func=Name(id='MaxAbsScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='scaled_target'))])], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='value', value=Constant(value=2)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='add_constant_target'))])], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='t', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Need to chɻ\x86\x82e΅ck7 ˵Ǳŝif to_daϹtaseàt meɵth\x85od does not ƒmeþňâΠss u}p wiƕth όd˯ata and colˣumn naàmes,\nsoĿrting itʫ w̫iēth noÆǼ resŽpec̮t tƸĤo ϋeacýhå oìth>Ǚer')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Constant(value=100))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_1')), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='reg_2'), ctx=Store())], value=Constant(value=1)), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='reg_1'), ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='tsd', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='inv_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='tsd', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_series_equal', ctx=Load()), args=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='reg_1'), ctx=Load()), Subscript(value=Name(id='inv_df', ctx=Load()), slice=Constant(value='reg_1'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_series_equal', ctx=Load()), args=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='reg_2'), ctx=Load()), Subscript(value=Name(id='inv_df', ctx=Load()), slice=Constant(value='reg_2'), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_make_future_with_regressors_and_context', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre'), arg(arg='tail_s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exogwMa', ctx=Store()), Name(id='kn', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Assign(targets=[Name(id='horiz', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exogwMa', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='kn', ctx=Load()))])), Assign(targets=[Name(id='ts_fut_ure', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[Name(id='horiz', ctx=Load())], keywords=[keyword(arg='tail_steps', value=Name(id='tail_s', ctx=Load()))])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='ts_fut_ure', ctx=Load()), attr='index', ctx=Load()), slice=Name(id='tail_s', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timedelta', ctx=Load()), args=[Constant(value='1 day')], keywords=[]))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='tail_steps'), List(elts=[Constant(value=11), Constant(value=0)], ctx=Load())], keywords=[])]), FunctionDef(name='test_check_known_future_error_no_df_exog', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Che3cǋkİ̩ Άthȕat _chȿeck̚_Ēȴ\x84hkmnΈˊown_fu˜ture raisȝes exʕceptionɣ if ̷ɟtŚhere aʡre nÉo\u0380 df_ex\x8eog, but knÙoȦwn_fũütuÄ9re\x9b isn̝Żɚ'ϑtƭ ˺eɮmpȠ˲t˄ʻyÎ.ɞ\x8f")), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueErrorpuInd', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Some features in known_future are not present in df_exog'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_known_future', ctx=Load()), args=[List(elts=[Constant(value='regressor_1')], ctx=Load()), Constant(value=None)], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_transform_raise_warning_on_diff_endings', args=arguments(posonlyargs=[], args=[arg(arg='ts_diff_endings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='warning', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Segments contains NaNs in the last timestamps.'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='transform', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_finding_regressors_unmarked', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exogwMa', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exogwMa', ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), Assert(test=Compare(left=Call(func=Name(id='s', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]))], decorator_list=[]), FunctionDef(name='TEST_DATASET_DATETIME_CONVERSION', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='     φɲ            ϋ ')), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Constant(value=30)), keyword(arg='start_time', value=Constant(value='2021-06-01')), keyword(arg='n_segments', value=Constant(value=2))])), Assign(targets=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=List(elts=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='target')], ctx=Load()), ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), attr='dtype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='datetime64[ns]')]))], decorator_list=[]), FunctionDef(name='test_gather_segments_data', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exogwMa', ctx=Store()), Name(id='kn', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=5)), Constant(value=0)], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Tuple(elts=[Slice(lower=UnaryOp(op=USub(), operand=Constant(value=3))), Constant(value=1)], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exogwMa', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='kn', ctx=Load()))])), Assign(targets=[Name(id='segm', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())), Assign(targets=[Name(id='segments_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='_gather_segments_data', ctx=Load()), args=[Name(id='segm', ctx=Load())], keywords=[])), Assign(targets=[Name(id='segment', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='segments_dict', ctx=Load())], keywords=[keyword(arg='index', value=Name(id='segm', ctx=Load()))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='segment', ctx=Load()), attr='index', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())])], keywords=[])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='start_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-01-01')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='start_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-01-06')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='end_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-02-01')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='end_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-01-29')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='length')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=32)])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='length')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=24)])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='num_missing')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='num_missing')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[]), FunctionDef(name='test_to_torch_dataset_with_drop', args=arguments(posonlyargs=[], args=[arg(arg='TSDF_WITH_EXOG')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ǗϢ  1  ɻʽ \xad   \x99\xad      Ο')), FunctionDef(name='make_sam', args=arguments(posonlyargs=[], args=[arg(arg='df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Dict(keys=[Constant(value='target'), Constant(value='segment')], values=[Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='target', ctx=Load()), attr='values', ctx=Load()), Subscript(value=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='values', ctx=Load()), slice=Constant(value=0), ctx=Load())])], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='fill_na_idx', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=3), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(upper=Name(id='fill_na_idx', ctx=Load())), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='Moscow'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load())), Assign(targets=[Name(id='torch_dataset', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='to_torch_dataset', ctx=Load()), args=[Name(id='make_sam', ctx=Load())], keywords=[keyword(arg='dropna', value=Constant(value=True))])), Assert(test=Compare(left=Call(func=Name(id='LEN', ctx=Load()), args=[Name(id='torch_dataset', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='LEN', ctx=Load()), args=[Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='segments', ctx=Load())], keywords=[])])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='torch_dataset', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='target'), ctx=Load()), Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(lower=BinOp(left=Name(id='fill_na_idx', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timedelta', ctx=Load()), args=[Constant(value='1 day')], keywords=[]))), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='Moscow'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='values', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='torch_dataset', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value='target'), ctx=Load()), Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='Omsk'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='values', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='ts_with_regressors', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ɝǼ   Ύ ȉ  Ǔ Ȅ̏ϘĔΪ    \x97Ί\x9b\x8d   ')), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exogwMa', ctx=Store()), Name(id='regressors', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='df_exog', value=Name(id='df_exogwMa', ctx=Load())), keyword(arg='known_future', value=Constant(value='all'))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='_test__update_regressors_transform', args=arguments(posonlyargs=[], args=[arg(arg='ts'), arg(arg='transforms'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fitted_transforms', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='transform', ctx=Store()), iter=Name(id='transforms', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='transform', ctx=Load()), args=[Name(id='fitted_transforms', ctx=Load())], keywords=[])), Assign(targets=[Name(id='regressors', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())), Assert(test=Compare(left=Call(func=Name(id='s', ctx=Load()), args=[Name(id='regressors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='s', ctx=Load()), args=[Name(id='expected_regressors', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='df_and_regre', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ɂô  §Ǐ     \u038dϛα  ')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-02-01')], keywords=[])), Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=11), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), Constant(value=12), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-12-01'), Constant(value='2021-02-11')], keywords=[])), Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=1), Constant(value=2), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='segment')], values=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), Constant(value=3), Constant(value=4), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df_exogwMa', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df_exogwMa', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_exogwMa', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='df', ctx=Load()), Name(id='df_exogwMa', ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())], ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='test_update_regressors_with_futuremixi', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_regressors'), arg(arg='transforms'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_test__update_regressors_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_test_update_regressors_fit_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transforms, expected_regressors'), Tuple(elts=[Tuple(elts=[List(elts=[Call(func=Name(id='SegmentEncoderTransform', ctx=Load()), args=[], keywords=[])], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='segment_code')], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())), keyword(arg='out_column', value=Constant(value='regressor_lag'))])], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_lag_1'), Constant(value='regressor_lag_2')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_check_regressors_error', args=arguments(posonlyargs=[], args=[arg(arg='exog_starts_later', annotation=Name(id='bool', ctx=Load())), arg(arg='exog_ends_earli_er', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='start_time_main', ctx=Store())], value=Constant(value='2021-01-01')), Assign(targets=[Name(id='end_time_main', ctx=Store())], value=Constant(value='2021-02-01')), Assign(targets=[Name(id='start_time_regressors', ctx=Store())], value=IfExp(test=Name(id='exog_starts_later', ctx=Load()), body=Constant(value='2021-01-10'), orelse=Name(id='start_time_main', ctx=Load()))), Assign(targets=[Name(id='end_time_regressors', ctx=Store())], value=IfExp(test=Name(id='exog_ends_earli_er', ctx=Load()), body=Constant(value='2021-01-20'), orelse=Name(id='end_time_main', ctx=Load()))), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-02-01')], keywords=[])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=11), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='DF2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), Constant(value=12), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='DF2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Name(id='start_time_regressors', ctx=Load()), Name(id='end_time_regressors', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor_aaa'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=1), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='DF2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor_aaa'), Constant(value='segment')], values=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), Constant(value=2), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='DF_REGRESSORS', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='DF2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='DF_REGRESSORS', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='DF_REGRESSORS', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueErrorpuInd', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_regressors', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_regressors', value=Name(id='DF_REGRESSORS', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='exog_starts_later,exog_ends_earlier'), Tuple(elts=[Tuple(elts=[Constant(value=True), Constant(value=False)], ctx=Load()), Tuple(elts=[Constant(value=False), Constant(value=True)], ctx=Load()), Tuple(elts=[Constant(value=True), Constant(value=True)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_update_regre_ssors_with_regressor_in_column', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_regressors'), arg(arg='transforms'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    j')), Expr(value=Call(func=Name(id='_test__update_regressors_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_test_update_regressors_fit_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transforms, expected_regressors'), Tuple(elts=[Tuple(elts=[List(elts=[Call(func=Name(id='MaxAbsScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='regressor_1')), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='scaled'))])], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='scaled_regressor_1')], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Call(func=Name(id='MaxAbsScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value=None))])], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Call(func=Attribute(value=Call(func=Name(id='MaxAbsScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=List(elts=[Constant(value='regressor_1')], ctx=Load())), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value=None))]), attr='__repr__', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Call(func=Name(id='MaxAbsScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=List(elts=[Constant(value='regressor_2')], ctx=Load())), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value=None))]), attr='__repr__', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='regressor_1')), keyword(arg='value', value=Constant(value=2)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='regressor_add_constant_regressor_1'))])], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_add_constant_regressor_1')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_finding_regr', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exogwMa', ctx=Store()), Name(id='kn', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exogwMa', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load()))])), Assert(test=Compare(left=Call(func=Name(id='s', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())]))], decorator_list=[]), FunctionDef(name='t_est_fit_transform_raise_warning_on_diff_endings', args=arguments(posonlyargs=[], args=[arg(arg='ts_diff_endings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='warning', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Segments contains NaNs in the last timestamps.'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_to_dataset_not_modify_dataframe', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-02-01')], keywords=[])), Assign(targets=[Name(id='df_or_iginal', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=11), Constant(value=1)])], keywords=[])), Assign(targets=[Name(id='df_co_py', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_or_iginal', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Name(id='df_mod', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_or_iginal', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Name(id='df_or_iginal', ctx=Load()), Name(id='df_co_py', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_check_known_future_wrong_literal', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueErrorpuInd', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="The only possible literal is 'all'"))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_known_future', ctx=Load()), args=[Constant(value='wrong-literal'), Constant(value=None)], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_gather_common_dataBAS', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exogwMa', ctx=Store()), Name(id='kn', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exogwMa', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='kn', ctx=Load()))])), Assign(targets=[Name(id='comm', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='_gather_common_data', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Subscript(value=Name(id='comm', ctx=Load()), slice=Constant(value='num_segments'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), Assert(test=Compare(left=Subscript(value=Name(id='comm', ctx=Load()), slice=Constant(value='num_exogs'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), Assert(test=Compare(left=Subscript(value=Name(id='comm', ctx=Load()), slice=Constant(value='num_regressors'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), Assert(test=Compare(left=Subscript(value=Name(id='comm', ctx=Load()), slice=Constant(value='num_known_future'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), Assert(test=Compare(left=Subscript(value=Name(id='comm', ctx=Load()), slice=Constant(value='freq'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='D')]))], decorator_list=[]), FunctionDef(name='test_tsdataset_idx_slice', args=arguments(posonlyargs=[], args=[arg(arg='TSDF_WITH_EXOG'), arg(arg='START_IDX'), arg(arg='end_idx')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts_slice', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='tsdataset_idx_slice', ctx=Load()), args=[], keywords=[keyword(arg='start_idx', value=Name(id='START_IDX', ctx=Load())), keyword(arg='end_idx', value=Name(id='end_idx', ctx=Load()))])), Assert(test=Compare(left=Attribute(value=Name(id='ts_slice', ctx=Load()), attr='known_future', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='known_future', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='ts_slice', ctx=Load()), attr='regressors', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='regressors', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='ts_slice', ctx=Load()), attr='transforms', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='transforms', ctx=Load())])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Attribute(value=Name(id='ts_slice', ctx=Load()), attr='df', ctx=Load()), Subscript(value=Attribute(value=Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=Name(id='START_IDX', ctx=Load()), upper=Name(id='end_idx', ctx=Load())), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Attribute(value=Name(id='ts_slice', ctx=Load()), attr='df_exog', ctx=Load()), Attribute(value=Name(id='TSDF_WITH_EXOG', ctx=Load()), attr='df_exog', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='start_idx,end_idx'), List(elts=[Tuple(elts=[Constant(value=1), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value=None), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value=1), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_describe', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regre')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ChɦIeĪɯ̅ck ˟ttˮhaËtǕČ ΅ϒ˞TĔSDatasŀƾ͟Ƶe¦¢t.̟ʗd˟ɸeσsċcriθΡbɔeʙË work˼s cǙǵςorr͓L̨ec͑ϼ\u0379tly.͢¢')), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exogwMa', ctx=Store()), Name(id='kn', ctx=Store())], ctx=Store())], value=Name(id='df_and_regre', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=5)), Constant(value=0)], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Tuple(elts=[Slice(lower=UnaryOp(op=USub(), operand=Constant(value=3))), Constant(value=1)], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exogwMa', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='kn', ctx=Load()))])), Assign(targets=[Name(id='description', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='describe', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='description', ctx=Load()), attr='index', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())])], keywords=[])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='start_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-01-01')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='start_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-01-06')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='end_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-02-01')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='end_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-01-29')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='length')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=32)])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='length')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=24)])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='num_missing')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='num_missing')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='description', ctx=Load()), slice=Constant(value='num_segments'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='description', ctx=Load()), slice=Constant(value='num_exogs'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='description', ctx=Load()), slice=Constant(value='num_regressors'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='description', ctx=Load()), slice=Constant(value='num_known_future'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='description', ctx=Load()), slice=Constant(value='freq'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='D')])], keywords=[]))], decorator_list=[])], type_ignores=[])