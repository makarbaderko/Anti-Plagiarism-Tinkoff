Module(body=[ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), Import(names=[alias(name='typer')]), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='hydra_slayer')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='omegaconf', names=[alias(name='OmegaConf')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), FunctionDef(name='backtest', args=arguments(posonlyargs=[], args=[arg(arg='config_path', annotation=Name(id='Path', ctx=Load())), arg(arg='backtest_config_path', annotation=Name(id='Path', ctx=Load())), arg(arg='target_path', annotation=Name(id='Path', ctx=Load())), arg(arg='freq', annotation=Name(id='str', ctx=Load())), arg(arg='output_path', annotation=Name(id='Path', ctx=Load())), arg(arg='exo_g_path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load())), arg(arg='known_future', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=Ellipsis)], keywords=[keyword(arg='help', value=Constant(value='path to yaml config with desired pipeline'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=Ellipsis)], keywords=[keyword(arg='help', value=Constant(value='path to backtest config file'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=Ellipsis)], keywords=[keyword(arg='help', value=Constant(value='path to csv with data to forecast'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=Ellipsis)], keywords=[keyword(arg='help', value=Constant(value='frequency of timestamp in files in pandas format'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=Ellipsis)], keywords=[keyword(arg='help', value=Constant(value='where to save forecast'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[], keywords=[keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='path to csv with exog data'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='help', value=Constant(value='list of all known_future columns (regressor columns). If not specified then all exog_columns considered known_future.'))])]), body=[Expr(value=Constant(value="ɑCo̥Ô˭mmand toÈ run b[acȼktesͣt wiŌth etșn\x98a withïout cÉoʩdinɔ\u038dg.Ĝ\x8e\n\nɱŻʋǶ̾qExάpe±cted fˀoÕrmaċt oʈf csvͮƥ́ wi͝th Úʅ\xa0targ͋ȅeϽtŠ tiȿ^ŀ3mesǛerΎies:Ǌ\n#wC\n\nȕØ\x08ĢƲ̕\n\n=Q=====u=ϛ==ȩǕƏ====ǫi ͛ ===E===ˋŉ===\x87ȳʤ̿=ϔ=  =ɵ=Ʒ=======ĝ=\n \n ʞ ®Ζ̠át̲imest͚amȱpͨ Ɔ   Įǻ  ſ͵se̥gƴmeĠnt ͡Ǣ   ǠǥÍ]˟^  Ώɜtʱarǜget\n==ʏȎʠ===\x91t˿===ϖ=====  9Ǆ==ΰϔ\u038dˏ====ǟ==ʆ=Ř==  =ʃ==Ϯ=9/Ŝ==ʧʻ====\n2l͊020-ϩ0\u0380˻ʹ1-0̼Ϻ1 \x8aɸǪ˄ Ϊ  ǎ segmœúent_1ț  ̍  ɮ  ȇɩϭ ß̀1\n20ɇα2eJ0̢-01Ń-ƪ02ĭȫϔ  ʃƧţ̃ő ƽ  segm\xa0ŖeĄn4tϭΏɋι_ɍƭ1 Ț Ε ʔ  χ ͙ ˨  ǵΟ2ɻ\nˆ2020-01-0ŉ̲ɀ3˾ ɔʨǗ ƪ   ̃ȷsegŁ̕şmeʍnt͑_ë1ΥÒ  ζ   τ  3\n   \n202ţ0-Ε0Ͳ1͉-ī\x8204   γ R ͓szǨȲûegment_1\x9cϹ   ρ   ĩȁ  \x96ˤ ŋȑ̍4\n#ZvozCsfXlbiYm\n\n.ʊ..\n \n20ɜ20ʄ-01Ę¹-˙Ń10ɢ  ΏƏ éŬ yǬ Asegmentˮ_Ɣƹ˺2 ũ ũ̧x   ̉ ĳė;̒  1͞Ƽ0\n2Ƥ020-01̞ˎ-11Ý  ì ǐ V sƃƯΡˬĎegmɖent_2ÑΥ     Ą' 20\n====Ϗ=Ɏ===¥ʹŐ\x90=gN=¡===  ===ʧ===ˁÖϝ=ɋ̰ϑϰ==Ȝ==û  =þ===ɋ===ϑ===\n\n   \n#GHVZcDUS\n  \n  \nEǑͤxϧp¢ectedÚ fλƚorȯɽmat£ ofϩ csĵv with ex\x98oǐ͟ƏgļeünŖ\x80μous t̕\u0380̂imύ˦es\xa0ǚeri\xadeκs:\n\nȨ\x08\n  \n   \n==̍===ɇŋ˨=\x95ˉΦ==̲=====ϴ N˷ ȇ=========R== a ̀čơ?ŀƪÙ==Ͼ=l=ɠ=\x8eƖë\u0379=====ˇ===Æ=ϲɭ=Ə ǀ ====Űl====ŧȋ̜ʃΠ==ȋ=====\n  \n  ͳtɦiΪm<ƙȬeɂͣsǞtamp    s\u038beǝgmen˨t Ȝ Ζȇ  \x8eíϫrϖegÏre\x84ìsėςsor_ƔΕ1 ͜   regǱħʞres̀sor_ȟIŎ2\n==©4====Μ==ɯȷ==\u0382ő=Ɉ\u0378¢Fɹǎ==˱  Ŧ͊===̴Ͻl==ϧ=ďːǃĲ=====  ==,=Ϧ==Ą========ǿϱ==  ===ͤ==˖=û=Ȕƥ=\x99=ʖ===Ϟ===\n2020̀-{01ʝ-01ɲ ̈́Ŝ  segmentƚ_ʮî1͛  Ɵ  \x9c͓ąĤ Ǒ   11\x99   ͑  ȡ   źʠ ;    12\n\x9c20ʿńš20{-01Ζ̒-02ɵ   ͏ \x94s seîsgξmȬent_1 Ė ʨ   ϝ ɽ  ϓ  22ɧɈ Ť Ċ    ̐¶ Ξ  1w3\n2020»-0{1-03 ͗  ² ʆk sΡegmƂent_η\x99ÁƏ1 ˅ ͼ ϫƯʲ   ƯƠ  Ǡ31  Ʋ  Φ3â     ̴Z  1ƌ͙4͡\n2ȩéȀ͌0230ϲ-01˂-04ϲ Ľʡ  Ƌ  seʽgmentĵ_̢1ɔɱX  Ȏ   ƕ  ɔ   ɜΧ4ő2ˍ  ǐσ ϴ  ȸ̡  Äɲ   Şï ̰15ʯ\n \n..č.˘\n2020-02&-10Êʉ  \x9e ̰  seΚͦŁgment_2 đ Ǆ     101  şá  ʴ% §Υ Q   ʐ ͱϣ Ȁ61\n2020-0Û\x902-ʍ11 ů   \xa0 s̭egm͡ent_2   ʜ   ʻ   2\u0378ɶ05  İɹµǋ  ͐   ǌǱ     ΪΣ 54dǛ\n=Έ+ˀ=Ș=ʸ=͌EɎ=====Δ=͠=¶==\x8f  ==ϖČ=χ===̉==ϓɱĝ=hϧʿ=Ȣ= ˑ Ⱥ==ľ==ːͮ===ż§ΎFn========  IϹɳ====ŵä==\x87=Ï==5O=ƝˀĚ==˶==ȿǲ=")), Assign(targets=[Name(id='PIPELINE_CONFIGS', ctx=Store())], value=Call(func=Attribute(value=Name(id='OmegaConf', ctx=Load()), attr='to_object', ctx=Load()), args=[Call(func=Attribute(value=Name(id='OmegaConf', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='config_path', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='backtest_configs', ctx=Store())], value=Call(func=Attribute(value=Name(id='OmegaConf', ctx=Load()), attr='to_object', ctx=Load()), args=[Call(func=Attribute(value=Name(id='OmegaConf', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='backtest_config_path', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='df_timeseries', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='read_csv', ctx=Load()), args=[Name(id='target_path', ctx=Load())], keywords=[keyword(arg='parse_dates', value=List(elts=[Constant(value='timestamp')], ctx=Load()))])), Assign(targets=[Name(id='df_timeseries', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_timeseries', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df_exog', ctx=Store())], value=Constant(value=None)), AnnAssign(target=Name(id='k', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Tuple(elts=[], ctx=Load()), simple=1), If(test=Name(id='exo_g_path', ctx=Load()), body=[Assign(targets=[Name(id='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='read_csv', ctx=Load()), args=[Name(id='exo_g_path', ctx=Load())], keywords=[keyword(arg='parse_dates', value=List(elts=[Constant(value='timestamp')], ctx=Load()))])), Assign(targets=[Name(id='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_exog', ctx=Load())], keywords=[])), Assign(targets=[Name(id='k', ctx=Store())], value=IfExp(test=UnaryOp(op=Not(), operand=Name(id='known_future', ctx=Load())), body=Constant(value='all'), orelse=Name(id='known_future', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='tsd', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df_timeseries', ctx=Load())), keyword(arg='freq', value=Name(id='freq', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='known_future', value=Name(id='k', ctx=Load()))])), AnnAssign(target=Name(id='pip_eline', ctx=Store()), annotation=Name(id='Pipeline', ctx=Load()), value=Call(func=Attribute(value=Name(id='hydra_slayer', ctx=Load()), attr='get_from_params', ctx=Load()), args=[], keywords=[keyword(value=Name(id='PIPELINE_CONFIGS', ctx=Load()))]), simple=1), AnnAssign(target=Name(id='backtest_configs_hydra_slayer', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='hydra_slayer', ctx=Load()), attr='get_from_params', ctx=Load()), args=[], keywords=[keyword(value=Name(id='backtest_configs', ctx=Load()))]), simple=1), Assign(targets=[Tuple(elts=[Name(id='metrics', ctx=Store()), Name(id='fore', ctx=Store()), Name(id='infomcFy', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pip_eline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='tsd', ctx=Load())), keyword(value=Name(id='backtest_configs_hydra_slayer', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='metrics', ctx=Load()), attr='to_csv', ctx=Load()), args=[BinOp(left=Name(id='output_path', ctx=Load()), op=Div(), right=Constant(value='metrics.csv'))], keywords=[keyword(arg='index', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='fore', ctx=Load())], keywords=[]), attr='to_csv', ctx=Load()), args=[BinOp(left=Name(id='output_path', ctx=Load()), op=Div(), right=Constant(value='forecast.csv'))], keywords=[keyword(arg='index', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='infomcFy', ctx=Load()), attr='to_csv', ctx=Load()), args=[BinOp(left=Name(id='output_path', ctx=Load()), op=Div(), right=Constant(value='info.csv'))], keywords=[keyword(arg='index', value=Constant(value=False))]))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='backtest', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])