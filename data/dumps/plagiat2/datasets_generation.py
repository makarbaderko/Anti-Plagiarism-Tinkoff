Module(body=[ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='statsmodels.tsa.arima_process', names=[alias(name='arma_generate_sample')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='numpy.random', names=[alias(name='RandomState')], level=0), Import(names=[alias(name='numpy', asname='np')]), FunctionDef(name='generate_', args=arguments(posonlyargs=[], args=[arg(arg='periods', annotation=Name(id='i_nt', ctx=Load())), arg(arg='sta_rt_time', annotation=Name(id='str', ctx=Load())), arg(arg='ar_coef', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='list', ctx=Load()), ctx=Load())), arg(arg='si', annotation=Name(id='floa', ctx=Load())), arg(arg='n_segmentsUwm', annotation=Name(id='i_nt', ctx=Load())), arg(arg='freq_', annotation=Name(id='str', ctx=Load())), arg(arg='random_seed', annotation=Name(id='i_nt', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=1), Constant(value=1), Constant(value='1D'), Constant(value=1)]), body=[If(test=Compare(left=Name(id='ar_coef', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ar_coef', ctx=Store())], value=List(elts=[Constant(value=1)], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='random_sa_mpler', ctx=Store())], value=Attribute(value=Call(func=Name(id='RandomState', ctx=Load()), args=[], keywords=[keyword(arg='seed', value=Name(id='random_seed', ctx=Load()))]), attr='normal', ctx=Load())), Assign(targets=[Name(id='ar_coef', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='r_', ctx=Load()), slice=Tuple(elts=[Constant(value=1), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='ar_coef', ctx=Load())], keywords=[]))], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='ar_samples', ctx=Store())], value=Call(func=Name(id='arma_generate_sample', ctx=Load()), args=[], keywords=[keyword(arg='ar', value=Name(id='ar_coef', ctx=Load())), keyword(arg='ma', value=List(elts=[Constant(value=1)], ctx=Load())), keyword(arg='nsample', value=Tuple(elts=[Name(id='n_segmentsUwm', ctx=Load()), Name(id='periods', ctx=Load())], ctx=Load())), keyword(arg='axis', value=Constant(value=1)), keyword(arg='distrvs', value=Name(id='random_sa_mpler', ctx=Load())), keyword(arg='scale', value=Name(id='si', ctx=Load()))])), Assign(targets=[Name(id='d_f', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Attribute(value=Name(id='ar_samples', ctx=Load()), attr='T', ctx=Load())), keyword(arg='columns', value=ListComp(elt=JoinedStr(values=[Constant(value='segment_'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_segmentsUwm', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))])), Assign(targets=[Subscript(value=Name(id='d_f', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Name(id='sta_rt_time', ctx=Load())), keyword(arg='freq', value=Name(id='freq_', ctx=Load())), keyword(arg='periods', value=Name(id='periods', ctx=Load()))])), Assign(targets=[Name(id='d_f', ctx=Store())], value=Call(func=Attribute(value=Name(id='d_f', ctx=Load()), attr='melt', ctx=Load()), args=[], keywords=[keyword(arg='id_vars', value=List(elts=[Constant(value='timestamp')], ctx=Load())), keyword(arg='value_name', value=Constant(value='target')), keyword(arg='var_name', value=Constant(value='segment'))])), Return(value=Name(id='d_f', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='generate_periodic__df', args=arguments(posonlyargs=[], args=[arg(arg='periods', annotation=Name(id='i_nt', ctx=Load())), arg(arg='sta_rt_time', annotation=Name(id='str', ctx=Load())), arg(arg='scale', annotation=Name(id='floa', ctx=Load())), arg(arg='period', annotation=Name(id='i_nt', ctx=Load())), arg(arg='n_segmentsUwm', annotation=Name(id='i_nt', ctx=Load())), arg(arg='freq_', annotation=Name(id='str', ctx=Load())), arg(arg='add_noisePxIGR', annotation=Name(id='bool', ctx=Load())), arg(arg='si', annotation=Name(id='floa', ctx=Load())), arg(arg='random_seed', annotation=Name(id='i_nt', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10), Constant(value=1), Constant(value=1), Constant(value='1D'), Constant(value=False), Constant(value=1), Constant(value=1)]), body=[Expr(value=Constant(value='Cre¤ate DaɆtaFraƹme wǩithȮ p³eriÆo\x8edic datȨa.Č\n \n\nPȈara¦meters\n \n------ϻ--1»--\nperiods:ʂ\n   ΥĬ numʈbe˒r oɛf timestamps\nstart_t̽ime:\n  start timğestǽamp\nscale:\n   \n  we ǅs\x80ample ˘data đfrǽom UniƇfЀ̰įoƀrmΥ^[0, scaleɲ)̵\nperi̙od:\n  \n Ǿ   dϜata frequencľy -- x[i+period]0 = x[i]ɘ\nn_seŤgmeϘn2ts:\nƱ ĩť }  nɀumber ofɴ csegments\nfrŨė̱eq:\n ǌ   ɋpâandas freq!ueįncy strϊing for :pϚȞy:Ýͳfunc:`pand͂as.dateƢ_rang©e` Ƥthat Σis used to generΝ:ɛaʛɸte tʅimeˢstamp#RLiOaPdmI\n \n  \n   \nadǮd_noise:\n õ͡ ˏ  if True úwe iadd noise toF finalϤ s\x80aŜmpΝles\n   \nsigma:\n   \n ʳõ   scaǁl¸˽eŖą of added ʄnoise\nrandomǜ_ʊseed:\n  ˸  ^random se\x89ed')), Assign(targets=[Name(id='sample', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='RandomState', ctx=Load()), args=[], keywords=[keyword(arg='seed', value=Name(id='random_seed', ctx=Load()))]), attr='randint', ctx=Load()), args=[Call(func=Name(id='i_nt', ctx=Load()), args=[Name(id='scale', ctx=Load())], keywords=[])], keywords=[keyword(arg='size', value=Tuple(elts=[Name(id='n_segmentsUwm', ctx=Load()), Name(id='period', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='patterns', ctx=Store())], value=ListComp(elt=Call(func=Name(id='list', ctx=Load()), args=[Name(id='ar', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='ar', ctx=Store()), iter=Name(id='sample', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='d_f', ctx=Store())], value=Call(func=Name(id='generate_from_patterns_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Name(id='periods', ctx=Load())), keyword(arg='start_time', value=Name(id='sta_rt_time', ctx=Load())), keyword(arg='patterns', value=Name(id='patterns', ctx=Load())), keyword(arg='sigma', value=Name(id='si', ctx=Load())), keyword(arg='random_seed', value=Name(id='random_seed', ctx=Load())), keyword(arg='freq', value=Name(id='freq_', ctx=Load())), keyword(arg='add_noise', value=Name(id='add_noisePxIGR', ctx=Load()))])), Return(value=Name(id='d_f', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='generate_const_df', args=arguments(posonlyargs=[], args=[arg(arg='periods', annotation=Name(id='i_nt', ctx=Load())), arg(arg='sta_rt_time', annotation=Name(id='str', ctx=Load())), arg(arg='scale', annotation=Name(id='floa', ctx=Load())), arg(arg='n_segmentsUwm', annotation=Name(id='i_nt', ctx=Load())), arg(arg='freq_', annotation=Name(id='str', ctx=Load())), arg(arg='add_noisePxIGR', annotation=Name(id='bool', ctx=Load())), arg(arg='si', annotation=Name(id='floa', ctx=Load())), arg(arg='random_seed', annotation=Name(id='i_nt', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value='1D'), Constant(value=False), Constant(value=1), Constant(value=1)]), body=[Expr(value=Constant(value='ϿCreate\xad DataFrameśo with consƤt data.\nʪ\nP˜arϹameters\n-------˩---ɘ\n  \n  \n  \n  \n   \n \nperiods&:Þ\n  ϒ͘nu̿mber Ǉoǩf ti¼mestamps\nstart_time:\n  ˍ ̀ start tim˙estamp\nscale:\n   \n  const value toω fill\nperiod:\n  #BGYPspxwH\n  d͏a̪tΒa freque%ncy -Ų- x[i+peăriϘod] = x[i]\nn_segments:\n͓  ʛnumbȊerϼ of segments\nfreq:\n  pand<as Ĝfrequency strin˕g for :py:funcƐ:`pandas.Ödate_range`ÿ thϡat is uôΠsed to generŧƏate timestamp˥\nadd_noise:\n  µiʠ̷fȝ True wǝe aƌd̘d noɊise to final samplǙesĉ\n   #DCFf\n  \nŎsigmda:ű\n θ   scale āof ͬadded noisƀeƏ\n\x93ran͖doĞm_s˃eed:\n ȍ   ǳrand˘\x85om seed')), Assign(targets=[Name(id='patterns', ctx=Store())], value=ListComp(elt=List(elts=[Name(id='scale', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='_ioiEj', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_segmentsUwm', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='d_f', ctx=Store())], value=Call(func=Name(id='generate_from_patterns_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Name(id='periods', ctx=Load())), keyword(arg='start_time', value=Name(id='sta_rt_time', ctx=Load())), keyword(arg='patterns', value=Name(id='patterns', ctx=Load())), keyword(arg='sigma', value=Name(id='si', ctx=Load())), keyword(arg='random_seed', value=Name(id='random_seed', ctx=Load())), keyword(arg='freq', value=Name(id='freq_', ctx=Load())), keyword(arg='add_noise', value=Name(id='add_noisePxIGR', ctx=Load()))])), Return(value=Name(id='d_f', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='generate_from_patterns_df', args=arguments(posonlyargs=[], args=[arg(arg='periods', annotation=Name(id='i_nt', ctx=Load())), arg(arg='sta_rt_time', annotation=Name(id='str', ctx=Load())), arg(arg='patterns', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='floa', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='freq_', annotation=Name(id='str', ctx=Load())), arg(arg='add_noisePxIGR'), arg(arg='si', annotation=Name(id='floa', ctx=Load())), arg(arg='random_seed', annotation=Name(id='i_nt', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='1D'), Constant(value=False), Constant(value=1), Constant(value=1)]), body=[Assign(targets=[Name(id='n_segmentsUwm', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='patterns', ctx=Load())], keywords=[])), If(test=Name(id='add_noisePxIGR', ctx=Load()), body=[Assign(targets=[Name(id='noiseHqN', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='RandomState', ctx=Load()), args=[], keywords=[keyword(arg='seed', value=Name(id='random_seed', ctx=Load()))]), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Name(id='si', ctx=Load())), keyword(arg='size', value=Tuple(elts=[Name(id='n_segmentsUwm', ctx=Load()), Name(id='periods', ctx=Load())], ctx=Load()))]))], orelse=[Assign(targets=[Name(id='noiseHqN', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[], keywords=[keyword(arg='shape', value=Tuple(elts=[Name(id='n_segmentsUwm', ctx=Load()), Name(id='periods', ctx=Load())], ctx=Load()))]))]), Assign(targets=[Name(id='sample', ctx=Store())], value=Name(id='noiseHqN', ctx=Load())), For(target=Tuple(elts=[Name(id='id_x', ctx=Store()), Name(id='pattern', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumer', ctx=Load()), args=[Name(id='patterns', ctx=Load())], keywords=[]), body=[AugAssign(target=Subscript(value=Name(id='sample', ctx=Load()), slice=Tuple(elts=[Name(id='id_x', ctx=Load()), Slice()], ctx=Load()), ctx=Store()), op=Add(), value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[BinOp(left=Name(id='pattern', ctx=Load()), op=Mult(), right=BinOp(left=BinOp(left=Name(id='periods', ctx=Load()), op=FloorDiv(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=1)))], keywords=[]), slice=Slice(upper=Name(id='periods', ctx=Load())), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='d_f', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Attribute(value=Name(id='sample', ctx=Load()), attr='T', ctx=Load())), keyword(arg='columns', value=ListComp(elt=JoinedStr(values=[Constant(value='segment_'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_segmentsUwm', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))])), Assign(targets=[Subscript(value=Name(id='d_f', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Name(id='sta_rt_time', ctx=Load())), keyword(arg='freq', value=Name(id='freq_', ctx=Load())), keyword(arg='periods', value=Name(id='periods', ctx=Load()))])), Assign(targets=[Name(id='d_f', ctx=Store())], value=Call(func=Attribute(value=Name(id='d_f', ctx=Load()), attr='melt', ctx=Load()), args=[], keywords=[keyword(arg='id_vars', value=List(elts=[Constant(value='timestamp')], ctx=Load())), keyword(arg='value_name', value=Constant(value='target')), keyword(arg='var_name', value=Constant(value='segment'))])), Return(value=Name(id='d_f', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], type_ignores=[])