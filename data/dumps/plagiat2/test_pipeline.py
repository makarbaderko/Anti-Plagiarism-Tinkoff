Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='etna.models', names=[alias(name='SeasonalMovingAverageModel')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='unittest.mock', names=[alias(name='MagicMock')], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='datetime', names=[alias(name='datetime')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='unittest.mock', names=[alias(name='patch')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='generate_ar_df')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='MAE')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='LogTransform')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='SMAPE')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.metrics', names=[alias(name='MetricAggregationMode')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='Width')], level=0), ImportFrom(module='etna.models', names=[alias(name='NaiveModel')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), ImportFrom(module='tests.utils', names=[alias(name='DummyMetric')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='Metric')], level=0), ImportFrom(module='etna.models', names=[alias(name='SARIMAXModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='MovingAverageModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='LinearPerSegmentModel')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='NonPredictionIntervalContextIgnorantAbstractModel')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='NonPredictionIntervalContextRequiredAbstractModel')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='PredictionIntervalContextIgnorantAbstractModel')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='PredictionIntervalContextRequiredAbstractModel')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='FoldMask')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='TimeSeriesImputerTransform')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='MSE')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='DateFlagsTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='FilterFeaturesTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='LagTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='AddConstTransform')], level=0), ImportFrom(module='etna.models', names=[alias(name='ProphetModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='CatBoostMultiSegmentModel')], level=0), Assign(targets=[Name(id='DEFAULT_METRICS', ctx=Store())], value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load()))])], ctx=Load())), FunctionDef(name='ts_with_feature', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='periodson', ctx=Store())], value=Constant(value=100)), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='start_time', value=Constant(value='2019-01-01')), keyword(arg='periods', value=Name(id='periodson', ctx=Load())), keyword(arg='ar_coef', value=List(elts=[Constant(value=1)], ctx=Load())), keyword(arg='sigma', value=Constant(value=1)), keyword(arg='n_segments', value=Constant(value=2)), keyword(arg='random_seed', value=Constant(value=0)), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='df_feature', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='start_time', value=Constant(value='2019-01-01')), keyword(arg='periods', value=Name(id='periodson', ctx=Load())), keyword(arg='ar_coef', value=List(elts=[Constant(value=0.9)], ctx=Load())), keyword(arg='sigma', value=Constant(value=2)), keyword(arg='n_segments', value=Constant(value=2)), keyword(arg='random_seed', value=Constant(value=42)), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='feature_1'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_feature', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_init_pass', args=arguments(posonlyargs=[], args=[arg(arg='horizon')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CheckʱƘ tĪȷȶʼhê̴þƭaʘtʵȾˌĕ ćPʓiơŻpelƺiněˍ iɩ̾nitialǅizˉʴϼatiĩȶʼőŕŜɦnȭ ͐wo˧rfƵk1s co͡Ǝrrec͑tly ǍiɻnɄ Ψcmaʋ}seǻ ofèƞ vϿaliŹd ˙paraĻRfǩȣmōȼϖőetersā.')), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Name(id='horizon', ctx=Load()))])), Assert(test=Compare(left=Attribute(value=Name(id='pipeline', ctx=Load()), attr='horizon', ctx=Load()), ops=[Eq()], comparators=[Name(id='horizon', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='horizon'), List(elts=[Constant(value=1)], ctx=Load())], keywords=[])]), FunctionDef(name='test_init_fail', args=arguments(posonlyargs=[], args=[arg(arg='horizon')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='Va_lueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='At least one point in the future is expected'))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Name(id='horizon', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='horizon'), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit', args=arguments(posonlyargs=[], args=[arg(arg='exam_ple_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test that Pipeline correctly transforms dataset on fit stage.')), Assign(targets=[Name(id='ORIGINAL_TS', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='exam_ple_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='transforms', ctx=Store())], value=List(elts=[Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='value', value=Constant(value=10)), keyword(arg='inplace', value=Constant(value=True))]), Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[])], ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='transforms', value=Name(id='transforms', ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='exam_ple_tsds', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ORIGINAL_TS', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ORIGINAL_TS', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Attribute(value=Name(id='ORIGINAL_TS', ctx=Load()), attr='df', ctx=Load()), attr='values', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Attribute(value=Name(id='pipeline', ctx=Load()), attr='ts', ctx=Load()), attr='df', ctx=Load()), attr='values', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_i', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='n_folds', annotation=Name(id='int', ctx=Load())), arg(arg='example_tsdf', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='TˀCɀesί˃t+ nǀ;͉ŞŔPipeʊlĳi·neγ.bŅackteɈsʶ\x90Ϛt żbehȦaɼviɜorƌř i\u0380Ȇ!ľɏƮn ďŧcǑaĈĬse of iʣĐnvaliWd n_fƟoldsćîÎ.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='Va_lueError', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='catboost_pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdf', ctx=Load())), keyword(arg='metrics', value=Name(id='DEFAULT_METRICS', ctx=Load())), keyword(arg='n_folds', value=Name(id='n_folds', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='n_folds'), Tuple(elts=[Constant(value=0), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())], keywords=[])]), FunctionDef(name='test_private_forecast_context_ignorant_model', args=arguments(posonlyargs=[], args=[arg(arg='model_class')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    &        ')), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='spec', value=Name(id='TSDataset', ctx=Load()))])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='spec', value=Name(id='model_class', ctx=Load()))])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='_forecast', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Attribute(value=Name(id='pipeline', ctx=Load()), attr='horizon', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model_class'), List(elts=[Name(id='NonPredictionIntervalContextIgnorantAbstractModel', ctx=Load()), Name(id='PredictionIntervalContextIgnorantAbstractModel', ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='te', args=arguments(posonlyargs=[], args=[arg(arg='model_class')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='spec', value=Name(id='TSDataset', ctx=Load()))])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='spec', value=Name(id='model_class', ctx=Load()))])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='_forecast', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Attribute(value=Name(id='pipeline', ctx=Load()), attr='horizon', ctx=Load())), keyword(arg='tail_steps', value=Attribute(value=Name(id='model', ctx=Load()), attr='context_size', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[])), keyword(arg='prediction_size', value=Attribute(value=Name(id='pipeline', ctx=Load()), attr='horizon', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model_class'), List(elts=[Name(id='NonPredictionIntervalContextRequiredAbstractModel', ctx=Load()), Name(id='PredictionIntervalContextRequiredAbstractModel', ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_forecast_with_intervals_prediction_interval_context_ignorant_model', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='spec', value=Name(id='TSDataset', ctx=Load()))])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='spec', value=Name(id='PredictionIntervalContextIgnorantAbstractModel', ctx=Load()))])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=Tuple(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Attribute(value=Name(id='pipeline', ctx=Load()), attr='horizon', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[])), keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=Tuple(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_validate_back_test_dataset', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline_big', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='imbalanced_tsdf', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="TeϪ́ͩstĞ șɰƸPʸǕ°ºϯipelʅήĖʘinäețz.ͅbackʷȯϦΓtest ŝƭbeɻhΏavűiΦor ΖəˁÐ£iún cas̭-̀ɥe ofè smaǖˊIÕlϦLlęƮΘ Ədatafrajmmɨþe ϙƭ[§that\nca˔n't bƃǬƋǗʶe divƜˆi¹dedʐþΘΧ6ôì to Orequired Ǔnωʫumber of splɖiτt¥ΐs.")), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='Va_lueError', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='catboost_pipeline_big', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='imbalanced_tsdf', ctx=Load())), keyword(arg='n_folds', value=Constant(value=3)), keyword(arg='metrics', value=Name(id='DEFAULT_METRICS', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='test_run_fold', args=arguments(posonlyargs=[], args=[arg(arg='ts_run_fold', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='mask', annotation=Name(id='FoldMask', ctx=Load())), arg(arg='expected', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='trai', ctx=Store()), Name(id='test', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_run_fold', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='train_start', value=Attribute(value=Name(id='mask', ctx=Load()), attr='first_train_timestamp', ctx=Load())), keyword(arg='train_end', value=Attribute(value=Name(id='mask', ctx=Load()), attr='last_train_timestamp', ctx=Load()))])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Constant(value=5))])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=4))])), Assign(targets=[Name(id='foldka', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='_run_fold', ctx=Load()), args=[Name(id='trai', ctx=Load()), Name(id='test', ctx=Load()), Constant(value=1), Name(id='mask', ctx=Load()), List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[keyword(arg='forecast_params', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[]))])), For(target=Name(id='s_eg', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='foldka', ctx=Load()), slice=Constant(value='metrics'), ctx=Load()), slice=Constant(value='MAE'), ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='foldka', ctx=Load()), slice=Constant(value='metrics'), ctx=Load()), slice=Constant(value='MAE'), ctx=Load()), slice=Name(id='s_eg', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='expected', ctx=Load()), slice=Name(id='s_eg', ctx=Load()), ctx=Load())]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='mask,expected'), Tuple(elts=[Tuple(elts=[Call(func=Name(id='FoldMask', ctx=Load()), args=[Constant(value='2020-01-01'), Constant(value='2020-01-07'), List(elts=[Constant(value='2020-01-10')], ctx=Load())], keywords=[]), Dict(keys=[Constant(value='segment_0'), Constant(value='segment_1')], values=[Constant(value=0), Constant(value=11)])], ctx=Load()), Tuple(elts=[Call(func=Name(id='FoldMask', ctx=Load()), args=[Constant(value='2020-01-01'), Constant(value='2020-01-07'), List(elts=[Constant(value='2020-01-08'), Constant(value='2020-01-11')], ctx=Load())], keywords=[]), Dict(keys=[Constant(value='segment_0'), Constant(value='segment_1')], values=[Constant(value=95.5), Constant(value=5)])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_forecast', args=arguments(posonlyargs=[], args=[arg(arg='exam_ple_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ORIGINAL_TS', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='exam_ple_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='transforms', ctx=Store())], value=List(elts=[Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='value', value=Constant(value=10)), keyword(arg='inplace', value=Constant(value=True))]), Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[])], ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='transforms', value=Name(id='transforms', ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='exam_ple_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast_pipeline', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ORIGINAL_TS', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ORIGINAL_TS', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Name(id='ORIGINAL_TS', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=5)], keywords=[])), Assign(targets=[Name(id='forecast_manual', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Attribute(value=Name(id='forecast_pipeline', ctx=Load()), attr='df', ctx=Load()), attr='values', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Name(id='forecast_manual', ctx=Load()), attr='df', ctx=Load()), attr='values', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_forecast_prediction_interval_incorrect_parameters', args=arguments(posonlyargs=[], args=[arg(arg='exam_ple_tsds'), arg(arg='catboost_pipeline'), arg(arg='quantile'), arg(arg='prediction_interval_cv'), arg(arg='error_msg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='catboost_pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='exam_ple_tsds', ctx=Load())], keywords=[]))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='Va_lueError', ctx=Load())], keywords=[keyword(arg='match', value=Name(id='error_msg', ctx=Load()))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='catboost_pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='quantiles', value=Name(id='quantile', ctx=Load())), keyword(arg='n_folds', value=Name(id='prediction_interval_cv', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='quantiles,prediction_interval_cv,error_msg'), List(elts=[Tuple(elts=[List(elts=[Constant(value=0.05), Constant(value=1.5)], ctx=Load()), Constant(value=2), Constant(value='Quantile should be a number from')], ctx=Load()), Tuple(elts=[List(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()), Constant(value=0), Constant(value='Folds number should be a positive number, 0 given')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_forecast_without_intervals_calls_private_forecast', args=arguments(posonlyargs=[], args=[arg(arg='private_forecast'), arg(arg='exam_ple_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ſ     Ϋ                         ')), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='transforms', ctx=Store())], value=List(elts=[Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='value', value=Constant(value=10)), keyword(arg='inplace', value=Constant(value=True))]), Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[])], ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='transforms', value=Name(id='transforms', ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='exam_ple_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='private_forecast', ctx=Load()), attr='assert_called', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='etna.pipeline.pipeline.Pipeline._forecast')], keywords=[])]), FunctionDef(name='test_forecast_prediction_interval_interface', args=arguments(posonlyargs=[], args=[arg(arg='exam_ple_tsds'), arg(arg='model')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='TeʐŋƱst the f̐orecǐƹa˦st \x97interfaceͼ fͷor the modeˉls withoéut Ɠbšuilt-in pȁreʡdiction ̔inter¥valǀs.ɞ')), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='transforms', value=List(elts=[Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='exam_ple_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='FORECAST', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='FORECAST', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_slice', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='FORECAST', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Set(elts=[Constant(value='target_0.025'), Constant(value='target_0.975'), Constant(value='target')]), attr='issubset', ctx=Load()), args=[Attribute(value=Name(id='segment_slice', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=BinOp(left=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.975'), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.025'), ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)]), attr='all', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), Tuple(elts=[Call(func=Name(id='MovingAverageModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])]), FunctionDef(name='test_forecast_prediction_interval', args=arguments(posonlyargs=[], args=[arg(arg='splited_piecewise_constant_ts')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='TestÁ that the preˏdiction interval for pieceùwise-constant dataset is əcorrecϲt.')), Assign(targets=[Tuple(elts=[Name(id='trai', ctx=Store()), Name(id='test', ctx=Store())], ctx=Store())], value=Name(id='splited_piecewise_constant_ts', ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Constant(value=1))])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='trai', ctx=Load())], keywords=[])), Assign(targets=[Name(id='FORECAST', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='prediction_interval', value=Constant(value=True))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='allclose', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='FORECAST', ctx=Load()), attr='df', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Attribute(value=Name(id='test', ctx=Load()), attr='df', ctx=Load()), attr='values', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_invalid_backtest_metrics', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='metrics', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Metric', ctx=Load()), ctx=Load())), arg(arg='example_tsdf', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test PϜipÀƏelͱine.¨bacƔkt©e͡stɶ ǒŜbʢehƄavior in case ofι invalͽiΣd mͭĲetƓrics.Ǘ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='Va_lueError', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='catboost_pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdf', ctx=Load())), keyword(arg='metrics', value=Name(id='metrics', ctx=Load())), keyword(arg='n_folds', value=Constant(value=2))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='metrics'), Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='macro', ctx=Load()))])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_forecast_with_intervals_other_model', args=arguments(posonlyargs=[], args=[arg(arg='ba'), arg(arg='model_class')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ƒ\x98        ˞     ')), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='spec', value=Name(id='TSDataset', ctx=Load()))])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='spec', value=Name(id='model_class', ctx=Load()))])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=Tuple(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ba', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=Tuple(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load())), keyword(arg='n_folds', value=Constant(value=3))]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='etna.pipeline.base.BasePipeline.forecast')], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model_class'), List(elts=[Name(id='NonPredictionIntervalContextIgnorantAbstractModel', ctx=Load()), Name(id='NonPredictionIntervalContextRequiredAbstractModel', ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_forecast_raise', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[])), keyword(arg='horizon', value=Constant(value=5))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='Va_lueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Pipeline is not fitted!'))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_forecast_prediction_interv_al_size', args=arguments(posonlyargs=[], args=[arg(arg='exam_ple_tsds'), arg(arg='quantiles_narrow'), arg(arg='quantiles_wide')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='WTeλsŔtƥ that nar͍row qu͖anŖtȣile leveOȼls ơgƵives more ǛʤƩɌnarroȱw inteΎǜrval than wƜŀide ¼qǽuantiɔle l͈evReοåɢls.')), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='MovingAverageModel', ctx=Load()), args=[], keywords=[])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='exam_ple_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='FORECAST', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=Name(id='quantiles_narrow', ctx=Load()))])), Assign(targets=[Name(id='narrow_interval_length', ctx=Store())], value=BinOp(left=Attribute(value=Subscript(value=Name(id='FORECAST', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Subscript(value=Name(id='quantiles_narrow', ctx=Load()), slice=Constant(value=1), ctx=Load()), conversion=-1)])], ctx=Load()), ctx=Load()), attr='values', ctx=Load()), op=Sub(), right=Attribute(value=Subscript(value=Name(id='FORECAST', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Subscript(value=Name(id='quantiles_narrow', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1)])], ctx=Load()), ctx=Load()), attr='values', ctx=Load()))), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='MovingAverageModel', ctx=Load()), args=[], keywords=[])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='exam_ple_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='FORECAST', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=Name(id='quantiles_wide', ctx=Load()))])), Assign(targets=[Name(id='wide_interval_length', ctx=Store())], value=BinOp(left=Attribute(value=Subscript(value=Name(id='FORECAST', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Subscript(value=Name(id='quantiles_wide', ctx=Load()), slice=Constant(value=1), ctx=Load()), conversion=-1)])], ctx=Load()), ctx=Load()), attr='values', ctx=Load()), op=Sub(), right=Attribute(value=Subscript(value=Name(id='FORECAST', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Subscript(value=Name(id='quantiles_wide', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1)])], ctx=Load()), ctx=Load()), attr='values', ctx=Load()))), Assert(test=Call(func=Attribute(value=Compare(left=Name(id='narrow_interval_length', ctx=Load()), ops=[LtE()], comparators=[Name(id='wide_interval_length', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='quantiles_narrow,quantiles_wide'), List(elts=[Tuple(elts=[List(elts=[Constant(value=0.2), Constant(value=0.8)], ctx=Load()), List(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='TEST_GET_FORECASTS_INTERFACE_DAILY', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='big_daily_example_tsdfuWK', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='__', ctx=Store()), Name(id='FORECAST', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='catboost_pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='big_daily_example_tsdfuWK', ctx=Load())), keyword(arg='metrics', value=Name(id='DEFAULT_METRICS', ctx=Load()))])), Assign(targets=[Name(id='EXPECTED_COLUMNS', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[List(elts=[Constant(value='regressor_lag_feature_10'), Constant(value='regressor_lag_feature_11'), Constant(value='regressor_lag_feature_12'), Constant(value='fold_number'), Constant(value='target')], ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='EXPECTED_COLUMNS', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='FORECAST', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])], keywords=[])]))], decorator_list=[]), FunctionDef(name='t_est_predict', args=arguments(posonlyargs=[], args=[arg(arg='model'), arg(arg='transforms'), arg(arg='exam_ple_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Name(id='exam_ple_tsds', ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='transforms', value=Name(id='transforms', ctx=Load())), keyword(arg='horizon', value=Constant(value=7))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='start_idx', ctx=Store())], value=Constant(value=50)), Assign(targets=[Name(id='end_idx', ctx=Store())], value=Constant(value=70)), Assign(targets=[Name(id='start_time_stamp', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), slice=Name(id='start_idx', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='end_timestamp', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), slice=Name(id='end_idx', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='num_points', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='end_idx', ctx=Load()), op=Sub(), right=Name(id='start_idx', ctx=Load())), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='predict_ts', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='predict_ts', ctx=Load()), attr='df', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='predict_ts', ctx=Load()), attr='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=Constant(value=5), upper=BinOp(left=Name(id='end_idx', ctx=Load()), op=Add(), right=Constant(value=5))), ctx=Load())), Assign(targets=[Name(id='result_ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='predict_ts', ctx=Load())), keyword(arg='start_timestamp', value=Name(id='start_time_stamp', ctx=Load())), keyword(arg='end_timestamp', value=Name(id='end_timestamp', ctx=Load()))])), Assign(targets=[Name(id='result_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='result_ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='any', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='result_df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])], keywords=[]))), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='result_df', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='exam_ple_tsds', ctx=Load()), attr='segments', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='num_points', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, transforms'), List(elts=[Tuple(elts=[Call(func=Name(id='CatBoostMultiSegmentModel', ctx=Load()), args=[], keywords=[keyword(arg='iterations', value=Constant(value=100))]), List(elts=[Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='rangeBUm', ctx=Load()), args=[Constant(value=7), Constant(value=15)], keywords=[])], keywords=[]))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='rangeBUm', ctx=Load()), args=[Constant(value=7), Constant(value=15)], keywords=[])], keywords=[]))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SeasonalMovingAverageModel', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Constant(value=2)), keyword(arg='seasonality', value=Constant(value=7))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_generate_expandable_timeran', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test train-test Įtimeranges genƼeration in expan`˘d mode with hour freq')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01'), Constant(value='2020-02-01')], keywords=[keyword(arg='freq', value=Constant(value='H'))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='seg')), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='pivot', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Constant(value='timestamp')), keyword(arg='columns', value=Constant(value='segment'))]), attr='reorder_levels', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=0)], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))]), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='names', ctx=Store())], value=List(elts=[Constant(value='segment'), Constant(value='feature')], ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='H'))])), Assign(targets=[Name(id='true_borders', ctx=Store())], value=Tuple(elts=[Tuple(elts=[Tuple(elts=[Constant(value='2020-01-01 00:00:00'), Constant(value='2020-01-30 12:00:00')], ctx=Load()), Tuple(elts=[Constant(value='2020-01-30 13:00:00'), Constant(value='2020-01-31 00:00:00')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2020-01-01 00:00:00'), Constant(value='2020-01-31 00:00:00')], ctx=Load()), Tuple(elts=[Constant(value='2020-01-31 01:00:00'), Constant(value='2020-01-31 12:00:00')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2020-01-01 00:00:00'), Constant(value='2020-01-31 12:00:00')], ctx=Load()), Tuple(elts=[Constant(value='2020-01-31 13:00:00'), Constant(value='2020-02-01 00:00:00')], ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='masks', ctx=Store())], value=Call(func=Attribute(value=Name(id='Pipeline', ctx=Load()), attr='_generate_masks_from_n_folds', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='n_folds', value=Constant(value=3)), keyword(arg='horizon', value=Constant(value=12)), keyword(arg='mode', value=Constant(value='expand'))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='stag', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Pipeline', ctx=Load()), attr='_generate_folds_datasets', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(arg='horizon', value=Constant(value=12)), keyword(arg='masks', value=Name(id='masks', ctx=Load()))])], keywords=[]), body=[For(target=Tuple(elts=[Name(id='stage_df', ctx=Store()), Name(id='borde', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='stag', ctx=Load()), Subscript(value=Name(id='true_borders', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]), body=[Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='stage_df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='strptime', ctx=Load()), args=[Subscript(value=Name(id='borde', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value='%Y-%m-%d %H:%M:%S')], keywords=[]), attr='date', ctx=Load()), args=[], keywords=[])])), Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='stage_df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='strptime', ctx=Load()), args=[Subscript(value=Name(id='borde', ctx=Load()), slice=Constant(value=1), ctx=Load()), Constant(value='%Y-%m-%d %H:%M:%S')], keywords=[]), attr='date', ctx=Load()), args=[], keywords=[])]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='test_generate_constant_timeranges_days', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='TĹestv̮ʝ traƷiP̈́Ƽȶn-\x94ɕtest ti˙ăŌmerőaƇƫ˩ngŔe϶sÓƧȖĘ g˥enerǁation˅    withĚ͟ c\x95o̘nstϼant moϢdλe witǨh daƊilyƜ fŵrΡɄĳe̾q')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-04-01')], keywords=[])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='seg')), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='pivot', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Constant(value='timestamp')), keyword(arg='columns', value=Constant(value='segment'))]), attr='reorder_levels', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=0)], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))]), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='names', ctx=Store())], value=List(elts=[Constant(value='segment'), Constant(value='feature')], ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='true_borders', ctx=Store())], value=Tuple(elts=[Tuple(elts=[Tuple(elts=[Constant(value='2021-01-01'), Constant(value='2021-02-24')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-25'), Constant(value='2021-03-08')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2021-01-13'), Constant(value='2021-03-08')], ctx=Load()), Tuple(elts=[Constant(value='2021-03-09'), Constant(value='2021-03-20')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2021-01-25'), Constant(value='2021-03-20')], ctx=Load()), Tuple(elts=[Constant(value='2021-03-21'), Constant(value='2021-04-01')], ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='masks', ctx=Store())], value=Call(func=Attribute(value=Name(id='Pipeline', ctx=Load()), attr='_generate_masks_from_n_folds', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='n_folds', value=Constant(value=3)), keyword(arg='horizon', value=Constant(value=12)), keyword(arg='mode', value=Constant(value='constant'))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='stag', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Pipeline', ctx=Load()), attr='_generate_folds_datasets', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(arg='horizon', value=Constant(value=12)), keyword(arg='masks', value=Name(id='masks', ctx=Load()))])], keywords=[]), body=[For(target=Tuple(elts=[Name(id='stage_df', ctx=Store()), Name(id='borde', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='stag', ctx=Load()), Subscript(value=Name(id='true_borders', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]), body=[Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='stage_df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='strptime', ctx=Load()), args=[Subscript(value=Name(id='borde', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value='%Y-%m-%d')], keywords=[]), attr='date', ctx=Load()), args=[], keywords=[])])), Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='stage_df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='strptime', ctx=Load()), args=[Subscript(value=Name(id='borde', ctx=Load()), slice=Constant(value=1), ctx=Load()), Constant(value='%Y-%m-%d')], keywords=[]), attr='date', ctx=Load()), args=[], keywords=[])]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='test_generate_constant_timeranges_hours', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test traΩin-test\x9e tiƏmeranges generJation with cĠonsĩtant mode wǀith hours freq')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01'), Constant(value='2020-02-01')], keywords=[keyword(arg='freq', value=Constant(value='H'))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='seg')), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='pivot', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Constant(value='timestamp')), keyword(arg='columns', value=Constant(value='segment'))]), attr='reorder_levels', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=0)], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))]), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='names', ctx=Store())], value=List(elts=[Constant(value='segment'), Constant(value='feature')], ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='H'))])), Assign(targets=[Name(id='true_borders', ctx=Store())], value=Tuple(elts=[Tuple(elts=[Tuple(elts=[Constant(value='2020-01-01 00:00:00'), Constant(value='2020-01-30 12:00:00')], ctx=Load()), Tuple(elts=[Constant(value='2020-01-30 13:00:00'), Constant(value='2020-01-31 00:00:00')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2020-01-01 12:00:00'), Constant(value='2020-01-31 00:00:00')], ctx=Load()), Tuple(elts=[Constant(value='2020-01-31 01:00:00'), Constant(value='2020-01-31 12:00:00')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2020-01-02 00:00:00'), Constant(value='2020-01-31 12:00:00')], ctx=Load()), Tuple(elts=[Constant(value='2020-01-31 13:00:00'), Constant(value='2020-02-01 00:00:00')], ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='masks', ctx=Store())], value=Call(func=Attribute(value=Name(id='Pipeline', ctx=Load()), attr='_generate_masks_from_n_folds', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='n_folds', value=Constant(value=3)), keyword(arg='horizon', value=Constant(value=12)), keyword(arg='mode', value=Constant(value='constant'))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='stag', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Pipeline', ctx=Load()), attr='_generate_folds_datasets', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(arg='horizon', value=Constant(value=12)), keyword(arg='masks', value=Name(id='masks', ctx=Load()))])], keywords=[]), body=[For(target=Tuple(elts=[Name(id='stage_df', ctx=Store()), Name(id='borde', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='stag', ctx=Load()), Subscript(value=Name(id='true_borders', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]), body=[Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='stage_df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='strptime', ctx=Load()), args=[Subscript(value=Name(id='borde', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value='%Y-%m-%d %H:%M:%S')], keywords=[]), attr='date', ctx=Load()), args=[], keywords=[])])), Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='stage_df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='strptime', ctx=Load()), args=[Subscript(value=Name(id='borde', ctx=Load()), slice=Constant(value=1), ctx=Load()), Constant(value='%Y-%m-%d %H:%M:%S')], keywords=[]), attr='date', ctx=Load()), args=[], keywords=[])]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='test_get_metrics_interface', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='aggregate_metr', annotation=Name(id='bool', ctx=Load())), arg(arg='EXPECTED_COLUMNS', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='big_daily_example_tsdfuWK', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CϠʑϠhecŕk ˞`thϜΓˏʹat̮ Pőipelin̟e.bacʻkteǧʷîΗst ţŭrȏɐKetuȈrnϧs ̫metric̢ƙs˶ ÃälVin corƒʁƅrȎ,Ηecĸt Εfo̾ʑʘͣ˟?rϏmat.[')), Assign(targets=[Tuple(elts=[Name(id='metrics_df', ctx=Store()), Name(id='__', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='catboost_pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='big_daily_example_tsdfuWK', ctx=Load())), keyword(arg='aggregate_metrics', value=Name(id='aggregate_metr', ctx=Load())), keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[Constant(value='per-segment')], keywords=[]), Call(func=Name(id='MSE', ctx=Load()), args=[Constant(value='per-segment')], keywords=[]), Call(func=Name(id='SMAPE', ctx=Load()), args=[Constant(value='per-segment')], keywords=[]), Call(func=Name(id='DummyMetric', ctx=Load()), args=[Constant(value='per-segment')], keywords=[keyword(arg='alpha', value=Constant(value=0.0))])], ctx=Load()))])), Assert(test=Compare(left=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='EXPECTED_COLUMNS', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='metrics_df', ctx=Load()), attr='columns', ctx=Load())], keywords=[])]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='aggregate_metrics,expected_columns'), Tuple(elts=[Tuple(elts=[Constant(value=False), List(elts=[Constant(value='fold_number'), Constant(value='MAE'), Constant(value='MSE'), Constant(value='segment'), Constant(value='SMAPE'), Call(func=Attribute(value=Call(func=Name(id='DummyMetric', ctx=Load()), args=[Constant(value='per-segment')], keywords=[keyword(arg='alpha', value=Constant(value=0.0))]), attr='__repr__', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=True), List(elts=[Constant(value='MAE'), Constant(value='MSE'), Constant(value='segment'), Constant(value='SMAPE'), Call(func=Attribute(value=Call(func=Name(id='DummyMetric', ctx=Load()), args=[Constant(value='per-segment')], keywords=[keyword(arg='alpha', value=Constant(value=0.0))]), attr='__repr__', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_generate_expandable_timeranges_days', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='T˛est ȭǌt¥̩rainΟ-toe˜κsìt̞ AtimerºvanΜȢgeïʲMNύϡs˝ g˺Veʚnșe̽raćtion iƍnǯϋ exp̣Ƈan±Ωd ƔÒmo˄dÔΥe ˛ϮwiƲŵ̽tΡ¯ϔh d͋ŝaȼi"ƫ\xadÒl¸Ūy fʉʉîrɵ\x87eqǷ')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-04-01')], keywords=[])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='seg')), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='pivot', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Constant(value='timestamp')), keyword(arg='columns', value=Constant(value='segment'))]), attr='reorder_levels', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=0)], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))]), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='names', ctx=Store())], value=List(elts=[Constant(value='segment'), Constant(value='feature')], ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='true_borders', ctx=Store())], value=Tuple(elts=[Tuple(elts=[Tuple(elts=[Constant(value='2021-01-01'), Constant(value='2021-02-24')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-25'), Constant(value='2021-03-08')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2021-01-01'), Constant(value='2021-03-08')], ctx=Load()), Tuple(elts=[Constant(value='2021-03-09'), Constant(value='2021-03-20')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2021-01-01'), Constant(value='2021-03-20')], ctx=Load()), Tuple(elts=[Constant(value='2021-03-21'), Constant(value='2021-04-01')], ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='masks', ctx=Store())], value=Call(func=Attribute(value=Name(id='Pipeline', ctx=Load()), attr='_generate_masks_from_n_folds', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='n_folds', value=Constant(value=3)), keyword(arg='horizon', value=Constant(value=12)), keyword(arg='mode', value=Constant(value='expand'))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='stag', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Pipeline', ctx=Load()), attr='_generate_folds_datasets', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(arg='masks', value=Name(id='masks', ctx=Load())), keyword(arg='horizon', value=Constant(value=12))])], keywords=[]), body=[For(target=Tuple(elts=[Name(id='stage_df', ctx=Store()), Name(id='borde', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='stag', ctx=Load()), Subscript(value=Name(id='true_borders', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]), body=[Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='stage_df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='strptime', ctx=Load()), args=[Subscript(value=Name(id='borde', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value='%Y-%m-%d')], keywords=[]), attr='date', ctx=Load()), args=[], keywords=[])])), Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='stage_df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='strptime', ctx=Load()), args=[Subscript(value=Name(id='borde', ctx=Load()), slice=Constant(value=1), ctx=Load()), Constant(value='%Y-%m-%d')], keywords=[]), attr='date', ctx=Load()), args=[], keywords=[])]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='test_get_forecasts_interface_hours', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='example_tsdf', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Öò\xa0CheȊSckŭ żʚthaŸ˔t P˥ipeĻlinͻe.ƽba̠c¹kȕŽʾteʈst rϲetǒuʝrƈnΙ̅ˎs ¢ˈƛfor͢ɛdƥec͖aɎsªΗ̃Ƶtôs ŨinǤį\x84 cƅˌoπă5ɜrre&cϑtē foʚʡrδΒϕmƉaĢɖʗXt \x9bͧwi˺tvȒh nűon˷-ϣϏɦ̙daily Ϡ\x85sΈ\x92eas̳σonaˎlityǫ.')), Assign(targets=[Tuple(elts=[Name(id='__', ctx=Store()), Name(id='FORECAST', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='catboost_pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdf', ctx=Load())), keyword(arg='metrics', value=Name(id='DEFAULT_METRICS', ctx=Load()))])), Assign(targets=[Name(id='EXPECTED_COLUMNS', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[List(elts=[Constant(value='regressor_lag_feature_10'), Constant(value='regressor_lag_feature_11'), Constant(value='regressor_lag_feature_12'), Constant(value='fold_number'), Constant(value='target')], ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='EXPECTED_COLUMNS', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='FORECAST', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])], keywords=[])]))], decorator_list=[]), FunctionDef(name='test_pipeline_with_deepmodelsnOmk', args=arguments(posonlyargs=[], args=[arg(arg='exam_ple_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='etna.models.nn', names=[alias(name='RNNModel')], level=0), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='RNNModel', ctx=Load()), args=[], keywords=[keyword(arg='input_size', value=Constant(value=1)), keyword(arg='encoder_length', value=Constant(value=14)), keyword(arg='decoder_length', value=Constant(value=14)), keyword(arg='trainer_params', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=1))]))])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=2))])), Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='exam_ple_tsds', ctx=Load())), keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='n_folds', value=Constant(value=2)), keyword(arg='aggregate_metrics', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='test_get_fold_info_interface_dailyBf', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='big_daily_example_tsdfuWK', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Cɫháec͞k tȺhaǹt΅Ȋʿ P2ipeɎline>.baõcktest r͔ʱ˾eǴturΑʤns info daʫtɡ͜a\x9efťʂÅrpΕa̭meË\x88ϸ iĹƐn corr˝ʹǴecʩŲt fƣâo\x92ʧę˾rǤmaɆt.')), Assign(targets=[Tuple(elts=[Name(id='__', ctx=Store()), Name(id='__', ctx=Store()), Name(id='info_df', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='catboost_pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='big_daily_example_tsdfuWK', ctx=Load())), keyword(arg='metrics', value=Name(id='DEFAULT_METRICS', ctx=Load()))])), Assign(targets=[Name(id='EXPECTED_COLUMNS', ctx=Store())], value=List(elts=[Constant(value='fold_number'), Constant(value='test_end_time'), Constant(value='test_start_time'), Constant(value='train_end_time'), Constant(value='train_start_time')], ctx=Load())), Assert(test=Compare(left=Name(id='EXPECTED_COLUMNS', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='info_df', ctx=Load()), attr='columns', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='test_backt', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='big_example_tsdf', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ch͓eck that ΔPipeliΔne.̏backtŎest gives the same resultɎs in case of Ę͖ϲ̼single ȕanϝd multiplŧe jobs modes.')), Assign(targets=[Name(id='ts1', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='big_example_tsdf', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tsr', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='big_example_tsdf', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pipeline_1', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='catboost_pipeline', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pipeline_2', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='catboost_pipeline', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='__', ctx=Store()), Name(id='forecast_1', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline_1', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts1', ctx=Load())), keyword(arg='n_jobs', value=Constant(value=1)), keyword(arg='metrics', value=Name(id='DEFAULT_METRICS', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='__', ctx=Store()), Name(id='forecast_2', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline_2', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='tsr', ctx=Load())), keyword(arg='n_jobs', value=Constant(value=3)), keyword(arg='metrics', value=Name(id='DEFAULT_METRICS', ctx=Load()))])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Name(id='forecast_1', ctx=Load()), ops=[Eq()], comparators=[Name(id='forecast_2', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='long_1', ctx=Load())]), FunctionDef(name='test_forecast_backtest_correct_orderingNEuWI', args=arguments(posonlyargs=[], args=[arg(arg='s_tep_ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='        ǭ         ×')), Assign(targets=[Tuple(elts=[Name(id='ts', ctx=Store()), Name(id='__', ctx=Store()), Name(id='exp_ected_forecast_df', ctx=Store())], ctx=Store())], value=Name(id='s_tep_ts', ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[])), keyword(arg='horizon', value=Constant(value=5))])), Assign(targets=[Tuple(elts=[Name(id='__', ctx=Store()), Name(id='forecast_df', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='n_folds', value=Constant(value=3))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='values', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='exp_ected_forecast_df', ctx=Load()), attr='values', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_generate_folds_datasets', args=arguments(posonlyargs=[], args=[arg(arg='ts_na'), arg(arg='mask'), arg(arg='re')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='ts_na', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Constant(value=7))]))])), Assign(targets=[Name(id='mask', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='_prepare_fold_masks', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='masks', value=List(elts=[Name(id='mask', ctx=Load())], ctx=Load())), keyword(arg='mode', value=Constant(value='constant'))]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='trai', ctx=Store()), Name(id='test', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='_generate_folds_datasets', ctx=Load()), args=[Name(id='ts', ctx=Load()), List(elts=[Name(id='mask', ctx=Load())], ctx=Load()), Constant(value=4)], keywords=[])], keywords=[]), slice=Constant(value=0), ctx=Load())), Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='trai', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Attribute(value=Name(id='mask', ctx=Load()), attr='first_train_timestamp', ctx=Load())], keywords=[])])), Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='trai', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Attribute(value=Name(id='mask', ctx=Load()), attr='last_train_timestamp', ctx=Load())], keywords=[])])), Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='test', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Attribute(value=Name(id='mask', ctx=Load()), attr='last_train_timestamp', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='timedelta64', ctx=Load()), args=[Constant(value=1), Constant(value='D')], keywords=[]))])), Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='test', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Attribute(value=Name(id='mask', ctx=Load()), attr='last_train_timestamp', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='timedelta64', ctx=Load()), args=[Constant(value=4), Constant(value='D')], keywords=[]))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='mask'), Tuple(elts=[Call(func=Name(id='FoldMask', ctx=Load()), args=[Constant(value='2020-01-01'), Constant(value='2020-01-02'), List(elts=[Constant(value='2020-01-03')], ctx=Load())], keywords=[]), Call(func=Name(id='FoldMask', ctx=Load()), args=[Constant(value='2020-01-03'), Constant(value='2020-01-05'), List(elts=[Constant(value='2020-01-06')], ctx=Load())], keywords=[])], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='ts_name'), List(elts=[Constant(value='simple_ts'), Constant(value='simple_ts_starting_with_nans_one_segment'), Constant(value='simple_ts_starting_with_nans_all_segments')], ctx=Load())], keywords=[])]), FunctionDef(name='TEST_FORECAST_PIPELINE_WITH_NAN_AT_THE_END', args=arguments(posonlyargs=[], args=[arg(arg='df_with_nans_in_tails')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Te\xa0s£tɞ ťηhȥat ξČP\x98ĄipelɊi͘neϬ Ǣcaʹn| ϨŃfʸoǷrec*asǻĺÊtD wƴșiϢùƪth dϊŋǼaͮtaơseōts ˑ̩əˀƓwitňh ȫņanǄƃħĮs atΠ ńΧth\x99̯ɺɛ͡eɠȳŦƏ enìd'̽.ɔ")), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[])), keyword(arg='transforms', value=List(elts=[Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='strategy', value=Constant(value='forward_fill'))])], ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df_with_nans_in_tails', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='1H'))])], keywords=[])), Assign(targets=[Name(id='FORECAST', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='FORECAST', ctx=Load()), attr='df', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=5)]))], decorator_list=[]), FunctionDef(name='test_generate_masks_from_n_folds', args=arguments(posonlyargs=[], args=[arg(arg='exam_ple_tsds', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='n_folds'), arg(arg='mode'), arg(arg='expected_masks')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='masks', ctx=Store())], value=Call(func=Attribute(value=Name(id='Pipeline', ctx=Load()), attr='_generate_masks_from_n_folds', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='exam_ple_tsds', ctx=Load())), keyword(arg='n_folds', value=Name(id='n_folds', ctx=Load())), keyword(arg='horizon', value=Constant(value=3)), keyword(arg='mode', value=Name(id='mode', ctx=Load()))])), For(target=Tuple(elts=[Name(id='mask', ctx=Store()), Name(id='expected_m', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='masks', ctx=Load()), Name(id='expected_masks', ctx=Load())], keywords=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='mask', ctx=Load()), attr='first_train_timestamp', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='expected_m', ctx=Load()), attr='first_train_timestamp', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='mask', ctx=Load()), attr='last_train_timestamp', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='expected_m', ctx=Load()), attr='last_train_timestamp', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='mask', ctx=Load()), attr='target_timestamps', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='expected_m', ctx=Load()), attr='target_timestamps', ctx=Load())]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='n_folds, mode, expected_masks'), Tuple(elts=[Tuple(elts=[Constant(value=2), Constant(value='expand'), List(elts=[Call(func=Name(id='FoldMask', ctx=Load()), args=[], keywords=[keyword(arg='first_train_timestamp', value=Constant(value='2020-01-01')), keyword(arg='last_train_timestamp', value=Constant(value='2020-04-03')), keyword(arg='target_timestamps', value=List(elts=[Constant(value='2020-04-04'), Constant(value='2020-04-05'), Constant(value='2020-04-06')], ctx=Load()))]), Call(func=Name(id='FoldMask', ctx=Load()), args=[], keywords=[keyword(arg='first_train_timestamp', value=Constant(value='2020-01-01')), keyword(arg='last_train_timestamp', value=Constant(value='2020-04-06')), keyword(arg='target_timestamps', value=List(elts=[Constant(value='2020-04-07'), Constant(value='2020-04-08'), Constant(value='2020-04-09')], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value='constant'), List(elts=[Call(func=Name(id='FoldMask', ctx=Load()), args=[], keywords=[keyword(arg='first_train_timestamp', value=Constant(value='2020-01-01')), keyword(arg='last_train_timestamp', value=Constant(value='2020-04-03')), keyword(arg='target_timestamps', value=List(elts=[Constant(value='2020-04-04'), Constant(value='2020-04-05'), Constant(value='2020-04-06')], ctx=Load()))]), Call(func=Name(id='FoldMask', ctx=Load()), args=[], keywords=[keyword(arg='first_train_timestamp', value=Constant(value='2020-01-04')), keyword(arg='last_train_timestamp', value=Constant(value='2020-04-06')), keyword(arg='target_timestamps', value=List(elts=[Constant(value='2020-04-07'), Constant(value='2020-04-08'), Constant(value='2020-04-09')], ctx=Load()))])], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_ge', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='example_tsdf', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CheϏcʨk thatʜ Pipeline.backutest reδtuÝ̄rns infƂo dataframe ħin correct format with nonʯ-daǛϕily seasonalitɵy.')), Assign(targets=[Tuple(elts=[Name(id='__', ctx=Store()), Name(id='__', ctx=Store()), Name(id='info_df', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='catboost_pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdf', ctx=Load())), keyword(arg='metrics', value=Name(id='DEFAULT_METRICS', ctx=Load()))])), Assign(targets=[Name(id='EXPECTED_COLUMNS', ctx=Store())], value=List(elts=[Constant(value='fold_number'), Constant(value='test_end_time'), Constant(value='test_start_time'), Constant(value='train_end_time'), Constant(value='train_start_time')], ctx=Load())), Assert(test=Compare(left=Name(id='EXPECTED_COLUMNS', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='info_df', ctx=Load()), attr='columns', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='test_generate_folds_datasets_without_first_date', args=arguments(posonlyargs=[], args=[arg(arg='ts_na'), arg(arg='mask'), arg(arg='re')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ȳCheckǘ Ʃ_genϓe;rate_ΣfoŮlds͇_datasetsė fo¦˖r̴ correctʜ work ϋwitho˗ut first date.')), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='ts_na', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Constant(value=7))]))])), Assign(targets=[Name(id='mask', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='_prepare_fold_masks', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='masks', value=List(elts=[Name(id='mask', ctx=Load())], ctx=Load())), keyword(arg='mode', value=Constant(value='constant'))]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='trai', ctx=Store()), Name(id='test', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='_generate_folds_datasets', ctx=Load()), args=[Name(id='ts', ctx=Load()), List(elts=[Name(id='mask', ctx=Load())], ctx=Load()), Constant(value=4)], keywords=[])], keywords=[]), slice=Constant(value=0), ctx=Load())), Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='trai', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])], keywords=[])])), Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='trai', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Attribute(value=Name(id='mask', ctx=Load()), attr='last_train_timestamp', ctx=Load())], keywords=[])])), Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='test', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Attribute(value=Name(id='mask', ctx=Load()), attr='last_train_timestamp', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='timedelta64', ctx=Load()), args=[Constant(value=1), Constant(value='D')], keywords=[]))])), Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='test', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Attribute(value=Name(id='mask', ctx=Load()), attr='last_train_timestamp', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='timedelta64', ctx=Load()), args=[Constant(value=4), Constant(value='D')], keywords=[]))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='mask'), Tuple(elts=[Call(func=Name(id='FoldMask', ctx=Load()), args=[Constant(value=None), Constant(value='2020-01-02'), List(elts=[Constant(value='2020-01-03')], ctx=Load())], keywords=[]), Call(func=Name(id='FoldMask', ctx=Load()), args=[Constant(value=None), Constant(value='2020-01-05'), List(elts=[Constant(value='2020-01-06')], ctx=Load())], keywords=[])], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='ts_name'), List(elts=[Constant(value='simple_ts'), Constant(value='simple_ts_starting_with_nans_one_segment'), Constant(value='simple_ts_starting_with_nans_all_segments')], ctx=Load())], keywords=[])]), FunctionDef(name='test_forecast_with_intervals_prediction_interval_context_required_model', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='     Ƹ     ˪X ƥ')), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='spec', value=Name(id='TSDataset', ctx=Load()))])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='spec', value=Name(id='PredictionIntervalContextRequiredAbstractModel', ctx=Load()))])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=Tuple(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Attribute(value=Name(id='pipeline', ctx=Load()), attr='horizon', ctx=Load())), keyword(arg='tail_steps', value=Attribute(value=Name(id='model', ctx=Load()), attr='context_size', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[])), keyword(arg='prediction_size', value=Attribute(value=Name(id='pipeline', ctx=Load()), attr='horizon', ctx=Load())), keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=Tuple(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_backtest_o', args=arguments(posonlyargs=[], args=[arg(arg='simple_ts', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='lag', annotation=Name(id='int', ctx=Load())), arg(arg='expected', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='                                 ')), Assign(targets=[Name(id='mask', ctx=Store())], value=Call(func=Name(id='FoldMask', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='simple_ts', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='simple_ts', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='timedelta64', ctx=Load()), args=[Constant(value=6), Constant(value='D')], keywords=[])), List(elts=[BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='simple_ts', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='timedelta64', ctx=Load()), args=[Constant(value=8), Constant(value='D')], keywords=[]))], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Name(id='lag', ctx=Load()))])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=2))])), Assign(targets=[Tuple(elts=[Name(id='metrics_df', ctx=Store()), Name(id='__', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='simple_ts', ctx=Load())), keyword(arg='metrics', value=List(elts=[Call(func=Name(id='SMAPE', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='n_folds', value=List(elts=[Name(id='mask', ctx=Load())], ctx=Load())), keyword(arg='aggregate_metrics', value=Constant(value=True))])), Assign(targets=[Name(id='metrics', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='metrics_df', ctx=Load()), attr='values', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Name(id='expected', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Name(id='segment', ctx=Load()), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='metrics', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Subscript(value=Name(id='expected', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), Subscript(value=Name(id='metrics', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='lag,expected'), Tuple(elts=[Tuple(elts=[Constant(value=5), Dict(keys=[Constant(value='segment_0'), Constant(value='segment_1')], values=[Constant(value=76.923077), Constant(value=90.909091)])], ctx=Load()), Tuple(elts=[Constant(value=6), Dict(keys=[Constant(value='segment_0'), Constant(value='segment_1')], values=[Constant(value=100), Constant(value=120)])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_backtest_two_p_oints', args=arguments(posonlyargs=[], args=[arg(arg='maske_d_ts', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='lag', annotation=Name(id='int', ctx=Load())), arg(arg='expected', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ȳ         ˝ý    \x94 ̌            ĕú')), Assign(targets=[Name(id='mask', ctx=Store())], value=Call(func=Name(id='FoldMask', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='maske_d_ts', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='maske_d_ts', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='timedelta64', ctx=Load()), args=[Constant(value=6), Constant(value='D')], keywords=[])), List(elts=[BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='maske_d_ts', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='timedelta64', ctx=Load()), args=[Constant(value=9), Constant(value='D')], keywords=[])), BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='maske_d_ts', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='timedelta64', ctx=Load()), args=[Constant(value=10), Constant(value='D')], keywords=[]))], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Name(id='lag', ctx=Load()))])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=4))])), Assign(targets=[Tuple(elts=[Name(id='metrics_df', ctx=Store()), Name(id='__', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='maske_d_ts', ctx=Load())), keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='n_folds', value=List(elts=[Name(id='mask', ctx=Load())], ctx=Load())), keyword(arg='aggregate_metrics', value=Constant(value=True))])), Assign(targets=[Name(id='metrics', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='metrics_df', ctx=Load()), attr='values', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Name(id='expected', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Name(id='segment', ctx=Load()), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='metrics', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Subscript(value=Name(id='expected', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), Subscript(value=Name(id='metrics', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='lag,expected'), Tuple(elts=[Tuple(elts=[Constant(value=4), Dict(keys=[Constant(value='segment_0'), Constant(value='segment_1')], values=[Constant(value=0), Constant(value=0)])], ctx=Load()), Tuple(elts=[Constant(value=7), Dict(keys=[Constant(value='segment_0'), Constant(value='segment_1')], values=[Constant(value=0), Constant(value=0.5)])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_sanity_backtest', args=arguments(posonlyargs=[], args=[arg(arg='weekly_period_ts')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='train_ts', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Name(id='weekly_period_ts', ctx=Load())), Assign(targets=[Name(id='quantile', ctx=Store())], value=Tuple(elts=[Constant(value=0.01), Constant(value=0.99)], ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[])), keyword(arg='horizon', value=Constant(value=5))])), Assign(targets=[Tuple(elts=[Name(id='__', ctx=Store()), Name(id='forecast_df', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='train_ts', ctx=Load())), keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Width', ctx=Load()), args=[], keywords=[keyword(arg='quantiles', value=Name(id='quantile', ctx=Load()))])], ctx=Load())), keyword(arg='forecast_params', value=Dict(keys=[Constant(value='quantiles'), Constant(value='prediction_interval')], values=[Name(id='quantile', ctx=Load()), Constant(value=True)]))])), Assign(targets=[Name(id='featuresD', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assert(test=Compare(left=JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Subscript(value=Name(id='quantile', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1)]), ops=[In()], comparators=[Name(id='featuresD', ctx=Load())])), Assert(test=Compare(left=JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Subscript(value=Name(id='quantile', ctx=Load()), slice=Constant(value=1), ctx=Load()), conversion=-1)]), ops=[In()], comparators=[Name(id='featuresD', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_backtest_pass_with_filter_transform', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_feature')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ʭ        ̹ ')), Assign(targets=[Name(id='ts', ctx=Store())], value=Name(id='ts_with_feature', ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[])), keyword(arg='transforms', value=List(elts=[Call(func=Name(id='LogTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='feature_1'))]), Call(func=Name(id='FilterFeaturesTransform', ctx=Load()), args=[], keywords=[keyword(arg='exclude', value=List(elts=[Constant(value='feature_1')], ctx=Load())), keyword(arg='return_features', value=Constant(value=True))])], ctx=Load())), keyword(arg='horizon', value=Constant(value=10))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='aggregate_metrics', value=Constant(value=True))]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='long_1', ctx=Load())]), FunctionDef(name='test_forecast_prediction_interval_noise', args=arguments(posonlyargs=[], args=[arg(arg='const'), arg(arg='constant_noisy_ts')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='MovingAverageModel', ctx=Load()), args=[], keywords=[])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='const', ctx=Load())], keywords=[])), Assign(targets=[Name(id='FORECAST', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))])), Assign(targets=[Name(id='constant_interval__length', ctx=Store())], value=BinOp(left=Attribute(value=Subscript(value=Name(id='FORECAST', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='target_0.975')], ctx=Load()), ctx=Load()), attr='values', ctx=Load()), op=Sub(), right=Attribute(value=Subscript(value=Name(id='FORECAST', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='target_0.025')], ctx=Load()), ctx=Load()), attr='values', ctx=Load()))), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='MovingAverageModel', ctx=Load()), args=[], keywords=[])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='constant_noisy_ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='FORECAST', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='prediction_interval', value=Constant(value=True))])), Assign(targets=[Name(id='noisy_interval_length', ctx=Store())], value=BinOp(left=Attribute(value=Subscript(value=Name(id='FORECAST', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='target_0.975')], ctx=Load()), ctx=Load()), attr='values', ctx=Load()), op=Sub(), right=Attribute(value=Subscript(value=Name(id='FORECAST', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='target_0.025')], ctx=Load()), ctx=Load()), attr='values', ctx=Load()))), Assert(test=Call(func=Attribute(value=Compare(left=Name(id='constant_interval__length', ctx=Load()), ops=[LtE()], comparators=[Name(id='noisy_interval_length', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='test_backtest_nans_a', args=arguments(posonlyargs=[], args=[arg(arg='ts_na'), arg(arg='re')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='     ̎Υ    đÇ')), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='ts_na', ctx=Load())], keywords=[])), Assign(targets=[Name(id='mask', ctx=Store())], value=Call(func=Name(id='FoldMask', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='timedelta64', ctx=Load()), args=[Constant(value=5), Constant(value='D')], keywords=[])), List(elts=[BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='timedelta64', ctx=Load()), args=[Constant(value=6), Constant(value='D')], keywords=[])), BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='timedelta64', ctx=Load()), args=[Constant(value=8), Constant(value='D')], keywords=[]))], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[])), keyword(arg='horizon', value=Constant(value=3))])), Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='n_folds', value=List(elts=[Name(id='mask', ctx=Load())], ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='ts_name'), List(elts=[Constant(value='simple_ts_starting_with_nans_one_segment'), Constant(value='simple_ts_starting_with_nans_all_segments')], ctx=Load())], keywords=[])]), FunctionDef(name='test_backtest_nans_at_beginning', args=arguments(posonlyargs=[], args=[arg(arg='ts_na'), arg(arg='re')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ϓ        ǰ    ǩ                ')), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='ts_na', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[])), keyword(arg='horizon', value=Constant(value=2))])), Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='n_folds', value=Constant(value=2))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='ts_name'), List(elts=[Constant(value='simple_ts_starting_with_nans_one_segment'), Constant(value='simple_ts_starting_with_nans_all_segments')], ctx=Load())], keywords=[])]), FunctionDef(name='test_backtest_forecasts_sanity', args=arguments(posonlyargs=[], args=[arg(arg='s_tep_ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CȪheck tČhat PŴiΧpelineϒ.bơ̅ƗacktestΫ Ćgives coϊǧϵrrʵecČt fnȊorecasȭtżs ©ȃccording ɕɥƷȌtȚƉ˭o ͭthe \u038dsimpl&e case.')), Assign(targets=[Tuple(elts=[Name(id='ts', ctx=Store()), Name(id='expected_metrics_df', ctx=Store()), Name(id='exp_ected_forecast_df', ctx=Store())], ctx=Store())], value=Name(id='s_tep_ts', ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[])), keyword(arg='horizon', value=Constant(value=5))])), Assign(targets=[Tuple(elts=[Name(id='metrics_df', ctx=Store()), Name(id='forecast_df', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='n_folds', value=Constant(value=3))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Call(func=Attribute(value=Name(id='metrics_df', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))]), ops=[Eq()], comparators=[Name(id='expected_metrics_df', ctx=Load())])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='forecast_df', ctx=Load()), ops=[Eq()], comparators=[Name(id='exp_ected_forecast_df', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_forecastY', args=arguments(posonlyargs=[], args=[arg(arg='exam_ple_tsds'), arg(arg='model')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='seed', ctx=Load()), args=[Constant(value=1234)], keywords=[])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='exam_ple_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast_pipeline', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='prediction_interval', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='seed', ctx=Load()), args=[Constant(value=1234)], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='exam_ple_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Name(id='exam_ple_tsds', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=5)], keywords=[])), Assign(targets=[Name(id='forecast_model', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='future', ctx=Load())), keyword(arg='prediction_interval', value=Constant(value=True))])), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='forecast_model', ctx=Load()), attr='df', ctx=Load()), attr='equals', ctx=Load()), args=[Attribute(value=Name(id='forecast_pipeline', ctx=Load()), attr='df', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), Tuple(elts=[Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])])], type_ignores=[])