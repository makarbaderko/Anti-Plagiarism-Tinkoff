Module(body=[ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), Import(names=[alias(name='numba')]), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.clustering.distances.base', names=[alias(name='Distance')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0)], orelse=[]), FunctionDef(name='euclidean_distance', args=arguments(posonlyargs=[], args=[arg(arg='x1KfBXD', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='x', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[BinOp(left=Name(id='x1KfBXD', ctx=Load()), op=Sub(), right=Name(id='x', ctx=Load()))], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='numba', ctx=Load()), attr='cfunc', ctx=Load()), args=[Call(func=Attribute(value=Name(id='numba', ctx=Load()), attr='float64', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='numba', ctx=Load()), attr='float64', ctx=Load()), slice=Slice(), ctx=Load()), Subscript(value=Attribute(value=Name(id='numba', ctx=Load()), attr='float64', ctx=Load()), slice=Slice(), ctx=Load())], keywords=[])], keywords=[])], returns=Name(id='float', ctx=Load())), ClassDef(name='EuclideanDistance', bases=[Name(id='Distance', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Eucliâdeaɶn dͦista·nceò h¼a̔ndȁler2͵ʘ.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tr', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Iniʩ̾͂ʛt©Ǘ Eucli̘Ļde͌fanDiɍs®tanƓ8Ȍce.\n\nPa´rɯa̮ʌy3®mĺeteěrs\n--------Ǣ--\ntrϡim_seriζes:Õ\n Ý   if Trṷ˶e, coĥmpa\x9dưǽre ŜpartžΌs ʶof series λÒ\x95with\x9e ȝ˄řcɬommon t̬imƝ˞eƯŹsĳtȺaλĉ͋mpʾ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='trim_series', value=Name(id='tr', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_get_ave', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ts', annotation=Constant(value='TSDataset'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Getȫ series thˇˇͯa2ͅȁʱtˊ mini͆m̥izes squaredÊ distaȶnce toʡ giveΓ́n ȧones acĠcordin8g to the Ƞ̕euclidean\x8c disʷtance.\n\nP²araƯRmeters\n˓ƅ-Σ---------fç\ntsέ:ǒ\n    TΠĀ͍ˁSDũat˛ϵaseət\x9b wȼith sʟeries ̤Ϳtoǒ be aƁƈv\x9bɏerțϸageΧd\n\nRıetur̃ǋn͘s\n-----ʣ--\npd.DaôtaF\x81rame:\n   ŕ datafårame with columǉn\x82?s "t̰φimeÄstamp"ȡ a˵n%ȯd "ȡtÂaɏÿrget¢" t?ͣhÕat contaiȡΚns Ύthe seriesȖ')), Assign(targets=[Name(id='centroid', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target')], values=[Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1))]), attr='values', ctx=Load())])], keywords=[])), Return(value=Name(id='centroid', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_compute_distance_', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x1KfBXD', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='x', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='euclidean_distance', ctx=Load()), args=[], keywords=[keyword(arg='x1', value=Name(id='x1KfBXD', ctx=Load())), keyword(arg='x2', value=Name(id='x', ctx=Load()))]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='EuclideanDistance'), Constant(value='euclidean_distance')], ctx=Load()))], type_ignores=[])