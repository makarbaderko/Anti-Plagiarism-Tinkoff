Module(body=[ImportFrom(module='unittest.mock', names=[alias(name='MagicMock')], level=0), ImportFrom(module='etna.pipeline.base', names=[alias(name='BasePipeline')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), Import(names=[alias(name='pandas', asname='pd')]), FunctionDef(name='test_predict_calls_make_timestamps', args=arguments(posonlyargs=[], args=[arg(arg='start_timestamp'), arg(arg='end_timestamp'), arg(arg='example_tsdsaP')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pipeli', ctx=Store())], value=Call(func=Name(id='DummyPipe_line', ctx=Load()), args=[], keywords=[keyword(arg='horizon', value=Constant(value=1))])), Assign(targets=[Attribute(value=Name(id='pipeli', ctx=Load()), attr='_make_predict_timestamps', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='return_value', value=Tuple(elts=[Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])], ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='pipeli', ctx=Load()), attr='_validate_quantiles', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='pipeli', ctx=Load()), attr='_predict', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeli', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdsaP', ctx=Load())), keyword(arg='start_timestamp', value=Name(id='start_timestamp', ctx=Load())), keyword(arg='end_timestamp', value=Name(id='end_timestamp', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pipeli', ctx=Load()), attr='_make_predict_timestamps', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdsaP', ctx=Load())), keyword(arg='start_timestamp', value=Name(id='start_timestamp', ctx=Load())), keyword(arg='end_timestamp', value=Name(id='end_timestamp', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='start_timestamp, end_timestamp'), List(elts=[Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-02')], keywords=[]), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value=None), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-02-01')], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-02')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-02-01')], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-05')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-02-03')], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_make_predict_timestamps_fail_early_start', args=arguments(posonlyargs=[], args=[arg(arg='example_tsdsaP')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='start_timestamp', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='example_tsdsaP', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DateOffset', ctx=Load()), args=[], keywords=[keyword(arg='days', value=Constant(value=5))]))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Value of start_timestamp is less than beginning of some segments'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='BasePipeline', ctx=Load()), attr='_make_predict_timestamps', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdsaP', ctx=Load())), keyword(arg='start_timestamp', value=Name(id='start_timestamp', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='test_make_predict_timestamps_fail_late_end', args=arguments(posonlyargs=[], args=[arg(arg='example_tsdsaP')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' \x86  ǂÝ  Ȧ     ɕ')), Assign(targets=[Name(id='end_timestamp', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='example_tsdsaP', ctx=Load()), attr='index', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DateOffset', ctx=Load()), args=[], keywords=[keyword(arg='days', value=Constant(value=5))]))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Value of end_timestamp is more than ending of dataset'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='BasePipeline', ctx=Load()), attr='_make_predict_timestamps', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdsaP', ctx=Load())), keyword(arg='end_timestamp', value=Name(id='end_timestamp', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='test_predict_calls_private_predict', args=arguments(posonlyargs=[], args=[arg(arg='prediction_interval'), arg(arg='quantiles'), arg(arg='example_tsdsaP')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pipeli', ctx=Store())], value=Call(func=Name(id='DummyPipe_line', ctx=Load()), args=[], keywords=[keyword(arg='horizon', value=Constant(value=1))])), Assign(targets=[Name(id='start_timestamp', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='end_timestamp', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='pipeli', ctx=Load()), attr='_make_predict_timestamps', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='return_value', value=Tuple(elts=[Name(id='start_timestamp', ctx=Load()), Name(id='end_timestamp', ctx=Load())], ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='pipeli', ctx=Load()), attr='_validate_quantiles', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='pipeli', ctx=Load()), attr='_predict', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeli', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdsaP', ctx=Load())), keyword(arg='prediction_interval', value=Name(id='prediction_interval', ctx=Load())), keyword(arg='quantiles', value=Name(id='quantiles', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pipeli', ctx=Load()), attr='_predict', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdsaP', ctx=Load())), keyword(arg='start_timestamp', value=Name(id='start_timestamp', ctx=Load())), keyword(arg='end_timestamp', value=Name(id='end_timestamp', ctx=Load())), keyword(arg='prediction_interval', value=Name(id='prediction_interval', ctx=Load())), keyword(arg='quantiles', value=Name(id='quantiles', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='prediction_interval'), List(elts=[Constant(value=False), Constant(value=True)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='quantiles'), List(elts=[Tuple(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()), Tuple(elts=[Constant(value=0.5)], ctx=Load())], ctx=Load())], keywords=[])]), ClassDef(name='DummyPipe_line', bases=[Name(id='BasePipeline', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\x92  ˧ǡϒ X ϭɤ    ŨŰϣΞ      ˨°  ')), FunctionDef(name='fit_', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='           ')), Assign(targets=[Attribute(value=Name(id='s', ctx=Load()), attr='ts', ctx=Store())], value=Name(id='ts', ctx=Load())), Return(value=Name(id='s', ctx=Load()))], decorator_list=[]), FunctionDef(name='_fore_cast', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='s', ctx=Load()), attr='ts', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load()))], decorator_list=[]), FunctionDef(name='test_make_predict_timestamps_fail_start_later_than_end', args=arguments(posonlyargs=[], args=[arg(arg='example_tsdsaP')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='start_timestamp', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='example_tsdsaP', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=2), ctx=Load())), Assign(targets=[Name(id='end_timestamp', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='example_tsdsaP', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=0), ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Value of end_timestamp is less than start_timestamp'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='BasePipeline', ctx=Load()), attr='_make_predict_timestamps', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdsaP', ctx=Load())), keyword(arg='start_timestamp', value=Name(id='start_timestamp', ctx=Load())), keyword(arg='end_timestamp', value=Name(id='end_timestamp', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='test_predict_calls_validate_quantiles', args=arguments(posonlyargs=[], args=[arg(arg='quantiles'), arg(arg='example_tsdsaP')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pipeli', ctx=Store())], value=Call(func=Name(id='DummyPipe_line', ctx=Load()), args=[], keywords=[keyword(arg='horizon', value=Constant(value=1))])), Assign(targets=[Attribute(value=Name(id='pipeli', ctx=Load()), attr='_make_predict_timestamps', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='return_value', value=Tuple(elts=[Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])], ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='pipeli', ctx=Load()), attr='_validate_quantiles', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='pipeli', ctx=Load()), attr='_predict', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeli', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdsaP', ctx=Load())), keyword(arg='quantiles', value=Name(id='quantiles', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pipeli', ctx=Load()), attr='_validate_quantiles', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[], keywords=[keyword(arg='quantiles', value=Name(id='quantiles', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='quantiles'), List(elts=[Tuple(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()), Tuple(elts=[Constant(value=0.5)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_make_predict_timestamps_calculate_values', args=arguments(posonlyargs=[], args=[arg(arg='_ts_name'), arg(arg='expected_start_timestamp'), arg(arg='expected_end_timestamp'), arg(arg='request')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  Ƣ   ʮ \x99ƹ  ')), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='_ts_name', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='start_timestamp', ctx=Store()), Name(id='end_timestamp', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='BasePipeline', ctx=Load()), attr='_make_predict_timestamps', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load()))])), Assert(test=Compare(left=Name(id='start_timestamp', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_start_timestamp', ctx=Load())])), Assert(test=Compare(left=Name(id='end_timestamp', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_end_timestamp', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='ts_name, expected_start_timestamp, expected_end_timestamp'), List(elts=[Tuple(elts=[Constant(value='example_tsds'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-04-09')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='ts_with_different_series_length'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-01 4:00')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-02-01')], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])])], type_ignores=[])