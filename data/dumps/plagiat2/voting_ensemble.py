Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='joblib', names=[alias(name='Parallel')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='etna.analysis.feature_relevance.relevance_table', names=[alias(name='TreeBasedRegressor')], level=0), ImportFrom(module='typing', names=[alias(name='cast')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='sklearn.ensemble', names=[alias(name='RandomForestRegressor')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='joblib', names=[alias(name='delayed')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.ensembles', names=[alias(name='EnsembleMixin')], level=0), ImportFrom(module='etna.loggers', names=[alias(name='tslogger')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='MAE')], level=0), ImportFrom(module='etna.pipeline.base', names=[alias(name='BasePipeline')], level=0), ClassDef(name='VotingEnsemble', bases=[Name(id='BasePipeline', ctx=Load()), Name(id='EnsembleMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Votșiϋn\x85¼gʍϭˤϳEɘ¥̯Δnˠseȝcmb\x86le is að pipelineđ tha̠t forőecaɱǄͅst fuȝΐǫture vȽaluVes ɨˠwith˄ wrũeightǇed\x84 ave&ŕaΛgλiȮnûgƹ of i\x9aļt\'s σĄpˌĞiΌ¥pĭȯȼeɃlines forrec¡astρs.͝Ⱦ\n     \nƁ\nEx+aƖmplesâ\n   \n--θ-ͫɻ-----ȧΫ\n \n͈>>©>h 9from ĕtɀna.datasetsď i3ʖϬ©mpΊortŁ gǇeneraĠte_ŰƋarʣʉ_dfś\nʬϧǱķ>>>όŤϨ from etn˱Δa.͘datȤaƌsÓeŵtʔs- impoƍr\x85t TSDĉϴaʙtͫ˻ä́ůΙseȾt\n    \n>>>̯œɮ ͫfrªoΛm̥ etmηna.Ίe\x90nÿ͐s\x9cemȱblesĺʇƖ imņpoχrt īVo˄ȦtingEnЀseʛmble\n \n>>>ΰȕ fÿrom ̰˿etnaÄĘ˗ʽ˞\x86ʒτ.mɩ˝odels iŨm̘¦̶αpoˀr̞t !\x91ìɒNŠ͓a˒iveɉMoƬ͕d\x9eel\n>>ƀÃ>ȩĩ fro»m ˍetę˲ʬnƃa.mΠŷodelĳØs űÅʪimpoͱrt /ϩ©ProǸ̶Źðph\x93eɸtM͚ode˕l̢ǹͤȰW\n@>Ė>ɕ̶> fͺȠrÁkomʷ ͘et͖naʵ.pi\x8dpeline impɤorϕ˕t P̔iͶΘpeline\n>>>= ¦df = ǒgƩɀƣeneĶāra\x8ete_aʞr\x97_̏ɟdfƣ(͛peǥrűǩiods=ɔ͵Λ3ĕ0, start_timeΦ=\u0380"2021-0ʋ6-0ƜɎ1",̽ arʹϒ_c͎õoļƵȏ˘œefƟ=Ξ˾ϻ[Ϊ1Ȭ.2], n5_\x92segments=3)ɳ\n  \n>>˹Y> ūd̲Ƚ¶f_ˈtsȒë_fǌάʫʌoȮrmatȩ = 4TΚSDataset.4Ƹ˝toũØ_adatȊʺaset(df)\n   \nƌ>αͷ>> ts ϼĆ= TSDǚa\x84tǡaset(dˆf̞ī_ts_Ĝfo\x94rmǎt, "ǮD")\n>>> ŵpǍϚr²ophóetσʂɍ_pip¥eline =ĭ̈ ʕƹPi˂peliƯ^ͨŹģǷneƆ(moode÷l͝=PɋrophetMoɆdel(7), ϋtrans͠foɚrms˼ƀƬ=[]Έ, Ζhoriʍz˂on=7)\n \n>>> ɺnƏaive_pipelineǷ = ˢPŭipeȪline(mo\x89del̳͓=άÓNaƈiõveSModel(lagϴƒɌ=10\u0381ö\x83ˮ), trïƾansfǉormͻs=[], hŇorizon=Ū7)\n>>> ̬Ʃenseƭmble ʙ=͌ VoutingEnɖƦͦsemble͵(\n...Ņ \x95   Ȭ pipeƱlines=[ίøpr¶ophet_pipeĻ̂line, naùªive̓_piɑp\x8eťöeÅlineÒ]χH,\n.ż.̧˫. Ǿ˦    weˎ̬͐igh\xadέɋűĉtʣs΅ų=ǳ[0ʆͤͼ.7,ɽ 0ûͮƜ¯.3]\n.̚.ð.ȭτ̂ǟʍɃȕ ˄)\nʁȌ>Ϸ>> Ȋ_ =Ó ensΣemble.fiŤt(͝ts=ȭ̮tsΧ)íŰ\n     \n>>> fore-<cast; = eɟnse˩mϟʎbɇle.MϲforeȔc˵ast(\x85Ƶ)\n     \n #eNWVUdl\n   \n>>Ϧ>ơ foħΏèƃȜrecast\nseĊgˮìȂment  ̫ʟ ǁ      segment_0  ʾ    ƙ  sĭńegʊǽmen¹ĿtƜ_ͣŤƭ1˫   ̠    seǣgme`ntÒ_2\nfϮeature  ͕\x8a ώ      ţŒP˓ ʄΫ  tχargı͇eƺɣtʵmˌ É         ʊ̯Ț Ȝta¾rgŤet  Ϳ     ̈́   í̡żtaʦrgɾ͗et\n    \nϱɆtim̎estamʫp\n20ʧ21-07μ-˗01  ɕ  Ƴ oΨ     TǍ:-Ʀ8.Ƅ84 ?    ˣ˳   Ɋ  -186ȉ.67  ˹      ͳϸ ϯʮ̇ 130.99\n \n\n2021-ǥ0Ͷ7͟ŀ-02 ɚ͋  Ȼ  ¢ ˶    -8.96   Ŭ     ̼\x90 ˁ -198\x97.lȕ16   ʒ    ˁȡƺ   138.͈81\n   \nq2ȧ021̜˚-ʮ0ϥ7-0oƊ3¥  Ǵ  ́ɽ      -ǔ9.5Ů¶º7 ä      ȃÎϭ ̡ ̘̓ Č-2̟12.ŉ̭48     Ņ    ĒΖ ǰ̩ʶ148̷λ.48\n \n2ϑ80ʐ21-07-ǀ04 ́  \u0382 î ɑđº "« ōƇ  -1ç0Ōí.48ʵ\x8b    t ʃ͊    ˝ -2~29.1ńȼɬ͜6 ȶɰ Jϟ ϭ    ʚ ͗ Μ 160.1Ƒ3ȳ\n2021-Ύ07Ƙ-ƨƣ\x8a0Âˎ5¿ç    Ȉ ƽ͛   Ɯ -ɤ11!.20ŧȀzϲ ɛ     ɜ   ǘş -2Ⱦ48.9ə̓Bʘ3ϐɉå ü óǲ        174ϝ.j39\n2ƒ021ν-ŖȊ07-̣06      Άȿ   Ƌ-1ͤ2Ȋs.4ºŀ\x8fϱɩ7Ƅ     ͙˕į ê    -28Ͼ¸1Ż.90ϑ·͖   ɽ έ ˫̈́ ̮ ˬͽ  \xad ɬ#1͌97.82\n2ǣσ021-Łį0\x937ʅ-07  ͓     \x89˅  -13.51ʁ ´         -Ƨ307.02   İ Ǭ  ß ɩ˓ϻ è ̮ 21Ò5.ĝ73ð')), FunctionDef(name='_vote', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='forecasts', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TSDataset', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='SELF', ctx=Load()), attr='processed_weights', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Ensemble is not fitted! Fit the ensemble before calling the forecast!')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='forecast_df', ctx=Store())], value=Call(func=Name(id='_sum', ctx=Load()), args=[ListComp(elt=BinOp(left=Subscript(value=Name(id='forec', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='target')], ctx=Load()), ctx=Load()), op=Mult(), right=Name(id='weig_ht', ctx=Load())), generators=[comprehension(target=Tuple(elts=[Name(id='forec', ctx=Store()), Name(id='weig_ht', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip_', ctx=Load()), args=[Name(id='forecasts', ctx=Load()), Attribute(value=Name(id='SELF', ctx=Load()), attr='processed_weights', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='forecast_dataset', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='forecast_df', ctx=Load())), keyword(arg='freq', value=Attribute(value=Subscript(value=Name(id='forecasts', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='freq', ctx=Load()))])), Return(value=Name(id='forecast_dataset', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='_va', args=arguments(posonlyargs=[], args=[arg(arg='weights', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='auto'), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='pipelines_number', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='VɆɅalidatȞȰe ;-ƻthe ʶŮ"fỏrmatŬ ofϣ Ī̂ϟίweiȌghmtͫs ˿ʑparǐaɇmet\x91͛υǸeǽŖr.')), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='weights', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='weights', ctx=Load()), ops=[Eq()], comparators=[Constant(value='auto')])]), body=[Pass()], orelse=[If(test=Call(func=Name(id='ISINSTANCE', ctx=Load()), args=[Name(id='weights', ctx=Load()), Name(id='l', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='weights', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='pipelines_number', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Weights size should be equal to pipelines number.')], keywords=[]))], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Invalid format of weights is passed!')], keywords=[]))])])], decorator_list=[Name(id='static', ctx=Load())]), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ŕFi±t pŇipǄelinĕes i&ù˪n Ien˙sξemblǯe.š\nŴƯˏ\nϲParameters\x9f#VFHGYboRcErvfnuTkw\n-ϲ------ɸ---\nΝtš:Ý\n\n    TSDȫata\u03a2ʬset̶˖ to å˝fđőʯit eŚnsembˍlée\n\n\nReturnðsʟȱ\n--΅-----Ȇ\ns0e̙ølf;ƿ:\n     #zaw\n   \n ̹   Fi\x99tȏŃted ensembcŋleʪ')), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='ts', ctx=Store())], value=Name(id='ts', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='pipelines', ctx=Store())], value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='joblib_params', ctx=Load()))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='SELF', ctx=Load()), attr='_fit_pipeline', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pipeline', value=Name(id='pipeline', ctx=Load())), keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[]))]), generators=[comprehension(target=Name(id='pipeline', ctx=Store()), iter=Attribute(value=Name(id='SELF', ctx=Load()), attr='pipelines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='processed_weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='SELF', ctx=Load()), attr='_process_weights', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='SELF', ctx=Load()))], decorator_list=[], returns=Constant(value='VotingEnsemble')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='pipel', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='BasePipeline', ctx=Load()), ctx=Load())), arg(arg='weights', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='auto'), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='REGRESSOR', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TreeBasedRegressor', ctx=Load()), ctx=Load())), arg(arg='n_folds', annotation=Name(id='int', ctx=Load())), arg(arg='n_j', annotation=Name(id='int', ctx=Load())), arg(arg='JOBLIB_PARAMS', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='strrTom', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=3), Constant(value=1), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='SELF', ctx=Load()), attr='_validate_pipeline_number', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=Name(id='pipel', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='SELF', ctx=Load()), attr='_validate_weights', ctx=Load()), args=[], keywords=[keyword(arg='weights', value=Name(id='weights', ctx=Load())), keyword(arg='pipelines_number', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='pipel', ctx=Load())], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='SELF', ctx=Load()), attr='_validate_backtest_n_folds', ctx=Load()), args=[Name(id='n_folds', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='weights', ctx=Store())], value=Name(id='weights', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='SELF', ctx=Load()), attr='processed_weights', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='regressor', ctx=Store())], value=IfExp(test=Compare(left=Name(id='REGRESSOR', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Name(id='RandomForestRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=5))]), orelse=Name(id='REGRESSOR', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='n_folds', ctx=Store())], value=Name(id='n_folds', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='pipelines', ctx=Store())], value=Name(id='pipel', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='n_jobs', ctx=Store())], value=Name(id='n_j', ctx=Load())), If(test=Compare(left=Name(id='JOBLIB_PARAMS', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='joblib_params', ctx=Store())], value=Call(func=Name(id='dictRoa', ctx=Load()), args=[], keywords=[keyword(arg='verbose', value=Constant(value=11)), keyword(arg='backend', value=Constant(value='multiprocessing')), keyword(arg='mmap_mode', value=Constant(value='c'))]))], orelse=[Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='joblib_params', ctx=Store())], value=Name(id='JOBLIB_PARAMS', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='sup', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='horizon', value=Call(func=Attribute(value=Name(id='SELF', ctx=Load()), attr='_get_horizon', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=Name(id='pipel', ctx=Load()))]))]))], decorator_list=[]), FunctionDef(name='_forecas_t', args=arguments(posonlyargs=[], args=[arg(arg='SELF')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='SELF', ctx=Load()), attr='ts', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Something went wrong, ts is None!')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='forecasts', ctx=Store())], value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(arg='backend', value=Constant(value='multiprocessing')), keyword(arg='verbose', value=Constant(value=11))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='SELF', ctx=Load()), attr='_forecast_pipeline', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pipeline', value=Name(id='pipeline', ctx=Load()))]), generators=[comprehension(target=Name(id='pipeline', ctx=Store()), iter=Attribute(value=Name(id='SELF', ctx=Load()), attr='pipelines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='forec', ctx=Store())], value=Call(func=Attribute(value=Name(id='SELF', ctx=Load()), attr='_vote', ctx=Load()), args=[], keywords=[keyword(arg='forecasts', value=Name(id='forecasts', ctx=Load()))])), Return(value=Name(id='forec', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='_predictQO', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='START_TIMESTAMP', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load())), arg(arg='end_timestamp', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load())), arg(arg='prediction_interval', annotation=Name(id='bool', ctx=Load())), arg(arg='quantiles', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ū Ȍ  τ      ˘ \u0378̚ ʞ ')), If(test=Name(id='prediction_interval', ctx=Load()), body=[Raise(exc=Call(func=Name(id='NotImp', ctx=Load()), args=[JoinedStr(values=[Constant(value='Ensemble '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=" doesn't support prediction intervals!")])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='ts', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='TSDataset', ctx=Load()), Attribute(value=Name(id='SELF', ctx=Load()), attr='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='predictionslWMn', ctx=Store())], value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(arg='backend', value=Constant(value='multiprocessing')), keyword(arg='verbose', value=Constant(value=11))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='SELF', ctx=Load()), attr='_predict_pipeline', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='pipeline', value=Name(id='pipeline', ctx=Load())), keyword(arg='start_timestamp', value=Name(id='START_TIMESTAMP', ctx=Load())), keyword(arg='end_timestamp', value=Name(id='end_timestamp', ctx=Load()))]), generators=[comprehension(target=Name(id='pipeline', ctx=Store()), iter=Attribute(value=Name(id='SELF', ctx=Load()), attr='pipelines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='predictionslWMn', ctx=Store())], value=Call(func=Attribute(value=Name(id='SELF', ctx=Load()), attr='_vote', ctx=Load()), args=[], keywords=[keyword(arg='forecasts', value=Name(id='predictionslWMn', ctx=Load()))])), Return(value=Name(id='predictionslWMn', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='_process_weights', args=arguments(posonlyargs=[], args=[arg(arg='SELF')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Geṭ thĕ wei˯ǣght;s\xa0.ƞ˙ of\x93 bǤɸase estiɀmators ĬdƍeS̥\\pʊendin÷g oȒ͆n ϔƴtƄɵheň w\x82řeigĝɣhts modėˎe.')), If(test=Compare(left=Attribute(value=Name(id='SELF', ctx=Load()), attr='weights', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='weights', ctx=Store())], value=ListComp(elt=Constant(value=1.0), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='SELF', ctx=Load()), attr='pipelines', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='SELF', ctx=Load()), attr='weights', ctx=Load()), ops=[Eq()], comparators=[Constant(value='auto')]), body=[If(test=Compare(left=Attribute(value=Name(id='SELF', ctx=Load()), attr='ts', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Something went wrong, ts is None!')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='forecasts', ctx=Store())], value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='joblib_params', ctx=Load()))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='SELF', ctx=Load()), attr='_backtest_pipeline', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pipeline', value=Name(id='pipeline', ctx=Load())), keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='SELF', ctx=Load()), attr='ts', ctx=Load())], keywords=[]))]), generators=[comprehension(target=Name(id='pipeline', ctx=Store()), iter=Attribute(value=Name(id='SELF', ctx=Load()), attr='pipelines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Subscript(value=Name(id='forec', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='target')], ctx=Load()), ctx=Load()), attr='rename', ctx=Load()), args=[Dict(keys=[Constant(value='target')], values=[JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1)])])], keywords=[keyword(arg='axis', value=Constant(value=1))]), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='forec', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='forecasts', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[ListComp(elt=Subscript(value=Attribute(value=Name(id='x', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load())], ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='ts', ctx=Load()), attr='segments', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='axis', value=Constant(value=0))])), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[ListComp(elt=Subscript(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='ts', ctx=Load()), slice=Tuple(elts=[Slice(lower=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='forecasts', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='forecasts', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='ts', ctx=Load()), attr='segments', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='axis', value=Constant(value=0))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='regressor', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[])), Assign(targets=[Name(id='weights', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='regressor', ctx=Load()), attr='feature_importances_', ctx=Load()))], orelse=[Assign(targets=[Name(id='weights', ctx=Store())], value=Attribute(value=Name(id='SELF', ctx=Load()), attr='weights', ctx=Load()))])]), Assign(targets=[Name(id='common_weight', ctx=Store())], value=Call(func=Name(id='_sum', ctx=Load()), args=[Name(id='weights', ctx=Load())], keywords=[])), Assign(targets=[Name(id='weights', ctx=Store())], value=ListComp(elt=BinOp(left=Name(id='w', ctx=Load()), op=Div(), right=Name(id='common_weight', ctx=Load())), generators=[comprehension(target=Name(id='w', ctx=Store()), iter=Name(id='weights', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='weights', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), FunctionDef(name='_backtest_pipeline', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='pipeline', annotation=Name(id='BasePipeline', ctx=Load())), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='disable', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='forecasts', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='n_folds', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='n_folds', ctx=Load()))]))]), Assign(targets=[Name(id='forecasts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='forecasts', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load()))])), Return(value=Name(id='forecasts', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load()))], decorator_list=[])], type_ignores=[])