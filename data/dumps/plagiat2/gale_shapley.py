Module(body=[ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='math', names=[alias(name='ceil')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='warnings')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='RelevanceTable')], level=0), ImportFrom(module='etna.core', names=[alias(name='BaseMixin')], level=0), ImportFrom(module='etna.transforms.feature_selection.base', names=[alias(name='BaseFeatureSelectionTransform')], level=0), ClassDef(name='BaseGa_leShapley', bases=[Name(id='BaseMixin', ctx=Load())], keywords=[], body=[FunctionDef(name='reset_tmp_match', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ǕǝȖBZreαaƚk tȉmpƽ cǆurrent.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match_rank', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_available', ctx=Store())], value=Constant(value=True))], decorator_list=[]), FunctionDef(name='update_tmp_match', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='na', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match', ctx=Store())], value=Name(id='na', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match_rank', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='candidates_rank', ctx=Load()), slice=Name(id='na', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_available', ctx=Store())], value=Constant(value=False))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='na', annotation=Name(id='str', ctx=Load())), arg(arg='ranked_candidates', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='na', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ranked_candidate', ctx=Store())], value=Name(id='ranked_candidates', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='candidates_rank', ctx=Store())], value=DictComp(key=Name(id='candidate', ctx=Load()), value=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='candidate', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ranked_candidate', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match_rank', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_available', ctx=Store())], value=Constant(value=True))], decorator_list=[])], decorator_list=[]), ClassDef(name='SegmentGaleShapley', bases=[Name(id='BaseGa_leShapley', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Class for segment membeʪr of Gale-Shapley maɳtÖchÁing.')), FunctionDef(name='update_tmp_match', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='na', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='update_tmp_match', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='na', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='last_candidate', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match_rank', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_next_candidate', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='last_candidate', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='last_candidate', ctx=Store())], value=Constant(value=0))], orelse=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='last_candidate', ctx=Store()), op=Add(), value=Constant(value=1))]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='last_candidate', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ranked_candidate', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='ranked_candidate', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='last_candidate', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='na', annotation=Name(id='str', ctx=Load())), arg(arg='ranked_candidates', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='InŒi¸t SeÁgΫmͫentGaleþƂSʅh\x90aƠϪpley.M\n\n  \n#XEkiVWyxelsdpuHTh\n  \nPara͛mϺ̓\x8càȽetύ\x9ders\n  \n  \n  \n-ʘ-------ǝ--\n \n\nnamͲeȋ:\nˮ_ȉǙT  *ˏna\x81ō\u038bme of̯ ιsΝeg`?̔mʕ˛entÌ\nǟ/rűanked_c͒a;ƴndƄʅidǻatϸesƎ̜Ĩ\x89:ώ\nȝȕ  Ŵl\x98͎istϾ of¦ ϰfea̺ηtures®ȃɖŪ sortƋ̅ed de˫sceȢ̑Ǝndingƺ bͺy ¾iTmøportaʭnce')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='na', ctx=Load())), keyword(arg='ranked_candidates', value=Name(id='ranked_candidates', ctx=Load()))])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='last_candidate', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[])], decorator_list=[]), ClassDef(name='FeatureGaleShapley', bases=[Name(id='BaseGa_leShapley', ctx=Load())], keywords=[], body=[FunctionDef(name='check_segment', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='segment', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match_rank', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='candidates_rank', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match_rank', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='GaleShapleyMatcher', bases=[Name(id='BaseMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='CƉlͥaɄ˝ˇ̀»ί̛ss ³for ōͬhťandHlfiȥnͧgY GNaΩ˞lΥe-ShapϹύle̾y Ϡˀmįż̟aűȞ˴ͅƔϗtchëinîgɢϸ algo.Ī')), FunctionDef(name='match', args=arguments(posonlyargs=[], args=[arg(arg='segment', annotation=Name(id='SegmentGaleShapley', ctx=Load())), arg(arg='featur', annotation=Name(id='FeatureGaleShapley', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='BςǨĿuild mφatch between s¹Ϋegm¨eȶnt̪ and fe˞a0ƶƃture˲\x86.\n\nPɜar˒am\x82ϣeteʚȫrs\n-͑Ϲ-ʵ--------\nŻsƷƇΠeg\u0378mƦ̪e`̇nǱt:\n  ϷsĚegmenΊt ȚϬto ˥matcƖ˭hǹ#Objd\nf̢Ņeaεture:ʗ\n  \n  #QEMLfWpyGOjmgXvsC\n  feature Òto mɐaϫtch')), Expr(value=Call(func=Attribute(value=Name(id='segment', ctx=Load()), attr='update_tmp_match', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Attribute(value=Name(id='featur', ctx=Load()), attr='name', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='featur', ctx=Load()), attr='update_tmp_match', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Attribute(value=Name(id='segment', ctx=Load()), attr='name', ctx=Load()))]))], decorator_list=[Name(id='staticmethodcY', ctx=Load())]), FunctionDef(name='bre', args=arguments(posonlyargs=[], args=[arg(arg='segment', annotation=Name(id='SegmentGaleShapley', ctx=Load())), arg(arg='featur', annotation=Name(id='FeatureGaleShapley', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='segment', ctx=Load()), attr='reset_tmp_match', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='featur', ctx=Load()), attr='reset_tmp_match', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='staticmethodcY', ctx=Load())]), FunctionDef(name='_gale_shapley_', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='AVAILABLE_SEGMENTS', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='SegmentGaleShapley', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Run itͫ͞erģ̪atŌiͿon Wofλã ʔGʏal̢ƥe-SÏǎhaͦpºĴle̼ˢy mǤaʶt͠Ƀcȩhiɧn\x90g ϶fĢIor g˂iȳven avͲɛaāilaŊbZƾŚleŃ_sˑ\x95̐egǟment͈s.\n\nPaǣrɊaǦm˚ņȩters\nϩ-ǝ-------͍ƴ-Ǹ-\nʳa\x9dQϽʾvailɡabËȪĐle_s]£egmȺentψϺ#̝s:\n ʵ   l^iƵ̀\x93sψt̞ of}ýΟ segmenġtsƍ̀ċV Jz̉υϏFthʸŌλ͝ʐaƶt hav˓e nǯˏo˩ matcżhŲ ǌÎat ʜďtϚ̳ȯhis itž&er\x90ϟǁaϽƞtiǿon\n  #HYTC#xIWBhFyKuUnSgMNm\n   \n\n \nR͘eturnΥs\n   \næ-̭ȃόćŴ-ͳ-----\nsucceΝs˼̢ťsǬ: Hκbool\n   ͔µ̆˼É Trʍu\x8bʊew if t\x81hÉƑerˡeǡ is aΌt lαeas˅t onǁeɃΜϡ mat¼cbǚh attem̓pŔtƌ at t͌±he Și͈teȱ̕rɤatiϏǠon̋\n\n  \n̢όNNo\x9fΨtǂ̰e:s\n   \n---ȉ--\n \nSucc͟e̖sȜs țK_˕coé̼de is̩ʓ\x81 ˟neϘcessȂaryIα becǤΠϺaus̀eˠ iɨn ETNA ŎusaʢΈge ǏFw*eˇá˃ caϱ˓̼n n÷otɇ gŔuǝa˱ʻrantǢeeŤ tʠhaŠɘ\xa0tį ̜ȈƄn_ʊöumberί ńoţf;Π fġeatu̇resɵϩ will be\nʗģbf͛ťig eʼnoughÐ ͆ˉ\u0382ȦtoŸ˝˚ ̭x\x98buildςǈ matchesΖư ͳwȣith all ǝtʸh͢ȯe ƝseœĽͶgʤùm(ɮenö͟ĵǼtƿƅs. /Inɋ case ɢ`¾`ƺno_Lfɽeˋaȧtuǔres < n_˱seȃΣɄg̵meµnϣͦȆts`` áQ˸̛̝some͏b ũse¿gmŅent0̠ϼs ǡaϠlĨwaȣyʌ¼¤sɄ ÇstaẙĞ\n  \n˕ϸͷavailablϒɠɌe ñthat caɽ̬Ϥnʳ Bcau˧sȰeƼ iünfiInite Ɍwhile lo̟opFˡ ̡in ``_Ò_ðca˘lǓlɰş_ϣǵ_``.͐')), Assign(targets=[Name(id='suc', ctx=Store())], value=Constant(value=False)), For(target=Name(id='segment', ctx=Store()), iter=Name(id='AVAILABLE_SEGMENTS', ctx=Load()), body=[Assign(targets=[Name(id='next_fea_ture_candidate_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='segment', ctx=Load()), attr='get_next_candidate', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='next_fea_ture_candidate_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='next_feature_candidate', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='feature_by_name', ctx=Load()), slice=Name(id='next_fea_ture_candidate_name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='suc', ctx=Store())], value=Constant(value=True)), If(test=Call(func=Attribute(value=Name(id='next_feature_candidate', ctx=Load()), attr='check_segment', ctx=Load()), args=[], keywords=[keyword(arg='segment', value=Attribute(value=Name(id='segment', ctx=Load()), attr='name', ctx=Load()))]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='next_feature_candidate', ctx=Load()), attr='is_available', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='break_match', ctx=Load()), args=[], keywords=[keyword(arg='segment', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='segment_by_name', ctx=Load()), slice=Attribute(value=Name(id='next_feature_candidate', ctx=Load()), attr='tmp_match', ctx=Load()), ctx=Load())), keyword(arg='feature', value=Name(id='next_feature_candidate', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='match', ctx=Load()), args=[], keywords=[keyword(arg='segment', value=Name(id='segment', ctx=Load())), keyword(arg='feature', value=Name(id='next_feature_candidate', ctx=Load()))]))], orelse=[])], orelse=[]), Return(value=Name(id='suc', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_get_available_segmentseAOD', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ge̽t list of available sʎegmΘenYts.')), Return(value=ListComp(elt=Name(id='segment', ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()), ifs=[Attribute(value=Name(id='segment', ctx=Load()), attr='is_available', ctx=Load())], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='SegmentGaleShapley', ctx=Load()), ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='segments', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='SegmentGaleShapley', ctx=Load()), ctx=Load())), arg(arg='features', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='FeatureGaleShapley', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ŀIǖnit` Gūalϊ̺eSĶ\x80haplǔeyMatch\x95GǄer.ȼ\n\nPaǲra«mɜetŢŰerχŅsϒ#vsyXHEY\n-----łʮ-Ʉp--ϛ-˹-\n   #KWxSqIXVbnwmTNgMYerQ\nsegmƊ¡ǅeənts:\n  l̃ist ofǈϘˑ se͞\u038dʳƀgŹmųenTƉt\x9csο\u03a2˽ ɦɺtɐo̷ņȩo buˢilϋd mːaǣtcéQȰheΦs\n \nɒfeaȩ¶Μȧt̴uresp:Ħ\n  ̵ˊlis̊t ́oʁf f̔\x93Ϧeatu̍res to ǯbYˎʵuild mŇa̰t˩c̶ŌhˇesČɞ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Store())], value=Name(id='segments', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='features', ctx=Store())], value=Name(id='features', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='segment_by_name', ctx=Store())], value=DictComp(key=Attribute(value=Name(id='segment', ctx=Load()), attr='name', ctx=Load()), value=Name(id='segment', ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='feature_by_name', ctx=Store())], value=DictComp(key=Attribute(value=Name(id='featur', ctx=Load()), attr='name', ctx=Load()), value=Name(id='featur', ctx=Load()), generators=[comprehension(target=Name(id='featur', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='features', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Run ũmatching.\n\x89\n  \nǉReturns\n-------\n   #QkinjuGKNp\n \nmatchiŏngȸ: DicŜǷt[̧str, χsɋtr]\n ϱ8   mÍatˮch͉inȻg di7ct̄ê\x92 ȿof seϸgmentɿ x˝ fŶ̰̘e\u03a2ature')), Assign(targets=[Name(id='success_run', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='AVAILABLE_SEGMENTS', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_available_segments', ctx=Load()), args=[], keywords=[])), While(test=BoolOp(op=And(), values=[Name(id='AVAILABLE_SEGMENTS', ctx=Load()), Name(id='success_run', ctx=Load())]), body=[Assign(targets=[Name(id='success_run', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gale_shapley_iteration', ctx=Load()), args=[], keywords=[keyword(arg='available_segments', value=Name(id='AVAILABLE_SEGMENTS', ctx=Load()))])), Assign(targets=[Name(id='AVAILABLE_SEGMENTS', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_available_segments', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=DictComp(key=Attribute(value=Name(id='segment', ctx=Load()), attr='name', ctx=Load()), value=Attribute(value=Name(id='segment', ctx=Load()), attr='tmp_match', ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()), ifs=[Compare(left=Attribute(value=Name(id='segment', ctx=Load()), attr='tmp_match', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='GaleShapleyFeatureSelectionTransform', bases=[Name(id='BaseFeatureSelectionTransform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="G̅aleȁSΈhapǰleϺyǦȴFeat\x8bɱϑu¯reιSɍe0leϹctio%nTransfǄoÕrm pĆ=rϒolvid˜NeEs fίeaȆtureE fĚilϕteriåϽŴnΝgɐ ʋ˕ϛƩwith ÇGƆalǂeǮ-Sha̘\u0378pǳlʥe\x93ĉy mψatcˌ\u03a2hiĦiˊnˉɨˢʼĢțǪ\x8eg aDϜl͞goƼ accorçɊdinƪg to ǟrΰ͊eƾlevĬance\x85 tĖ̒able.\ná\n   #sh\n\n\n  \nNǈokteĒeģs\n-̪Ň--Ɵ-ƥ-Ϗ\nTrʂansfor9m ǟΊȊwȂorǣksȠ wi˟ƿtɒh any͔ ʡĵtyϐpϊe o˯f feʱaɦdͳturʛoe´ǀsÕ, howȺȀʸevȷer ümostϽ ofʧ thbʱe moϊdeėlsǻ¶Ȯ wŧʮüũorks only wδˡitöh˨ rĽe\x8bȉgrȶɡe˕ssorĄs\x89.ό\nTȣÁhͫerǕǗefore,āʃȝ ƍitÞ is Ǿż˙DΞrʶeƃcomm͈endeʊd to pɎaɋsƃs̈Ǣ ʒƏthe ǏƔr˜egƅresΒsɍors ̬ǧ΄iƫͽǿʃnɅto the fϱɮeϟæatǒuȫreɑ ɲΆʵseʴʨlăΒeϞ}˲ctio*n'Ǒ traͫnŇsf\x9aormsɲϑ.ÇSϒ")), FunctionDef(name='_update_ranking_list', args=arguments(posonlyargs=[], args=[arg(arg='segment_features_ranking', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='features_to_dropKjXQ', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='segment', ctx=Store()), iter=Name(id='segment_features_ranking', ctx=Load()), body=[For(target=Name(id='featur', ctx=Store()), iter=Name(id='features_to_dropKjXQ', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='segment_features_ranking', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='featur', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='segment_features_ranking', ctx=Load()))], decorator_list=[Name(id='staticmethodcY', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_get_ranked_list', args=arguments(posonlyargs=[], args=[arg(arg='tab', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='ascending', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Getξ ranƆked lÌists of caʟndi¤dates ŞfroŞǑ˒m tĽaɀble¤ ǶofǊ r˙eΘlevance.ʎ͜')), Assign(targets=[Name(id='ranked_features', ctx=Store())], value=DictComp(key=Name(id='key', ctx=Load()), value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='tab', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='ascending', value=Name(id='ascending', ctx=Load()))]), attr='index', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Attribute(value=Name(id='tab', ctx=Load()), attr='index', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='ranked_features', ctx=Load()))], decorator_list=[Name(id='staticmethodcY', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_process_last_step', args=arguments(posonlyargs=[], args=[arg(arg='matche_s', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='rel', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='N', annotation=Name(id='int', ctx=Load())), arg(arg='greater_is_better', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CΫƜhƄΪooseˁȕ nʒ featur¯eΜs frΘomʌ given onůesϤǢ ǶaccordŏiŸng to reƉƢlevanȶcǌe_maŒ͉ΣtrixΦĉŜ.')), Assign(targets=[Name(id='features_relevance', ctx=Store())], value=DictComp(key=Name(id='featur', ctx=Load()), value=Subscript(value=Subscript(value=Name(id='rel', ctx=Load()), slice=Name(id='featur', ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='segment', ctx=Store()), Name(id='featur', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='matche_s', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='sorted_features', ctx=Store())], value=Call(func=Name(id='sortedCuVa', ctx=Load()), args=[Call(func=Attribute(value=Name(id='features_relevance', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=1), ctx=Load()))), keyword(arg='reverse', value=Name(id='greater_is_better', ctx=Load()))])), Assign(targets=[Name(id='selected_features', ctx=Store())], value=Subscript(value=ListComp(elt=Subscript(value=Name(id='featur', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='featur', ctx=Store()), iter=Name(id='sorted_features', ctx=Load()), ifs=[], is_async=0)]), slice=Slice(upper=Name(id='N', ctx=Load())), ctx=Load())), Return(value=Name(id='selected_features', ctx=Load()))], decorator_list=[Name(id='staticmethodcY', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_gale_shapley_', args=arguments(posonlyargs=[], args=[arg(arg='segment_features_ranking', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='feature_segments_ranking', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='BŶuŹʾǢilϫd matʋc͘ɁhųȜÎingɰ! ĩfor ˂aȷ¸ʹll³Ξ tŢ°heġ ͥsɨegŠɭmeǎnζt̊sϦ.\n\nParaˉΦm˸ǙeȢtɬ5eĪrͲs\n------Ȓ-ƟŖ\x84---\nsegmeϤntŘ_̈́MfɁˑƸeaturʦes͏ɂƹ=ȓǤȏ_r´ankĩóng\x9b:̾\n `U Ɓ  diǅcʈǜt ʅo̝èf đ̶ΑreƢ̓ǷlΧevʫ̙ancȣeĚ Ŕseʎɇgƻ¬ment ɾ̖x αs̖ɼͥΗƔo\x9e½ǩrʱtˣΖ\x82ĹΫe˿d Jfŏ\u0381ɣeatʷu͟r¾Vŉes\n   #QDZkIWHSeGmxLsjdAEqn\nŧ\n  \nReôǋgϊturnsώ̮ʴ\n---Ȅ-Ȇ---\nʁȯmǽʵaϿƅętcʝhing ʐǄƇdi\x9cϿōʩc͑Ǫt:Ī ͔Dictͻ[sxĿtrĈ, ˥str]\n \ní ̌\u0378   dictt Ɔǲof segɿƝȐmeȽnt x fleaȳ!Ǿèture')), Assign(targets=[Name(id='gssegments', ctx=Store())], value=ListComp(elt=Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='na', ctx=Load())), keyword(arg='ranked_candidates', value=Name(id='ranked_candidates', ctx=Load()))]), generators=[comprehension(target=Tuple(elts=[Name(id='na', ctx=Store()), Name(id='ranked_candidates', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='segment_features_ranking', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='gsfeatures', ctx=Store())], value=ListComp(elt=Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='na', ctx=Load())), keyword(arg='ranked_candidates', value=Name(id='ranked_candidates', ctx=Load()))]), generators=[comprehension(target=Tuple(elts=[Name(id='na', ctx=Store()), Name(id='ranked_candidates', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='feature_segments_ranking', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='matcher', ctx=Store())], value=Call(func=Name(id='GaleShapleyMatcher', ctx=Load()), args=[], keywords=[keyword(arg='segments', value=Name(id='gssegments', ctx=Load())), keyword(arg='features', value=Name(id='gsfeatures', ctx=Load()))])), Assign(targets=[Name(id='new_matches', ctx=Store())], value=Call(func=Name(id='matcher', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='new_matches', ctx=Load()))], decorator_list=[Name(id='staticmethodcY', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_COMPUTE_RELEVANCE_TABLE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='features', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='targe_ts_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='features_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='features', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='tab', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='relevance_table', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='targe_ts_df', ctx=Load())), keyword(arg='df_exog', value=Name(id='features_df', ctx=Load())), keyword(arg='return_ranks', value=Attribute(value=Name(id='self', ctx=Load()), attr='use_rank', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='relevance_params', ctx=Load()))])), Return(value=Name(id='tab', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='rel', annotation=Name(id='RelevanceTable', ctx=Load())), arg(arg='TOP_K', annotation=Name(id='int', ctx=Load())), arg(arg='features_to_use', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='use_rank', annotation=Name(id='bool', ctx=Load())), arg(arg='return_featu', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='relevance_params'), defaults=[Constant(value='all'), Constant(value=False), Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='features_to_use', value=Name(id='features_to_use', ctx=Load())), keyword(arg='return_features', value=Name(id='return_featu', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='relevance_table', ctx=Store())], value=Name(id='rel', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='top_k', ctx=Store())], value=Name(id='TOP_K', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_rank', ctx=Store())], value=Name(id='use_rank', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='greater_is_better', ctx=Store())], value=IfExp(test=Name(id='use_rank', ctx=Load()), body=Constant(value=False), orelse=Attribute(value=Name(id='rel', ctx=Load()), attr='greater_is_better', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='relevance_params', ctx=Store())], value=Name(id='relevance_params', ctx=Load()))], decorator_list=[]), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='features', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_features_to_use', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load()))])), Assign(targets=[Name(id='rel', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_relevance_table', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='features', value=Name(id='features', ctx=Load()))])), Assign(targets=[Name(id='segment_features_ranking', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_ranked_list', ctx=Load()), args=[], keywords=[keyword(arg='table', value=Name(id='rel', ctx=Load())), keyword(arg='ascending', value=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='relevance_table', ctx=Load()), attr='greater_is_better', ctx=Load())))])), Assign(targets=[Name(id='feature_segments_ranking', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_ranked_list', ctx=Load()), args=[], keywords=[keyword(arg='table', value=Attribute(value=Name(id='rel', ctx=Load()), attr='T', ctx=Load())), keyword(arg='ascending', value=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='relevance_table', ctx=Load()), attr='greater_is_better', ctx=Load())))])), Assign(targets=[Name(id='gale_shapley_steps_number', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_gale_shapley_steps_number', ctx=Load()), args=[], keywords=[keyword(arg='top_k', value=Attribute(value=Name(id='self', ctx=Load()), attr='top_k', ctx=Load())), keyword(arg='n_segments', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segment_features_ranking', ctx=Load())], keywords=[])), keyword(arg='n_features', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='feature_segments_ranking', ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='last_', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='top_k', ctx=Load()), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segment_features_ranking', ctx=Load())], keywords=[]))), For(target=Name(id='step', ctx=Store()), iter=Call(func=Name(id='r', ctx=Load()), args=[Name(id='gale_shapley_steps_number', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='matche_s', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gale_shapley_iteration', ctx=Load()), args=[], keywords=[keyword(arg='segment_features_ranking', value=Name(id='segment_features_ranking', ctx=Load())), keyword(arg='feature_segments_ranking', value=Name(id='feature_segments_ranking', ctx=Load()))])), If(test=Compare(left=Name(id='step', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Name(id='gale_shapley_steps_number', ctx=Load()), op=Sub(), right=Constant(value=1))]), body=[Assign(targets=[Name(id='selected_features', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_process_last_step', ctx=Load()), args=[], keywords=[keyword(arg='matches', value=Name(id='matche_s', ctx=Load())), keyword(arg='relevance_table', value=Name(id='rel', ctx=Load())), keyword(arg='n', value=Name(id='last_', ctx=Load())), keyword(arg='greater_is_better', value=Attribute(value=Name(id='self', ctx=Load()), attr='greater_is_better', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='selected_features', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='matche_s', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selected_features', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='selected_features', ctx=Load())], keywords=[])), Assign(targets=[Name(id='segment_features_ranking', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_ranking_list', ctx=Load()), args=[], keywords=[keyword(arg='segment_features_ranking', value=Name(id='segment_features_ranking', ctx=Load())), keyword(arg='features_to_drop', value=Name(id='selected_features', ctx=Load()))]))], orelse=[]), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='GaleShapleyFeatureSelectionTransform')), FunctionDef(name='_compute_gale_shapley_steps_number', args=arguments(posonlyargs=[], args=[arg(arg='TOP_K', annotation=Name(id='int', ctx=Load())), arg(arg='n_segments', annotation=Name(id='int', ctx=Load())), arg(arg='N_FEATURES', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='N_FEATURES', ctx=Load()), ops=[Lt()], comparators=[Name(id='TOP_K', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Given top_k='), FormattedValue(value=Name(id='TOP_K', ctx=Load()), conversion=-1), Constant(value=' is bigger than n_features='), FormattedValue(value=Name(id='N_FEATURES', ctx=Load()), conversion=-1), Constant(value='. Transform will not filter features.')])], keywords=[])), Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='TOP_K', ctx=Load()), ops=[Lt()], comparators=[Name(id='n_segments', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Given top_k='), FormattedValue(value=Name(id='TOP_K', ctx=Load()), conversion=-1), Constant(value=' is less than n_segments. Algo will filter data without Gale-Shapley run.')])], keywords=[])), Return(value=Constant(value=1))], orelse=[]), Return(value=Call(func=Name(id='ceil', ctx=Load()), args=[BinOp(left=Name(id='TOP_K', ctx=Load()), op=Div(), right=Name(id='n_segments', ctx=Load()))], keywords=[]))], decorator_list=[Name(id='staticmethodcY', ctx=Load())], returns=Name(id='int', ctx=Load()))], decorator_list=[])], type_ignores=[])