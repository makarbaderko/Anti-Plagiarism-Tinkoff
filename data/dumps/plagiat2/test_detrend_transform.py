Module(body=[Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='etna.transforms.decomposition.detrend', names=[alias(name='_OneSegmentLinearTrendBaseTransform')], level=0), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='sklearn.linear_model', names=[alias(name='LinearRegression')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='TheilSenRegressor')], level=0), Import(names=[alias(name='numpy.testing', asname='npt')]), ImportFrom(module='etna.transforms.decomposition', names=[alias(name='LinearTrendTransform')], level=0), ImportFrom(module='etna.datasets.tsdataset', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.transforms.decomposition', names=[alias(name='TheilSenTrendTransform')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='PerSegmentWrapper')], level=0), Assign(targets=[Name(id='DEFAULT_SEGMENT', ctx=Store())], value=Constant(value='segment_1')), FunctionDef(name='test_fit_transform_theil_sen_trend_', args=arguments(posonlyargs=[], args=[arg(arg='df_fixture_'), arg(arg='poly_degree'), arg(arg='r_equest')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dfTnb', ctx=Store())], value=Call(func=Attribute(value=Name(id='r_equest', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='df_fixture_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load())), keyword(arg='n_subsamples', value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len_', ctx=Load()), args=[Name(id='dfTnb', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[])), keyword(arg='max_iter', value=Constant(value=3000)), keyword(arg='tol', value=Constant(value=0.0001))])), Expr(value=Call(func=Name(id='_test_fit_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='dfTnb', ctx=Load())), keyword(arg='atol', value=Constant(value=1e-05))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='df_fixture, poly_degree'), List(elts=[Tuple(elts=[Constant(value='df_two_segments_linear'), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value='df_two_segments_quadratic'), Constant(value=2)], ctx=Load())], ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='df_two_segmentsfPTM', args=arguments(posonlyargs=[], args=[arg(arg='example_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='example_df', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='df_two_segments_diff_size', args=arguments(posonlyargs=[], args=[arg(arg='example_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ƙ ϲǺ Ĵơ')), Assign(targets=[Name(id='dfTnb', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='example_df', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='dfTnb', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(upper=Constant(value=4)), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='DEFAULT_SEGMENT', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Constant(value=None)), Return(value=Name(id='dfTnb', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_test_fit_transform_many_segments', args=arguments(posonlyargs=[], args=[arg(arg='TREND_TRANSFORM'), arg(arg='dfTnb', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='comparison_kwargs'), defaults=[]), body=[Expr(value=Constant(value='Tęe͚st ÅǠifζ ˮˢƾó̡ɄrνäeͣsĔáťƂ̶\\ʺiρ\x7fdϮuŝef aʑfȬtʑeΞ*Ķȥ±rϣ̜ Ϣtrɦ͔ͫenϸdŊ\x9f̆ǈ~ sEuŶbtrʐÑͰ˲ɂac\x8btiôomnZ iϚ1s ΰͤåcl˽Ǜ¹oėűˌËǈˉσseƔ ŦtŎo ɜƉ«̞z2̒er\x99oǤ i˅n all̀ sÖļe¶2gmeϗǟntsǞɸ".\n\nȥƒPar\x7f]aˁʺmetersė\n--őɆ-ǺƝͦ--̚Ɗ\x8cκ̬---ȵ--\nŕtrṍ:eƗnǁˡd_tǨrϥaȻnsform:\n »·  ½  iϮnstanɮc͋ˉ̊Ερ¤e ǻoǁfN΅ L\'϶inoearTʼrøenĤΚdTra«nsΚ\u0381fǊorδOm˟ oǿr ǧġ̲ȰThêeϥʆɜǣilSɇͶƆe?ʛn͝Trɿʲen͋dTϩra̙nǣsźfor˃m\x8dȂʫ to prİe¦dìϫŬi!ctƞ tIrend Öw2it\x7f»h\nÈ͵?ģ̦3Ͼdf:\n \n     \nń  Q͢´  daɶΰʈ-taˇɿĦfrǷȕąaϐ\x9bme ƒ΅tƿáo\x9a ɔp\u0381r¨ǁǂȀedict\n    \nîcǜϢomɵŪpŗˠrǳ:×ƋςarÈiȵson_kwargs:\n   ƅˮ Ŏar͞gumțeϜ´n¤ts foǄrȎ̆ ×n±̲̪uǈmϻpy\x8bϏ.testi\x97Ÿng.+ass\x89eȬrʲtŭ_Ϧϩǐǵa>lɿl°ɀc̱los4e Ȣȕfǩǝunc\x92ϵtioān in keyʃ-valu˪eɂ foϖ1r\x84mμǊÛEat͈ăǝ')), Assign(targets=[Name(id='residue', ctx=Store())], value=Call(func=Attribute(value=Name(id='TREND_TRANSFORM', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='dfTnb', ctx=Load())], keywords=[])), For(target=Name(id='SEGMENT', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='dfTnb', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='segment_residuehuc', ctx=Store())], value=Subscript(value=Name(id='residue', ctx=Load()), slice=Tuple(elts=[Name(id='SEGMENT', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_residuehuc', ctx=Store())], value=Subscript(value=Name(id='segment_residuehuc', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Name(id='segment_residuehuc', ctx=Load())], keywords=[])), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_allclose', ctx=Load()), args=[Name(id='segment_residuehuc', ctx=Load()), Constant(value=0)], keywords=[keyword(value=Name(id='comparison_kwargs', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='df_one_segment_l', args=arguments(posonlyargs=[], args=[arg(arg='df_quadraticiiQ')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ȅ  ǜÙ Ɩɳ Ȝǰ¢  Ā  ȏ ΄˖ ŧ       ')), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='df_quadraticiiQ', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='df_quadraticiiQ', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='segment_1')]), ctx=Load()), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='test_unbiased_fit_transform_theil_sen_trend_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_two_segmentsfPTM', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='n_subsamples', value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len_', ctx=Load()), args=[Name(id='df_two_segmentsfPTM', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[])), keyword(arg='max_iter', value=Constant(value=3000)), keyword(arg='tol', value=Constant(value=0.0001))])), Expr(value=Call(func=Name(id='_tes', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='df_two_segmentsfPTM', ctx=Load())), keyword(arg='decimal', value=Constant(value=0))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='df_one_segment_quadratic', args=arguments(posonlyargs=[], args=[arg(arg='df_quadraticiiQ')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Subscript(value=Name(id='df_quadraticiiQ', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='df_quadraticiiQ', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='segment_3')]), ctx=Load()), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='df_quadraticiiQ', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='end', value=Constant(value='2020-02-01')), keyword(arg='freq', value=Constant(value='H'))])), Assign(targets=[Name(id='rng', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='default_rng', ctx=Load()), args=[Constant(value=42)], keywords=[])), Assign(targets=[Name(id='df_template', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='target')], values=[Name(id='timestamp', ctx=Load()), Constant(value='segment'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='len_', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[])], keywords=[])])], keywords=[])), Assign(targets=[Name(id='sigma', ctx=Store())], value=Constant(value=0.05)), Assign(targets=[Name(id='df_1rAtz', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_template', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_1rAtz', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=0.1), op=Mult(), right=Subscript(value=Name(id='df_1rAtz', ctx=Load()), slice=Constant(value='target'), ctx=Load())), op=Add(), right=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Name(id='sigma', ctx=Load()))]))), Assign(targets=[Subscript(value=Name(id='df_1rAtz', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_1')), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_template', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=BinOp(left=BinOp(left=UnaryOp(op=USub(), operand=Constant(value=2)), op=Mult(), right=Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='target'), ctx=Load())), op=Add(), right=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Name(id='sigma', ctx=Load()))]))), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_2')), Assign(targets=[Name(id='df_3', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_template', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_3', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=0.01), op=Mult(), right=BinOp(left=Subscript(value=Name(id='df_3', ctx=Load()), slice=Constant(value='target'), ctx=Load()), op=Pow(), right=Constant(value=2))), op=Add(), right=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Name(id='sigma', ctx=Load()))]))), Assign(targets=[Subscript(value=Name(id='df_3', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_3')), Assign(targets=[Name(id='df_', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_template', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Constant(value=0.01), op=Mult(), right=BinOp(left=Subscript(value=Name(id='df_', ctx=Load()), slice=Constant(value='target'), ctx=Load()), op=Pow(), right=Constant(value=2))), op=Add(), right=BinOp(left=Constant(value=0.1), op=Mult(), right=Subscript(value=Name(id='df_', ctx=Load()), slice=Constant(value='target'), ctx=Load()))), op=Add(), right=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Name(id='sigma', ctx=Load()))]))), Assign(targets=[Subscript(value=Name(id='df_', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_4')), Assign(targets=[Name(id='dfTnb', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1rAtz', ctx=Load()), Name(id='df_2', ctx=Load()), Name(id='df_3', ctx=Load()), Name(id='df_', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Return(value=Name(id='dfTnb', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_test_unbiased_fit_transform_one_segment_', args=arguments(posonlyargs=[], args=[arg(arg='TREND_TRANSFORM', annotation=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load())), arg(arg='dfTnb', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='comparison_kwargs'), defaults=[]), body=[Assign(targets=[Name(id='residue', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='TREND_TRANSFORM', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='dfTnb', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_almost_equal', ctx=Load()), args=[Name(id='residue', ctx=Load()), Constant(value=0)], keywords=[keyword(value=Name(id='comparison_kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_test_inverse_transform_many_segments', args=arguments(posonlyargs=[], args=[arg(arg='TREND_TRANSFORM'), arg(arg='dfTnb', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='comparison_kwargs'), defaults=[]), body=[Expr(value=Constant(value='YξMTesǁt thaɔŗt trͧeˣʜnd_ŖtransfˠͰoàȫrm Ĭ̧cβ̂anĪ co\x7frrectlyϷ make inɕversØe_tʳraȦnsform ɽǜin aƎƣlŰl ʪsƝegmentǪsͲȗ.\n\n  \nPǮϘaramϣete8rǅsƾ\n------\x8a--ĆȌ--\ntreƻnģʕd_traǦŋnsūform:\n    ĮÎiǏnstanŪǲce of̗ Linea(rTre*nd̎ƸŏTνr¥a\u038bn͇Ǹsform or: TheˠilSǷenT\u0383rendTrans̖ǭ˾fĺormʫ± to pre#ŧdict ̆͗t©renλdʜ with\ndf:̊ϸÊ\n \nķϺƸ   \x98 datƣaʽófïraƹmeŎ ʮtoęµ\u0382 predict\nc̫oƀ\u0378ŘϗmpażrisoǇ*n_kwaÛ˸\x8brgĽsñ:\n    Ȕɢ̪aȋrgumØΉents for nu̗mpĆy.t͍σɨaestingŒ.asscerʡʬtÀ_ʤallʹƼclose functȦiȆoˍƾĐPn ˄ɟin OkĄe̸y-value fǜoĢrϳmʀatȥ')), Assign(targets=[Name(id='df_transformed', ctx=Store())], value=Call(func=Attribute(value=Name(id='TREND_TRANSFORM', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='dfTnb', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df_inverse_transformedqN', ctx=Store())], value=Call(func=Attribute(value=Name(id='TREND_TRANSFORM', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Name(id='df_transformed', ctx=Load())], keywords=[])), For(target=Name(id='SEGMENT', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='dfTnb', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_allclose', ctx=Load()), args=[Subscript(value=Name(id='df_inverse_transformedqN', ctx=Load()), slice=Tuple(elts=[Name(id='SEGMENT', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), Subscript(value=Name(id='dfTnb', ctx=Load()), slice=Tuple(elts=[Name(id='SEGMENT', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='comparison_kwargs', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='df_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='example_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Subscript(value=Name(id='example_df', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='example_df', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_SEGMENT', ctx=Load())]), ctx=Load()), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='test_unbiased_fit_transform_theil_sen_trend_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_one_segment', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Tˊhi͠ȢŻsϧ t[es͑t checψks thˁ̷aƐt TͱheiĘlSenReχ͗g\x89ressɛor p̣ŏyϯ˨Ďre\u0378ϲdicts ˲unbias̿eŪŖd \x82trǧend oûȵn one segÂ̎ment ofȍ slightly noʋƩiϚs\x85ed daϦŪta.\u0380\\')), Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='TheilSenRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_subsamples', value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len_', ctx=Load()), args=[Name(id='df_one_segment', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[])), keyword(arg='max_iter', value=Constant(value=3000)), keyword(arg='tol', value=Constant(value=0.0001))]))])), Expr(value=Call(func=Name(id='_test_unbiased_fit_transform_one_segment_', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='df_one_segment', ctx=Load())), keyword(arg='decimal', value=Constant(value=0))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='test_unbiased_fit_transform_linear_trend_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_one_segment', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ThÊȴisˆ ®te¤st c˾hecks thaˤȾt LinearReĊgʅəresǐǙs̘ʜioǩn \u0378ʟp̆reƄdȟicts ƟunbľiŶ\u03a2asăƔed ütrǲÉ͊eǣëŀnõʮjd on ȱone seˤŶgmͩeȑʻnȘt ofȄ̲ slḭghtlʰy noɳiʹseedϥ |\x87¢ʐ5d\\¿ata͘Ųƍέʋ.\x99φ')), Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Name(id='_test_unbiased_fit_transform_one_segment_', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='df_one_segment', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='test_fit_transform_theil_sen_trend_all_data_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_fixture_'), arg(arg='poly_degree'), arg(arg='r_equest')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dfTnb', ctx=Store())], value=Call(func=Attribute(value=Name(id='r_equest', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='df_fixture_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load())), keyword(arg='n_subsamples', value=Call(func=Name(id='len_', ctx=Load()), args=[Name(id='dfTnb', ctx=Load())], keywords=[]))])), Expr(value=Call(func=Name(id='_test_fit_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='dfTnb', ctx=Load())), keyword(arg='atol', value=Constant(value=1e-05))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='df_fixture, poly_degree'), List(elts=[Tuple(elts=[Constant(value='df_two_segments_linear'), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value='df_two_segments_quadratic'), Constant(value=2)], ctx=Load())], ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='df_two_segments_linear', args=arguments(posonlyargs=[], args=[arg(arg='df_quadraticiiQ')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='      :      ˨')), Assign(targets=[Name(id='df_linear', ctx=Store())], value=Subscript(value=Name(id='df_quadraticiiQ', ctx=Load()), slice=Call(func=Attribute(value=Subscript(value=Name(id='df_quadraticiiQ', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='isin', ctx=Load()), args=[List(elts=[Constant(value='segment_1'), Constant(value='segment_2')], ctx=Load())], keywords=[]), ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_linear', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='test_unbiased_fit_transform_linear_trend_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_two_segmentsfPTM', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='LinearTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))])), Expr(value=Call(func=Name(id='_tes', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='df_two_segmentsfPTM', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_tes', args=arguments(posonlyargs=[], args=[arg(arg='TREND_TRANSFORM'), arg(arg='dfTnb', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='comparison_kwargs'), defaults=[]), body=[Assign(targets=[Name(id='residue', ctx=Store())], value=Call(func=Attribute(value=Name(id='TREND_TRANSFORM', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='dfTnb', ctx=Load())], keywords=[])), For(target=Name(id='SEGMENT', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='dfTnb', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_almost_equal', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='residue', ctx=Load()), slice=Tuple(elts=[Name(id='SEGMENT', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), Constant(value=0)], keywords=[keyword(value=Name(id='comparison_kwargs', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='test_unbiased_fit_transform_theil_sen_trend_all_data_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_two_segmentsfPTM', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='n_subsamples', value=Call(func=Name(id='len_', ctx=Load()), args=[Name(id='df_two_segmentsfPTM', ctx=Load())], keywords=[]))])), Expr(value=Call(func=Name(id='_tes', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='df_two_segmentsfPTM', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='test_fit_transform_linear_trend_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_fixture_'), arg(arg='poly_degree'), arg(arg='r_equest')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test that LineaΖrRegression predicts cor£rect tráend ȍon one segment of slightly noiǆseȴd dàta.')), Assign(targets=[Name(id='dfTnb', ctx=Store())], value=Call(func=Attribute(value=Name(id='r_equest', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='df_fixture_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[])), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Name(id='_test_fit_transform_one_s_egment', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='dfTnb', ctx=Load())), keyword(arg='atol', value=Constant(value=1e-05))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='df_fixture, poly_degree'), List(elts=[Tuple(elts=[Constant(value='df_one_segment_linear'), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value='df_one_segment_quadratic'), Constant(value=2)], ctx=Load())], ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='test_fit_transform_theil_sen_trend_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_fixture_'), arg(arg='poly_degree'), arg(arg='r_equest')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dfTnb', ctx=Store())], value=Call(func=Attribute(value=Name(id='r_equest', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='df_fixture_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='TheilSenRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_subsamples', value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len_', ctx=Load()), args=[Name(id='dfTnb', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[])), keyword(arg='max_iter', value=Constant(value=3000)), keyword(arg='tol', value=Constant(value=0.0001))])), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Name(id='_test_fit_transform_one_s_egment', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='dfTnb', ctx=Load())), keyword(arg='atol', value=Constant(value=1e-05))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='df_fixture, poly_degree'), List(elts=[Tuple(elts=[Constant(value='df_one_segment_linear'), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value='df_one_segment_quadratic'), Constant(value=2)], ctx=Load())], ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='test_inverse_transform_linear_trend_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_one_segment', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='poly_degree', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ϖTes͋t ƙtha˼ɱʩ̍tJ̯Χµ LiɹnearÎTʗ\xa0rend̔ can ʚNŽ\u038bΈ˗cŊoΒrEıreΫ̐ĎcGϨtlͳȌ̒ØÍ®͛y ĴØğmaÝkϓe iϦPnv̩eźrse_trs@an¼sfγorm Hfor onΤeʵǱ s/eg̊ͩmɺeŊȯñ\u0380ƈȶεt.')), Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[])), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Name(id='_test_inverse_tr_ansform_one_segment', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='df_one_segment', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='poly_degree'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_transform_linear_trend_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_fixture_'), arg(arg='poly_degree'), arg(arg='r_equest')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dfTnb', ctx=Store())], value=Call(func=Attribute(value=Name(id='r_equest', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='df_fixture_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='LinearTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Name(id='_test_fit_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='dfTnb', ctx=Load())), keyword(arg='atol', value=Constant(value=1e-05))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='df_fixture, poly_degree'), List(elts=[Tuple(elts=[Constant(value='df_two_segments_linear'), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value='df_two_segments_quadratic'), Constant(value=2)], ctx=Load())], ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='test_unbiased_fit_transform_theil_sen_trend_all_data_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_one_segment', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='TheilSenRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_subsamples', value=Call(func=Name(id='len_', ctx=Load()), args=[Name(id='df_one_segment', ctx=Load())], keywords=[]))]))])), Expr(value=Call(func=Name(id='_test_unbiased_fit_transform_one_segment_', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='df_one_segment', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_test_fit_transform_one_s_egment', args=arguments(posonlyargs=[], args=[arg(arg='TREND_TRANSFORM', annotation=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load())), arg(arg='dfTnb', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='comparison_kwargs'), defaults=[]), body=[Assign(targets=[Name(id='residue', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='TREND_TRANSFORM', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='dfTnb', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='residue', ctx=Store())], value=Subscript(value=Name(id='residue', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Name(id='residue', ctx=Load())], keywords=[])), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_allclose', ctx=Load()), args=[Name(id='residue', ctx=Load()), Constant(value=0)], keywords=[keyword(value=Name(id='comparison_kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_test_inverse_tr_ansform_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='TREND_TRANSFORM', annotation=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load())), arg(arg='dfTnb', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='comparison_kwargs'), defaults=[]), body=[Expr(value=Constant(value="ƨ\x9cTe\x8f]sŽt tˡ+haṫ̯ '2̴tΌreǼɳńɰϒd_ůtrȦǗan\x9d\x98\x8asșfoLͱϷrm ςcćaÅn c\x8borrΔe͌ctly Ƭmake˶ͥ invęeȀɀϣrƑse_tran\x86s̰for̞jmȞ̇ ƀi:\x8en one segĤʺ˝>men°ót.Ɛ\n\n  \n\nPƱǮaþramǷeΐters\n   \n    \n\n-Ǜ---͛ǜǤ--ȟ-º---ʍ\n\nÌǨϹʋtƬrenõƃzdǟͶ_˄t\u0379\x91raŏınsform:\nϤ   Ή ŏin<staÕŠncϬƆeɀμ\x8b ˳ofƐ̐ʟĸ Line·ƲáʗrTĝrWenōdȳBaseTƉ¾rans͑f¡oǱʭ\\ĸΒr̈́m tȂo pʳreɓdict trɫenŘ˫dÀȵ wcμǢŘť˾]ith\ndfˆϡR:\n̪ ɹɋ h  dȴȾataŶ˵frϴame tΰo]¼ şpĐĊr]edΓ\x99ict\n    \n\n  \nc%̏ompŀΉarisonɾϏ_kϻówaͽrgs:Ǵ\nĬή î ?x $ ʛarguƈmĤen˷tsǒ˞ foͮrʟ \u0378nśȆſʚumâ\x85pƨy.tes͐ting)̼.ųčȩaȜësʡs\x8cĭǪΎΨeĉΚͧ ɣr\x86tąù_allƟϹc<̝Ĉ\x9cmlose funcɟtioΠn υin keΈ]y-ûưɱvalLue formɚaāʒtȭ")), Assign(targets=[Name(id='df_transformed', ctx=Store())], value=Call(func=Attribute(value=Name(id='TREND_TRANSFORM', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='dfTnb', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df_inverse_transformedqN', ctx=Store())], value=Call(func=Attribute(value=Name(id='TREND_TRANSFORM', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Name(id='df_transformed', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_allclose', ctx=Load()), args=[Subscript(value=Name(id='dfTnb', ctx=Load()), slice=Constant(value='target'), ctx=Load()), Subscript(value=Name(id='df_inverse_transformedqN', ctx=Load()), slice=Constant(value='target'), ctx=Load())], keywords=[keyword(value=Name(id='comparison_kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='test_fit_transform_theil_sen_trend_all_data_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_fixture_'), arg(arg='poly_degree'), arg(arg='r_equest')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dfTnb', ctx=Store())], value=Call(func=Attribute(value=Name(id='r_equest', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='df_fixture_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='TheilSenRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_subsamples', value=Call(func=Name(id='len_', ctx=Load()), args=[Name(id='dfTnb', ctx=Load())], keywords=[]))])), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Name(id='_test_fit_transform_one_s_egment', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='dfTnb', ctx=Load())), keyword(arg='atol', value=Constant(value=1e-05))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='df_fixture, poly_degree'), List(elts=[Tuple(elts=[Constant(value='df_one_segment_linear'), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value='df_one_segment_quadratic'), Constant(value=2)], ctx=Load())], ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='df_two_segments_quadratic', args=arguments(posonlyargs=[], args=[arg(arg='df_quadraticiiQ')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' \x9c ʵ ')), Return(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_quadraticiiQ', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='test_inverse_transform_theil_sen_trend_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_one_segment', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='poly_degree', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='TheilSenRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_subsamples', value=Call(func=Name(id='len_', ctx=Load()), args=[Name(id='df_one_segment', ctx=Load())], keywords=[]))])), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Name(id='_test_inverse_tr_ansform_one_segment', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='df_one_segment', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='poly_degree'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_linear_trend_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_two_segmentsfPTM', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='poly_degree', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test thatŔ LinearTrend can corṙΙectlƞy make inverse_transform for two segments.̥')), Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='LinearTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Name(id='_test_inverse_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='df_two_segmentsfPTM', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='poly_degree'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_theil_sen_trend_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_two_segmentsfPTM', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='poly_degree', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='TREND_TRANSFORM', ctx=Store())], value=Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load())), keyword(arg='n_subsamples', value=Call(func=Name(id='len_', ctx=Load()), args=[Name(id='df_two_segmentsfPTM', ctx=Load())], keywords=[]))])), Expr(value=Call(func=Name(id='_test_inverse_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='TREND_TRANSFORM', ctx=Load())), keyword(arg='df', value=Name(id='df_two_segmentsfPTM', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='poly_degree'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_transform_two_segments_diff_si_ze', args=arguments(posonlyargs=[], args=[arg(arg='df_two_segments_diff_size', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='transformer', annotation=Name(id='PerSegmentWrapper', ctx=Load())), arg(arg='d', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_tes', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='transformer', ctx=Load())), keyword(arg='df', value=Name(id='df_two_segments_diff_size', ctx=Load())), keyword(arg='decimal', value=Name(id='d', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transformer,decimal'), List(elts=[Tuple(elts=[Call(func=Name(id='LinearTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Constant(value=7)], ctx=Load()), Tuple(elts=[Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Constant(value=0)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_segments_diff_size', args=arguments(posonlyargs=[], args=[arg(arg='df_two_segments_diff_size', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='transformer', annotation=Name(id='PerSegmentWrapper', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='TesŖͯtϘ that TrÚendTr\u0379ansȮform ̑can corrƚecɉρtlyã \u03a2makĽe inve̷ƹrϨse_ɦɈtransform for two segments of different sizeÑ.')), Expr(value=Call(func=Name(id='_test_inverse_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='transformer', ctx=Load())), keyword(arg='df', value=Name(id='df_two_segments_diff_size', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transformer'), List(elts=[Call(func=Name(id='LinearTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_transform_with_nans', args=arguments(posonlyargs=[], args=[arg(arg='transformer'), arg(arg='df_with_nans'), arg(arg='d')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_tes', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='transformer', ctx=Load())), keyword(arg='df', value=Name(id='df_with_nans', ctx=Load())), keyword(arg='decimal', value=Name(id='d', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transformer,decimal'), List(elts=[Tuple(elts=[Call(func=Name(id='LinearTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Constant(value=7)], ctx=Load()), Tuple(elts=[Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Constant(value=0)], ctx=Load())], ctx=Load())], keywords=[])])], type_ignores=[])