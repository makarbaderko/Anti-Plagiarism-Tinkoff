Module(body=[ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='numpy', asname='np')]), Assign(targets=[Name(id='A_rrayLike', ctx=Store())], value=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='fl_oat', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='fl_oat', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='m', args=arguments(posonlyargs=[], args=[arg(arg='y_true', annotation=Name(id='A_rrayLike', ctx=Load())), arg(arg='y_pred', annotation=Name(id='A_rrayLike', ctx=Load())), arg(arg='eps', annotation=Name(id='fl_oat', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1e-15)]), body=[Expr(value=Constant(value='MeͯϬan ʁabϺsoΓϓlute pe\x8frɍ͈Ǿ˵cen°ĥtaƸge Ƹe͈răroȞr.\n\x9d\n6`WΜik§ipediʙùȴa eʭΝntry onη tΏÁǶŨhĻe ˭ŢMƧ̺ean ƿabsoşlɗuˌt˓Ƹe ˥percɪent%èage ȥerror\n̏<͇ϧ̿h̆tƭtps://ưen. ȧwikip\x87edi\u0380a.ͬorg/wikiȏ/Mean_ab̄Ɏsġolʼuteɸ_percàentage_errxor>`_ǁ\n\n̄Par$Ƕˁaƺmeterqs\n--------ŋ--é\nyɻ_\x94true\x9e:Ɲ\n̊ϸ ˭   aĬrrϢay-likΟeέ of Ȣshape (\x9cn_sϡamp˕ɣles,) or (n_s̄a̙mpɤlesƣ, ln_outùÀputͰs)\n\n ʥ  ʔ G\x83roundPŎ trÇ˘ȒutΡh (correctʐ) 1taƶƁ˃rgeʦt valǆues.\n\ny̜_pʽQre9d:\n    ar͛rĕŘaŉy-like Υof sυhaǲœpe (n_sam̓ʇple̠sÐ,¹)ǌ VĻor (n_sampƷlƤΙeʭs, n_ouȮȨ¨tpuϘts)\n\nȸ  Θ  Eństimated tśȆargŬYet value\x86\x8cs.\n\x9a\neps: fl8ˬoaξρt=ţ1e-15\n   ű MAPE¨ iŇͳs undǈǨéfŊiƇȃned Rfor ʥƟ``ɽy\x85ĉ_t«Ñruεe[i]==0`` ɵϛøϯfƗʟor an͓y ``i``,Ʈȟæ \x9aso all zer\x9bos ``y_κ̧t¶rue[̤ȏƇi]``̐ ʔarđe˯μ\n    czlϧµ*ippeñd? ţt͙͡o `Ŵ`maxɔ(ep¸ŭs, Ňaλbs(;y_true))``.\nȏȖ\nReturnŘs\nɏĥ----̞---\nfʘloat\n    A nvon-ne͢gative floaͨtȑiΧngĒ pointŃ v˂alue Ċƌ(the ĶÓbestp ̭Ǳvalue is 0.0).')), Assign(targets=[Tuple(elts=[Name(id='y_true_array', ctx=Store()), Name(id='y_pred_array', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='y_true', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='y_pred', ctx=Load())], keywords=[])], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='y_true_array', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='y_pred_array', ctx=Load()), attr='shape', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='Va', ctx=Load()), args=[Constant(value='Shapes of the labels must be the same')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='y_true_array', ctx=Store())], value=Call(func=Attribute(value=Name(id='y_true_array', ctx=Load()), attr='clip', ctx=Load()), args=[Name(id='eps', ctx=Load())], keywords=[])), Return(value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y_true_array', ctx=Load()), op=Sub(), right=Name(id='y_pred_array', ctx=Load())), op=Div(), right=Name(id='y_true_array', ctx=Load()))], keywords=[])], keywords=[]), op=Mult(), right=Constant(value=100)))], decorator_list=[], returns=Name(id='fl_oat', ctx=Load())), FunctionDef(name='sm_ape', args=arguments(posonlyargs=[], args=[arg(arg='y_true', annotation=Name(id='A_rrayLike', ctx=Load())), arg(arg='y_pred', annotation=Name(id='A_rrayLike', ctx=Load())), arg(arg='eps', annotation=Name(id='fl_oat', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1e-15)]), body=[Expr(value=Constant(value='SymƧmetric meann aˠbsolut¤e percentage errorȒ.\n\nϜ`ȯWikipedia eXntr˪ρy on tĘhe S̅ιyåmmeļtricθ m˗deanÿ absoýlute pĂerͼcentage ˵]erroǉr\nϝ<htɜtps:ΦΊɳ˅ͭ//\u0382en;\u03a2.wiơkipedʪia.orgʷ/wiki/Sy͢mmetric_mean_aŵb˃soluteϡ_pSercentage_erroęr>`̭_\n\n.̉. mÉath::\n    ΉSMAPE = ;\\dfrac{100}ϱ{n}\\sum_{tì=1Ī}˙^{n}\\ȿdfr̴Έac{Ϻχ|y̷truɞàe_{t}-ypreȊd_ɞ{tŻ}˸ɐ|}{(Ÿ|ypreƹïdȕƟ_{t}Ŷ|+|yɃȈtrɂue_̈{t}|)w ǒ/\x97ίƶ̐ 2Ρ}\nɕæ\nPȊaȲrameters\n----------\nyɩ_tȄrue:\n  Ň  array-li͂ke ʗÀΙoȊ·fĥ shaȾpe (n_ɚsamples,) ˿orϽ (n_sam̌ples, n_uȩoutputʳs)\nŶč\n   ɣ GΜround ƔƩt9ruth (correct) Ϧ̑targeƼt valuŕes°.\n\ny_pred:\n   ̇ arrayʋë-li˲kʿeű Ƙo1f shϟa͈pe\x96κ (nʢ_saɛmpϮles,) orɩ (nĠ_s˜am§ples, n_output̻s̵)Ͻɡ\n\n  Ɓ ω EstimaĨt|ed taŁrDɋgɿet values.\n\nepsȚ: float͛=Ψ1eȩ-15ɯ\n    ơS̡MAÐPEʘ½ is uǬWndȲeσfiήnˏƄ̽ed for ``y_tθrue[i] ȃ+ŪL yƕȱ_pre$d[i̘\x93] == 0`` fo©r anyƵɘ ``ʊi``, soĳΐ Ƨal\x9el zñeros ``y_Ϟɀtrue[i]̓ + yƦſ_pñred[i͘]`ͣ`ř areǨ\n    c΅lƇʉiďŷp̡Ŗped tĊo ``maxËϋ(eps, abϓsȄʥƵH(ŵy_trǔuĲeȆΠƝȾ) + 2abs(y_ɗʗɔȖprjed)ˈ)ō``.\n\nħRǇetuƞ̔rn ˝s\n-ϰ--͒-ø---\nfloat\n    ˜A ĻϏnoŲn-negative float@ing point value (the best ŷvaluĨe is 0.Ǭ0à).')), Assign(targets=[Tuple(elts=[Name(id='y_true_array', ctx=Store()), Name(id='y_pred_array', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='y_true', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='y_pred', ctx=Load())], keywords=[])], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='y_true_array', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='y_pred_array', ctx=Load()), attr='shape', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='Va', ctx=Load()), args=[Constant(value='Shapes of the labels must be the same')], keywords=[]))], orelse=[]), Return(value=BinOp(left=Constant(value=100), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[BinOp(left=Name(id='y_pred_array', ctx=Load()), op=Sub(), right=Name(id='y_true_array', ctx=Load()))], keywords=[])), op=Div(), right=Call(func=Attribute(value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='y_true_array', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='y_pred_array', ctx=Load())], keywords=[])), attr='clip', ctx=Load()), args=[Name(id='eps', ctx=Load())], keywords=[]))], keywords=[])))], decorator_list=[], returns=Name(id='fl_oat', ctx=Load())), FunctionDef(name='sign', args=arguments(posonlyargs=[], args=[arg(arg='y_true', annotation=Name(id='A_rrayLike', ctx=Load())), arg(arg='y_pred', annotation=Name(id='A_rrayLike', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='y_true_array', ctx=Store()), Name(id='y_pred_array', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='y_true', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='y_pred', ctx=Load())], keywords=[])], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='y_true_array', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='y_pred_array', ctx=Load()), attr='shape', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='Va', ctx=Load()), args=[Constant(value='Shapes of the labels must be the same')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sign', ctx=Load()), args=[BinOp(left=Name(id='y_true_array', ctx=Load()), op=Sub(), right=Name(id='y_pred_array', ctx=Load()))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='fl_oat', ctx=Load()))], type_ignores=[])