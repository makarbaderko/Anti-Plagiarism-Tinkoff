Module(body=[ImportFrom(module='etna.datasets.tsdataset', names=[alias(name='TSDataset')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.analysis.outliers.density_outliers', names=[alias(name='absolute_difference_distance')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='etna.analysis.outliers.density_outliers', names=[alias(name='get_segment_density_outliers_indices')], level=0), ImportFrom(module='etna.analysis.outliers.density_outliers', names=[alias(name='get_anomalies_density')], level=0), FunctionDef(name='test_get_anomalies_d_ensity', args=arguments(posonlyargs=[], args=[arg(arg='outliers_tsds', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='outliersY', ctx=Store())], value=Call(func=Name(id='get_anomalies_density', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='outliers_tsds', ctx=Load())), keyword(arg='window_size', value=Constant(value=7)), keyword(arg='distance_coef', value=Constant(value=2.1)), keyword(arg='n_neighbors', value=Constant(value=3))])), Assign(targets=[Name(id='expected_', ctx=Store())], value=Dict(keys=[Constant(value='1'), Constant(value='2')], values=[List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-11')], keywords=[])], ctx=Load()), List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-09')], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-27')], keywords=[])], ctx=Load())])), For(target=Name(id='KEY', ctx=Store()), iter=Name(id='expected_', ctx=Load()), body=[Assert(test=Compare(left=Name(id='KEY', ctx=Load()), ops=[In()], comparators=[Name(id='outliersY', ctx=Load())])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Name(id='outliersY', ctx=Load()), slice=Name(id='KEY', ctx=Load()), ctx=Load()), Subscript(value=Name(id='expected_', ctx=Load()), slice=Name(id='KEY', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_const__ts', args=arguments(posonlyargs=[], args=[arg(arg='const_ts_anomal')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='anoma', ctx=Store())], value=Call(func=Name(id='get_anomalies_density', ctx=Load()), args=[Name(id='const_ts_anomal', ctx=Load())], keywords=[])), Assert(test=Compare(left=Set(elts=[Constant(value='segment_0'), Constant(value='segment_1')]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='anoma', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])])), For(target=Name(id='seg', ctx=Store()), iter=Call(func=Attribute(value=Name(id='anoma', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='anoma', ctx=Load()), slice=Name(id='seg', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_default_distance', args=arguments(posonlyargs=[], args=[arg(arg='x_'), arg(arg='_y'), arg(arg='expected_')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ƌ  \x9f')), Assert(test=Compare(left=Call(func=Name(id='absolute_difference_distance', ctx=Load()), args=[Name(id='x_', ctx=Load()), Name(id='_y', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='expected_', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='x, y, expected'), List(elts=[Tuple(elts=[Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value=0), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=2), Constant(value=2)], ctx=Load()), Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=2)), Constant(value=0), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=0), UnaryOp(op=USub(), operand=Constant(value=2)), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value=2), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=5), Constant(value=3), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value=5), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=5), UnaryOp(op=USub(), operand=Constant(value=3)), Constant(value=8)], ctx=Load()), Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=3)), Constant(value=5), Constant(value=8)], ctx=Load()), Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=5)), UnaryOp(op=USub(), operand=Constant(value=2)), Constant(value=3)], ctx=Load()), Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=2)), UnaryOp(op=USub(), operand=Constant(value=5)), Constant(value=3)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='simple_window', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ')), Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=4), Constant(value=5), Constant(value=6), Constant(value=4), Constant(value=100), Constant(value=200), Constant(value=2)], ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())), FunctionDef(name='test_get_anomalies_density_interface', args=arguments(posonlyargs=[], args=[arg(arg='outliers_tsds', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ')), Assign(targets=[Name(id='outliersY', ctx=Store())], value=Call(func=Name(id='get_anomalies_density', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='outliers_tsds', ctx=Load())), keyword(arg='window_size', value=Constant(value=7)), keyword(arg='distance_coef', value=Constant(value=2)), keyword(arg='n_neighbors', value=Constant(value=3))])), For(target=Name(id='segmen_t', ctx=Store()), iter=List(elts=[Constant(value='1'), Constant(value='2')], ctx=Load()), body=[Assert(test=Compare(left=Name(id='segmen_t', ctx=Load()), ops=[In()], comparators=[Name(id='outliersY', ctx=Load())])), Assert(test=Call(func=Name(id='isi_nstance', ctx=Load()), args=[Subscript(value=Name(id='outliersY', ctx=Load()), slice=Name(id='segmen_t', ctx=Load()), ctx=Load()), Name(id='list', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_get_segment_density_outliers_indices', args=arguments(posonlyargs=[], args=[arg(arg='simple_window', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())), arg(arg='window_size', annotation=Name(id='i', ctx=Load())), arg(arg='n_nei_ghbors', annotation=Name(id='i', ctx=Load())), arg(arg='distance_thresh', annotation=Name(id='float', ctx=Load())), arg(arg='expected_', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ʅCheɬͶcȋk that ˽o˻ηutlơiɢer˿s in on˩ĩe Ɖs̅erɫƔies computaϕ[tǧiΡonͮ \x94wor\x81kņs coǪrrectßlyp̃.ʃ')), Assign(targets=[Name(id='outliersY', ctx=Store())], value=Call(func=Name(id='get_segment_density_outliers_indices', ctx=Load()), args=[], keywords=[keyword(arg='series', value=Name(id='simple_window', ctx=Load())), keyword(arg='window_size', value=Name(id='window_size', ctx=Load())), keyword(arg='n_neighbors', value=Name(id='n_nei_ghbors', ctx=Load())), keyword(arg='distance_threshold', value=Name(id='distance_thresh', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Name(id='outliersY', ctx=Load()), Name(id='expected_', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='window_size,n_neighbors,distance_threshold,expected'), Tuple(elts=[Tuple(elts=[Constant(value=5), Constant(value=2), Constant(value=2.5), List(elts=[Constant(value=4), Constant(value=5), Constant(value=6)], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=6), Constant(value=3), Constant(value=10), List(elts=[Constant(value=4), Constant(value=5)], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value=1), Constant(value=1.8), List(elts=[Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=6)], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value=1), Constant(value=120), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=100), Constant(value=2), Constant(value=1.5), List(elts=[Constant(value=2), Constant(value=4), Constant(value=5), Constant(value=6)], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_in_column', args=arguments(posonlyargs=[], args=[arg(arg='outliers_df_with_two_columns')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ͵  ˯  Ƚ   Uˑͮ')), Assign(targets=[Name(id='outliersY', ctx=Store())], value=Call(func=Name(id='get_anomalies_density', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='outliers_df_with_two_columns', ctx=Load())), keyword(arg='in_column', value=Constant(value='feature')), keyword(arg='window_size', value=Constant(value=10))])), Assign(targets=[Name(id='expected_', ctx=Store())], value=Dict(keys=[Constant(value='1'), Constant(value='2')], values=[List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-08')], keywords=[])], ctx=Load()), List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-26')], keywords=[])], ctx=Load())])), For(target=Name(id='KEY', ctx=Store()), iter=Name(id='expected_', ctx=Load()), body=[Assert(test=Compare(left=Name(id='KEY', ctx=Load()), ops=[In()], comparators=[Name(id='outliersY', ctx=Load())])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Name(id='outliersY', ctx=Load()), slice=Name(id='KEY', ctx=Load()), ctx=Load()), Subscript(value=Name(id='expected_', ctx=Load()), slice=Name(id='KEY', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])