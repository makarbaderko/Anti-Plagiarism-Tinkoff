Module(body=[ImportFrom(module='etna.models', names=[alias(name='SARIMAXModel')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='statsmodels.tsa.statespace.sarimax', names=[alias(name='SARIMAXResultsWrapper')], level=0), ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), FunctionDef(name='test_get_model_before_training', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='¤Cʦhecρ,ɖkƃ șt̯hËͦȷatȇ g\u0379eţ_ĒȢǗmŲ`od̕Τelĺ Ƹmeͭtho̵d th͚roÁw4ͤ¹<s ʪɶ̓˄áʪċȩan ]eΑΫrrɛor \x92ifȠÃ ɢper-ʣsʈe¶Ƥg\x95ȔmenMtŮ moŲĂdƚĸƮeƎϺ˺ĈlǂͰ is nrot fǸ\x92ŮittedǼ Ǥ˚ɚĈyOet.ΌΓ')), Assign(targets=[Name(id='et_na_model', ctx=Store())], value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Can not get the dict with base models, the model is not fitted!'))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='et_na_model', ctx=Load()), attr='get_model', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='_check_pre', args=arguments(posonlyargs=[], args=[arg(arg='ts'), arg(arg='mode')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='mode', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='mode', ctx=Load()), attr='predict', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[]), attr='values', ctx=Load()), attr='any', ctx=Load()), args=[], keywords=[]))), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=2))]))], decorator_list=[]), FunctionDef(name='test_pred_iction', args=arguments(posonlyargs=[], args=[arg(arg='example_t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_check_forecastGmA', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='example_t', ctx=Load())], keywords=[])), keyword(arg='model', value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[])), keyword(arg='horizon', value=Constant(value=7))])), Expr(value=Call(func=Name(id='_check_pre', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='example_t', ctx=Load())], keywords=[])), keyword(arg='model', value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[]), FunctionDef(name='TEST_PREDICTION_WITH_SIMPLE_DIFFERENCING', args=arguments(posonlyargs=[], args=[arg(arg='example_t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_check_forecastGmA', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='example_t', ctx=Load())], keywords=[])), keyword(arg='model', value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[keyword(arg='simple_differencing', value=Constant(value=True))])), keyword(arg='horizon', value=Constant(value=7))])), Expr(value=Call(func=Name(id='_check_pre', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='example_t', ctx=Load())], keywords=[])), keyword(arg='model', value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[keyword(arg='simple_differencing', value=Constant(value=True))]))]))], decorator_list=[]), FunctionDef(name='test_select_regressors_correctly', args=arguments(posonlyargs=[], args=[arg(arg='example_reg_tsdsAXh')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='     ')), Assign(targets=[Name(id='mode', ctx=Store())], value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mode', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_reg_tsdsAXh', ctx=Load()))])), For(target=Tuple(elts=[Name(id='segment', ctx=Store()), Name(id='segment_', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='mode', ctx=Load()), attr='_models', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='segme', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='example_reg_tsdsAXh', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), attr='droplevel', ctx=Load()), args=[Constant(value='segment')], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Name(id='segment_regressors_expected', ctx=Store())], value=Subscript(value=Name(id='segme', ctx=Load()), slice=Attribute(value=Name(id='example_reg_tsdsAXh', ctx=Load()), attr='regressors', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_regressors', ctx=Store())], value=Call(func=Attribute(value=Name(id='segment_', ctx=Load()), attr='_select_regressors', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='segme', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[]))])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Name(id='segment_regressors', ctx=Load()), ops=[Eq()], comparators=[Name(id='segment_regressors_expected', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_prediction_interval_insample_', args=arguments(posonlyargs=[], args=[arg(arg='example_t'), arg(arg='method_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ʦ     Ź   Ν  ̌')), Assign(targets=[Name(id='mode', ctx=Store())], value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mode', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_t', ctx=Load())], keywords=[])), Assign(targets=[Name(id='method', ctx=Store())], value=Call(func=Name(id='get', ctx=Load()), args=[Name(id='mode', ctx=Load()), Name(id='method_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Name(id='method', ctx=Load()), args=[Name(id='example_t', ctx=Load())], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='forecast', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='segmentw', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Set(elts=[Constant(value='target_0.025'), Constant(value='target_0.975'), Constant(value='target')]), attr='issubset', ctx=Load()), args=[Attribute(value=Name(id='segmentw', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=BinOp(left=Subscript(value=Name(id='segmentw', ctx=Load()), slice=Constant(value='target_0.975'), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='segmentw', ctx=Load()), slice=Constant(value='target_0.025'), ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)]), attr='all', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='method_name'), List(elts=[Constant(value='forecast'), Constant(value='predict')], ctx=Load())], keywords=[])]), FunctionDef(name='test_prediction_with_reg', args=arguments(posonlyargs=[], args=[arg(arg='example_reg_tsdsAXh')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_check_forecastGmA', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='example_reg_tsdsAXh', ctx=Load())], keywords=[])), keyword(arg='model', value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[])), keyword(arg='horizon', value=Constant(value=7))])), Expr(value=Call(func=Name(id='_check_pre', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='example_reg_tsdsAXh', ctx=Load())], keywords=[])), keyword(arg='model', value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[]), FunctionDef(name='_check_forecastGmA', args=arguments(posonlyargs=[], args=[arg(arg='ts'), arg(arg='mode'), arg(arg='horizon')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='mode', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future_tsM', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Name(id='horizon', ctx=Load()))])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='mode', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future_tsM', ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[]), attr='values', ctx=Load()), attr='any', ctx=Load()), args=[], keywords=[]))), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Name(id='horizon', ctx=Load()), op=Mult(), right=Constant(value=2))]))], decorator_list=[]), FunctionDef(name='test_ge_t_model_after_training', args=arguments(posonlyargs=[], args=[arg(arg='example_t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_t', ctx=Load()))])), Assign(targets=[Name(id='models_dict', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pipeline', ctx=Load()), attr='model', ctx=Load()), attr='get_model', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Name(id='isinst', ctx=Load()), args=[Name(id='models_dict', ctx=Load()), Name(id='d', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='example_t', ctx=Load()), attr='segments', ctx=Load()), body=[Assert(test=Call(func=Name(id='isinst', ctx=Load()), args=[Subscript(value=Name(id='models_dict', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), Name(id='SARIMAXResultsWrapper', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_forecast_prediction_interval_infuture', args=arguments(posonlyargs=[], args=[arg(arg='example_t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mode', ctx=Store())], value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mode', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_t', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Name(id='example_t', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='mode', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future', ctx=Load())], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='forecast', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='segmentw', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Set(elts=[Constant(value='target_0.025'), Constant(value='target_0.975'), Constant(value='target')]), attr='issubset', ctx=Load()), args=[Attribute(value=Name(id='segmentw', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=BinOp(left=Subscript(value=Name(id='segmentw', ctx=Load()), slice=Constant(value='target_0.975'), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='segmentw', ctx=Load()), slice=Constant(value='target'), ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=BinOp(left=Subscript(value=Name(id='segmentw', ctx=Load()), slice=Constant(value='target'), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='segmentw', ctx=Load()), slice=Constant(value='target_0.025'), ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=BinOp(left=Subscript(value=Name(id='segmentw', ctx=Load()), slice=Constant(value='target_0.975'), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='segmentw', ctx=Load()), slice=Constant(value='target_0.025'), ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)]), attr='all', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_prediction_raise_error_if_not_fitted', args=arguments(posonlyargs=[], args=[arg(arg='example_t'), arg(arg='method_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mode', ctx=Store())], value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='model is not fitted!'))]))], body=[Assign(targets=[Name(id='method', ctx=Store())], value=Call(func=Name(id='get', ctx=Load()), args=[Name(id='mode', ctx=Load()), Name(id='method_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Name(id='method', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_t', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='method_name'), List(elts=[Constant(value='forecast'), Constant(value='predict')], ctx=Load())], keywords=[])]), FunctionDef(name='test_prediction_with_r', args=arguments(posonlyargs=[], args=[arg(arg='example_reg_tsdsAXh')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_check_forecastGmA', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='example_reg_tsdsAXh', ctx=Load())], keywords=[])), keyword(arg='model', value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[keyword(arg='order', value=Tuple(elts=[Constant(value=3), Constant(value=1), Constant(value=0)], ctx=Load()))])), keyword(arg='horizon', value=Constant(value=7))])), Expr(value=Call(func=Name(id='_check_pre', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='example_reg_tsdsAXh', ctx=Load())], keywords=[])), keyword(arg='model', value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[keyword(arg='order', value=Tuple(elts=[Constant(value=3), Constant(value=1), Constant(value=0)], ctx=Load()))]))]))], decorator_list=[]), FunctionDef(name='test_save_regressors_on_fit', args=arguments(posonlyargs=[], args=[arg(arg='example_reg_tsdsAXh')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mode', ctx=Store())], value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mode', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_reg_tsdsAXh', ctx=Load()))])), For(target=Name(id='segment_', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='mode', ctx=Load()), attr='_models', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='segment_', ctx=Load()), attr='regressor_columns', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='example_reg_tsdsAXh', ctx=Load()), attr='regressors', ctx=Load())]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_forecast_1_point', args=arguments(posonlyargs=[], args=[arg(arg='example_t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='̪ƆǤCʟhëͮm̭ȖƯeckʏ that ƭʙJSARɛÄIpàɓMAX Ėwork6ɨ ˿witƽẖͫ̅ 1ɼ¤Ƈ ÙpýoiƣȆntϐ foreϘʡcC̯asɐtȂ.\x94')), Assign(targets=[Name(id='horizon', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='mode', ctx=Store())], value=Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mode', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_t', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future_tsM', ctx=Store())], value=Call(func=Attribute(value=Name(id='example_t', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Name(id='horizon', ctx=Load()))])), Assign(targets=[Name(id='pre', ctx=Store())], value=Call(func=Attribute(value=Name(id='mode', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future_tsM', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='pre', ctx=Load()), attr='df', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='horizon', ctx=Load())])), Assign(targets=[Name(id='pred_quantilesBhF', ctx=Store())], value=Call(func=Attribute(value=Name(id='mode', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future_tsM', ctx=Load())], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Constant(value=0.025), Constant(value=0.8)], ctx=Load()))])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='pred_quantilesBhF', ctx=Load()), attr='df', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='horizon', ctx=Load())]))], decorator_list=[])], type_ignores=[])