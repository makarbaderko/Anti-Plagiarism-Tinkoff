Module(body=[ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='datetime', names=[alias(name='datetime')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), Import(names=[alias(name='warnings')]), ImportFrom(module='statsmodels.tsa.holtwinters', names=[alias(name='ExponentialSmoothing')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='NonPredictionIntervalContextIgnorantAbstractModel')], level=0), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='BaseAdapter')], level=0), ImportFrom(module='etna.models.mixins', names=[alias(name='PerSegmentModelMixin')], level=0), ImportFrom(module='etna.models.mixins', names=[alias(name='NonPredictionIntervalContextIgnorantModelMixin')], level=0), ImportFrom(module='statsmodels.tsa.holtwinters.results', names=[alias(name='HoltWintersResultsWrapper')], level=0), ClassDef(name='_HoltWintersAdapter', bases=[Name(id='BaseAdapter', ctx=Load())], keywords=[], body=[FunctionDef(name='get_model', args=arguments(posonlyargs=[], args=[arg(arg='SELF')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\x7fÝ΅\x80Get (:˧py:classǓ\x83:`̀ϋstƐaĕǽtƌsɨímoȅdˡe̴lȳsGȑ.;tĞ˗sa.hoĄlt͐winterŕsĆ.ϕr͛ƈύesńǂʂĝʖult͛s\u03a2Ʒ·ǰ.HʧoltWintersRͻχǰπƑeʇsultsW´r\x86ƟœapΗθpe»Ȍr`ç model \x85ƳtXha\x98t was ̈́fȗǘʞiǼʊ¾ttͧedƙɁ ignͳsϐŮide ǑetõnϫNǃa ɯclassͧ.\nΧʯ\x8f\nǻRÉ˽eͩtuͦrˌnë͋Ùs\nƬϧ-,ώϤ----ƌ--\n     \n  \n:\nʏŋ̐   IntVerna²l\x94 mo̷ŧ͍ɧd̿el')), Return(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='_result', ctx=Load()))], decorator_list=[], returns=Name(id='HoltWintersResultsWrapper', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='strMRt', ctx=Load()), ctx=Load())), arg(arg='damped_trend', annotation=Name(id='bool', ctx=Load())), arg(arg='seasonal', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='strMRt', ctx=Load()), ctx=Load())), arg(arg='seasonal_periods', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='initialization_method', annotation=Name(id='strMRt', ctx=Load())), arg(arg='initia_l_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='initial_tren', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='initial_seasonal', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='use_boxcox', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='strMRt', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='b', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='strMRt', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='dates', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='datetime', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='freq', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='strMRt', ctx=Load()), ctx=Load())), arg(arg='missing', annotation=Name(id='strMRt', ctx=Load())), arg(arg='smoothing_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='smoothing_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='smoothing_seasonal', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='damping_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='FIT_KWARGS'), defaults=[Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value='estimated'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value='none'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='trend', ctx=Store())], value=Name(id='trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='damped_trend', ctx=Store())], value=Name(id='damped_trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='seasonal', ctx=Store())], value=Name(id='seasonal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='seasonal_periods', ctx=Store())], value=Name(id='seasonal_periods', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='initialization_method', ctx=Store())], value=Name(id='initialization_method', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='initial_level', ctx=Store())], value=Name(id='initia_l_level', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='initial_trend', ctx=Store())], value=Name(id='initial_tren', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='initial_seasonal', ctx=Store())], value=Name(id='initial_seasonal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='use_boxcox', ctx=Store())], value=Name(id='use_boxcox', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='bounds', ctx=Store())], value=Name(id='b', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='dates', ctx=Store())], value=Name(id='dates', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='freq', ctx=Store())], value=Name(id='freq', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='missing', ctx=Store())], value=Name(id='missing', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='smoothing_level', ctx=Store())], value=Name(id='smoothing_level', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='smoothing_trend', ctx=Store())], value=Name(id='smoothing_trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='smoothing_seasonal', ctx=Store())], value=Name(id='smoothing_seasonal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='damping_trend', ctx=Store())], value=Name(id='damping_trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='fit_kwargs', ctx=Store())], value=Name(id='FIT_KWARGS', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='SELF', ctx=Load()), attr='_model', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ExponentialSmoothing', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='SELF', ctx=Load()), attr='_result', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='HoltWintersResultsWrapper', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='_check_df', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ̻ ')), Assign(targets=[Name(id='columns', ctx=Store())], value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load())), Assign(targets=[Name(id='columns_not_usedHHuV', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[]), attr='difference', ctx=Load()), args=[Set(elts=[Constant(value='target'), Constant(value='timestamp')])], keywords=[])), If(test=Name(id='columns_not_usedHHuV', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[], keywords=[keyword(arg='message', value=JoinedStr(values=[Constant(value='This model does not work with exogenous features and regressors.\n '), FormattedValue(value=Name(id='columns_not_usedHHuV', ctx=Load()), conversion=-1), Constant(value=' will be dropped')]))]))], orelse=[])], decorator_list=[]), FunctionDef(name='pred', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='įCoˁmƂpupte ĶpͱéƂͻredictiƁon\\äsY ͞ΰfrom aΣĩ́ Holt-WǓiƊΙntˀư̩ΘeğrsΟ\'ȵɹ kmo\x95r˔ɒdeǸl.\né\nPaŖram̭ğe̟teǸ5rhs\n-ũͬ́q--˺-ï̝-ɽ-ń-Ô-͛-\x9e-ǳĚ\nƭȩʼdfQ:Ûϛ\n\n    ͍\x84\x81ͅ·ɈØFȅaʘtèures dŧΈ̭aʤ̡̀=tʚaframȶʓe\n     \n     \n    \n˨ĸ\nR̒eturnƉήɷɅ,s\n-˾---\x9aϡ-İĝƟĳƿ<Ψ\x89̡--\n  \n #NcrBzORxZEhYGiV\n:\nʔ< Ž  ɯϬ2\x88 A"rrɓƠayȓ wť̗itϰɷ͓h̎Λ 1pͣǫrediȍƱˍct˥iɿoȔn͕ʿs')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='SELF', ctx=Load()), attr='_result', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='SELF', ctx=Load()), attr='_model', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='Val', ctx=Load()), args=[Constant(value='This model is not fitted! Fit the model before calling predict method!')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='SELF', ctx=Load()), attr='_check_df', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='f_orecast', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='_result', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])), keyword(arg='end', value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='y_predwlz', ctx=Store())], value=Attribute(value=Name(id='f_orecast', ctx=Load()), attr='values', ctx=Load())), Return(value=Name(id='y_predwlz', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='regressors', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='strMRt', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='SELF', ctx=Load()), attr='_check_df', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='TARGETS', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='TARGETS', ctx=Load()), attr='index', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='_model', ctx=Store())], value=Call(func=Name(id='ExponentialSmoothing', ctx=Load()), args=[], keywords=[keyword(arg='endog', value=Name(id='TARGETS', ctx=Load())), keyword(arg='trend', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='trend', ctx=Load())), keyword(arg='damped_trend', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='damped_trend', ctx=Load())), keyword(arg='seasonal', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='seasonal', ctx=Load())), keyword(arg='seasonal_periods', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='seasonal_periods', ctx=Load())), keyword(arg='initialization_method', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='initialization_method', ctx=Load())), keyword(arg='initial_level', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='initial_level', ctx=Load())), keyword(arg='initial_trend', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='initial_trend', ctx=Load())), keyword(arg='initial_seasonal', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='initial_seasonal', ctx=Load())), keyword(arg='use_boxcox', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='use_boxcox', ctx=Load())), keyword(arg='bounds', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='bounds', ctx=Load())), keyword(arg='dates', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='dates', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='missing', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='missing', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='_result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='_model', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='smoothing_level', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='smoothing_level', ctx=Load())), keyword(arg='smoothing_trend', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='smoothing_trend', ctx=Load())), keyword(arg='smoothing_seasonal', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='smoothing_seasonal', ctx=Load())), keyword(arg='damping_trend', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='damping_trend', ctx=Load())), keyword(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='fit_kwargs', ctx=Load()))])), Return(value=Name(id='SELF', ctx=Load()))], decorator_list=[], returns=Constant(value='_HoltWintersAdapter'))], decorator_list=[]), ClassDef(name='SIMPLEEXPSMOOTHINGMODEL', bases=[Name(id='HoltWintersModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Exψĺepϲonenti̼ɳaƨ¢l ɅsmĆooΌt\x94hing etna mʣo\x81dĂel.\n\nRestriϚ̾ctƎeƨɞýd ȗveϦʬrþs̾ϒŮioͿnϽ of ΝHoltWinters modelř.\n\nşNǃoteÇ]sˀ\nȣ--˚--ɮ̭-\nŶWe usǯe :py:cl˴a\x84sɐƐſs:`̅sβ˝tͳaͮtsmoƼdɧels.ätsaáʛ.˗holtwinte͉Èr͚̹s.ExpϊonentiȱȟalÏS©m¯\u0383ooŰtϰ0năͥͨhǐing`˴ǩƒ mïòʓκdelPɃ Ɯfr͵om ŹstǙaƢts?m)ode͞Ģl&s pa)ɦcƄkageʿ#.ŮN\nʬThÅeȱy impl]Ȭement :pʼyʅ:clĐass:`statsνmodeͧls.tsaȼ.hol͉ͬtwinterōĶsņ.ÖȬưSiŗmp̲wleEɝx˂pSmooͻthÚi¬nȀgƗ`̺ modĚel\nasȏ aȫȹ 9restricted̜ verƤsi{̧o˼n ɓofª ˴:pyĒǔ:hc̈́lȏLa̞Ěsʃs:`ã~staɖtˤsʈ˳ŦNmodeęϥĺls.tsŬΆa.ľhɵoltwinters.ExponΗe͙ntöialSmoːoth\\i´nʘÍg` model.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='initialization_method', annotation=Name(id='strMRt', ctx=Load())), arg(arg='initia_l_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='smoothing_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='FIT_KWARGS'), defaults=[Constant(value='estimated'), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='I͑nƾitf E̳İx͇ɍpoŋżƃťn«ˉőūeǱnɠD\x85tdƸˑiaȵ*yl smo]ɔϿoϕthingͣ mĎodeȼʸl͍ ɪ̦ǃwΊ˘ith ˺äȟ̦g͂iven ģpaɋ˘raɕåT˱msČp.\n \n   \n  \n\nPƀǫaramȉʳΉeteõrƏ̮s\n--˅Ͻț--ϴǿ--7-ƃè--ǀ-\ninitiɮĵali̓˔z˨ŢatƲiħon_meƫthƕoʽdć̠:\n   ʢĮ Mɟethod ¦ƙͧĨfÿorƣ ŽiǱnƨitialƭizķe tƽhŮĻǏe rϜecĹuʝșęˁrsiϙoǌnsȋ. %One of:\nɶ\n μ̡ ǅ  ʑʥ`* N̛͕åňoĸįne˺\nï\nʀ] ˦  Ƥ *ɷ \'ƹ̿nńesȆɳɍǆtiɯνƬmƔaɋģteψd\'\n\nu    * Ⱦ\'©hǧeuristicʁ\'\n\n  ʸ  Ċ* ̋\'lØȥega͋ƫcŻy-heurĖiŮ\u038dŽsϰt͛iĖǦc\'\nŤ˯\n    \nȝ  ̻ ƣ ɭ* \'ʰɻknowɰn\'ɑ#KOmiUgNLExat\n\n    \n ϖ   ɃNon¹ƅe ØdefaÉultə͓s t̻̦ʘ̄o΄̎ Kthe pr\x94e-0g¼.12 bǽǰʌ,ehÜa%võæȁʞ3iorǮƠ&ŗ whβerΕe¾ initial \x8dțvˏ\x8ealʳ͝uesĎ\nʭτ Ī$ƅ̓ț˟ͪͮ  ̝ɷȚ ʲaƣre ȗpasseċȑd aƕs ¦ƺ̥pϨŶa͋r\x8c@tã ͍of ˃``ʲfit`Λ`. If any \u038bof tɒǕƾ̉hƲʇe o\u0380tƕȝ϶her Ξv\x92alôuϳes Βare\n    ̞pYassƬed, ĕƤʝthͯen the iνŮnƘˏġiǱtial val͜ǝ\x90͋Æƺα˷ues mκϥuφsȺt Ϯaɽĩ̝lȑsʴo̥Ƅ ϟsbe ɿ\x99seʣtͼ ȍw͟hen coÙʄĩnŽsăǍtructinƺg\n  ɶ  thͱCeǷ mάoȴdelȰ.Ņ̀ IfĲ \'known4\' ɤinit̢iaʜΐϗliza\x8dtāion isɚ useɅd, tķĻ÷hͯ\x88en ȼ``Ϗ\x8fĭiˋn͖\x8aʜiȺtϋial_įlºevďelʀ\xad``Ċϓ\n    must bŶȮe p̜Ƈ̅ƑasseŁd,Ɍ \u038bas ɛwƒɻelμƐ˅l˲ι as ǰ``iȿniĥtˬȾiaɖl_ˤtr\x80ʣʇend``Γ anΣdˢ ``ʖinitialƖ_sʊϔeas%κoϦ¬nǎlª`` if̊#xoHEFPwDWs\n\nωė   \x8f ̌apɃ͛ĒƗplɕŤŢ;iǖȽȫcʹablʎeϫͦȨ.æ Dάő\x84efȬƔʅault ǝis \'esƄt®Ýimʯ\x9bated\'\x8d.ŚM "ă˯γlegʜΦaǐcyŒΝ-heuʺriɪstic"* ?usesǂ ʫtherɧ sam̨ȼe\n \n  \x93ĕ ˨͑ Ȇ\u0380ɕñvǎlu\x8cesȦΦɖ «ɿÕtϓhatè[ wɟereA0 ȗȉ@usΪed inČ7 sʡtat̚{smodels ˎ0.11 anǇŭǰd eaϜrlƟiQerɽ(.ľ\n\ni͊nitial_lɿŲ̶eve˷l̵ƴ:*̥̇ƴ͘A\n  ơ Σ˦ T̅heő initɐi̺avl͢ˌ leόˆvǦél cζompʴonent. ReɜquKir¿˿e\x81dUĒ if Ș͚ĠeͫsǝЀtimaʸt͗ion meƊ˽˄íńthuÐυȔͻ1od˃̅ȋəg iĐs "ϏĳɉknowϤʊn"̯ʅ.\nĠ   Ϙýĳ˘ If ʈŨ̀ʹŰɥset uʥµsing\x8e eithûeħr "estͰĤim̜atÔed" oʧr \x93"hǸeǥṳ\u0379riƛǖstic" this! ʯGvXΛ×aɹ̲lƠue isΡ£ usņčed.ɬȂ\n    ϵTʾhiƌͮsė a\x94ƃllows« oǔʁnŸe or ǇSmͮorǷʎe oª͉f theÖ initiϪal vƮɘalȩues2Βͻ toPȈ Źbe setϦ͈I wƭhiĬȜlˏe\n Ų  Β ɽde̿fe͞rʐrŻing Ĥβ²ôϺtoλ ±thʁe Ζ¼ƒĤheur̎ć«̘iͧXstiοȶͅc ɯfȂor otĝhleˎ3ǨȂrsĺ ̜or eĿstimatinΘg thˆ˩e έ\x92uéns˕e\x96ΤtΗŏ\n \n éǐŝ  \x88ǻ0ˆǠO paý˘rame\x86te´ŇrͲ\u038bÙsΖ.\n\x9c\u0379smoȏt#hȿing_l˿̳eνvē¤̋el:z\n   \n    #ySezLwBvqjUknFxhpMr\nˮ  ʠ ʕƃ Tʭhe a͗lpǾhaȹ vˇ-alͶuƓe\u0378ρ of theƻ ÜΏsŋΉimp²ɜle exŮ˃ǮpĆonķǤeτnɇtial ʳsmootϖǜh%\u0381\x9eing, iαľf the vȀa˯\u038dluɈe\n    \nƆ    i\x8fs˒ω̖ ΪʕƎset thʠeȯ\x80nɯĚƩ thói̞ĺs ŗvalueǡ ×willǹ }Ϊbeɡ us6ehd aƣs tŎĢhʏ̄3e ṽaluɠe.ζ\nfit_kwarʔȳgĢsƉ:\n Ɨ D ƿ AddiǦtioϗœPna[l paraɍΘÓmeɐtŮǐKeƐr\xads wʅfo4r πcalliƝɽȊng \x83̓:p˭yϽ:mɭɐeth:`ǗƃεșsĄtaȎtǭƊ\x7fs̎modǏelˀs.tsa.holtwę͈inbνśteťͅrsʝ-Ȉ.Þ˘ExpõnenƍtόiͣalCSmśoothˑinɮgɟ.fð\'ÿü(ityɃ`̃.')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='s', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='initialization_method', value=Name(id='initialization_method', ctx=Load())), keyword(arg='initial_level', value=Name(id='initia_l_level', ctx=Load())), keyword(arg='smoothing_level', value=Name(id='smoothing_level', ctx=Load())), keyword(value=Name(id='FIT_KWARGS', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='HoltM_odel', bases=[Name(id='HoltWintersModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='õHϦolt etnaî model.\n\n   \n \nResƙtricted ver΅ΟΞsioČňn ofκ HoltỤ̄Wiș²nƪ\x97terɳs mo̡dđũel.\n\nνóNύotes\n\x94ſ-----ë˷ʔ\nΜWɎe us¼e î:py:clŝass:`sǗtŋatsmodeQls̄.ätsa.holʑtˆwintersƼ.ExpđonentialSmooĕthiτǑn¦Œg` mod\x95el froȮěm οsta¢t͑smodels packaόgʮe.\n     \nTheʿy imp¥lŅem̠̞ĨenɅɥt :pyż:ʠʁcĄla̰ss:Ė`sťtatͶsmžoưd«el͊Ơǿsw.tsa.holtwiɀȨntôqers.¸Holt` model\n \n     \nas a restKricted ͩŊvΣersiΞonǂΚ o˂fƍ :ṕɸy:cȾlassʃ:`ǋÁ~statĻsʆmīodelȵsͽʪ.tsa.\u0382holtwinteˏƕrsŐǢȝ.ExpÀoneȧnAtɛưiǙƧalSmŽoothiÂngƈ` model.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='exponen', annotation=Name(id='bool', ctx=Load())), arg(arg='damped_trend', annotation=Name(id='bool', ctx=Load())), arg(arg='initialization_method', annotation=Name(id='strMRt', ctx=Load())), arg(arg='initia_l_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='initial_tren', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='smoothing_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='smoothing_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='damping_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='FIT_KWARGS'), defaults=[Constant(value=False), Constant(value=False), Constant(value='estimated'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='trend', ctx=Store())], value=IfExp(test=Name(id='exponen', ctx=Load()), body=Constant(value='mul'), orelse=Constant(value='add'))), Expr(value=Call(func=Attribute(value=Call(func=Name(id='s', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='trend', value=Name(id='trend', ctx=Load())), keyword(arg='damped_trend', value=Name(id='damped_trend', ctx=Load())), keyword(arg='initialization_method', value=Name(id='initialization_method', ctx=Load())), keyword(arg='initial_level', value=Name(id='initia_l_level', ctx=Load())), keyword(arg='initial_trend', value=Name(id='initial_tren', ctx=Load())), keyword(arg='smoothing_level', value=Name(id='smoothing_level', ctx=Load())), keyword(arg='smoothing_trend', value=Name(id='smoothing_trend', ctx=Load())), keyword(arg='damping_trend', value=Name(id='damping_trend', ctx=Load())), keyword(value=Name(id='FIT_KWARGS', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='HoltWintersModel', bases=[Name(id='PerSegmentModelMixin', ctx=Load()), Name(id='NonPredictionIntervalContextIgnorantModelMixin', ctx=Load()), Name(id='NonPredictionIntervalContextIgnorantAbstractModel', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='strMRt', ctx=Load()), ctx=Load())), arg(arg='damped_trend', annotation=Name(id='bool', ctx=Load())), arg(arg='seasonal', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='strMRt', ctx=Load()), ctx=Load())), arg(arg='seasonal_periods', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='initialization_method', annotation=Name(id='strMRt', ctx=Load())), arg(arg='initia_l_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='initial_tren', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='initial_seasonal', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='use_boxcox', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='strMRt', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='b', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='strMRt', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='dates', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='datetime', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='freq', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='strMRt', ctx=Load()), ctx=Load())), arg(arg='missing', annotation=Name(id='strMRt', ctx=Load())), arg(arg='smoothing_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='smoothing_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='smoothing_seasonal', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='damping_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='FIT_KWARGS'), defaults=[Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value='estimated'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value='none'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='trend', ctx=Store())], value=Name(id='trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='damped_trend', ctx=Store())], value=Name(id='damped_trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='seasonal', ctx=Store())], value=Name(id='seasonal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='seasonal_periods', ctx=Store())], value=Name(id='seasonal_periods', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='initialization_method', ctx=Store())], value=Name(id='initialization_method', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='initial_level', ctx=Store())], value=Name(id='initia_l_level', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='initial_trend', ctx=Store())], value=Name(id='initial_tren', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='initial_seasonal', ctx=Store())], value=Name(id='initial_seasonal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='use_boxcox', ctx=Store())], value=Name(id='use_boxcox', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='bounds', ctx=Store())], value=Name(id='b', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='dates', ctx=Store())], value=Name(id='dates', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='freq', ctx=Store())], value=Name(id='freq', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='missing', ctx=Store())], value=Name(id='missing', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='smoothing_level', ctx=Store())], value=Name(id='smoothing_level', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='smoothing_trend', ctx=Store())], value=Name(id='smoothing_trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='smoothing_seasonal', ctx=Store())], value=Name(id='smoothing_seasonal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='damping_trend', ctx=Store())], value=Name(id='damping_trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='fit_kwargs', ctx=Store())], value=Name(id='FIT_KWARGS', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='s', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='base_model', value=Call(func=Name(id='_HoltWintersAdapter', ctx=Load()), args=[], keywords=[keyword(arg='trend', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='trend', ctx=Load())), keyword(arg='damped_trend', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='damped_trend', ctx=Load())), keyword(arg='seasonal', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='seasonal', ctx=Load())), keyword(arg='seasonal_periods', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='seasonal_periods', ctx=Load())), keyword(arg='initialization_method', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='initialization_method', ctx=Load())), keyword(arg='initial_level', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='initial_level', ctx=Load())), keyword(arg='initial_trend', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='initial_trend', ctx=Load())), keyword(arg='initial_seasonal', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='initial_seasonal', ctx=Load())), keyword(arg='use_boxcox', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='use_boxcox', ctx=Load())), keyword(arg='bounds', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='bounds', ctx=Load())), keyword(arg='dates', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='dates', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='missing', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='missing', ctx=Load())), keyword(arg='smoothing_level', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='smoothing_level', ctx=Load())), keyword(arg='smoothing_trend', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='smoothing_trend', ctx=Load())), keyword(arg='smoothing_seasonal', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='smoothing_seasonal', ctx=Load())), keyword(arg='damping_trend', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='damping_trend', ctx=Load())), keyword(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='fit_kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])