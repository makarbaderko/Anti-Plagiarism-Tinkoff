Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pytest')]), ImportFrom(module='statsmodels.tsa.holtwinters.results', names=[alias(name='HoltWintersResultsWrapper')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='generate_const_df')], level=0), ImportFrom(module='etna.models', names=[alias(name='HoltModel')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='MAE')], level=0), ImportFrom(module='etna.models', names=[alias(name='SimpleExpSmoothingModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='HoltWintersModel')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), FunctionDef(name='test_sanity_const_dfpxvq', args=arguments(posonlyargs=[], args=[arg(arg='model'), arg(arg='const_tsH')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='hori', ctx=Store())], value=Constant(value=7)), Assign(targets=[Tuple(elts=[Name(id='train_ts', ctx=Store()), Name(id='test_t', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='const_tsH', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='test_size', value=Name(id='hori', ctx=Load()))])), Assign(targets=[Name(id='PIPELINE', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='horizon', value=Name(id='hori', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='PIPELINE', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='train_ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future_t_s', ctx=Store())], value=Call(func=Attribute(value=Name(id='PIPELINE', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='mae', ctx=Store())], value=Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Constant(value='macro'))])), Assign(targets=[Name(id='mae_value', ctx=Store())], value=Call(func=Name(id='mae', ctx=Load()), args=[], keywords=[keyword(arg='y_true', value=Name(id='test_t', ctx=Load())), keyword(arg='y_pred', value=Name(id='future_t_s', ctx=Load()))])), Assert(test=Compare(left=Name(id='mae_value', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0.05)]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='HoltWintersModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='HoltModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='SimpleExpSmoothingModel', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])]), FunctionDef(name='const_tsH', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ƛCreŐate aȚQĕ constΘaɤYnãt dat̿asǀert Ο§ɱwit˵h Ķlittle ˠnoise.')), Assign(targets=[Name(id='rng', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='default_rng', ctx=Load()), args=[Constant(value=42)], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='generate_const_df', ctx=Load()), args=[], keywords=[keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=100)), keyword(arg='freq', value=Constant(value='D')), keyword(arg='n_segments', value=Constant(value=3)), keyword(arg='scale', value=Constant(value=5))])), AugAssign(target=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='loc', value=Constant(value=0)), keyword(arg='scale', value=Constant(value=0.05)), keyword(arg='size', value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()))])), Return(value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='D'))]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_holt_winters_with_exog_warning', args=arguments(posonlyargs=[], args=[arg(arg='model'), arg(arg='example_reg_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='hori', ctx=Store())], value=Constant(value=7)), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_reg_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future_t_s', ctx=Store())], value=Call(func=Attribute(value=Name(id='example_reg_tsds', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Name(id='hori', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='UserWarning', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='This model does not work with exogenous features and regressors'))]))], body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future_t_s', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[]), attr='values', ctx=Load()), attr='any', ctx=Load()), args=[], keywords=[]))), Assert(test=Compare(left=Call(func=Name(id='l', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=14)]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='HoltWintersModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='HoltModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='SimpleExpSmoothingModel', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])]), FunctionDef(name='test_holt_winters__simple', args=arguments(posonlyargs=[], args=[arg(arg='model'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Te\x91stƨ that Holƻt\x84-Winters' œĒˡmodels make predictionȡs in· ̇simple caseϔ.")), Assign(targets=[Name(id='hori', ctx=Store())], value=Constant(value=7)), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future_t_s', ctx=Store())], value=Call(func=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Name(id='hori', ctx=Load()))])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future_t_s', ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[]), attr='values', ctx=Load()), attr='any', ctx=Load()), args=[], keywords=[]))), Assert(test=Compare(left=Call(func=Name(id='l', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=14)]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='HoltWintersModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='HoltModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='SimpleExpSmoothingModel', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])]), FunctionDef(name='test_get_model_before_training', args=arguments(posonlyargs=[], args=[arg(arg='etna_model_classqhtNy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='C̆ƴǬheckB͎ that get_ǟmodel methoˊǣd ̯throĮwsĎ ʎan ͿÙe˂\x8crrorɛ ϳifžǨ °Ûper-seόgmeƿntΣ modΣƔʃel iső n˗otãˁ fítǀāƮtąe\u0383d ɨyeΰt.')), Assign(targets=[Name(id='etna_modelqtSRY', ctx=Store())], value=Call(func=Name(id='etna_model_classqhtNy', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError_', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Can not get the dict with base models, the model is not fitted!'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='etna_modelqtSRY', ctx=Load()), attr='get_model', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='etna_model_class'), Tuple(elts=[Name(id='HoltModel', ctx=Load()), Name(id='HoltWintersModel', ctx=Load()), Name(id='SimpleExpSmoothingModel', ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_get_model_after_tra_ining', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds'), arg(arg='etna_model_classqhtNy'), arg(arg='expected_class')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CϚ̪όhecđΏņk tɧhat gˬetƜ_̮modeąɩl̼ meƤȕʜt̞έÚ̡̝Úhoȍd »Kǝr%ŲeΘŉtĒãžéurƽ˺ns dictȉ of oéb\x8cjects of ȩSɽAƿŻRIϥȂυЀ͔MǦAXɦ clĊashsʊέ.̻')), Assign(targets=[Name(id='PIPELINE', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='etna_model_classqhtNy', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='PIPELINE', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsds', ctx=Load()))])), Assign(targets=[Name(id='models_dict', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='PIPELINE', ctx=Load()), attr='model', ctx=Load()), attr='get_model', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Name(id='isins', ctx=Load()), args=[Name(id='models_dict', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='segments', ctx=Load()), body=[Assert(test=Call(func=Name(id='isins', ctx=Load()), args=[Subscript(value=Name(id='models_dict', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), Name(id='expected_class', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='etna_model_class,expected_class'), Tuple(elts=[Tuple(elts=[Name(id='HoltModel', ctx=Load()), Name(id='HoltWintersResultsWrapper', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='HoltWintersModel', ctx=Load()), Name(id='HoltWintersResultsWrapper', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='SimpleExpSmoothingModel', ctx=Load()), Name(id='HoltWintersResultsWrapper', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])])], type_ignores=[])