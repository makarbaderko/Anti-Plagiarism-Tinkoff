Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='scipy.sparse', names=[alias(name='hstack')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='numpy.lib.stride_tricks', names=[alias(name='sliding_window_view')], level=0), ImportFrom(module='pyts.approximation', names=[alias(name='SymbolicFourierApproximation')], level=0), ImportFrom(module='pyts.transformation', names=[alias(name='WEASEL')], level=0), ImportFrom(module='scipy.sparse', names=[alias(name='coo_matrix')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='sklearn.feature_extraction.text', names=[alias(name='CountVectorizer')], level=0), ImportFrom(module='etna.experimental.classification.utils', names=[alias(name='padd_single_series')], level=0), ImportFrom(module='scipy.sparse', names=[alias(name='csr_matrix')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='sklearn.feature_selection', names=[alias(name='chi2')], level=0), ImportFrom(module='etna.experimental.classification.feature_extraction.base', names=[alias(name='BaseTimeSeriesFeatureExtractor')], level=0), ClassDef(name='customweasel', bases=[Name(id='WEASEL', ctx=Load())], keywords=[], body=[FunctionDef(name='fit_transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load())), arg(arg='yQVWJp', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Fit ̈́the fάÆeaĄtʞure ʞDeΤȯxt̬ɡracÅëtoˈr Ɖa\x8dnd ex_tractƑȣˬ wea˯selȊ feơatu̕reȪsǫ ʹ\x7fı͏fƭÄromʳ ̐Ƶ˖thɶ̛e ʸÆiͿłůîɗnputɌ ¬daƴta.\n  \n   \n\nPǛar˂ʝϝaƵmeɹtersψŢ\n̑--ÝƁǙ--------\n#wQvqxb\n   \nϮx:Ϧǹ\nȄ Ǌʬ ɸƢ  ìArraŚ\x89y Ɂwitſvh ̈́×\x8ctŐime sˤeriǐes.\n\nRƌetɦˁurnʎs\n  \n   \nͤ--vΰŐ\\Ǡ---ˈ͏--\nŬ\xa0Ʒǹ̓:\n  Ɏ  Tr̅ʇʚaˌ̕Hȳ\x92nͪsforǕƓmed i±npųΣɒut d˩͌η̆JŲaţ̢ƺǁtaɛ.')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='x', ctx=Load())), keyword(arg='y', value=Name(id='yQVWJp', ctx=Load()))]), attr='transform', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='x', ctx=Load()))]))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='PADDING_VALUE', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='back_fill'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='word_size', annotation=Name(id='intcOm', ctx=Load())), arg(arg='ngram_range', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='intcOm', ctx=Load()), Name(id='intcOm', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='n_bins', annotation=Name(id='intcOm', ctx=Load())), arg(arg='window_sizes', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='intcOm', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='window_steps', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='intcOm', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='anova', annotation=Name(id='bool', ctx=Load())), arg(arg='drop_s', annotation=Name(id='bool', ctx=Load())), arg(arg='norm_meanjW', annotation=Name(id='bool', ctx=Load())), arg(arg='norm_s_td', annotation=Name(id='bool', ctx=Load())), arg(arg='strategy', annotation=Name(id='st_r', ctx=Load())), arg(arg='chi2_threshold', annotation=Name(id='float', ctx=Load())), arg(arg='spars_e', annotation=Name(id='bool', ctx=Load())), arg(arg='alphabet', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='st_r', ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='word_size', value=Name(id='word_size', ctx=Load())), keyword(arg='n_bins', value=Name(id='n_bins', ctx=Load())), keyword(arg='window_sizes', value=Name(id='window_sizes', ctx=Load())), keyword(arg='window_steps', value=Name(id='window_steps', ctx=Load())), keyword(arg='anova', value=Name(id='anova', ctx=Load())), keyword(arg='drop_sum', value=Name(id='drop_s', ctx=Load())), keyword(arg='norm_mean', value=Name(id='norm_meanjW', ctx=Load())), keyword(arg='norm_std', value=Name(id='norm_s_td', ctx=Load())), keyword(arg='strategy', value=Name(id='strategy', ctx=Load())), keyword(arg='chi2_threshold', value=Name(id='chi2_threshold', ctx=Load())), keyword(arg='sparse', value=Name(id='spars_e', ctx=Load())), keyword(arg='alphabet', value=Name(id='alphabet', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='padding_value', ctx=Store())], value=Name(id='PADDING_VALUE', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ngram_range', ctx=Store())], value=Name(id='ngram_range', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_min_series_len', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='intcOm', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_sfa_list', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='SymbolicFourierApproximation', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_vectorizer_list', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='CountVectorizer', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_relevant_features_list', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='intcOm', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_vocabulary', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='intcOm', ctx=Load()), Name(id='st_r', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_sfa', ctx=Store())], value=Call(func=Name(id='SymbolicFourierApproximation', ctx=Load()), args=[], keywords=[keyword(arg='n_coefs', value=Attribute(value=Name(id='self', ctx=Load()), attr='word_size', ctx=Load())), keyword(arg='drop_sum', value=Attribute(value=Name(id='self', ctx=Load()), attr='drop_sum', ctx=Load())), keyword(arg='anova', value=Attribute(value=Name(id='self', ctx=Load()), attr='anova', ctx=Load())), keyword(arg='norm_mean', value=Attribute(value=Name(id='self', ctx=Load()), attr='norm_mean', ctx=Load())), keyword(arg='norm_std', value=Attribute(value=Name(id='self', ctx=Load()), attr='norm_std', ctx=Load())), keyword(arg='n_bins', value=Attribute(value=Name(id='self', ctx=Load()), attr='n_bins', ctx=Load())), keyword(arg='strategy', value=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load())), keyword(arg='alphabet', value=Attribute(value=Name(id='self', ctx=Load()), attr='alphabet', ctx=Load()))])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_padding_expected_len', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='intcOm', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load())), arg(arg='yQVWJp', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\u0381Firt tɺʓ=ϋheř feɠaŒture extractor.#Tt\n\nPara̕ǢΟřmetʩɰers\n  \n--ɚ-ˈěο-------\nƴx:\n   \n  ē ¦ Ar̓ray ̟ƩǺ́w˕it¨ǉʕh timΓe ɵseôri\x93es.\ny:\n   \nǱ  ArrŎ\u0383ǻÇa˹ǈȏy τof class la͌bels̉Ϸ.\n\n\u038dRçȼeturns\x92\n-----Ȃȍ--\n:\nœ ϶ɢ  Ł Fittʥed instan¼Ƣcͣeɕ of featǄure extƭƉractoȎr.Ǧ')), Assign(targets=[Tuple(elts=[Name(id='n_samples', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_min_series_len', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='min', ctx=Load()), args=[Call(func=Name(id='l_ist', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='len', ctx=Load()), Name(id='x', ctx=Load())], keywords=[])], keywords=[])], keywords=[])], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='window_sizes', ctx=Store()), Name(id='window_steps', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_params', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_min_series_len', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_padding_expected_len', ctx=Store())], value=Call(func=Name(id='maxM', ctx=Load()), args=[Name(id='window_sizes', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='WINDOW_SIZE', ctx=Store()), Name(id='window__step', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='z', ctx=Load()), args=[Name(id='window_sizes', ctx=Load()), Name(id='window_steps', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_win_dowed', ctx=Store()), Name(id='y_w', ctx=Store()), Name(id='n_windows_per_sample_cum', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_windowed_view', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='x', ctx=Load())), keyword(arg='y', value=Name(id='yQVWJp', ctx=Load())), keyword(arg='window_size', value=Name(id='WINDOW_SIZE', ctx=Load())), keyword(arg='window_step', value=Name(id='window__step', ctx=Load()))])), Assign(targets=[Name(id='sfa', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_sfa', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_sfa', ctx=Store())], value=Call(func=Attribute(value=Name(id='sfa', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='x_win_dowed', ctx=Load()), Name(id='y_w', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_word', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='encoded_subseries', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='encoded_subseries', ctx=Store()), iter=Name(id='x_sfa', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='x_bow', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='x_word', ctx=Load()), slice=Slice(lower=Subscript(value=Name(id='n_windows_per_sample_cum', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), upper=Subscript(value=Name(id='n_windows_per_sample_cum', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='rang', ctx=Load()), args=[Name(id='n_samples', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='vec', ctx=Store())], value=Call(func=Name(id='CountVectorizer', ctx=Load()), args=[], keywords=[keyword(arg='ngram_range', value=Attribute(value=Name(id='self', ctx=Load()), attr='ngram_range', ctx=Load()))])), Assign(targets=[Name(id='x_', ctx=Store())], value=Call(func=Attribute(value=Name(id='vec', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='x_bow', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_chi2_statistics', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='chi2', ctx=Load()), args=[Name(id='x_', ctx=Load()), Name(id='yQVWJp', ctx=Load())], keywords=[])), Assign(targets=[Name(id='relevant_featuresHRA', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='_chi2_statistics', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='chi2_threshold', ctx=Load())])], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='old_length_vocab', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_vocabulary', ctx=Load())], keywords=[])), Assign(targets=[Name(id='VOCABULARY', ctx=Store())], value=DictComp(key=Name(id='value', ctx=Load()), value=Name(id='keypC', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='keypC', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='vec', ctx=Load()), attr='vocabulary_', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='idx', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='relevant_featuresHRA', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_vocabulary', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='old_length_vocab', ctx=Load())), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='st_r', ctx=Load()), args=[Name(id='WINDOW_SIZE', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=' ')), op=Add(), right=Subscript(value=Name(id='VOCABULARY', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load())))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_relevant_features_list', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='relevant_featuresHRA', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_sfa_list', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='sfa', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_vectorizer_list', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='vec', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='CustomWEASEL')), FunctionDef(name='t', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='n_samples', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='window_sizes', ctx=Store()), Name(id='window_steps', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_params', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_min_series_len', ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='rang', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='x', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Call(func=Name(id='maxM', ctx=Load()), args=[Name(id='window_sizes', ctx=Load())], keywords=[])]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), orelse=Call(func=Name(id='padd_single_series', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Subscript(value=Name(id='x', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), keyword(arg='expected_len', value=Attribute(value=Name(id='self', ctx=Load()), attr='_padding_expected_len', ctx=Load())), keyword(arg='padding_value', value=Attribute(value=Name(id='self', ctx=Load()), attr='padding_value', ctx=Load()))])))], orelse=[]), Assign(targets=[Name(id='x_features', ctx=Store())], value=Call(func=Name(id='coo_matrix', ctx=Load()), args=[Tuple(elts=[Name(id='n_samples', ctx=Load()), Constant(value=0)], ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='np', ctx=Load()), attr='int64', ctx=Load()))])), For(target=Tuple(elts=[Name(id='WINDOW_SIZE', ctx=Store()), Name(id='window__step', ctx=Store()), Name(id='sfa', ctx=Store()), Name(id='vec', ctx=Store()), Name(id='relevant_featuresHRA', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='z', ctx=Load()), args=[Name(id='window_sizes', ctx=Load()), Name(id='window_steps', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_sfa_list', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_vectorizer_list', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_relevant_features_list', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_win_dowed', ctx=Store()), Name(id='_', ctx=Store()), Name(id='n_windows_per_sample_cum', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_windowed_view', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='x', ctx=Load())), keyword(arg='y', value=Constant(value=None)), keyword(arg='window_size', value=Name(id='WINDOW_SIZE', ctx=Load())), keyword(arg='window_step', value=Name(id='window__step', ctx=Load()))])), Assign(targets=[Name(id='x_sfa', ctx=Store())], value=Call(func=Attribute(value=Name(id='sfa', ctx=Load()), attr='transform', ctx=Load()), args=[Name(id='x_win_dowed', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_word', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='encoded_subseries', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='encoded_subseries', ctx=Store()), iter=Name(id='x_sfa', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='x_bow', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='x_word', ctx=Load()), slice=Slice(lower=Subscript(value=Name(id='n_windows_per_sample_cum', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), upper=Subscript(value=Name(id='n_windows_per_sample_cum', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='rang', ctx=Load()), args=[Name(id='n_samples', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='x_', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='vec', ctx=Load()), attr='transform', ctx=Load()), args=[Name(id='x_bow', ctx=Load())], keywords=[]), slice=Tuple(elts=[Slice(), Name(id='relevant_featuresHRA', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_features', ctx=Store())], value=Call(func=Name(id='hstack', ctx=Load()), args=[List(elts=[Name(id='x_features', ctx=Load()), Name(id='x_', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='sparse', ctx=Load())), body=[Return(value=Attribute(value=Name(id='x_features', ctx=Load()), attr='A', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='csr_matrix', ctx=Load()), args=[Name(id='x_features', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_wind_owed_view', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load())), arg(arg='yQVWJp', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load())), arg(arg='WINDOW_SIZE', annotation=Name(id='intcOm', ctx=Load())), arg(arg='window__step', annotation=Name(id='intcOm', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='n_samples', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='N_WINDOWS_PER_SAMPLE', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='x', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]), op=Sub(), right=Name(id='WINDOW_SIZE', ctx=Load())), op=Add(), right=Name(id='window__step', ctx=Load())), op=FloorDiv(), right=Name(id='window__step', ctx=Load())), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='rang', ctx=Load()), args=[Name(id='n_samples', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='n_windows_per_sample_cum', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='concatenate', ctx=Load()), args=[Tuple(elts=[List(elts=[Constant(value=0)], ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cumsum', ctx=Load()), args=[Name(id='N_WINDOWS_PER_SAMPLE', ctx=Load())], keywords=[])], ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_win_dowed', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='concatenate', ctx=Load()), args=[ListComp(elt=Subscript(value=Subscript(value=Call(func=Name(id='sliding_window_view', ctx=Load()), args=[Subscript(value=Name(id='series', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[keyword(arg='window_shape', value=Name(id='WINDOW_SIZE', ctx=Load()))]), slice=Slice(step=Name(id='window__step', ctx=Load())), ctx=Load()), slice=Tuple(elts=[Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), Slice(step=UnaryOp(op=USub(), operand=Constant(value=1)))], ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='series', ctx=Store()), iter=Name(id='x', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='y_w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[IfExp(test=Compare(left=Name(id='yQVWJp', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Name(id='yQVWJp', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='concatenate', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='repeat', ctx=Load()), args=[Subscript(value=Name(id='yQVWJp', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Subscript(value=Name(id='N_WINDOWS_PER_SAMPLE', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='rang', ctx=Load()), args=[Name(id='n_samples', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], keywords=[])), Return(value=Tuple(elts=[Name(id='x_win_dowed', ctx=Load()), Name(id='y_w', ctx=Load()), Name(id='n_windows_per_sample_cum', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='WEASELFeatureExtractorAhsx', bases=[Name(id='BaseTimeSeriesFeatureExtractor', ctx=Load())], keywords=[], body=[FunctionDef(name='t', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weasel', ctx=Load()), attr='transform', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='PADDING_VALUE', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='back_fill'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='word_size', annotation=Name(id='intcOm', ctx=Load())), arg(arg='ngram_range', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='intcOm', ctx=Load()), Name(id='intcOm', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='n_bins', annotation=Name(id='intcOm', ctx=Load())), arg(arg='window_sizes', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='intcOm', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='window_steps', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='intcOm', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='anova', annotation=Name(id='bool', ctx=Load())), arg(arg='drop_s', annotation=Name(id='bool', ctx=Load())), arg(arg='norm_meanjW', annotation=Name(id='bool', ctx=Load())), arg(arg='norm_s_td', annotation=Name(id='bool', ctx=Load())), arg(arg='strategy', annotation=Name(id='st_r', ctx=Load())), arg(arg='chi2_threshold', annotation=Name(id='float', ctx=Load())), arg(arg='spars_e', annotation=Name(id='bool', ctx=Load())), arg(arg='alphabet', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='st_r', ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=4), Tuple(elts=[Constant(value=1), Constant(value=2)], ctx=Load()), Constant(value=4), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=True), Constant(value=True), Constant(value=True), Constant(value='entropy'), Constant(value=2), Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weasel', ctx=Store())], value=Call(func=Name(id='customweasel', ctx=Load()), args=[], keywords=[keyword(arg='padding_value', value=Name(id='PADDING_VALUE', ctx=Load())), keyword(arg='word_size', value=Name(id='word_size', ctx=Load())), keyword(arg='ngram_range', value=Name(id='ngram_range', ctx=Load())), keyword(arg='n_bins', value=Name(id='n_bins', ctx=Load())), keyword(arg='window_sizes', value=IfExp(test=Compare(left=Name(id='window_sizes', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='window_sizes', ctx=Load()), orelse=List(elts=[Constant(value=0.1), Constant(value=0.3), Constant(value=0.5), Constant(value=0.7), Constant(value=0.9)], ctx=Load()))), keyword(arg='window_steps', value=Name(id='window_steps', ctx=Load())), keyword(arg='anova', value=Name(id='anova', ctx=Load())), keyword(arg='drop_sum', value=Name(id='drop_s', ctx=Load())), keyword(arg='norm_mean', value=Name(id='norm_meanjW', ctx=Load())), keyword(arg='norm_std', value=Name(id='norm_s_td', ctx=Load())), keyword(arg='strategy', value=Name(id='strategy', ctx=Load())), keyword(arg='chi2_threshold', value=Name(id='chi2_threshold', ctx=Load())), keyword(arg='sparse', value=Name(id='spars_e', ctx=Load())), keyword(arg='alphabet', value=Name(id='alphabet', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load())), arg(arg='yQVWJp', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weasel', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='yQVWJp', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='WEASELFeatureExtractor'))], decorator_list=[])], type_ignores=[])