Module(body=[ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='FutureMixin')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ClassDef(name='TimeFlagsTransform', bases=[Name(id='Transform', ctx=Load()), Name(id='FutureMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='TimzeFέlaϰŵgsTransʊfoϔrʋmȓ i͝s a clƼaɞùss ƞthǂaǹtϞ imple\x98mơ\x84entɒs extracȤtiʨon ƫof teheȊ mϩain tiŨme-based ſͯfea̖turɸesȦ fr͎om datetime co̜lu˞ǅƷmɇn.')), FunctionDef(name='fD', args=arguments(posonlyargs=[], args=[arg(arg='se_lf')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwa'), defaults=[]), body=[Expr(value=Constant(value='Fitİ daǅtetime model.')), Return(value=Name(id='se_lf', ctx=Load()))], decorator_list=[], returns=Constant(value='TimeFlagsTransform')), FunctionDef(name='_get_colum_n_name', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='feature_name', annotation=Name(id='STR', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Η  ˝   ̂ˎˍ˸ƻ   \x93̌ŷ ȸϳ')), If(test=Compare(left=Attribute(value=Name(id='se_lf', ctx=Load()), attr='out_column', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='init_parameters', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='_empty_parameters', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='init_parameters', ctx=Load()), slice=Name(id='feature_name', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='__dict__', ctx=Load()), slice=Name(id='feature_name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='temp_transform', ctx=Store())], value=Call(func=Name(id='TimeFlagsTransform', ctx=Load()), args=[], keywords=[keyword(value=Name(id='init_parameters', ctx=Load())), keyword(arg='out_column', value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='out_column', ctx=Load()))])), Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='temp_transform', ctx=Load())], keywords=[]))], orelse=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='out_column', ctx=Load()), conversion=-1), Constant(value='_'), FormattedValue(value=Name(id='feature_name', ctx=Load()), conversion=-1)]))])], decorator_list=[], returns=Name(id='STR', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='minute_in_hour_number', annotation=Name(id='bool', ctx=Load())), arg(arg='fifteen_minutes_in_hour_number', annotation=Name(id='bool', ctx=Load())), arg(arg='HOUR_NUMBER', annotation=Name(id='bool', ctx=Load())), arg(arg='half_hour_numbe', annotation=Name(id='bool', ctx=Load())), arg(arg='half_day_number', annotation=Name(id='bool', ctx=Load())), arg(arg='one_third_day_number', annotation=Name(id='bool', ctx=Load())), arg(arg='out_co_lumn', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value="ŉ\x82In̡itƽǳĉiaxêlǂǳ͂ǟiЀʜse̬ ˘c˒ǩǫĀ¡lΗ˂aǵss ˗atɭtŚrί˭ƲibĀɾutes.\n\nƟ\nP͍aµ\u0379ramɯNetersř»#zr\nʢ-Ȟ--ϛ---ʞ˭ˢ-,--϶ű-\n͝miŒnuŃυtƀe_iûn_hķour_nvum˳ðȂŕberƨ¹:̓\n  \nʰ  if `TŜŖrƕuμe{: șaȡΔdd9 coˠč$lµ̃umn wit\xa0¬ˏȪh minuātʣeϕϽ nuǏmbeÁrΌĴ ćϋtoƑ f͙`ϴeaΜtu\x9ăre ʜda΄taȸfɨÜϵȓraǍ;me Xin tWraʈns)ƃĤfƾorpm\n\nfiɥϻfĩteΌ\x9cŘēeʹ͈n_˷˽miͻnÊú͑͋¤20̸ɵtőǨ˪eLs_in_hoƨurͨɬ_nƽŻňuɕőmber:͋\n   ʃ iōķξΣf Tër\u0383ue:Şφ a̹dȂɠɝƬͻd cΕolȘumn witųh ynEóumϹbȓ̮ͩer æȋofƞ fʇÅift͒Ϝ-eƸɻ?Ȕen-mňΚȖiȆnτutØˬeϡ Ǝ·i̍nǾtervaʻlɢɊ wŭɵitƈh͟inΔ\u0383 h́ʦo\x87̬Ȍυ̫urĎ ɢŝ\x94wiͮth numer͢atioĚ̬ân͙ ̩frɷɃom\x84 %ûȠ0\n  #AFoWnmRYDa\n \n þʴ ̓Ƒ\x89  tŰåo ǭfÊ\x85eatuʴr̉e ͠ˮƤ\x9bdatȵafram\\e iϙǳ̔âϘn ϞZÄ˥}tΉrȏaƹn©sŐ§fłoÖɗrİm\n  \nͯhouϖr_̇ɦȁnČɼumhGberĊ:̗\nˉ   Ğ˘ýƂ if T˷mrΙɊu̳e: ʱȅadd ˆcoluήmn\x86]Ě wŨiƛɰǋt\u0383h˒ πhour numbĖǇer to feaǕtΕ\u0382urȵ˱e ɾdĬΚatȩaǟfraɅm̥Me̓ Ξ͓in ͩωάtΧraɒɹ͋nϭsfϙorm\nĻh\x96Ϛalfτ_Țhouʲ\x81r_nŚum͒˺be\x9br:ȰÑ#TjOhzwxYgtEJnWAB\n \n ˛  ƾ ˎīiɠǚfίǡɄ TrȕuĔɇ͇ðeʟ: Ładd colˈłǖuϹǸmnϕ pwit¯h ɖͳ0 ¡Ɵ·f{͑Ȁoȓƃr t\u0382ɋfh\u0383e firs\u0382t ¿hȌalfϤ̹Y |Ʌģofƃ͞!Ͻ tŸhƳ͙ǻeƜǳ ϽhŘoΊuϳǼΏr ǜİʄε<a˶n͞duʞ ő1 ̟fror Ȼ#ͩtˠƫheͮƻȶ secoÛ²nΗdǄ\n  ȀϨto 7feaϼtuṟŜeǥ̐ d̖aŏtɊͰafΌʀr\x97aʒδǒḿȕƭϽ͒̒Ίe\x8f iɡ̕n t£ṟanƚ\x91sfǔʧorm\nŕ˴half_dŒay_ċkn´̽ȑumʃ̃b̓er:\nY  ͺξ˩  iɐĀfĀϦˡ ˕T̩ruϽeũE:σ aˍ̆dd ƽ¡coąΦͼ ȫŉlumnÝ wiĚ̡t&ƶ˼hϚϡ ŭ0 fͫΐor̢ ˜thγeȿǿ fi\x89ʠr;stƈ̜ halʺűεf ofŖ thÂɫte ʊdƦϴaȨy ʴaͶndƣ\x87 1 ȰƱ̼foîϺηƆrJ ƥɠthe sȃecʽKoωnɡŒǼ͚d\nȼ ÞEȩy   tɌo fƾea£ϡ˸tuĺõrʪe dϫ̨½Ƀ˽͢atafÖĴƄraϘme iɅn ɆφtĪra˗Ȝ+nsf͕̒̂ormƤ̀\x92\noǖȻ¦Ι\x99nÇɸe_ʮthi ͌rdǶ_ιdÈɀãayϵ_nuɤϩmbΌer:·ʍ\nͯ Ȓ  7 if ϓTrʰsue:Ǟ addĳj col?umnΫ\x96 ʜwithw numbǁȄer Ȟͯ/of̾ 8̨-hƭoĈʻur iÆntÄerǈȚvalɱWĮɾÝʎ |w£ɤithinΔ ̃daɷy wiŬth nŴ˝uʒm²e̕kratϱiroˇnɵ Ŭfɞ̘ʣrqom 0\n Æ   toȣǾ țŉɅfeȹaturϛeʬ Ǥdɨataf͍ˋrame iƒʴƸnϣ rtϮͳrȑŬansfoŷrTm\nʓoÂµutʍ_col̲um͔Ăn:\nʜ  ɧ˒  bƩϘasϿe Θ͜fɸȖuĉor ʿthɟύ˼e˄͖ß namϧeĐ˰ʱ ˄oˍı¨f êcreated co\xa0lumnsƃ˻;ʀ\u0378\nƄ\n  * ̍ìķfo ͎˃̎seti0ͷʈ ɽǭtϾ\xadhˏe f͘˺inĎǼal\u0382 Çnamʌe˄lÖ¿ Ȼiξs 'Ϸϥ˭{˱ou̪tȺ_˙cȲ\u0383oƸK˴ǰ͑l\x8b˴umnȡ̗}_;{żȸ͆f̳§eƷ˼|at¤ƨur\x8fe_namÝʔȍ͕e}';ȍƓ#APIGRsbOLpxi\n\n   \n  \n ˶ ȶ ͩΔ * ͞ȕiЀςȫʠf dËŝonÆƽͦ't ëseƓǚtƅ, nύamɶe ͛ɗɀwiͺïɞllĞ b͓ve ``tȼran2sfϥormȫ.ʩˏ__repr_ă_č()̐`\u038d`ρ,f˸\n  \n  ˌĪ Yο   rƎepĘr wiȘţ˔l:ũlțv be madʋũʝe1̣ £BifǄor tɦraɽnsɩforɜmϮ thǮaƉ͈t ςcre͖ateȪʌzs ôɸeÄxacJtɹƬlʿyϜ͂ʵ ΈthisǔΣ͞ ȆǢėÁcƲo\x9clumn\n¼\nRaises̛\n  \n-α-----\n   \n #NjOa\n  \nVaĶlOΜueErĜďˤȒɀror̚ǋ: thƐi˜)ͩf f̪eΩϫǄatuŜːʌ˽ŪöJreʷ haMΗsȓƙ invȋȯňŽalid\x89͢Ʌ iˍΘnǶiti͑aPϙˉ˿l˜ʏ paϕʪŘrMƼȱams·")), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='anyGA', ctx=Load()), args=[List(elts=[Name(id='minute_in_hour_number', ctx=Load()), Name(id='fifteen_minutes_in_hour_number', ctx=Load()), Name(id='HOUR_NUMBER', ctx=Load()), Name(id='half_hour_numbe', ctx=Load()), Name(id='half_day_number', ctx=Load()), Name(id='one_third_day_number', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='se_lf', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' feature does nothing with given init args configuration, at least one of minute_in_hour_number, fifteen_minutes_in_hour_number, hour_number, half_hour_number, half_day_number, one_third_day_number should be True.')])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='date_column_name', ctx=Store())], value=Constant(value=None)), AnnAssign(target=Attribute(value=Name(id='se_lf', ctx=Load()), attr='minute_in_hour_number', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='minute_in_hour_number', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='se_lf', ctx=Load()), attr='fifteen_minutes_in_hour_number', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='fifteen_minutes_in_hour_number', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='se_lf', ctx=Load()), attr='hour_number', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='HOUR_NUMBER', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='se_lf', ctx=Load()), attr='half_hour_number', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='half_hour_numbe', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='se_lf', ctx=Load()), attr='half_day_number', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='half_day_number', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='se_lf', ctx=Load()), attr='one_third_day_number', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='one_third_day_number', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_co_lumn', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='_empty_parameters', ctx=Store())], value=Call(func=Name(id='dictvzDip', ctx=Load()), args=[], keywords=[keyword(arg='minute_in_hour_number', value=Constant(value=False)), keyword(arg='fifteen_minutes_in_hour_number', value=Constant(value=False)), keyword(arg='hour_number', value=Constant(value=False)), keyword(arg='half_hour_number', value=Constant(value=False)), keyword(arg='half_day_number', value=Constant(value=False)), keyword(arg='one_third_day_number', value=Constant(value=False))]))], decorator_list=[]), FunctionDef(name='_get_', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='period_in_minutesEFpZT', annotation=Name(id='_int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=15)]), body=[Expr(value=Constant(value='Gɫenerate aΥnĘ array Ǻwith thŤ)e periδod nuŊmber ɭin the ēhour.ƈ\n   \n  \n#NeoAwLOcWC\nͼAcceptsƎ ʜa̧ć perioŗd͍ lkƢ\x80engtϷh in minuɱ̽ώtǐɑesĀ aˌͿsa iʃnȮˑ˹putç aŲn\x91ńd reĆͧturns Ʋaηrray wh\x9cereƢ̭ timestamps mar;Á\x98ckʞedǆ by peοriǴŗodǅâ ˝ȗn̕ɶǸumber.')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Attribute(value=Name(id='x', ctx=Load()), attr='minute', ctx=Load()), op=FloorDiv(), right=Name(id='period_in_minutesEFpZT', ctx=Load())))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_minute_nu_mber', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='x', ctx=Load()), attr='minute', ctx=Load()))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_period_in_day', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='period_in_hoursjdPJI', annotation=Name(id='_int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=12)]), body=[Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Attribute(value=Name(id='x', ctx=Load()), attr='hour', ctx=Load()), op=FloorDiv(), right=Name(id='period_in_hoursjdPJI', ctx=Load())))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_hour_', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate͝ ͩan arr˯ay ͝wʵȺith the hour num͠ber in thže ǿday.')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='x', ctx=Load()), attr='hour', ctx=Load()))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Tǳrϖazʩn¸sfoprŻΗƈmƆƤ ͎͟ŭme\x9cthod͉ forŮƔĢɌ ˧fdeȁatureėɞȿs ͞bČased onƉǣ time.ˆʤ\n  \n\n \nPú\x9fσåaraʢȷmeĥtʢ̬7űŠυers\n  \n-˪-------ŹBĘ--\ndfˬǠ:ϔϘ\nw ȸ \x93  FGν˳eɦƂ˲;atuńrȢeτƌ͔̈Ȟs\x84 dīaβ\x9ftȞãfrƴamÙeŔ withȠ ɢ|tƊiƐme\n\nRet\u0378urnʪs͢\n\n  \n----Ƀ̨\xad°ùǙ---ȴȬ\n  \nrŊesκulĥṱƼŔ:`ɈŪ pd.DatʎaFȡr!amȈe\n êĄ   Dat_ȃʵfraόmθȢʥe wĀilǍͺʃǻth\u0381ț ex̭Ʀ˼trƷac\x93Ōteḍ ʁΜ¥˺f\x93eˀaȎt\x83uZƻreǦɟsɃ')), Assign(targets=[Name(id='features', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()))])), Assign(targets=[Name(id='timestamp_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='se_lf', ctx=Load()), attr='minute_in_hour_number', ctx=Load()), body=[Assign(targets=[Name(id='minute_in_hour_number', ctx=Store())], value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_get_minute_number', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='minute_in_hour_number')], keywords=[]), ctx=Store())], value=Name(id='minute_in_hour_number', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='se_lf', ctx=Load()), attr='fifteen_minutes_in_hour_number', ctx=Load()), body=[Assign(targets=[Name(id='fifteen_minutes_in_hour_number', ctx=Store())], value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_get_period_in_hour', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load())), keyword(arg='period_in_minutes', value=Constant(value=15))])), Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='fifteen_minutes_in_hour_number')], keywords=[]), ctx=Store())], value=Name(id='fifteen_minutes_in_hour_number', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='se_lf', ctx=Load()), attr='hour_number', ctx=Load()), body=[Assign(targets=[Name(id='HOUR_NUMBER', ctx=Store())], value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_get_hour_number', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='hour_number')], keywords=[]), ctx=Store())], value=Name(id='HOUR_NUMBER', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='se_lf', ctx=Load()), attr='half_hour_number', ctx=Load()), body=[Assign(targets=[Name(id='half_hour_numbe', ctx=Store())], value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_get_period_in_hour', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load())), keyword(arg='period_in_minutes', value=Constant(value=30))])), Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='half_hour_number')], keywords=[]), ctx=Store())], value=Name(id='half_hour_numbe', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='se_lf', ctx=Load()), attr='half_day_number', ctx=Load()), body=[Assign(targets=[Name(id='half_day_number', ctx=Store())], value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_get_period_in_day', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load())), keyword(arg='period_in_hours', value=Constant(value=12))])), Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='half_day_number')], keywords=[]), ctx=Store())], value=Name(id='half_day_number', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='se_lf', ctx=Load()), attr='one_third_day_number', ctx=Load()), body=[Assign(targets=[Name(id='one_third_day_number', ctx=Store())], value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_get_period_in_day', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load())), keyword(arg='period_in_hours', value=Constant(value=8))])), Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='one_third_day_number')], keywords=[]), ctx=Store())], value=Name(id='one_third_day_number', ctx=Load()))], orelse=[]), For(target=Name(id='f', ctx=Store()), iter=Attribute(value=Name(id='features', ctx=Load()), attr='columns', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Name(id='f', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='features', ctx=Load()), slice=Name(id='f', ctx=Load()), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='category')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dataframes', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='se_g', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='tmp', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='se_g', ctx=Load()), ctx=Load()), attr='join', ctx=Load()), args=[Name(id='features', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tmp', ctx=Load()), attr='columns', ctx=Load()), attr='to_frame', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_idx', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Constant(value='segment'), Name(id='se_g', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tmp', ctx=Load()), attr='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='MultiIndex', ctx=Load()), attr='from_frame', ctx=Load()), args=[Name(id='_idx', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='dataframes', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='tmp', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Name(id='dataframes', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))]), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='columns', ctx=Load()), attr='names', ctx=Store())], value=List(elts=[Constant(value='segment'), Constant(value='feature')], ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='TimeFlagsTransform')], ctx=Load()))], type_ignores=[])