Module(body=[ImportFrom(module='typing', names=[alias(name='List')], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='BoxCoxTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='MinMaxScalerTransform')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='generate_const_df')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.transforms', names=[alias(name='MaxAbsScalerTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='YeoJohnsonTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='RobustScalerTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='StandardScalerTransform')], level=0), Import(names=[alias(name='pytest')]), FunctionDef(name='multicolumn_tsqC', args=arguments(posonlyargs=[], args=[arg(arg='random_seed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='generate_const_df', ctx=Load()), args=[], keywords=[keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=20)), keyword(arg='freq', value=Constant(value='D')), keyword(arg='scale', value=Constant(value=1.0)), keyword(arg='n_segments', value=Constant(value=3))])), AugAssign(target=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='uniform', ctx=Load()), args=[Constant(value=0), Constant(value=0.1)], keywords=[keyword(arg='size', value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()))])), Assign(targets=[Name(id='df_exogijZe', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]), attr='rename', ctx=Load()), args=[], keywords=[keyword(arg='columns', value=Dict(keys=[Constant(value='target')], values=[Constant(value='exog_1')]))])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='rangemunA', ctx=Load()), args=[Constant(value=2), Constant(value=6)], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='df_exogijZe', ctx=Load()), slice=JoinedStr(values=[Constant(value='exog_'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1)]), ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='uniform', ctx=Load()), args=[Constant(value=0), Constant(value=0.1)], keywords=[keyword(arg='size', value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()))])))], orelse=[]), Assign(targets=[Name(id='df_formatte_d', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df_exog_formatted', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_exogijZe', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df_formatte_d', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog_formatted', ctx=Load())), keyword(arg='freq', value=Constant(value='D'))]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='EXTRACT_NEW_FEATURES_COLUMNS', args=arguments(posonlyargs=[], args=[arg(arg='transformed_df_', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='INITIAL_DF', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='E͡ȝ̇ÁxʔĵtǙr˅ɕ̷aω\x93ǖɯácĺƞt col*ŝɜV̧\u038dρ\x96uƶɄmϱnʨs fro̬Gͫm feature VϻĿlevelʏ ŗthat ±aˠrèe ǟpreĪ/seʝ<ʀn̖t in οtrȹaėñns̿ɮɡǋfˎƄɱormed_dǈʫƦµf ϑżbĒu˵tƚĺƥ noǎʍt pƐψrϘɏes̆ŽentƵ͖ ʲin \x81iʡbȏnłȡŲ}itʵǍjĊiĶƢalzϰ_dȳf.')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='transformed_df_', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='difference', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='INITIAL_DF', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='test_fail_invalid_mode', args=arguments(posonlyargs=[], args=[arg(arg='transform_constructor')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='VALUEERROR', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='_xW', ctx=Store())], value=Call(func=Name(id='transform_constructor', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Constant(value='non_existent'))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform_constructor'), Tuple(elts=[Name(id='BoxCoxTransform', ctx=Load()), Name(id='YeoJohnsonTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load()), Name(id='MaxAbsScalerTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_warning_no', args=arguments(posonlyargs=[], args=[arg(arg='transform_constructor')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='Us', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Transformation will be applied inplace'))]))], body=[Assign(targets=[Name(id='_xW', ctx=Store())], value=Call(func=Name(id='transform_constructor', ctx=Load()), args=[], keywords=[keyword(arg='inplace', value=Constant(value=True)), keyword(arg='out_column', value=Constant(value='new_exog'))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform_constructor'), Tuple(elts=[Name(id='BoxCoxTransform', ctx=Load()), Name(id='YeoJohnsonTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load()), Name(id='MaxAbsScalerTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_generated_column_names', args=arguments(posonlyargs=[], args=[arg(arg='transform_constructor'), arg(arg='in_column'), arg(arg='multicolumn_tsqC')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='TĎʚeĻgst {ƌƓüĈthÀθϙħa̅ͷt tranǤsform\x99 ̲̓ϷgeŔnerɢ3\x8aateɒǜs ƳnʎƬameƝsƚ f«or ̆ĆοȜɟthĒe ɪΎcolňuǍmŝ½Ȏns̜ cÀoǖķC\x9drrectlͣǯȃyϴʸο̣.')), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='transform_constructor', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load())), keyword(arg='out_column', value=Constant(value=None)), keyword(arg='inplace', value=Constant(value=False))])), Assign(targets=[Name(id='INITIAL_DF', ctx=Store())], value=Call(func=Attribute(value=Name(id='multicolumn_tsqC', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='transformed_df_', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Call(func=Attribute(value=Name(id='multicolumn_tsqC', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='segm', ctx=Store())], value=Call(func=Name(id='s_orted', ctx=Load()), args=[Attribute(value=Name(id='multicolumn_tsqC', ctx=Load()), attr='segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ne', ctx=Store())], value=Call(func=Name(id='EXTRACT_NEW_FEATURES_COLUMNS', ctx=Load()), args=[Name(id='transformed_df_', ctx=Load()), Name(id='INITIAL_DF', ctx=Load())], keywords=[])), For(target=Name(id='columnfhU', ctx=Store()), iter=Name(id='ne', ctx=Load()), body=[Assign(targets=[Name(id='transf', ctx=Store())], value=Call(func=Name(id='eval', ctx=Load()), args=[Name(id='columnfhU', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df__temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='transf', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Call(func=Attribute(value=Name(id='multicolumn_tsqC', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='columns_tempOl', ctx=Store())], value=Call(func=Name(id='EXTRACT_NEW_FEATURES_COLUMNS', ctx=Load()), args=[Name(id='df__temp', ctx=Load()), Name(id='INITIAL_DF', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='columns_tempOl', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])), Assign(targets=[Name(id='column_t', ctx=Store())], value=Subscript(value=Name(id='columns_tempOl', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assert(test=Compare(left=Name(id='column_t', ctx=Load()), ops=[Eq()], comparators=[Name(id='columnfhU', ctx=Load())])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Attribute(value=Name(id='df__temp', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segm', ctx=Load()), Name(id='column_t', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='transformed_df_', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segm', ctx=Load()), Name(id='columnfhU', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())])], keywords=[]))], orelse=[]), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='transform', ctx=Load()), attr='out_columns', ctx=Load())], keywords=[])])), Assert(test=Call(func=Name(id='all', ctx=Load()), args=[ListComp(elt=Compare(left=Name(id='columnfhU', ctx=Load()), ops=[In()], comparators=[Name(id='new_column', ctx=Load())]), generators=[comprehension(target=Tuple(elts=[Name(id='columnfhU', ctx=Store()), Name(id='new_column', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load()), Attribute(value=Name(id='transform', ctx=Load()), attr='out_columns', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform_constructor'), List(elts=[Name(id='BoxCoxTransform', ctx=Load()), Name(id='YeoJohnsonTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load()), Name(id='MaxAbsScalerTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='in_column'), List(elts=[Constant(value='exog_1'), List(elts=[Constant(value='exog_1'), Constant(value='exog_2')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_all_columns', args=arguments(posonlyargs=[], args=[arg(arg='transform_constructor'), arg(arg='multicolumn_tsqC')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ƿȷȕōǼTeȬsOǭtϣ that ̻trßaĻȱnίϘŐsȸfÌŁo̦rm canʡ˅Ɗ ̑pɭǄrΟȪȣoceʬss¸p a̢ʨll coluɬƎŎmnɵ×ȸs όʋusJin§g Noεɸne đīƕƬAˁvțÉalu¡e˭ fňȯŖr Υ½i˦n_colu˙mn.Ə')), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='transform_constructor', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value=None)), keyword(arg='out_column', value=Constant(value=None)), keyword(arg='inplace', value=Constant(value=False))])), Assign(targets=[Name(id='INITIAL_DF', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='multicolumn_tsqC', ctx=Load()), attr='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='transformed_df_', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Attribute(value=Name(id='multicolumn_tsqC', ctx=Load()), attr='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ne', ctx=Store())], value=Call(func=Name(id='EXTRACT_NEW_FEATURES_COLUMNS', ctx=Load()), args=[Name(id='transformed_df_', ctx=Load()), Name(id='INITIAL_DF', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ne', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='INITIAL_DF', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='nunique', ctx=Load()), args=[], keywords=[])]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform_constructor'), List(elts=[Name(id='BoxCoxTransform', ctx=Load()), Name(id='YeoJohnsonTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load()), Name(id='MaxAbsScalerTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_inplace_no_new_columns', args=arguments(posonlyargs=[], args=[arg(arg='transform_constructor'), arg(arg='in_column'), arg(arg='multicolumn_tsqC')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Test that trƄansfo͵rm in inplace mode do¾esnϞ't generatǎe new columns.͞")), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='transform_constructor', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load())), keyword(arg='inplace', value=Constant(value=True))])), Assign(targets=[Name(id='INITIAL_DF', ctx=Store())], value=Call(func=Attribute(value=Name(id='multicolumn_tsqC', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='transformed_df_', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Call(func=Attribute(value=Name(id='multicolumn_tsqC', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='ne', ctx=Store())], value=Call(func=Name(id='EXTRACT_NEW_FEATURES_COLUMNS', ctx=Load()), args=[Name(id='transformed_df_', ctx=Load()), Name(id='INITIAL_DF', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ne', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])), Assert(test=Compare(left=Attribute(value=Name(id='transform', ctx=Load()), attr='out_columns', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform_constructor'), List(elts=[Name(id='BoxCoxTransform', ctx=Load()), Name(id='YeoJohnsonTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load()), Name(id='MaxAbsScalerTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='in_column'), List(elts=[Constant(value='exog_1'), List(elts=[Constant(value='exog_1'), Constant(value='exog_2')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_creating_columns', args=arguments(posonlyargs=[], args=[arg(arg='transform_constructor'), arg(arg='in_column'), arg(arg='multicolumn_tsqC')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='˳Teʃst thaɺĉ)t tr\x89a*\x96ʷnsfo˺ûrǧǖm crϊeates nǭew cĄdėolumnϨɹs acʿcording toǨƮ Ɩout_colguǖǢmn p˚araǲmeteïrƱF\x90.')), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='transform_constructor', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load())), keyword(arg='out_column', value=Constant(value='new_exog')), keyword(arg='inplace', value=Constant(value=False))])), Assign(targets=[Name(id='INITIAL_DF', ctx=Store())], value=Call(func=Attribute(value=Name(id='multicolumn_tsqC', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='transformed_df_', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Call(func=Attribute(value=Name(id='multicolumn_tsqC', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='ne', ctx=Store())], value=Call(func=Name(id='set_', ctx=Load()), args=[Call(func=Name(id='EXTRACT_NEW_FEATURES_COLUMNS', ctx=Load()), args=[Name(id='transformed_df_', ctx=Load()), Name(id='INITIAL_DF', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='in_column', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='in_column', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=List(elts=[Name(id='in_column', ctx=Load())], ctx=Load()), orelse=Name(id='in_column', ctx=Load()))), Assign(targets=[Name(id='expected_columns', ctx=Store())], value=SetComp(elt=JoinedStr(values=[Constant(value='new_exog_'), FormattedValue(value=Name(id='columnfhU', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Name(id='columnfhU', ctx=Store()), iter=Name(id='in_column', ctx=Load()), ifs=[], is_async=0)])), Assert(test=Compare(left=Name(id='ne', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_columns', ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='transform', ctx=Load()), attr='out_columns', ctx=Load())], keywords=[])])), Assert(test=Call(func=Name(id='all', ctx=Load()), args=[ListComp(elt=Compare(left=JoinedStr(values=[Constant(value='new_exog_'), FormattedValue(value=Name(id='columnfhU', ctx=Load()), conversion=-1)]), ops=[Eq()], comparators=[Name(id='new_column', ctx=Load())]), generators=[comprehension(target=Tuple(elts=[Name(id='columnfhU', ctx=Store()), Name(id='new_column', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load()), Attribute(value=Name(id='transform', ctx=Load()), attr='out_columns', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform_constructor'), List(elts=[Name(id='BoxCoxTransform', ctx=Load()), Name(id='YeoJohnsonTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load()), Name(id='MaxAbsScalerTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='in_column'), List(elts=[Constant(value='exog_1'), List(elts=[Constant(value='exog_1'), Constant(value='exog_2')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_ordering', args=arguments(posonlyargs=[], args=[arg(arg='transform_constructor'), arg(arg='in_column'), arg(arg='mode'), arg(arg='multicolumn_tsqC')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='transform_constructor', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load())), keyword(arg='out_column', value=Constant(value=None)), keyword(arg='mode', value=Name(id='mode', ctx=Load())), keyword(arg='inplace', value=Constant(value=False))])), Assign(targets=[Name(id='transforms__one_column', ctx=Store())], value=ListComp(elt=Call(func=Name(id='transform_constructor', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='columnfhU', ctx=Load())), keyword(arg='out_column', value=Constant(value=None)), keyword(arg='mode', value=Name(id='mode', ctx=Load())), keyword(arg='inplace', value=Constant(value=False))]), generators=[comprehension(target=Name(id='columnfhU', ctx=Store()), iter=Name(id='in_column', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='segm', ctx=Store())], value=Call(func=Name(id='s_orted', ctx=Load()), args=[Attribute(value=Name(id='multicolumn_tsqC', ctx=Load()), attr='segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='transformed_df_', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Call(func=Attribute(value=Name(id='multicolumn_tsqC', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='transforme', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='transform_one_column', ctx=Store()), iter=Name(id='transforms__one_column', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='transforme', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='transform_one_column', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Call(func=Attribute(value=Name(id='multicolumn_tsqC', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='in_to_out_columnsUdX', ctx=Store())], value=DictComp(key=Name(id='key_', ctx=Load()), value=Name(id='VALUE', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key_', ctx=Store()), Name(id='VALUE', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load()), Attribute(value=Name(id='transform', ctx=Load()), attr='out_columns', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='columnfhU', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='ENUMERATE', ctx=Load()), args=[Name(id='in_column', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='column_multi', ctx=Store())], value=Subscript(value=Name(id='in_to_out_columnsUdX', ctx=Load()), slice=Name(id='columnfhU', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='column_single', ctx=Store())], value=Subscript(value=Attribute(value=Subscript(value=Name(id='transforms__one_column', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='out_columns', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='df_multi', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='transformed_df_', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segm', ctx=Load()), Name(id='column_multi', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='df_single', ctx=Store())], value=Subscript(value=Attribute(value=Subscript(value=Name(id='transforme', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segm', ctx=Load()), Name(id='column_single', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='df_multi', ctx=Load()), ops=[Eq()], comparators=[Name(id='df_single', ctx=Load())])], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform_constructor'), List(elts=[Name(id='BoxCoxTransform', ctx=Load()), Name(id='YeoJohnsonTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load()), Name(id='MaxAbsScalerTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='in_column'), List(elts=[List(elts=[Constant(value='exog_1'), Constant(value='exog_2'), Constant(value='exog_3')], ctx=Load()), List(elts=[Constant(value='exog_2'), Constant(value='exog_1'), Constant(value='exog_3')], ctx=Load()), List(elts=[Constant(value='exog_3'), Constant(value='exog_2'), Constant(value='exog_1')], ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='mode'), List(elts=[Constant(value='macro'), Constant(value='per-segment')], ctx=Load())], keywords=[])])], type_ignores=[])