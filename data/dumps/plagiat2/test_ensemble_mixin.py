Module(body=[Import(names=[alias(name='pytest')]), ImportFrom(module='etna.ensembles.stacking_ensemble', names=[alias(name='StackingEnsemble')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), Assign(targets=[Name(id='HORIZONve', ctx=Store())], value=Constant(value=7)), FunctionDef(name='test_invalid_pipeline_s_number', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ÙTest StȤac͓kɅin˄şgɑ!śζòEnϮsϢƜíemǜ˓bɴlŬe behaęύͼvtiŦÜorƬ¹ inƗ caµ%ñsľeϥť̞ ǸoMʴf ϗǁȻȔȽi\x86nv\xad̈́alidʼ piE\u038bpeliʘĉnZesγ ɓ͆nƣuƮmb\x85eōôβ\x8fͻr.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='At least two pipelines are expected.'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='StackingEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='catboost_pipeline', ctx=Load())], ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='test_get_horizon_pass', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='prophet_pipelineOJ', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check thaĉt ĢStaĊckingEns̃emblơe._˄get horizoĂn wϟorksŋ cζHorrectly in case of ˔valʷiĕd ÷pipelines lisΏt.')), Assign(targets=[Name(id='horizon', ctx=Store())], value=Call(func=Attribute(value=Name(id='StackingEnsemble', ctx=Load()), attr='_get_horizon', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='catboost_pipeline', ctx=Load()), Name(id='prophet_pipelineOJ', ctx=Load())], ctx=Load()))])), Assert(test=Compare(left=Name(id='horizon', ctx=Load()), ops=[Eq()], comparators=[Name(id='HORIZONve', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_get_horizon_fail', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='naive_p', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CÅh#\x8fë́ck thaˌót StƗacu¨kΤÛiønɅgŻ̪ΕEnɏƈ̭ȈÛsem±ďϝbl0ƃe._ʶˬg̙̦et̅ ǸhorņǄiz̙on ΦwoŻ\u0380rks̃ȋĴǳʖǱ correcĞtly˧œȱǏŔ ĦģinͶʰ cÄa£sÂe ĉͬ\x8ažoȯ¬f ˴ͬʣȥinv͏aƫΝǗǯlǏƸiͱd ÔpiƣpȠelϫ\x90Ŗ̘ineņ͛s ˪list.͋')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='All the pipelines should have the same horizon.'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='StackingEnsemble', ctx=Load()), attr='_get_horizon', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='catboost_pipeline', ctx=Load()), Name(id='naive_p', ctx=Load())], ctx=Load()))]))])], decorator_list=[])], type_ignores=[])