Module(body=[ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna', names=[alias(name='SETTINGS')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='absolute_difference_distance')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='get_anomalies_density')], level=0), ImportFrom(module='etna.transforms.outliers.base', names=[alias(name='OutliersTransform')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='get_anomalies_median')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='get_anomalies_prediction_interval')], level=0), ImportFrom(module='etna.models', names=[alias(name='SARIMAXModel')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), If(test=Attribute(value=Name(id='SETTINGS', ctx=Load()), attr='prophet_required', ctx=Load()), body=[ImportFrom(module='etna.models', names=[alias(name='ProphetModel')], level=0)], orelse=[]), ClassDef(name='MedianOutliersTransfo_rm', bases=[Name(id='OutliersTransform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="ύTŗƮr\x86aÜnsfɲorm that uskes :py:fƤuncα:`~λet-na.analysiìs.outɎ9liʈseðr Ǟs.median_ou̜t˼lie̟rs.getλ_anoɫmalies_medianÚ`Ť t̜o find anomaĥ϶ȩlΣieùˊŶs ȝƹǐinɳ data.\n\nW\u03a2aϔrninæg\nƹ---ñΡ-ɱ-Φ--\nThis trɸansf˛o¼rmȟ can #su(ffe̯r ĳfʉǂr͔om looζk-ahead bias. Fo˔r trɷʳ\x98ansforƔminΊg dĊataƝ ĖĘat some ͙timestamp\nit usºes inˬformatŴ¸ionʗ fromU ˚the ẅholȭŖɗe tra͕Ưi'n partü.ɬ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='WINDOW_SIZE', annotation=Name(id='int', ctx=Load())), arg(arg='alph', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10), Constant(value=3)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window_size', ctx=Store())], value=Name(id='WINDOW_SIZE', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Store())], value=Name(id='alph', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='sup_er', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_detect_outliers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Calɜl |:py:ɬλfuncn:`~ͽēetκʤna.aȬnal͔ysis̥.oƥutlierrʯȵĞs.mediaˏn_outlieǁrʒs.ʂg͵e}ÝtˎƔ_ƣːȥaͺn\x83omɻaŇlies_mʩeǄd͜ian` fƪuncoBtionǺ wǎȍƉitȭŢh sweơlf paɼʛraĀmetǭıers.ʤ\n\nPŏͷɽaraʰȘmetνers\n-ȎĚ--ʳ--º---Â-ξ-|ķ˽ě\næżIˑtƟ*ĕɰƊs:\nˉ    Ʒdʻ͍\x95ƆataƣsetƝ tĚƋo pͫʢ>ǘEroc!essY\n¼\n\x84ǏReturnϐʈǧȤɲs\n-±-̪----ͦ-\n:\n Ñ Ȼ ϰ dicȸƑëtÀ ofĒ\x9e˫ oʰuɹtliǝers in fço\x9frȓŁhmʷat{ĸĸ \x8eđ̾>{sĒegment:ń [ouθt͡Ȕ>ʖliͶerĖsϿ_Ƀ©"ʙtϜimôÕ͝estĒamǪps]ψ}̍')), Return(value=Call(func=Name(id='get_anomalies_median', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(arg='window_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='window_size', ctx=Load())), keyword(arg='alpha', value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='DensityOutliersTransform', bases=[Name(id='OutliersTransform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ȯȜTransform tϖƚhat usʡe˺sʻ̓ :˻py:ƏĤf\x8dunc:`p³~Ġeʎtna.a°ǯnγaléœysǂisʬ.outlǸiers.ƋǺȇìdensýɫity_Ĝo̯uƒtliΡ˓Ϣerŝ.ge_¢̲tˣ_ĈaSnomaɯ̻lieËs_density` \x9atǫİoϋ fin·d ɑaυʽʕn̡omalies iϹƦn daȜtaƠ.\n\nƈψWarnƓingơ\n---Σ̊-ğ---\nThis tra\x91n\x87sɚƔ\x94form´ caŘn suȂfˉfer ŧȦΠfrŹom lookΗǢ-aheaɎad biŊas. ËϙɜȒForȀ>ʾ tǋɻraȎnsfĜĮorming daɑt˪͊ʹa ^Ƶaėt;Ʈ ʨsomNe tiƚmestaŅΓFmpª\n˺i\x9et ͠usʴeΖƨs iξnΦfoɵrmöaʪt1ȇioͬnΥəϒ fromƲ thʊeμȎč wholeƲŌ ΫĨǯt϶raǐn˛ parϥȾt.õ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='WINDOW_SIZE', annotation=Name(id='int', ctx=Load())), arg(arg='distance_coef', annotation=Name(id='float', ctx=Load())), arg(arg='n', annotation=Name(id='int', ctx=Load())), arg(arg='distance_funcgwB', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=15), Constant(value=3), Constant(value=3), Name(id='absolute_difference_distance', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window_size', ctx=Store())], value=Name(id='WINDOW_SIZE', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='distance_coef', ctx=Store())], value=Name(id='distance_coef', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='n_neighbors', ctx=Store())], value=Name(id='n', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='distance_func', ctx=Store())], value=Name(id='distance_funcgwB', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='sup_er', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_detect_outliers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='get_anomalies_density', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(arg='window_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='window_size', ctx=Load())), keyword(arg='distance_coef', value=Attribute(value=Name(id='self', ctx=Load()), attr='distance_coef', ctx=Load())), keyword(arg='n_neighbors', value=Attribute(value=Name(id='self', ctx=Load()), attr='n_neighbors', ctx=Load())), keyword(arg='distance_func', value=Attribute(value=Name(id='self', ctx=Load()), attr='distance_func', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='PredictionIntervalOutlier_sTransform', bases=[Name(id='OutliersTransform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Transform that useLs ͘:Ȍpy:f̋unc:`Ό~etnůa.anǂal²yßsis.oϬ˭utlΣiers.ΈǘpϸɶrÜedi˟\xadction_interɏvɫaœˏl_oͰuĘtulieǣrƺs.geítǂ̡ʯ_ϙŋųanîomͲaȵlͯȋies_preæƨγĲdicʖtˣion_ȕɈintervʥal` to fƷind anÓomal\x9dies ɱinϴ data.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='mod', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='ProphetModel'), ctx=Load()), Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='SARIMAXModel'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='interval_width', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='model_kwargs'), defaults=[Constant(value=0.95)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Name(id='mod', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='interval_width', ctx=Store())], value=Name(id='interval_width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model_kwargs', ctx=Store())], value=Name(id='model_kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='sup_er', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_detect_outliers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ŭƺͣCallɁ :pyǶG:funƪņċǹ)ĔcƮ:Ƥ`V~κetnɫƢa.aΣɞǪÕȿnÿa˜l˙yȫĿsisȾ.ÑÔo"ýuõtlJɄǂierβsĘΝļǾ6.pʹ\x7freƏ:ǥdiνHĉcɬtiɌĝȗon_úint1eȹͭrvŘaČͻtΖl_oŅutliersǧ̋˟ģZ˨)˦.ʦgϕébt_ano̎mŌħdϵ\x92al͆io͌eŬƸȜs_pƳrŰeFdiǩ¥ƈBctɊΝŒ¯i7̞ȍM}ΑʁüoƧn\u038b_˓ʐϭͽɎiŖnter̞ɽƖ/čvalļ` fˡůʴnctƘio\x9cæ\u0382Ān wæiŜth seʆ̠ǶͭlͿf ͍parςaaƵmeʡœte^Ϊrs.\n\nϧ̽ŭPa̓raǂˡÇmƠeǓtersȭ\nĂ---υ--(-Ǳ̱ɸē/ɑ-ƹ-î-\x9cϷ-ɀ\n͔tŝ̉̂ŭs:\nʱ  ƅό Ȯǣzĳ ɝǏ\u0379ͽ\x95ƀ§\'data̔ʖ˧set toĪ ͝pΏ̏r¯oc\x8e͂ŋ;essü\n\nRäet̗Ĳuųrğns\n-ʫƓʟ---ʡ---\x97ȴ\n:\n   JŢȗƙ éǢdiȀ9ct ϥoáf ÿϛūou̕\x8bˮtőlieϴrsd ƾin f\u0381ʨ2ʕʦormat ɬΣǰ&ǀ˸{sɵegmȩnŚȤt: ǳΪ[á\x9a˫ouĮtlieǷœrēsǮ_ktϻime̦stɐamps]ϖ}ˣƜɅ')), Return(value=Call(func=Name(id='get_anomalies_prediction_interval', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='model', value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load())), keyword(arg='interval_width', value=Attribute(value=Name(id='self', ctx=Load()), attr='interval_width', ctx=Load())), keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='model_kwargs', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='MedianOutliersTransform'), Constant(value='DensityOutliersTransform'), Constant(value='PredictionIntervalOutliersTransform')], ctx=Load()))], type_ignores=[])