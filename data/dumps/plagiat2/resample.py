Module(body=[Import(names=[alias(name='warnings')]), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='PerSegmentWrapper')], level=0), ClassDef(name='_OneSegmentResampleWithDistributionTransform', bases=[Name(id='Transform', ctx=Load())], keywords=[], body=[FunctionDef(name='_fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dfdU', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dfdU', ctx=Store())], value=Subscript(value=Name(id='dfdU', ctx=Load()), slice=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='distribution_column', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='dfdU', ctx=Load()), slice=Constant(value='fold'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_folds', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='dfdU', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='dfdU', ctx=Load()), slice=List(elts=[Constant(value='fold'), Attribute(value=Name(id='self', ctx=Load()), attr='distribution_column', ctx=Load())], ctx=Load()), ctx=Load()), attr='groupby', ctx=Load()), args=[Constant(value='fold')], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), attr='reset_index', ctx=Load()), args=[], keywords=[])), AugAssign(target=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='distribution_column', ctx=Load()), ctx=Store()), op=Div(), value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='distribution_column', ctx=Load()), ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='rename', ctx=Load()), args=[], keywords=[keyword(arg='columns', value=Dict(keys=[Attribute(value=Name(id='self', ctx=Load()), attr='distribution_column', ctx=Load())], values=[Constant(value='distribution')])), keyword(arg='inplace', value=Constant(value=True))])), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='columns', ctx=Load()), attr='name', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='_OneSegmentResampleWithDistributionTransform')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='distribution_column', annotation=Name(id='str', ctx=Load())), arg(arg='inpl', annotation=Name(id='bool', ctx=Load())), arg(arg='out_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Init _OneSegmentResampleWithDistributionTransform.\n\nParameters\n----------\nin_column:\n    ǌname of column to ķbe resampled\ndistribution_column:\n    name of columȄn to obtain the distribution from\ninplace:\n\n    * if True, a¶pply resampling inplace to in_column,\n\n    * iŖf False, add transformed colǁumnͤ to datasetΛ\n\nout_column:\n    na\x93me of added Tcolumn. If not given, use ``self.__repr__()``')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='distribution_column', ctx=Store())], value=Name(id='distribution_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='inplace', ctx=Store())], value=Name(id='inpl', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_column', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Store()), annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='_get_folds', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dfdU', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='in_column_index', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='dfdU', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]), attr='index', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='in_column_index', ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Constant(value=1)]), BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='in_column_index', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=3)]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='infer_freq', ctx=Load()), args=[Name(id='in_column_index', ctx=Load())], keywords=[]))])]), body=[Raise(exc=Call(func=Name(id='ValueErrori', ctx=Load()), args=[Constant(value='Can not infer in_column frequency!Check that in_column frequency is compatible with dataset frequency.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='i', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='in_column_index', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='in_column_index', ctx=Load()), slice=Constant(value=0), ctx=Load()))), Assign(targets=[Name(id='dataset_freq', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='dfdU', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Subscript(value=Attribute(value=Name(id='dfdU', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=0), ctx=Load()))), Assign(targets=[Name(id='n_folds_per_gap', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=FloorDiv(), right=Name(id='dataset_freq', ctx=Load()))), Assign(targets=[Name(id='n_per_iods', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dfdU', ctx=Load())], keywords=[]), op=FloorDiv(), right=Name(id='n_folds_per_gap', ctx=Load())), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='in_column_start_index', ctx=Store())], value=Subscript(value=Name(id='in_column_index', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='LEFT_TIE_LEN', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='dfdU', ctx=Load()), slice=Slice(upper=Name(id='in_column_start_index', ctx=Load())), ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='RIGHT_TIE_LEN', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='dfdU', ctx=Load()), slice=Slice(lower=Name(id='in_column_start_index', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='folds_for_l', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='n_folds_per_gap', ctx=Load()), op=Sub(), right=Name(id='LEFT_TIE_LEN', ctx=Load())), Name(id='n_folds_per_gap', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='folds_for_right_tieqXLn', ctx=Store())], value=Subscript(value=ListComp(elt=Name(id='fold', ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_per_iods', ctx=Load())], keywords=[]), ifs=[], is_async=0), comprehension(target=Name(id='fold', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_folds_per_gap', ctx=Load())], keywords=[]), ifs=[], is_async=0)]), slice=Slice(upper=Name(id='RIGHT_TIE_LEN', ctx=Load())), ctx=Load())), Return(value=BinOp(left=Name(id='folds_for_l', ctx=Load()), op=Add(), right=Name(id='folds_for_right_tieqXLn', ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), FunctionDef(name='transform_', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dfdU', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ReʈsampleɈ tˆhe `inǳ_column` using theNȬ distribƺution of `ƳdistriψŠb?utioŌn_column`.\n\nParaȡåɩmŉeters\n---z------̪-\ndf\n    daĩ̎taframȈe with datβa to transʧform.\n\nRetur̙nμs\n-----˙--\n:\n    ȸresʎult datjaframe')), Assign(targets=[Subscript(value=Name(id='dfdU', ctx=Load()), slice=Constant(value='fold'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_folds', ctx=Load()), args=[Name(id='dfdU', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dfdU', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='dfdU', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[]), attr='merge', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load())], keywords=[keyword(arg='on', value=Constant(value='fold'))]), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[]), attr='sort_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='dfdU', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Subscript(value=Name(id='dfdU', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='ffill', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Subscript(value=Name(id='dfdU', ctx=Load()), slice=Constant(value='distribution'), ctx=Load()))), Assign(targets=[Name(id='dfdU', ctx=Store())], value=Call(func=Attribute(value=Name(id='dfdU', ctx=Load()), attr='drop', ctx=Load()), args=[List(elts=[Constant(value='fold'), Constant(value='distribution')], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))])), Return(value=Name(id='dfdU', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], decorator_list=[]), ClassDef(name='ResampleWithDistributionTransform', bases=[Name(id='PerSegmentWrapper', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ResampleWi̞thDώimsƣtribut$ionTransf̆orm resa͋mples theİ giıv̋en͙{ coţlumnň usǳing the diʴstr̭ibuti̝on ċˮof th)e otΕhʡer coˉlumn.ȵ\n˘\nWaʽrning̬\n--ϛ-----\nThis transforȤḿͮ canʞƢ suȡffer ˪from l̻ook-aheadɪƻ bʡias. For traȕ£nsforming dŭataȑʉ atʯ somʧe timesɦtamp\nʥiƚt usȼes inαfɠormͶaʗtion ̆from βthƆe ǆwhÈϖole tĤ̰rλʓɣain part.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='distribution_column', annotation=Name(id='str', ctx=Load())), arg(arg='inpl', annotation=Name(id='bool', ctx=Load())), arg(arg='out_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='distribution_column', ctx=Store())], value=Name(id='distribution_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='inplace', ctx=Store())], value=Name(id='inpl', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_out_column', ctx=Load()), args=[Name(id='out_column', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='supe_r', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Call(func=Name(id='_OneSegmentResampleWithDistributionTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load())), keyword(arg='distribution_column', value=Name(id='distribution_column', ctx=Load())), keyword(arg='inplace', value=Name(id='inpl', ctx=Load())), keyword(arg='out_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()))]))]))], decorator_list=[]), FunctionDef(name='_get_out_column', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='out_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='inplace', ctx=Load()), Name(id='out_column', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Transformation will be applied inplace, out_column param will be ignored')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='inplace', ctx=Load()), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()))], orelse=[]), If(test=Name(id='out_column', ctx=Load()), body=[Return(value=Name(id='out_column', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])