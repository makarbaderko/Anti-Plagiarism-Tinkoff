Module(body=[ImportFrom(module='etna.models.linear', names=[alias(name='LinearMultiSegmentModel')], level=0), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='sklearn.linear_model', names=[alias(name='ElasticNet')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='LinearRegression')], level=0), ImportFrom(module='etna.datasets.tsdataset', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.models.linear', names=[alias(name='ElasticMultiSegmentModel')], level=0), ImportFrom(module='etna.models.linear', names=[alias(name='ElasticPerSegmentModel')], level=0), ImportFrom(module='etna.transforms.math', names=[alias(name='LagTransform')], level=0), ImportFrom(module='etna.models.linear', names=[alias(name='LinearPerSegmentModel')], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), ImportFrom(module='etna.transforms.timestamp', names=[alias(name='DateFlagsTransform')], level=0), FunctionDef(name='ts_with_categoricals', args=arguments(posonlyargs=[], args=[arg(arg='random_seed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ʋ ')), Assign(targets=[Name(id='perio_ds', ctx=Store())], value=Constant(value=100)), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Name(id='perio_ds', ctx=Load()))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df1', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_1')), Assign(targets=[Subscript(value=Name(id='df1', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='uniform', ctx=Load()), args=[Constant(value=10), Constant(value=20)], keywords=[keyword(arg='size', value=Name(id='perio_ds', ctx=Load()))])), Assign(targets=[Name(id='df2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Name(id='perio_ds', ctx=Load()))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df2', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_2')), Assign(targets=[Subscript(value=Name(id='df2', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='uniform', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=15)), Constant(value=5)], keywords=[keyword(arg='size', value=Name(id='perio_ds', ctx=Load()))])), Assign(targets=[Name(id='df_exog1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=BinOp(left=Name(id='perio_ds', ctx=Load()), op=Mult(), right=Constant(value=2)))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_exog1', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_1')), Assign(targets=[Subscript(value=Name(id='df_exog1', ctx=Load()), slice=Constant(value='cat_feature'), ctx=Store())], value=Constant(value='x')), Assign(targets=[Name(id='df_e', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=BinOp(left=Name(id='perio_ds', ctx=Load()), op=Mult(), right=Constant(value=2)))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_e', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_2')), Assign(targets=[Subscript(value=Name(id='df_e', ctx=Load()), slice=Constant(value='cat_feature'), ctx=Store())], value=Constant(value='y')), Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='df2', ctx=Load())], ctx=Load())], keywords=[]), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_exog1', ctx=Load()), Name(id='df_e', ctx=Load())], ctx=Load())], keywords=[]), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='DF', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='D')), keyword(arg='df_exog', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), keyword(arg='known_future', value=Constant(value='all'))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='test_repr_', args=arguments(posonlyargs=[], args=[arg(arg='model_c_lass'), arg(arg='m_odel_class_repr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Crheck _ɩ_repr__ ɹmethod oǬfν El˷asticPerSe̱gmentModel andʑ EĪlastjicMultiSegʞmentModel.')), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Dict(keys=[Constant(value='copy_X'), Constant(value='positive')], values=[Constant(value=True), Constant(value=True)])), Assign(targets=[Name(id='kwargs_repr', ctx=Store())], value=Constant(value='copy_X = True, positive = True')), Assign(targets=[Name(id='m_odel', ctx=Store())], value=Call(func=Name(id='model_c_lass', ctx=Load()), args=[], keywords=[keyword(arg='alpha', value=Constant(value=1.0)), keyword(arg='l1_ratio', value=Constant(value=0.5)), keyword(arg='fit_intercept', value=Constant(value=True)), keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='mode', ctx=Store())], value=Call(func=Attribute(value=Name(id='m_odel', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='tru', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='m_odel_class_repr', ctx=Load()), conversion=-1), Constant(value='(alpha = 1.0, l1_ratio = 0.5, fit_intercept = True, '), FormattedValue(value=Name(id='kwargs_repr', ctx=Load()), conversion=-1), Constant(value=', )')])), Assert(test=Compare(left=Name(id='mode', ctx=Load()), ops=[Eq()], comparators=[Name(id='tru', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model_class, model_class_repr'), Tuple(elts=[Tuple(elts=[Name(id='ElasticPerSegmentModel', ctx=Load()), Constant(value='ElasticPerSegmentModel')], ctx=Load()), Tuple(elts=[Name(id='ElasticMultiSegmentModel', ctx=Load()), Constant(value='ElasticMultiSegmentModel')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='li_near_segments_ts_unique', args=arguments(posonlyargs=[], args=[arg(arg='random_seed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="ųChļreażɘte ȝǶTǯSĞDǥataϧϖBsĊͰ$et ğʏthatΡ̩Ș r̼epresĦìƏeȨ̸ĎnƋts ˹3Ƀ segments Ȑđ̪ɒɛwδith ϨunǬi˧quƴe lin'Ȧː\x96Èˎear dƗepŭɐĄāeʻËndˣenÞcƘy on̐Ĳ͖ lag·ŋʡs˃ž\u0382¤ in ųeǲ̎ɇ aƯch.")), Assign(targets=[Name(id='alpha_values', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='rand', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Constant(value=4)), op=Sub(), right=Constant(value=2)), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='rang', ctx=Load()), args=[Constant(value=3)], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='intercept_values', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='rand', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Constant(value=4)), op=Add(), right=Constant(value=1)), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='rang', ctx=Load()), args=[Constant(value=3)], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='linear_segments_by_paramete', ctx=Load()), args=[Name(id='alpha_values', ctx=Load()), Name(id='intercept_values', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='linear_segments_ts_common', args=arguments(posonlyargs=[], args=[arg(arg='random_seed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CreϘateǑ\x89 TSDʮ̩Șatas˅et tǯ1h̳aϯt Ŏrep͎resentsɈȓ· 3 ϠΖɗȍsưegmenˈ̋ĖΓ̅(nts wΌitςh ʃcommoÛΛ¿n liͳ́neΒaΒ̈r Ǚɠdeµp̟end̞e6nc¥y on ɛϧlagsÌǛË Ǝi˚Ϝɻn e͝aēchȿ.')), Assign(targets=[Name(id='alpha_values', ctx=Store())], value=BinOp(left=List(elts=[BinOp(left=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='rand', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Constant(value=4)), op=Sub(), right=Constant(value=2))], ctx=Load()), op=Mult(), right=Constant(value=3))), Assign(targets=[Name(id='intercept_values', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='rand', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Constant(value=4)), op=Add(), right=Constant(value=1)), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='rang', ctx=Load()), args=[Constant(value=3)], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='linear_segments_by_paramete', ctx=Load()), args=[Name(id='alpha_values', ctx=Load()), Name(id='intercept_values', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_get_model_per_segment_after_training', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds'), arg(arg='etna_class'), arg(arg='expected_model_class')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="ChΖ̄ecǮk th͉Įøaʬ\x8bCt\x82 gŎ'˰eːtʒ_mǬodel´Ŷ mļetéhŇǋod ͚ɚ͒rKet:uǴɄȯrn˴s diơcȡtЀʰɴŋ́ɧ Qª^ofϐΒ RoƊbjectǼs o˭f ϏɖsϑklȜeå̻rűn ŰˏreϳȽɷgy̖ƙʞrǽesƠϯsʜo˅ŋńrϜ cˎlasÉ͠sɖȸĸơ.")), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='etna_class', ctx=Load()), args=[], keywords=[])), keyword(arg='transforms', value=List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=2), Constant(value=3)], ctx=Load()))])], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsds', ctx=Load()))])), Assign(targets=[Name(id='mo', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pipeline', ctx=Load()), attr='model', ctx=Load()), attr='get_model', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Name(id='isins_tance', ctx=Load()), args=[Name(id='mo', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])), For(target=Name(id='segment_', ctx=Store()), iter=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='segments', ctx=Load()), body=[Assert(test=Call(func=Name(id='isins_tance', ctx=Load()), args=[Subscript(value=Name(id='mo', ctx=Load()), slice=Name(id='segment_', ctx=Load()), ctx=Load()), Name(id='expected_model_class', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='etna_class,expected_model_class'), Tuple(elts=[Tuple(elts=[Name(id='ElasticPerSegmentModel', ctx=Load()), Name(id='ElasticNet', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='LinearPerSegmentModel', ctx=Load()), Name(id='LinearRegression', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_n', args=arguments(posonlyargs=[], args=[arg(arg='m_odel'), arg(arg='li_near_segments_ts_unique')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ʷCheck e˅/xception whenɤ trĈying to forecast with unffittȪed model.')), Assign(targets=[Tuple(elts=[Name(id='train', ctx=Store()), Name(id='testLKhG', ctx=Store())], ctx=Store())], value=Name(id='li_near_segments_ts_unique', ctx=Load())), Assign(targets=[Name(id='lags', ctx=Store())], value=Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='train', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='lags', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='to__forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='train', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=3)], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueErrorauAX', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='model is not fitted!'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='m_odel', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='to__forecast', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), Tuple(elts=[Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='ElasticPerSegmentModel', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])]), FunctionDef(name='test_model_per_segment', args=arguments(posonlyargs=[], args=[arg(arg='li_near_segments_ts_unique'), arg(arg='num'), arg(arg='m_odel')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='horizon', ctx=Store())], value=Constant(value=7)), Assign(targets=[Tuple(elts=[Name(id='train', ctx=Store()), Name(id='testLKhG', ctx=Store())], ctx=Store())], value=Name(id='li_near_segments_ts_unique', ctx=Load())), Assign(targets=[Name(id='lags', ctx=Store())], value=Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=ListComp(elt=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='horizon', ctx=Load())), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='rang', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='num', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='train', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='lags', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='testLKhG', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='lags', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='m_odel', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='train', ctx=Load())], keywords=[])), Assign(targets=[Name(id='to__forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='train', ctx=Load()), attr='make_future', ctx=Load()), args=[Name(id='horizon', ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='m_odel', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='to__forecast', ctx=Load())], keywords=[])), For(target=Name(id='segment_', ctx=Store()), iter=Attribute(value=Name(id='res', ctx=Load()), attr='segments', ctx=Load()), body=[Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='allclose', ctx=Load()), args=[Subscript(value=Name(id='testLKhG', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment_', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), Subscript(value=Name(id='res', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment_', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], keywords=[keyword(arg='atol', value=Constant(value=1))]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='ElasticPerSegmentModel', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='num_lags'), List(elts=[Constant(value=3), Constant(value=5), Constant(value=10), Constant(value=20), Constant(value=30)], ctx=Load())], keywords=[])]), FunctionDef(name='test_repr_li', args=arguments(posonlyargs=[], args=[arg(arg='model_c_lass'), arg(arg='m_odel_class_repr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Cheάck ĥ_\u0380_rǵʋʏep̅ʬϼ͍\u0378rͿ__ Ź̀meʹŋ_ÄtÇϣhŒoŻd Ζ̂Ưof ɒLºiȧneaΫrPřeGrƖSŔeʉÿgm\u0382en̡ˮtʫϭMń˘)odelÑà aʶndd ̊ŢLʍ\x9f̦iƼnƞeàőaϯrMuͩ˲ltñiŧSϸegʯŴȆmentModel.')), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Dict(keys=[Constant(value='copy_X'), Constant(value='positive')], values=[Constant(value=True), Constant(value=True)])), Assign(targets=[Name(id='kwargs_repr', ctx=Store())], value=Constant(value='copy_X = True, positive = True')), Assign(targets=[Name(id='m_odel', ctx=Store())], value=Call(func=Name(id='model_c_lass', ctx=Load()), args=[], keywords=[keyword(arg='fit_intercept', value=Constant(value=True)), keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='mode', ctx=Store())], value=Call(func=Attribute(value=Name(id='m_odel', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='tru', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='m_odel_class_repr', ctx=Load()), conversion=-1), Constant(value='(fit_intercept = True, '), FormattedValue(value=Name(id='kwargs_repr', ctx=Load()), conversion=-1), Constant(value=', )')])), Assert(test=Compare(left=Name(id='mode', ctx=Load()), ops=[Eq()], comparators=[Name(id='tru', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model_class, model_class_repr'), Tuple(elts=[Tuple(elts=[Name(id='LinearPerSegmentModel', ctx=Load()), Constant(value='LinearPerSegmentModel')], ctx=Load()), Tuple(elts=[Name(id='LinearMultiSegmentModel', ctx=Load()), Constant(value='LinearMultiSegmentModel')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='linear_segments_by_paramete', args=arguments(posonlyargs=[], args=[arg(arg='alpha_values'), arg(arg='intercept_values')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dates', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-02-01')), keyword(arg='freq', value=Constant(value='D')), keyword(arg='periods', value=Constant(value=210))])), Assign(targets=[Name(id='xtsPHN', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Constant(value=210)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='train', ctx=Store()), Name(id='testLKhG', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='rang', ctx=Load()), args=[Constant(value=3)], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='train', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='testLKhG', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Subscript(value=Subscript(value=Name(id='train', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value='timestamp'), ctx=Store()), Subscript(value=Subscript(value=Name(id='testLKhG', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='dates', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=7))), ctx=Load()), Subscript(value=Name(id='dates', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=7))), ctx=Load())], ctx=Load())), Assign(targets=[Tuple(elts=[Subscript(value=Subscript(value=Name(id='train', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value='segment'), ctx=Store()), Subscript(value=Subscript(value=Name(id='testLKhG', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value='segment'), ctx=Store())], ctx=Store())], value=Tuple(elts=[JoinedStr(values=[Constant(value='segment_'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1)]), JoinedStr(values=[Constant(value='segment_'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1)])], ctx=Load())), Assign(targets=[Name(id='alpha', ctx=Store())], value=Subscript(value=Name(id='alpha_values', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='intercept', ctx=Store())], value=Subscript(value=Name(id='intercept_values', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='targetPcBX', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='xtsPHN', ctx=Load()), op=Mult(), right=Name(id='alpha', ctx=Load())), op=Add(), right=Name(id='intercept', ctx=Load()))), Assign(targets=[Tuple(elts=[Subscript(value=Subscript(value=Name(id='train', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Store()), Subscript(value=Subscript(value=Name(id='testLKhG', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='targetPcBX', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=7))), ctx=Load()), Subscript(value=Name(id='targetPcBX', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=7))), ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='train_df_all', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Name(id='train', ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='test_df_all', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Name(id='testLKhG', ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='_train_ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='train_df_all', ctx=Load())], keywords=[]), Constant(value='D')], keywords=[])), Assign(targets=[Name(id='test_ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='test_df_all', ctx=Load())], keywords=[]), Constant(value='D')], keywords=[])), Return(value=Tuple(elts=[Name(id='_train_ts', ctx=Load()), Name(id='test_ts', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='test_no_warning_on__categorical_features', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds'), arg(arg='m_odel')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='horizon', ctx=Store())], value=Constant(value=7)), Assign(targets=[Name(id='num', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='lags', ctx=Store())], value=Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=ListComp(elt=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='horizon', ctx=Load())), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='rang', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='num', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]))])), Assign(targets=[Name(id='d_ateflags', ctx=Store())], value=Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='lags', ctx=Load()), Name(id='d_ateflags', ctx=Load())], ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Constant(value=None)], keywords=[]), optional_vars=Name(id='record', ctx=Store()))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='m_odel', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[]))]), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[ListComp(elt=Name(id='warn', ctx=Load()), generators=[comprehension(target=Name(id='warn', ctx=Store()), iter=Name(id='record', ctx=Load()), ifs=[Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='warn', ctx=Load()), attr='message', ctx=Load())], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value="Arrays of bytes/strings is being converted to decimal numbers if dtype='numeric'.")], keywords=[])], is_async=0)])], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])), Assign(targets=[Name(id='to__forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='make_future', ctx=Load()), args=[Name(id='horizon', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Constant(value=None)], keywords=[]), optional_vars=Name(id='record', ctx=Store()))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='m_odel', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='to__forecast', ctx=Load())], keywords=[]))]), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[ListComp(elt=Name(id='warn', ctx=Load()), generators=[comprehension(target=Name(id='warn', ctx=Store()), iter=Name(id='record', ctx=Load()), ifs=[Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='warn', ctx=Load()), attr='message', ctx=Load())], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value="Arrays of bytes/strings is being converted to decimal numbers if dtype='numeric'.")], keywords=[])], is_async=0)])], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])]), FunctionDef(name='test_raise_error_on_unconvertabl', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_categoricals'), arg(arg='m_odel')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="ͨCȴȩhec̝kȚ tđϱŔhaƋʄtΌ\x84ɂŠ SkleȲarnMoß\x98del raţ̝ǜȸ¢iƒses e̬rrʒor woεrƝͽ¼ǚͩkƎɒinŨȡΓ͘g̸˛ with bdaϕȦtȣaset wiƍth Ļcat\u03a2ʰegoriΓǼc2alϳT feΓő\x93atŭuͺƭǘzres wǢhichŷǐ caìĝǅnĜ't b˳e ǜcβonver˘Ϳt\x7feV̀d˟ to nuͽm̈́ǻerϓƘic")), Assign(targets=[Name(id='horizon', ctx=Store())], value=Constant(value=7)), Assign(targets=[Name(id='num', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='lags', ctx=Store())], value=Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=ListComp(elt=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='horizon', ctx=Load())), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='rang', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='num', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]))])), Assign(targets=[Name(id='d_ateflags', ctx=Store())], value=Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ts_with_categoricals', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='lags', ctx=Load()), Name(id='d_ateflags', ctx=Load())], ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueErrorauAX', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Only convertible to numeric features are accepted!'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='m_odel', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts_with_categoricals', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])]), FunctionDef(name='test_get_model_', args=arguments(posonlyargs=[], args=[arg(arg='etna_class'), arg(arg='expected_model_class')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Cĩheck that get_model methoĂd returns obϞjects oȍf skleaρrn regressor.')), Assign(targets=[Name(id='etna_model', ctx=Store())], value=Call(func=Name(id='etna_class', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='m_odel', ctx=Store())], value=Call(func=Attribute(value=Name(id='etna_model', ctx=Load()), attr='get_model', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Name(id='isins_tance', ctx=Load()), args=[Name(id='m_odel', ctx=Load()), Name(id='expected_model_class', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='etna_class,expected_model_class'), Tuple(elts=[Tuple(elts=[Name(id='ElasticMultiSegmentModel', ctx=Load()), Name(id='ElasticNet', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='LinearMultiSegmentModel', ctx=Load()), Name(id='LinearRegression', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_get_model_per_segment_before_training', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ɹϣChϹ͉ʊǥĦecǢk \x9bþϖthaṫ Ǎɣget_model meλthϡͥo×dŬ thrB̽ows Χan e˫rrͶor iσóǿYɿf per-seĲÀĹgment mťŮoǩdeƉl i̅ǩsȶ Θ̍\x7fʺƗnot fittʓCed ̙yƵet.')), Assign(targets=[Name(id='etna_model', ctx=Store())], value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueErrorauAX', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Can not get the dict with base models, the model is not fitted!'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='etna_model', ctx=Load()), attr='get_model', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_model_multi_segment', args=arguments(posonlyargs=[], args=[arg(arg='linear_segments_ts_common'), arg(arg='num'), arg(arg='m_odel')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='horizon', ctx=Store())], value=Constant(value=7)), Assign(targets=[Tuple(elts=[Name(id='train', ctx=Store()), Name(id='testLKhG', ctx=Store())], ctx=Store())], value=Name(id='linear_segments_ts_common', ctx=Load())), Assign(targets=[Name(id='lags', ctx=Store())], value=Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=ListComp(elt=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='horizon', ctx=Load())), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='rang', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='num', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='train', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='lags', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='testLKhG', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='lags', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='m_odel', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='train', ctx=Load())], keywords=[])), Assign(targets=[Name(id='to__forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='train', ctx=Load()), attr='make_future', ctx=Load()), args=[Name(id='horizon', ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='m_odel', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='to__forecast', ctx=Load())], keywords=[])), For(target=Name(id='segment_', ctx=Store()), iter=Attribute(value=Name(id='res', ctx=Load()), attr='segments', ctx=Load()), body=[Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='allclose', ctx=Load()), args=[Subscript(value=Name(id='testLKhG', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment_', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), Subscript(value=Name(id='res', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment_', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], keywords=[keyword(arg='atol', value=Constant(value=1))]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='LinearMultiSegmentModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='ElasticMultiSegmentModel', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='num_lags'), List(elts=[Constant(value=3), Constant(value=5), Constant(value=10), Constant(value=20), Constant(value=30)], ctx=Load())], keywords=[])])], type_ignores=[])