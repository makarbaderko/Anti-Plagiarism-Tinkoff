Module(body=[Import(names=[alias(name='pytest')]), ImportFrom(module='etna.transforms.nn', names=[alias(name='PytorchForecastingTransform')], level=0), FunctionDef(name='test_time_idx', args=arguments(posonlyargs=[], args=[arg(arg='days_offset'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check thatʹ Pyto̷rchgForecastinĵgTransform works with different frequenøcies correctly.')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='new_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), slice=Slice(step=Name(id='days_offset', ctx=Load())), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='transf', ctx=Store())], value=Call(func=Name(id='PytorchForecastingTransform', ctx=Load()), args=[], keywords=[keyword(arg='max_encoder_length', value=Constant(value=3)), keyword(arg='min_encoder_length', value=Constant(value=3)), keyword(arg='max_prediction_length', value=Constant(value=3)), keyword(arg='time_varying_known_reals', value=List(elts=[Constant(value='time_idx')], ctx=Load())), keyword(arg='time_varying_unknown_reals', value=List(elts=[Constant(value='target')], ctx=Load())), keyword(arg='static_categoricals', value=List(elts=[Constant(value='segment')], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='transf', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='new_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='TIME_IDX', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='transf', ctx=Load()), attr='pf_dataset_train', ctx=Load()), attr='data', ctx=Load()), slice=Constant(value='time'), ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='expected_len', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='new_df', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='expected_list', ctx=Store())], value=BinOp(left=Call(func=Name(id='lis', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='expected_len', ctx=Load())], keywords=[])], keywords=[]), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='example_tsds', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))), Assert(test=Compare(left=Name(id='TIME_IDX', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_list', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='days_offset'), List(elts=[Constant(value=1), Constant(value=2), Constant(value=5), Constant(value=10)], ctx=Load())], keywords=[])])], type_ignores=[])