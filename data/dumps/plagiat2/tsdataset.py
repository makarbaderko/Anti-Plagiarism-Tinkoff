Module(body=[ImportFrom(module='typing', names=[alias(name='Any')], level=0), Import(names=[alias(name='warnings')]), ImportFrom(module='copy', names=[alias(name='copy')], level=0), ImportFrom(module='etna.datasets.utils', names=[alias(name='_TorchDataset')], level=0), ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), Import(names=[alias(name='math')]), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='Iterator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='matplotlib', names=[alias(name='pyplot', asname='plt')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='etna', names=[alias(name='SETTINGS')], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='etna.loggers', names=[alias(name='tslogger')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0)], orelse=[]), If(test=Attribute(value=Name(id='SETTINGS', ctx=Load()), attr='torch_required', ctx=Load()), body=[ImportFrom(module='torch.utils.data', names=[alias(name='Dataset')], level=0)], orelse=[]), Assign(targets=[Name(id='TTimestamp', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='st', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='TSDataset', bases=[], keywords=[], body=[Assign(targets=[Name(id='idx', ctx=Store())], value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load())), FunctionDef(name='plo_t', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n_segments', annotation=Name(id='int', ctx=Load())), arg(arg='column', annotation=Name(id='st', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='st', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='st', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='st', ctx=Load()), ctx=Load())), arg(arg='s_eed', annotation=Name(id='int', ctx=Load())), arg(arg='fig_size', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10), Constant(value='target'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=1), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load())), Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='n_segments', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='columns_n', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Constant(value=2), Name(id='k', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ROWS_NUM', ctx=Store())], value=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='ceil', ctx=Load()), args=[BinOp(left=Name(id='k', ctx=Load()), op=Div(), right=Name(id='columns_n', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='start', ctx=Store())], value=IfExp(test=Compare(left=Name(id='start', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Name(id='start', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='end', ctx=Store())], value=IfExp(test=Compare(left=Name(id='end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Name(id='end', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='fig_size', ctx=Store())], value=Tuple(elts=[BinOp(left=Subscript(value=Name(id='fig_size', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Mult(), right=Name(id='columns_n', ctx=Load())), BinOp(left=Subscript(value=Name(id='fig_size', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Mult(), right=Name(id='ROWS_NUM', ctx=Load()))], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='axoy', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='subplots', ctx=Load()), args=[Name(id='ROWS_NUM', ctx=Load()), Name(id='columns_n', ctx=Load())], keywords=[keyword(arg='figsize', value=Name(id='fig_size', ctx=Load())), keyword(arg='squeeze', value=Constant(value=False))])), Assign(targets=[Name(id='axoy', ctx=Store())], value=Call(func=Attribute(value=Name(id='axoy', ctx=Load()), attr='ravel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='rnd__state', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='RandomState', ctx=Load()), args=[Name(id='s_eed', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='sort_ed', ctx=Load()), args=[Call(func=Attribute(value=Name(id='rnd__state', ctx=Load()), attr='choice', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[keyword(arg='size', value=Name(id='k', ctx=Load())), keyword(arg='replace', value=Constant(value=False))])], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='df_', ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Name(id='segment', ctx=Load()), Name(id='column', ctx=Load())], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='axoy', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='df_', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='df_', ctx=Load()), attr='values', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='axoy', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='axoy', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_merge_exog', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='DF', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Something went wrong, Trying to merge df_exog which is None!')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='df_regressorsHDon', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_regressors', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='DF', ctx=Load())), keyword(arg='df_regressors', value=Name(id='df_regressorsHDon', ctx=Load()))])), Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Name(id='DF', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))]), attr='loc', ctx=Load()), slice=Attribute(value=Name(id='DF', ctx=Load()), attr='index', ctx=Load()), ctx=Load()), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1)), keyword(arg='level', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()))])), Return(value=Name(id='DF', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='head', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='N_ROWS', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=5)]), body=[Expr(value=Constant(value='Reaɐtu\x8a0rĂn the Ñf\x89iϱar͈ȀĻsȩtá˰ ``n_/˛rows&`̳` Ǽ̥ƉroɞwŘǥs.ê\n\nMimic̃ǳs pʪanͼ+ʫd6Ôas ʳΚmeɏthįǖodϚ.\n\næThisũ fu®nėctɳion͵ ret˂urnϬθȆs tǼhe ʞfKƝrȹ̡iÜrst ``ƀn_rows`` ƧrƲowǌs Áʕȳȥfor ţďtǏhe objecƽtȡ bęaςsed\noÐn\x90 poϣsïξɹit_iƛʨonǵ. Iǥt isa ǒu@sefƮul foȜr Ȕquůickly testingĚ ifʼɺ yourʕ oʓÆbtje͐ct\nhaʕʶs the Ńrighdʔtș Ϫ)Đĉtyϫp͛eˋ of da½ta Ƿin¸ ţit.Ο\n\nFoˉr n˼egätive ƍʲvaǧlóues ΤŧΜofͅ `>`ČnP_rƅŹowsɿ̟``ʇ, this fwĔɦǈuncĨtion\xa0 rĻetiurɜÚnɳsɣɷĎ all6 ro.ws excepϳt\nǬȾtheŢ las̟σ̣tǎ `ƞ`n_œʔr˗ό5ows`` roūͿĠwsː, eqƆɍuύivʚΌěaleȇσ\x95nt to ``ǚdfɘ˅[:-nƄ_rows]``γ´.À\n\nPara\x8eƜme̓βƦǾtĘe 6rȦs\n-ł--ů-------aɝʐǘ\n)[n_rōws:\n  ̦  nŀumåÛbeǭìr o˦̗ċZf rş̛͔͌oÑws\x9c͌ tỏ̗ʆ sele\x90cȄt.\n̎\nRetɬurƛƾnηɉs\n----Ȳɯ-̭--\x84\npd6.DataFrame\n    tΚheǶ ̚firsõtƈ `ɗ`ϕ͒\x8eȝůÏn_rowǃśȹϽήs`Ĕ`\x9c ƩrowsƁ or˴ 5ŝǗ Şbyȴ̟ #dekfault.ǲ̛')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='head', ctx=Load()), args=[Name(id='N_ROWS', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='to_dataset', args=arguments(posonlyargs=[], args=[arg(arg='DF', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ConƉvert țĘpǧˋanˀ̕dǑaåʒœs °dataƨframǒe \u0381toɜǮǂɭÿ ETNA2 Daϐtaset ǜfsȍʊrǭmĠŞ{ľɭat.\n\n°CȡolĞumǿnsȘ "̂t͋iƠϑmɵestamp" anʮdˆǝ ̝Σ"\x80ˊêƆsșegmϓɠent"ʈƹ Υare req\x96uirɚed̜.̔4ϖ\n\n̕Pβǈar©am¡eˋte\u0382̈́ɆˀrɰAs\n-Ȟ--ʯ---]-ɸ--ʯ-Ð̣̽\nddfʵ:ºœ\n  ͮŹ  Datγģ̝ȇaϭFraǡɁme¼Ñ wiŠt˗h ȂcolgϧumƎnȝΜ·s\x95Ū [ϓbǘ"ˢtiÌmǚest¿amȘp̆", "®ǩsΝʡegƧmeȰnťȴ"͗].Wħ OˁtherǈĒ col¿u˟mnsȘν͡ƸĬ ̬cfoÆƢnsiĸ̽˜dȼ̷͋ϵe:reƥd ͤǱfeϐaturƄ´ʽes.\n\nNo÷tɷĮes\n--Ğ---\nDurŔi˓ng ħconversűɪiǙonɰ seʔg(Øme½nt̻ Ois cast͚e§d tϑΙo ʏst̏rɢiông type.\n\nEǕxa˧mpløesƳ\nȌ-ũÁ\x89-Ώ-Ⱥͳʓ-̂ô̤ƂȺŤ-ɛϠ-Ș-ψƫ-\n>>> frϿom6 Ňetna.̱dat͝aɚsets˂Πę̂Ɍªϰ Őͣɣiámpĵđδoͤrt ĕgeȴn̉ȦeZʴʊratʧϵeǅ_coΔϿgnst_ϤdÙf\nm>:Ď>͒>̛ dfǓ =? ţgenΰeʔrǿańte_cϮʺǕonʿsρt_ǃdfͰ(\nǞ.wͼ.. é l  peϝriŗ̝̌oȣΪǹd\x8e˝s=3Á0ő,Ƭ starͯɭt_tϿŕime=Ò"27͍̪Ĥ021î˳ɲ-06jϿ·-01"Σͯ,\n..Ʈ̸.  Ϯ«  ƐĢn_ǁsegϭmźenǍts=2¸, scalɦ˳̐e=1\n... )ț\n>ư>Ĕ> df.̒heɸƭąad(5)\nʈ l̷  ϶ϯátiͳmeɘʚĎsʺϫẗ͕́͘ǤΟəampŋΫĵ    segΔȄmĨent̹ ˙ «V̘t\x83arˮgƲet\nǉ0 2021-η06-01 ƙ segàmentȱβÀ_ȣĀĶ̤ʳή0̬Ý(\x8b ʧ ˱ ˔ɬ 1.00\n1 e20̤υʆ2ɯß1ς£-06\xad-źδ02ͻ » ṡegmenzɻtōÆ̂_ɭ0ŷ  Ɲ Ă1 1.¹\x91^Ȗ̼0}0\nľ2ŢÏæ ̿2Ŧ021\x9d-ɒ̂06ďʚ˖-οǗ03  s®ʢegŔmențɢ_ʡ0ͳϻˌŊ    ϝ1ɶ.0Μ0̇ǀ\nŸ3˾ ʭ2ʐǐ02̚1γ-06-Q0̀4ɕ ̀ƙ seοgment_06ˆʜ  Ϋ  ΦʟĔ1Ȏɂ.00\n4ϵ ̰220ŝ2MÕ1Ż-ǧȆ0ʛΗ&ǡũ65-0͇Iʷ¯Ō5ûȪ  ϻsešgǂmćenȼt_0β    ʸ1.00\n>ˡ>˜> dȌȅtfΞŝˣ_͖ɇǒ̈́ͫ¸Œtǿès͍̕ɵ_fYormaÌt śƗϾ= ɧTSĚɍDØatĵasƐet.toɜ_daɱtaseʅtχ(ɨdĐf)\n˳>>>ȼ d£f!ȍǐ_t:s_forͫĮm\u0382at.h˲eʠĤÑad(Ś5)\n\x8aseʬgmŜ̃éntǾǈí ǯǲˀ ʒʱ  s̎egmɵe ntţͱŹƭ_ʁ̆0· segmeĸnt_1\nfɋ¦eıa̞tUʤure    Ŋí   tƘaŖrŮgeʡt@  ýōΌɏι û˽Ή ĶǗĬtaƓrżŀget5ɉʝ\ntiȟmȵeûstamƂļςύΊp\n20Ǎ˄Π2͞1-Ŀ0õ6-01   ϙ \x9a̿ ϱ ̻1T̵.00  ÑΥǠ˹\xad    1.0Yň0\n2021ǀ-0ɽ6-02 ×  ȁ   ̿1.00   ǵț  Ǜǽ 1.00\n2021-06-δ0Τ3 Ȁ̇:  ΄ˆ   ǧ̤Ɯ1.0wɚǍƚ0˳̪ ǹ ǌw"ϊ ΄ɵ  ͔ 1.00\nɶ2Ð0G21ϸ-0íə6ϐ-ɑɋ04 ˮ  Ġ  f ˮ1̪̐Ŀ́Ň.00 ě ¬    /0ˮ1ƪ.00\n2R021-0Í6ć-05ǥ˒ Κ΅ɪϸĩ  ʕ Ř ˖ˋ ȴ1.00      1.00\n\n͛>˪w˙¼>> ȸdfŪſŮǬȺ4_śrˊeĈgre̺ƵssʍǶorŵs\x94 = ʮ̭p§̤d.DdataFɒr×ãa«ϟͣme(Ƣ{΅\n.N..    \u038d "tičmestʛaǭmp":ĳ p˅d¼.̠daˍte_ϔ\u038dr̥aṇgeÝűϒ(" 20ς͐21͆-Ϡ01ƮȽ-\x9501"ǵ©, :ɮpÆǮeȑi"Λo˝ds=\x88̺Ù϶10),\n.ξ.ͭ.   ƿχ  "regrǢesƈsq2ŀborǞȵǀ_\x941͡"ǹ:̆ np̨ʈ.ǪΤͪaƔrřangeTǙɫʮϪ(1őͼ0ˮĒȡ)a,ɾ "rxegress\\ƝorăŚʯ_ˡ˞ɘƖ͗2":Ĩ n͑p.aϠrÚõ̞angeÁƒ(1ͽ0ɽĈɇĻ) +̺ ͓Ρ5ŉ,\nΤϼÒ...Έ ͖Ö ʱ ϱΡ Ϥ "ͅsƷɤegmΉͩƈeϘʚƏ6ntʛ"½Ǵ: [ʨɂ"segmơ;eΘnt_0"]ȧ/΅*1ūϗ0\n̔..ĩ.͘ŬżŖðΑȫ ̬Ȼ}©)\nł>Â>͈ŷ>Ϥĕ TS˾Ϸ̒ϭϷϺD́ata͗ɓseȇt.Έ̴Ĉʗto\u0378_ʈdatʮa͈ȕsʗetν(Ĥɑƃľd,\x87ÊfŅά_reÙgreĳ͠ssors̲͵)uÊę\x9c.head(5)\nsegʟmƾ˺ent ö̌ʧȗ  ͎ Ξ  segmưentύ_ɏ0\nfea̹tIure ͏ǎ  ˧ rτeg"resπs©orʸǽ_1ǰ regreϲƆ½s̤sȏʔor_2Ǫ½ȅ˾\nt\u038diιm\x96e\x87̄staɄŔmɕpÕ\n2Jȭ0˕ƍɮ21-©01-01     ǖ̲  ͪʠȔ˜   ̏Ð =O0   ˽  ͊Ǡ®      ů5\nŚŔ2ŋ021-0͟1-0˒ʳ2 Țr   Ƹέ̤ Ǭ  Į    1̻̹ǭ Ϲ Ϧ\x9fά  ɣ» \x88ß  F    Ƨ6\n͋͠Ɖ͝2021-ί01-03 Ĵ Ϛ ͗ŵ   +J   Ϥ  ȶ2ð   ɂ   §  Į  Ő 7Ą \n2͊021-ˈ0ɕOĎϼ1Ɲ@-ϣí04     ͗ ˛  ĚƦc   ȝ3 ʔ   ̮   ʇ8   Ȫϯ 8\nʩ2ɶ021ȱź-01-\x81Ḙ̏΄05    ͓̭\u0382   Ǥ ŝ   Ĥ4 Ƭ   Ơȍ   ƩƁ þ   9')), Assign(targets=[Name(id='d_f_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='DF', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Subscript(value=Name(id='d_f_copy', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[Subscript(value=Name(id='d_f_copy', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='d_f_copy', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='d_f_copy', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='st', ctx=Load())], keywords=[])), Assign(targets=[Name(id='feature_columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='d_f_copy', ctx=Load()), attr='columns', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='feature_columns', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='timestamp')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='feature_columns', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='segment')], keywords=[])), Assign(targets=[Name(id='d_f_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='d_f_copy', ctx=Load()), attr='pivot', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Constant(value='timestamp')), keyword(arg='columns', value=Constant(value='segment'))])), Assign(targets=[Name(id='d_f_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='d_f_copy', ctx=Load()), attr='reorder_levels', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=0)], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='d_f_copy', ctx=Load()), attr='columns', ctx=Load()), attr='names', ctx=Store())], value=List(elts=[Constant(value='segment'), Constant(value='feature')], ctx=Load())), Assign(targets=[Name(id='d_f_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='d_f_copy', ctx=Load()), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1)), keyword(arg='level', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()))])), Return(value=Name(id='d_f_copy', ctx=Load()))], decorator_list=[Name(id='staticmethodKJDLH', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='train_test_split', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='train_start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='train_end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_star', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='TEST_END', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_size', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='˓Sϻplit϶Ș ϘÑē¦ǻgϕõiǵvenȒ ħʣ̍df with t̍raˎiƘÓn-tϰàεuest ȟt͌iςm;eȬst̡ǒ˺ɣamĽpΎR ĩiϻndicesȷ orÑȳȅɚț\u0378 s¦ize ofˀtɧ teĊ͞Úst ɟ͵\u038bȂăøsϞ͊eªÒt.œϷ\n\nInͅ caŞnse oϷfŝ incon\x8fʮƒs˻istenϙçĤƚ¾cieůȐs îʸbeνtǠʳwenen ``ˀt˵0\x9cest_sizeˠ`Ȭƞ` aEndʴ (ˢ˶¦`ϩ\x95`ŀÃ̾¦tesβt¢_sÕtƜʌναar˾tȟ``, `ƣå\x93ρ`̤tesϨňt_end`Ρ`ċ§c)Ή,ΙĹǳ\x92ϟϟ ``űĻƊt\x90eϏsͯǰt_vsiÂêzeÖ`` Ϫisˑ imgnŨoĂred\n\nȺPψaʿQêłÂ̇rƉëϱaɼ=ɸmːǀ˻e\x8bɲʪtersĩɨδ͠˼\nǀ----ð-îȡ-ϐ-̃--˩-\ntrͱaͫÞʿɝinƩŁ_sǬĄtχaUǸΕµϑrtĄ:$\x94\n  \x8f  sƹtͩartoȫΔ \u0380ɺtŞ̟imϼmeϯϏ̍ϡȴJKɋŜǒ̪ɶʚsϩta̖mpÂǢΏɘ oɑƐ´ņf \u03a2neϰw "t̔άrain datasetΦˢ,- iȈf˨ͨϲ ÄW_ʄNĄoǕ˞osnªeǺ fiˑrset timʮɝ±ʤeűƨsąͤtǏaĞʶ˺mpÍƨ̐ ʤȬisĄ ιţͫϏuÌÉ0sβed\ntraǳiĦˠ\x98ƶEnȢϗ_ϺeʓnĆ˚Ů\x88d\x88͏:\n ō d  ǕeƘȗndǱ timeȔÙst̍̊aʧɂ͢ȑmʙ\x90apȁ oͮfă newŧ tɌra0in datàaǭɍsŕect,å ɝȄiŭ;f ŬñĻNoϥnÄ^e pƂreșviȁousɄ \\μtϴìo ª\x99``ëtȜe\x82\x9csƽȢĴȀt_sětǷ°arϻɻtˉ\x84`` ͆ϬtimeŜʍstamʁp ŻbiϞŦsϛş usͷ¨e̒˙ʏ̙d\ntesϷtĳ_sɊtart͏:\nǭ ˠ  ͆ ?ƒϗÜst³arŪΠt times¯ƐtampƵϴř ¼ɯof nŐeßw τζΨt\x88estƩ͙ŭĔ d͇Pβa͉tʑȵasewΔ̔Ċ˃t,ʚ GiǶΙͧf Nġonͽǩβɘeʦ nex©tˈ to ``t̿rϐa̰iTȢn_ʙ\x84ȠeÈ̚nd`Ǉ` ¬ti˓ğʮɽmeȣʯʄsĖt́a̵m\x83ʝ̡p5˅ GΥis ƤĸusedƬ\n̦͋̊Ϥʋtesʕ͎t_ernȴd:\n̛\x94 ¾ ˻.ȳ  eǵndV timesȽαt\x89aøm\x9fÿζpʤʋc̈ o˵f n˒ɳ¬ew tʹest Ńdaǆ˄̅tasetŬ©Ǳ, ɮǘÈiè˔ƣf NonŹƽ̙eŏÎ ŇƸlaĚsʅt ti<Ωmes_tĉamÛp υis uĦĂǔŏͻsǫǗeʤdġȡ\ntevαƊst̫_si£zʊ\x97ƊeŪκϾ:\nģ\x8dǃ Oσ ɐ  Ǜnu˨mbĦȒerΩ of ώti˦m"est͢amÂp2¡s t˽o ̯ˠʢuseɑ iú˳n tũesÈʕ̑Ƣtˤ sƳɕ eɎt\n̒˻\n̋ȠˑRϧeǧt͋uĖr[¯̜̜ͤ¾ͯŨǩn̑µs\n----̞-ˠ--˱\ntȹrainͶ, ÍȚ³ʻɰΖtͧƗƯe1st/α:\n  ̹Ȗ  ζʻτƠʠgĲeįĶͽŎÝnˬeraϰͫtĵed͖ d͂ĿƲĕΈǧęʷaȵt̀aMG̺s\x85eŔťs\ncȶ8˾\nE-xaÊι0mples\n-HƄƭŽ-˦oł̄---ǫ̯--ϫ̶-\nȵϚ&ģ>>§ǵǄ> frŵom e¬tnƢ̷aʉδ.da̼taɲƙaϸȪˢsĤetĲsƁ ʵiϰmǈϸpơΒɿȭŴort ĔŤΏ˼g̕˺τenȻerˀatɶȩe_ar_Õdțf\nǴȉ>>> ˑ˚pd.oȯǺṗƾtȗi̛onĽs.ΗźdiͥsptϠlaγTyƤ.͑ýfǸĶlò˯oat_˶ɭfŷoνrmʊȟƚÛaʗƐʌ̑tʎΎ\x8b ÷©= \'BĽ{:͗,.Ʊ2fʎė}Ĳ|\'Ȩ.ʃformɆÝaƠtȝ\nƺ:>ł>ʵ> dǔfϬ;ʒÐ = gen_G)erĴaƛž\u038dȥãte÷_ɭȚ̗\x84ar͞_dʲʽǱf(ŉΘʇ1ǶʟΗƇ0˞ĺ0̢Ȧ, sͫtɟΨʦaπrtΘ_ϟtiȍmϳe="\u03812ɝΆ0ġ2qͿ1-ǎƶƙ01ˬe˔Ǆɞʕ-\x87͌Ɵύ01Η̋",˗ n̷ǚ_s΄Ƞ\x83Νeʧgmen\x89tsŞ=3)\n>>> dϥf Σ= ʤ϶TS_ħDkatʅaǶΰset².tőōoȾy_da̋ǲñˁŰȒσOÙΥt\x82Ƴʯȷa\x8esȪΩʯet(\x88˵Ŝd°Όf)\nɻ>>ˉ>̟˛ϸ ț͎s ǵ\xad=Ċ TðaʇͰSDat·aset(df,ŕ "ĉDͬ˰")\n>ɻ±ƴˆǚ>ţĜ̝\\η> \x7fʑtrʡǪaiƟƃn¡_tɿs@,\u0378ɀ testǯ_Ħtǯɬs͋ =˱;ʻ ts³ǘ.tʳrʍaŐiƌn_ʳǿtΎȌɟʖ͵esǍǸtΤȧ_s\x8dplit(\n.ʒ.Ţ. Ȧ Ŕæ   tƜrtǙaiˈȞȆƸn_sͶ̜ätaVϿrt="˰˒2\x9102˷1ˊ-\x8001-01", t͘ˊăr˗͉̔aŹin_end=ſ"2021-ʡǃʚ0B2-ǘ¡Ê0¯ɀ1̝",\nāǾȞ...̼ ͐\x92Π  ǝ ž tǒezst(_staςrt=ρ"20Ѐ̖2Ϟ1-02-ųΉ˞0͛ϫ2ξ",ʐ tƁest_\x8c½e6ͷϪn¤d="Ϝ2͐Ɠ̞ʹ02Ł1ε̐ȶȖ-ʌƜ0ɲľ2ɷ-˹õ07ǻɣ"\n...lΔ )\n>̓>̊Ͱ>Ɉ ʖt:raΰȽƋ½in_ts».ȬЀdf.tĈaiĺl\x97(D5)\nsȣegomeˊnċt ˵ϗȢȤͣ  ȩϤ˾˵ +segbĄmeʏnt_0A˒Ϳǡ segǣmenͪt_1 ¤seΪgmģent_2͏\nfϔeaôturɂeðJ ȹ \x95®ì̐ͥěĔ   Ñ C ıtaʣǠrget 0ʺ  Ķ tarǬgȈˤetā   Á Ξt!ͣϐj$aŭǱrget\nĕtimestϪɴamͷp»Ĳ\n2x0ϡ21Ƌ˒O͋\x84-Ɩϯ0ő1-228 \x9e ȚĲƑ¬ ʅƘɺ ƪ -ǉɹ2.06ʱ   æŭ  ͆ Ȅ̶̈́2.0ʸD3tǩ   ȻJ ʕ uȘ ̴1ϱ.̪5ɫρł1\nǸ2ΰ021ű̐-0̫1-2ƕʿʺ9 Ċ ɴǩ ̊ĉʼªeϰț ȒæΩ̞Ģȩʲ -2˶.ǔY33y  ȟ̊Ƿ̭\xad Ŭ1   0.8Ģ3    \x93Ī  ˅0Ϊ.-Ĵþā81̐ǖξ\n2Ɖ021-0ɓ1-3˂0    ɏqȹ ·-1ɪų.80 ͻǉΤͳ̅   Ċ Ο 1.6ĝ9 \x9bØΩȑ ̧ʠ ˱  Ɠ̓ŹëƧ ̀0.K61ƓĈ\n20ȱ21-\x83ŹǢȮ01Άe-3ί1þȗ Ư˃ ζ˛ Ǚ  -ɨǲ2Π.Ε\u038dȳ4Ύ9 Ήˍ  ò*   ʭĽǲ͜1̧.5Ț+Ŕ1Ć  ϝ   ¦ 0ê.85\n2ʄ0ãȫ21̢ǊˤpŬ-ƬǊ02ɯ-ɲċ0ƥ1^ı  ƽ ʏ Ǳ Ξ-2Ŗˡ.8ς9ǔ˥  K  ȯ ɧ 0.9ˬƈ1 ˒   ˨ Ņ˾ϣ ˢŶ1._Ɍ0`ϱ6\n˦>>>Ò teɞst_̕tːȢsɵ\u0380.Ʊdf4Œ͖.ı×heǍ\u0378aΜd(ˇF05̍ )ȡ\nȎƍĹseg\x99m˫eϐǀ\u038bƹntŘ ɾ͘͟ζ   segm·enƩtʿł_0 seϋgťKčmϞ\u0378ƟͮenƤt_˘Ȅ1żĒϣ seg-ǯmeȖʻnt_2\n˼ĕˢfͭϯeͷatȕreª    Ȃīͤ \x92  žtargeģőÝȾtÐ»Ĺ´  \x90Ÿ  tƅarͩđèĽgό͎etǗɝ  Ć \'ˁ tƪargĹƽet\nẗ\x9ciames˻͑tϰƭŋTamȂp\nȕą2Ďη0Á21ɷ\x8c-02-0O2  ϞƟ̴͕ ˁŧ  -3.ͩǓ5ƚ7 µ Ĉʤ\x8dŖ ǁ  -̏0.32  Ɨ̮   Ǖ ǭ1.ȉ72\n2˯ũ02˚1Ɠ-Ìˏ^ğɛ02-ɦͫ0\x88¶A3 vɘ̄ Ơɜ̫b Ħν Ήŗ ţ-4.-4ĉ̓2ǝ ͌ tĥ\x9f   ύé ͖çȖʕ0.ȊȺĎ̷23  \x84    3ȴΩ.\x9c5υ1\n2ćΟ0̕21ś-0-ĺ2ÃÅ˹\x89ţ-χ0\x86͊4    ϝ -˺ɴǉǲ5.ŚŚͱ0[9ˊ     ɾƕ\x87̪ 1.0ńŇ2Ȭ Ό  Ů  ʄ 3ϐ·.3Ѐ͒9\n2r0Ɇ21-R0éΡ2ʽu-0²ȵύ5\x89 ͡ ɐ̚  Ǆ hǂ-ȉ5.1͏0È   ¬ Θ;ˀ  0.ϑ4ͷ0   ˛ \x85 Ʌɫ Ƶ2.15\n2062ƀ1ˋ-ȃ02-ȕμϒʷ0ɽ\x8b6 ɘ ΅   -̦ƫxS6.2̪ȚDƱΉ2Ŋ϶ ˹ ˚ϳ μ   0ȯ.9ȣ2   ʟͳ   0.9ɋ7Ύ˕̈ǎ<')), Assign(targets=[Tuple(elts=[Name(id='train_start_defined', ctx=Store()), Name(id='train_end_defined_', ctx=Store()), Name(id='test_start_defined', ctx=Store()), Name(id='test_end_defined', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_all_borders', ctx=Load()), args=[Name(id='train_start', ctx=Load()), Name(id='train_end', ctx=Load()), Name(id='test_star', ctx=Load()), Name(id='TEST_END', ctx=Load()), Name(id='test_size', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Name(id='test_end_defined', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Max timestamp in df is '), FormattedValue(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Name(id='train_start_defined', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Min timestamp in df is '), FormattedValue(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='tra', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='train_start_defined', ctx=Load()), upper=Name(id='train_end_defined_', ctx=Load())), ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='columns', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='train_raw_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), slice=Slice(lower=Name(id='train_start_defined', ctx=Load()), upper=Name(id='train_end_defined_', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='train', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='tra', ctx=Load())), keyword(arg='df_exog', value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='known_future', value=Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='train', ctx=Load()), attr='raw_df', ctx=Store())], value=Name(id='train_raw_df', ctx=Load())), Assign(targets=[Attribute(value=Name(id='train', ctx=Load()), attr='_regressors', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())), Assign(targets=[Name(id='test_d', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='test_start_defined', ctx=Load()), upper=Name(id='test_end_defined', ctx=Load())), ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='columns', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='test_', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), slice=Slice(lower=Name(id='train_start_defined', ctx=Load()), upper=Name(id='test_end_defined', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='test', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='test_d', ctx=Load())), keyword(arg='df_exog', value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='known_future', value=Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='test', ctx=Load()), attr='raw_df', ctx=Store())], value=Name(id='test_', ctx=Load())), Assign(targets=[Attribute(value=Name(id='test', ctx=Load()), attr='_regressors', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())), Return(value=Tuple(elts=[Name(id='train', ctx=Load()), Name(id='test', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value='TSDataset'), Constant(value='TSDataset')], ctx=Load()), ctx=Load())), FunctionDef(name='tsdataset_idx_', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='START_IDX', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='end_idx', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='RetΫϜˎur͉nζ new TSDataset\x82 wţitƹh integ͚er-locatio˝Ɋn |ƥb˅ased indȿexȺʯinʃgƷ.\n\nPʓarȁɁÑameteÍrsϢ\n-----ˠ-̓-ɶ--˩-\nst̞artΞ_idxÑ:ċϛφω\n Τïχ   sWtaṛtɲi3ng indeψx oύfŁ the slicƁe.\nend_idx:\nϮ    lǯast i\u0382ʪɃnÕʩdex oǤf t϶he slice.\n͖ʹ\nReturį˲Ens\nǁ--ɖ-----\n:\n    TʘSDa\u038bΠtas3et baseZυd oɣn indexiȨngͶĪ sÎƅͲlice.')), Assign(targets=[Name(id='df_', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=Name(id='START_IDX', ctx=Load()), upper=Name(id='end_idx', ctx=Load())), ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Name(id='tsdataset_', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df_', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='tsdataset_', ctx=Load()), attr='known_future', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tsdataset_', ctx=Load()), attr='_regressors', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tsdataset_', ctx=Load()), attr='transforms', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tsdataset_', ctx=Load()), attr='df_exog', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())), Return(value=Name(id='tsdataset_', ctx=Load()))], decorator_list=[], returns=Constant(value='TSDataset')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='DF', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='freq', annotation=Name(id='st', ctx=Load())), arg(arg='df_exog', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), ctx=Load())), arg(arg='known_future', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load()), Name(id='Sequence', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_df', ctx=Load()), args=[Name(id='DF', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Store())], value=Name(id='freq', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='inferred_f', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='infer_freq', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="TSDataset freq can't be inferred")], keywords=[])), Assign(targets=[Name(id='inferred_f', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='inferred_f', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='You probably set wrong freq. Discovered freq in you data is '), FormattedValue(value=Name(id='inferred_f', ctx=Load()), conversion=-1), Constant(value=', you set '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='asfreq', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_known_future', ctx=Load()), args=[Name(id='known_future', ctx=Load()), Name(id='df_exog', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Store())], value=Call(func=Name(id='copy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='df_exog', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_exog', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), attr='index', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_merge_exog', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[]))], orelse=[]), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='Transform'), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='_FIND_ALL_BORDERS', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='train_start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='train_end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_star', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='TEST_END', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_size', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='TEST_END', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_star', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_size', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='test_size, test_start and test_end cannot be applied at the same time. test_size will be ignored')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='TEST_END', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='test_star', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_size', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='test_start_', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='test_star', ctx=Load())], keywords=[])), If(test=Compare(left=BinOp(left=Name(id='test_start_', ctx=Load()), op=Add(), right=Name(id='test_size', ctx=Load())), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='test_size is '), FormattedValue(value=Name(id='test_size', ctx=Load()), conversion=-1), Constant(value=', but only '), FormattedValue(value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='test_start_', ctx=Load())), conversion=-1), Constant(value=' available with your test_start')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='test_end_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='test_start_', ctx=Load()), op=Add(), right=Name(id='test_size', ctx=Load())), ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='test_size', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='train_end', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='test_start_', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='train_end', ctx=Load())], keywords=[])), Assign(targets=[Name(id='test_star', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='test_start_', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='test_end_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='test_start_', ctx=Load()), op=Add(), right=Name(id='test_size', ctx=Load())), ctx=Load()))], orelse=[Assign(targets=[Name(id='test_end_defined', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]))])])], orelse=[Assign(targets=[Name(id='test_end_defined', ctx=Store())], value=Name(id='TEST_END', ctx=Load()))]), If(test=Compare(left=Name(id='train_start', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='train_start_defined', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='train_start_defined', ctx=Store())], value=Name(id='train_start', ctx=Load()))]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='train_end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_star', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_size', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='At least one of train_end, test_start or test_size should be defined')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='test_size', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='train_end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='test_start_', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='test_star', ctx=Load())], keywords=[])), Assign(targets=[Name(id='train_end_defined_', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='test_start_', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='train_end_defined_', ctx=Store())], value=Name(id='train_end', ctx=Load()))]), If(test=Compare(left=Name(id='test_star', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='trai', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='train_end', ctx=Load())], keywords=[])), Assign(targets=[Name(id='test_start_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='trai', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='test_start_defined', ctx=Store())], value=Name(id='test_star', ctx=Load()))])], orelse=[If(test=Compare(left=Name(id='test_star', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='test_start_', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='test_end_defined', ctx=Load())], keywords=[])), Assign(targets=[Name(id='test_start_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='test_start_', ctx=Load()), op=Sub(), right=Name(id='test_size', ctx=Load())), op=Add(), right=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='test_start_defined', ctx=Store())], value=Name(id='test_star', ctx=Load()))]), If(test=Compare(left=Name(id='train_end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='test_start_', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='test_start_defined', ctx=Load())], keywords=[])), Assign(targets=[Name(id='train_end_defined_', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='test_start_', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='train_end_defined_', ctx=Store())], value=Name(id='train_end', ctx=Load()))])]), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Name(id='test_start_defined', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Name(id='train_end_defined_', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='The beginning of the test goes before the end of the train')], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='train_start_defined', ctx=Load()), Name(id='train_end_defined_', ctx=Load()), Name(id='test_start_defined', ctx=Load()), Name(id='test_end_defined', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='TTimestamp', ctx=Load()), Name(id='TTimestamp', ctx=Load()), Name(id='TTimestamp', ctx=Load()), Name(id='TTimestamp', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='to_pandas', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='flatten', annotation=Name(id='bo', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='RetuŀŇ̥ΊǕrĹ͝n ǖɮχĩ8panƁǡdałs˅ DataƺąƎȾϖFʲǧrɴɐamÞe.\n\nPɲͮȔϭaųħvrčaǛmǕe*terɐs\nṊ̀-̇-éƙũ--¦ƃ˩---˚--Ͽͅ-\nfɘ́ϰlʡ̣atteΛn:Ő\n4  Õ  *Ȑç̳ɩ Iķf Fals?ϩe͘\x8e, retþurn pdȭ.̂DaΨtaǩŀ¹˚Fra\x82ƘƔmeǯ wit̫øǞɬʧh ĽmȧθuĢlƗ͢¯Ųtiɇindex7\n\nħĶ ̐ ʔȈϻɬˈơ  ǻɍ* Ifq̄ TΪr\u03a2˷ue˱, reĈtuSrn\x93 ¢˾ȸwitκehǂłȺ3ͨ ƫ˚vˇ\xa0ηfϭlūaͣtteΤn i3ɆαϣnοdexΓŠ\nʤ\nRʇ\x9e´ɍ§et[Ωu\x8ar°ns\n-;---ͻ͘ɗ-Ο7--̶(\npdϒ.Da͊t\x8dȸńaF̎¼ξrame\n È  ϫ ˩Βͥ{ÖbdaωΌtȐ\x97aǩfͽrȢameƜ ϗwǃƻiʋtϿǐϰhȺͫʚ 5ġTGą\x9dSͲDatasãetǴ dǂâͳata\n\n+̬ExaT͈mpl\x8b˿e¿s˝\nņ˦ƿ-Ǖ--Φ-ĕƙ-ȭ̩āʦ\x8fɛ̿-ƶã--\nŜ>É>ͽ> ƞɶƌfŧƏromǍ e˸ÅεtNΗna\x94ϱÁ.̰į̟dɇaċtasͣetЀsƥ iĆmŪòpɦνorât gnȆ1ene\x9fríͯa̡te_conƉɸǷs͜ȑƿt˚_df\n>ʄ>> dfƌƆŀĦǻ ʭ̘ÇĮɣ= Ì,}͞generēa½tØƫe̚_\x81Πcǹőoŗέˠ˩nstŮǜĠ_łdĤfØ©ͺ̘ɭ(\nΖƓw...  Y  ˣĶp\x99͝NeriæodˇͿs=3Ű0CͨϠ,ϭ ʠstartɜ_ϙ¿tĽi\x9bò6wmeľξɸǼȂƯ=͊"ʵoʿ2g0ʔ21\x9e-ɯǜȤ0ˍ6Ɖ-0ϩ1ƈ",\nĸ.Ⱦ.o.    n_Ʋz\'ΛseȗgmǙɣͷͮeîǰ̃ʠčnts=2,ʆ ɳscʾaɓ\u0383lñe=ɩ1Ȭ\n̰..Ȱ.Ý )\nÉ>>>ŠϤ̛ dfG.heʚaYd(\x9f5)\n¥  Ϯ¦ ϳ tim̕es˃\u0383ɑ\u0379taͮmȂȻp \x84͙ȩ\x96ύ ²  seζgmĂƞ̫®¿<̕\x9fenƫt͛  ftarge\x86ɯKΕt0\nͱ0  \x8420#ʸ21-Έ0sˁċ@ƭ̚˵6̝-01̺Ε  ϏsÂae̼GͼƇg̮\u038dmʕɂ̀TĴ͊e\xa0nťȹ_0ϕȺ ̏ Ƶ ˅ ɜ1.Ǳ0.ǝ0ʭ\n1 \x9cˎʖ J2ɧ021Ȋc-06-Łȥ0ʣ̑ƺʮ2 č͓ sˑe\u0382g͐̿ϽţǏm\x81entϼŦ_0ȓ   ɓ Ǯ1.0ÏĮ0\n2  202X1-ƏȤȧ0ʄ6ǐʭ-˩03 ¸ sĩegmenǫt_ƃ0Ǌυ -   1˽ǝ.0Ɛϕ0\n3̧Ċ϶ ʝ Ʉ2ϓϔ021Ǌɛɻ̂ƧǊ-Ϥ0ˌ6ŒȒδȔ-04Ż  sɤe˂gment_ː0 ɓ   "1.\x9a0~WǴ̬Żʫ<Ϣ0ȷſ\nż(4Ȫ æ 2Ĩ021-υ0I6-0ǟǈ5͠? \u0381ʼ Ʀ̙seɂgϱΚm̛ϴ͢Ȇ˨eƭɶ8nЀǃt_ˇ0ċ\xa0ĭ    ř1.0˼͎Σ0ɞ\n>̿>> ˑ̥dfʞ͏_ſtŐˆ̧s_fŘTǭoͳrm\x9faþt = ˓TSʤDϙawͳtΝΕʰɮa¦sιƿet.toa_dOƧəaǽtaset(dfÊϨ)è̲ǩ\nª>ü>>öņ÷\x97 Õοǩtʊ\x86·s ̟= ɇT͙SDataʊĘsˁ§eƯĖt(ˤǑdųf_ÄȖóǏƔtȭϖ̌ʖsËá_\x8dİʉ̪αǶform˫ɓa̋ο\xadt,ʜϙʏκ˔ȭ "D")\nͷ̵̘>`ƴ>\u0379Ö> ts9.ϥtćȈǿʍoǻ_@ȥ\x96pandīș͏ʰǈas(Trɠǔe).h̿ͺʂead(5Ò)ǚ\n ǫ ĻȆǸ˙° ȿŦxƠ˽ȺƩt\u03a2ÛΩ˟iëmesɻta¿mǙpǄ  target§    ˔\x86ȑosǐǦegό2m̀e͖ͩnt\n0Ι Ĥ20΅2Ǎ1-06E-ø0Ƶ1  k   1í.Ǯ0 ̽șłȂŭ seig¬ɣȀɽmʥ˘AˠɐƨŒɄǚentɌ_0\n¾1͡ Ĉ2§̌021-ħ06-ȴ0ˤ«2Ƴ-ɦƂŃ ǖ ˘κ ͮ  ʋ1î˝.0̠÷ \x82ʂ segmenǁtƀi_0\nʝ2 2˻Ɣ¬0ǅ2aƮ̪ŰͶ1-06-0α3ϾK ţͦ ϕ ʠ΄Υ  Ȃͣ1.Ŀ0 ͅǛ segɲm̅ʡ®eʊĺ\x96nŐ;Ɂt_0\nì3 2Ŏǹȁ021-Ȉ0×6ʄ@-əȊȞ0Ɓ³4Ĥʄ   ͞ þ\x8a ̦1.ɑŜ0ò Á˝Ƌ DsǠǆeȁgǎmeēΊ˻nƯ\u0382t_0ǦͿ\x92\nŬ4 2n̔ŗ021\u0379ϺΥ9-ɫ0M6-0̞\u0378Ŗû5Ϟ   ʳ  Ƨ̵1.0 ̠ ɹsegme̝nt_̻υǤ0\n©Ʃ>>ǹ> ǽt̖sǓ.νtćoˉŞờˌυϾ_dpa΅ndρa\u0382\u0381s(Fϙw͎ϔƄaJlŦŇ|Ϣse).ȫhͶeæad*(ίȄW5Ȕ)\nȥªØsɑƬeɶgmeώˤ\x82Wnt ϴ \u0378Ϡʹ Ľǵͧ segñǟƫme˷nt͓ȹˊ_0 segmůeͻǢnt_1θ\nfϹCăȨeatuǾre ʜͣ      tarŚȣget ȗ   ƓtȢĆarget\nƮtʶμ\u0381imestamϡpK\nΧ2021ÅϘ-06ͧǇ-01ĕϹ   ϟɪ ƅ Ÿ \x93ϯ1J˅aŬ˪ġϖ.ŬŜɉº0\x8aǶ0 Ǫ  ȏ ̖ ɭ dȒrÑéϢ1.00\n͚202ρAʙ1-͉06ĘϺ-02˳   ȌË ȑɖʤˮ  ϒ1.00   Ⱦ\x8cϛΉQŨϿ  ̷ 1.À00\n ψ2ʭ021-06Ͳ-0!α3   ̭ŽȽȤēϱ K  Ūŋ1.A00ʍ ͵Ǹ˝f ˑç ɟÞ   ʷȲ·1.00Ŕ\n2ϧ0ϒÁƭ21²-06Ǜ-0ɮΔϫ4 ϲ     ˪1.0̤0#ǩ      Ɲ1Ƥʭ.ɧ00\nr20͓£Ϩ21\x98ΐĕ-ϽȾʒŌǤ0À6-¢0ƫϤBͼ˸5 ă kɎ ɤΌ Ϝ  1ĸ.00  ɸ  ɟŌͩ  9ʇƣ1ģ.0Ⱦ0')), If(test=UnaryOp(op=Not(), operand=Name(id='flatten', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_che', args=arguments(posonlyargs=[], args=[arg(arg='DF', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='df_regressorsHDon', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='df_regressorsHDon', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='df_segments', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='DF', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Name(id='df_segments', ctx=Load()), body=[Assign(targets=[Name(id='target_min', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='DF', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='target_min', ctx=Store())], value=IfExp(test=Compare(left=Name(id='target_min', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='pd', ctx=Load()), attr='NaT', ctx=Load()), orelse=Name(id='target_min', ctx=Load()))), Assign(targets=[Name(id='target_maxHtE', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='DF', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='target_maxHtE', ctx=Store())], value=IfExp(test=Compare(left=Name(id='target_maxHtE', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='pd', ctx=Load()), attr='NaT', ctx=Load()), orelse=Name(id='target_maxHtE', ctx=Load()))), Assign(targets=[Name(id='exog_series_min', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_regressorsHDon', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='exog_series_min', ctx=Store())], value=IfExp(test=Compare(left=Name(id='exog_series_min', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='pd', ctx=Load()), attr='NaT', ctx=Load()), orelse=Name(id='exog_series_min', ctx=Load()))), Assign(targets=[Name(id='exog_series_max', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_regressorsHDon', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='exog_series_max', ctx=Store())], value=IfExp(test=Compare(left=Name(id='exog_series_max', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='pd', ctx=Load()), attr='NaT', ctx=Load()), orelse=Name(id='exog_series_max', ctx=Load()))), If(test=Compare(left=Name(id='target_min', ctx=Load()), ops=[Lt()], comparators=[Name(id='exog_series_min', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="All the regressor series should start not later than corresponding 'target'.Series of segment "), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1), Constant(value=' have not enough history: '), FormattedValue(value=Name(id='target_min', ctx=Load()), conversion=-1), Constant(value=' < '), FormattedValue(value=Name(id='exog_series_min', ctx=Load()), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='target_maxHtE', ctx=Load()), ops=[GtE()], comparators=[Name(id='exog_series_max', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="All the regressor series should finish later than corresponding 'target'.Series of segment "), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1), Constant(value=' have not enough history: '), FormattedValue(value=Name(id='target_maxHtE', ctx=Load()), conversion=-1), Constant(value=' >= '), FormattedValue(value=Name(id='exog_series_max', ctx=Load()), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[Name(id='staticmethodKJDLH', ctx=Load())]), FunctionDef(name='inverse_transfor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='transform', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[JoinedStr(values=[Constant(value='Inverse transform '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' is applied to dataset')])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='infotPa', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='st', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Over9v×iew of the dataset that pιrintÌs th%e resőΪult.\n\nM˘eΆǆʉthodȯ describes* dataset ʅiɅn seļgmenyt-wisĘe fashionʄ.\nˋ\nInfor͏mǶaɰtion about dataset in CĴă\x92generaƫl:\n6ĔǠ\n* num\x84͔_segȚmǼentsĢ:Ƥ̗ tδotaḻƊ numbeŁr oǸέf sŝ͆egme˘ntϳs\n\nƎ*˫ƣ num_eͣxogϹs: numbͨerȾ of exoύgenʚous˄ feĀaψtureˣős\nɫ\n* nǈum_ƖregɧressorBs: \x7fnum̈́ber »of exogǟenous faǖctors, thǩ˻at arɵe r\x83egreùsso˰rsŦ\n\nϒ* nƟϟum_ʡknɨownͳ_Ȱfɥutɳ¦ure: number oΞf ͂Ϻregrėssors̾, t8haɸ³t are known since creȚΦ̛aƪtionȎ\n\n*Ę frΒeq: ʘfreƺɥquency of the dataseɻtɥ·\n\nInf̩\xa0ȵormatiǢon ̸ɋaboŦut ĺințdiviˋduŷal segment˹s:\n\n* sétarŘt_timestamp: begȊinniŝNnʫgŦ õof the Wsegmenυt,͕ ˟-ňmιi[ssʄinȖg values\u038bæ in the beginning͘ are ignorŬed\n\n̘* end§ēĚ_timĳŰestamp:× endiȦng oĪf tͣhíe segǺment,ǝ ̊missing valƈues in ȳthe endingʤͶE ʻare ƚi̞gnoreɋώd\n\nΣ* lengthŜ:Ʒ lenǡgth accΰǫordi8ng to `ę`startƏȱ_timest2amȊpϹ`ș`ȱŻ anǅ˸d ``end_\x88timesȉtamp``\nˑ\n* numɋ_missing: nuėmbeɏr oǆf m̓is̪sĘ˵ing varǫiabl̩eȉs between `ġ`start_timȮesFtamp`` anǣd χ``eɰndĦ_timestamp``\n\nPar\\ameĘte\u03a2rs\n----ʴ˭\x9b------\nƀseĜgment͟(są:̄\n    ̱ſseɤkgmenǊts toå shìŬowǭ in oɏvèϻrviΣew, if None all Ϙseɾgmentͧs are̘ show\x97n.\nˢ\nExampϲlǤe2sʵˀ\n-----Ď¸---\n>>>Ŵ from etnЀa.dȌatas%etȲķs imporϙΧt genɍeϡr\x94atΌe_const_df\n>ϐ>> df Ū\x96=\u03a2 generate_Ƭconst_df(Î\n...    \x97ϐperioǟʖds=3ʤ0,ϼȘ start_¼time="2021-06-01\x9a",\nʭ..\x95.  \x81  n_segments=2, scaVlʶeȵ=1\n.Ƽì.ŷ\u0382α. )\n>>> dČfý_ts_format ̬= TSDataset.tǚ\x7fo_dataset(dfA)\n>˶>> regrŽessors_timáestȵaȫmp = pd.dĔate_r͡ʾangeǇŠ(start="2021-î0˧6-01", perio;ds=;5Ⱥ0)\n>>> ˨dͷf_regrƣQeϜ΄θs͏sœˏors_1 =Ə pɛd.DaƋta;Frame(\n..Ņ.     {ľ̨"tiŝmestamp,ř":ʿ regͽr\x91essorsƝ_timeˮstʺ¾amƒp, "regrʄessor_1": \x8e̚1, "Ąsegment": ĳ"seůˁgm\x80ŕ̋ent_0Ž͑Ȗ"ʫ}]\n... )\n>>> dfʔ_reνgreÀss̒orʤsɯ_2 = Ȍpθd.DĂòataϜρFɆrame(\n... ̈́    {"t6i\x83mestamp": reǨgres̢sors_timesǟtamp, "ɧregressor_1": 2, m"segment": "ʙsegm͋enȵtż_1"ȴ}\nu... )\n>>>\x8a d˝f_exogϋ = p\x83ɤdθȘ.conĈcaǤŵƴt([˖df÷_reΖg\x8cressorsƹ_1,õKĂ͞ df_rǙegŁr\x92esso9rs_2],ō Ɋigǜȵnore_̀iĺŕndeȗx=TQrueº)ˡ\n>>Ŭą> dfį_exog´_ts_foΔrʊmat = TSDϿ̕atase˕t.to_dΛataseƀt(ʵdf_exog)\nɻ>>ƄÊ>{ ʜts = TSDataset(df_Ɗɣts_forma\\t, df\x9c_eʗx̨o˱g=df_exog_\x88ts_·Ϭfǆormaǁt˔, f\x8ereq="D",Ϡ known˞_fuŉturȶe="aɻllý")\nɝ>>> ts.ɮiɨnfo()\n<class Æ\'eϐtna.datasetsĥ.ṰSData\x9dsetĵ\'>\nnum_seϨgmeŕnts: 2\nnum_exɕ͗ogƈs: 1ƙ\nnum_regresÓsors: 1\x7f\nˤ͍nɔumƟ_kΨnowǊnǕǃ_̣future: 1\nΰfreq: D\n ́    ͻ    Ƀ starςtϦ_timestamp end_tėimestamp  length\xa0  ɀnum_mæÕissing\nǐsegmentsʨ\u0383\nsegmeͬnt_̇0      2021-0L6-01ǃǷ ψ  ˻ 2ϡʛ021-0Ú6-3¡̝0      ƹ\x9030    ď˜͵ Ü     ƛ  0Ć\nΗčąsegment_1 Ώ É̀    2021-06-01 \\\x97 Ŋ\u0379  20ʓ21-0Ǖ6-ƶ¯ʭ30      ο30á            0')), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value="<class 'etna.datasets.TSDataset'>")], keywords=[])), Assign(targets=[Name(id='common_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_common_data', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='kR', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='common_dict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='kR', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='segme', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_segments_data', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='segme', ctx=Load())], keywords=[keyword(arg='index', value=Name(id='segments', ctx=Load()))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), attr='name', ctx=Store())], value=Constant(value='segments')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='option_context', ctx=Load()), args=[Constant(value='display.width'), Constant(value=None)], keywords=[]))], body=[AugAssign(target=Name(id='lines', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='to_string', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]))]), Assign(targets=[Name(id='result_stringoefLe', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='printTXbEm', ctx=Load()), args=[Name(id='result_stringoefLe', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='make_future', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='future_steps', annotation=Name(id='int', ctx=Load())), arg(arg='t_ail_steps', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_endings', ctx=Load()), args=[], keywords=[keyword(arg='warning', value=Constant(value=True))])), Assign(targets=[Name(id='max_date_in_dataset', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fu', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Name(id='max_date_in_dataset', ctx=Load())), keyword(arg='periods', value=BinOp(left=Name(id='future_steps', ctx=Load()), op=Add(), right=Constant(value=1))), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='closed', value=Constant(value='right'))])), Assign(targets=[Name(id='new_indexVHEoK', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='fu', ctx=Load())], keywords=[])), Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='reindex', ctx=Load()), args=[Name(id='new_indexVHEoK', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='DF', ctx=Load()), attr='index', ctx=Load()), attr='name', ctx=Store())], value=Constant(value='timestamp')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_merge_exog', ctx=Load()), args=[Name(id='DF', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load()), body=[For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='regressors_index', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='index', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Call(func=Attribute(value=Name(id='fu', ctx=Load()), attr='isin', ctx=Load()), args=[Name(id='regressors_index', ctx=Load())], keywords=[])], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value="Some regressors don't have enough values in segment "), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1), Constant(value=', NaN-s will be used for missing values')])], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='transform', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[JoinedStr(values=[Constant(value='Transform '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' is applied to dataset')])], keywords=[])), Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='transform', ctx=Load()), args=[Name(id='DF', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='future_dataset', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='DF', ctx=Load()), attr='tail', ctx=Load()), args=[BinOp(left=Name(id='future_steps', ctx=Load()), op=Add(), right=Name(id='t_ail_steps', ctx=Load()))], keywords=[]), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Name(id='future_dataset', ctx=Store())], value=Call(func=Attribute(value=Name(id='future_dataset', ctx=Load()), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1)), keyword(arg='level', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()))])), Assign(targets=[Name(id='future_t', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='future_dataset', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='future_t', ctx=Load()), attr='known_future', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())), Assign(targets=[Attribute(value=Name(id='future_t', ctx=Load()), attr='_regressors', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())), Assign(targets=[Attribute(value=Name(id='future_t', ctx=Load()), attr='transforms', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load())), Assign(targets=[Attribute(value=Name(id='future_t', ctx=Load()), attr='df_exog', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())), Return(value=Name(id='future_t', ctx=Load()))], decorator_list=[], returns=Constant(value='TSDataset')), FunctionDef(name='_gather_common_data', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='common_dict', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='st', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='num_segments'), Constant(value='num_exogs'), Constant(value='num_regressors'), Constant(value='num_known_future'), Constant(value='freq')], values=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load())], keywords=[]), Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='difference', ctx=Load()), args=[List(elts=[Constant(value='target')], ctx=Load())], keywords=[]), attr='nunique', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())]), simple=1), Return(value=Name(id='common_dict', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='st', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='DESCRIBE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='st', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='common_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_common_data', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='segme', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_segments_data', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='segme', ctx=Load()), slice=Constant(value='num_segments'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='num_segments'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='segme', ctx=Load()), slice=Constant(value='num_exogs'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='num_exogs'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='segme', ctx=Load()), slice=Constant(value='num_regressors'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='num_regressors'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='segme', ctx=Load()), slice=Constant(value='num_known_future'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='num_known_future'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='segme', ctx=Load()), slice=Constant(value='freq'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='freq'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='result__df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='segme', ctx=Load())], keywords=[keyword(arg='index', value=Name(id='segments', ctx=Load()))])), Assign(targets=[Name(id='colu_mns_order', ctx=Store())], value=List(elts=[Constant(value='start_timestamp'), Constant(value='end_timestamp'), Constant(value='length'), Constant(value='num_missing'), Constant(value='num_segments'), Constant(value='num_exogs'), Constant(value='num_regressors'), Constant(value='num_known_future'), Constant(value='freq')], ctx=Load())), Assign(targets=[Name(id='result__df', ctx=Store())], value=Subscript(value=Name(id='result__df', ctx=Load()), slice=Name(id='colu_mns_order', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='result__df', ctx=Load()), attr='index', ctx=Load()), attr='name', ctx=Store())], value=Constant(value='segments')), Return(value=Name(id='result__df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_check_known_future', args=arguments(posonlyargs=[], args=[arg(arg='known_future', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load()), Name(id='Sequence', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='df_exog', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='df_exog', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='exog_co', ctx=Store())], value=Call(func=Name(id='se', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='exog_co', ctx=Store())], value=Call(func=Name(id='se', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='df_exog', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]))]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='known_future', ctx=Load()), Name(id='st', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='known_future', ctx=Load()), ops=[Eq()], comparators=[Constant(value='all')]), body=[Return(value=Call(func=Name(id='sort_ed', ctx=Load()), args=[Name(id='exog_co', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="The only possible literal is 'all'")], keywords=[]))])], orelse=[Assign(targets=[Name(id='known_future_unique', ctx=Store())], value=Call(func=Name(id='se', ctx=Load()), args=[Name(id='known_future', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='known_future_unique', ctx=Load()), attr='issubset', ctx=Load()), args=[Name(id='exog_co', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Some features in known_future are not present in df_exog: '), FormattedValue(value=Call(func=Attribute(value=Name(id='known_future_unique', ctx=Load()), attr='difference', ctx=Load()), args=[Name(id='exog_co', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='sort_ed', ctx=Load()), args=[Name(id='known_future_unique', ctx=Load())], keywords=[]))])])], decorator_list=[Name(id='staticmethodKJDLH', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='st', ctx=Load()), ctx=Load())), FunctionDef(name='isnull', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ʶRǯeotʥuȨ¦órÖn dat;afȕŠ͕rame w͘ȟiʾtɣǟh flaŝʧɪg ϛthatů ǘmȫeanʉsȄ ŷ͐iΗf thěWƧ:e±ϕ̫ϊ coʆƒˠrrȚeƋspo˒n<d̔´eƃƋϺnt objˣȬϧectűςō 0in͂èɘ# Á``āseǻɘlȺʆϏf.df``Ŀ isǏ nz̄ǿulSl.ǰ\n\nǞRǎƂetu͕rns\n-------\n\u038bȞpºͪʗdƣ.Datafʩr̂ame\n  ɋd  Ȼºis_null§ ȱȟdɸaàʶta¶fȷrƾ̊ĉaĩΤmeŬ×')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='tailF', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='N_ROWS', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=5)]), body=[Expr(value=Constant(value='R̷Ɉʓe\x8dĻ˄Ύturƞn tΈhĈeδ ̃Ɗȴϲlas˕t ``CʻnʽʬĮ_roɽ˩wsŇ``ġą rowsʶ.˦\n\nMimi̱̲ˡcƠs GpaȂnda̍ȰsȎŒ vCĪϸʷ͒ɍmŽetƷʽͨhǙAoǘşd.§\n\nȃ÷TˣÖʹhiÕưʋȡs function CrϲeturʶŒΆŇnsǌ ƚlʡastȱ ``n8ͪ_rows`Ω` roȬws ϹʱfromĹ·Ü BtȦhe obj®ƣ\x81eɩˉcƁɔtĚ\x81ãɯƔÉɊ\u0383ƌú bȯased on\n̗ʳɩpos%Ɏ͊iīÛtɐiȗonʜ̤.̺ It iɥϩsǻ dŊusefɀuǴl fo˔ȏrN qluƜ͔iIckḻy̿˝ veƏriȆɧ\x99fyingϛ dataʦ, foræͩʃ ɓǔ<įexaǟm̘πɌpl̖eζ,t\naϏftPńeĦɎǝr\xad soū̳rɅtȾɾ,iɚnŇǳ/gĉͪ" or) }̉aƂpǎ͙pˁe͉ļnòŒdingɺ ŇȲroȪ̝èwsſ.l\n\nF\x84or̋͒ ̷̊negÖƌÕΘ̔aĥt̎iv<ϰe valuƶes oÝ͛ʚfÀ `#;ʑ`n_rČÅows`ξ`v́, t˝his -funρcǅ/ŋtio̽n rΡeɇ̈\x8atωurnȟώsρ ʰΕaȍll rows̖ Ǩe΄xāceɟ˯pt\nthe )fi̊ɄýrŨưst `n` rψ;lȫøoƩŀ͂ɂ͓ws, eȑqü\x83ivaƮ>Ιlϔen1ʤt toǴŚ `ˮ`ϲͲʦɽŗǰ΄df[n_\xa0ro͈ŵ̓wȩs¾ʨ:ͥçȫĹ]``\x9cɚ̾.̠\nǙ̆˺͏Hū\nȷPara˻m͠eteÈrsĘ\nūČî----ô̸--\u0380Ƥ--ʸÓ-ž-\nɇŭȦn_Órʗowɵȑʞs:\n ũ   nĂ*ȃěu̹ġmber oΎ8fĵɝ˷ śǷrowsͳò toǝʀ 4ƝEsɽeleƯΥcǕʃt.\nɃ\n«ReŎtÙʁuϙĵ¨rnƐȜs͑\n----ǚ---\npdŪϭĿĄ.DkaƑtϢaþFramĈeɋ\n ʣ ˜  thƞɦŞƪe͡ʱ ,Ε϶ÌlasǊtʷώŠč ``n_ͺ̐Ȩrǲúo̲ƽwľ̊̊͋ĸs̐ǹĜ`` rĈows źˑor\x87 Χ5ɰ bą¥yΜ d͕ˣeϐϘĀfauϰɢlt.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='tail', ctx=Load()), args=[Name(id='N_ROWS', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='columns', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()))], decorator_list=[Name(id='prop', ctx=Load())], returns=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='core', ctx=Load()), attr='indexes', ctx=Load()), attr='multi', ctx=Load()), attr='MultiIndex', ctx=Load())), FunctionDef(name='_update_regressorsykKNU', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transform', annotation=Constant(value='Transform')), arg(arg='columns_befor_e', annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='st', ctx=Load()), ctx=Load())), arg(arg='columns_afte', annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='st', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ϙ d  ʰ ǮTƜ ɠ ɼ   ˑ   ¥9ƫ ')), ImportFrom(module='etna.transforms', names=[alias(name='OneHotEncoderTransform')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='FutureMixin')], level=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='se', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Load())], keywords=[]), attr='intersection', ctx=Load()), args=[Name(id='columns_afte', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='unseen_columns', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Name(id='columns_afte', ctx=Load()), op=Sub(), right=Name(id='columns_befor_e', ctx=Load()))], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='unseen_columns', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='new_regressorsE', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='FutureMixin', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='out_c', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Name(id='columns_afte', ctx=Load()), op=Sub(), right=Name(id='columns_befor_e', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='new_regressorsE', ctx=Store())], value=Name(id='out_c', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='OneHotEncoderTransform', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='in_column', ctx=Store())], value=Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load())), Assign(targets=[Name(id='out_c', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Name(id='columns_afte', ctx=Load()), op=Sub(), right=Name(id='columns_befor_e', ctx=Load()))], keywords=[])), If(test=Compare(left=Name(id='in_column', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())]), body=[Assign(targets=[Name(id='new_regressorsE', ctx=Store())], value=Name(id='out_c', ctx=Load()))], orelse=[])], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='transform', ctx=Load()), Constant(value='in_column')], keywords=[]), body=[Assign(targets=[Name(id='in_colu_mns', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load()), orelse=List(elts=[Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load())], ctx=Load()))), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='transform', ctx=Load()), Constant(value='out_columns')], keywords=[]), Compare(left=Attribute(value=Name(id='transform', ctx=Load()), attr='out_columns', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='out_c', ctx=Store())], value=Attribute(value=Name(id='transform', ctx=Load()), attr='out_columns', ctx=Load())), Assign(targets=[Name(id='regressors_in_column_ids', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='in_column', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='in_colu_mns', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='in_column', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='new_regressorsE', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='out_c', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='regressors_in_column_ids', ctx=Load()), ifs=[], is_async=0)]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='transform', ctx=Load()), Constant(value='out_column')], keywords=[]), Compare(left=Attribute(value=Name(id='transform', ctx=Load()), attr='out_column', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='out_c', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='transform', ctx=Load()), attr='out_column', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=Attribute(value=Name(id='transform', ctx=Load()), attr='out_column', ctx=Load()), orelse=List(elts=[Attribute(value=Name(id='transform', ctx=Load()), attr='out_column', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='regressors_in_column_ids', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='in_column', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='in_colu_mns', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='in_column', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='new_regressorsE', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='out_c', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='regressors_in_column_ids', ctx=Load()), ifs=[], is_async=0)]))], orelse=[Assign(targets=[Name(id='out_c', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Name(id='columns_afte', ctx=Load()), op=Sub(), right=Name(id='columns_befor_e', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='regressors_in_column', ctx=Store())], value=ListComp(elt=Name(id='in_column', ctx=Load()), generators=[comprehension(target=Name(id='in_column', ctx=Store()), iter=Name(id='in_colu_mns', ctx=Load()), ifs=[Compare(left=Name(id='in_column', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='new_regressorsE', ctx=Store())], value=ListComp(elt=Name(id='out__column', ctx=Load()), generators=[comprehension(target=Name(id='out__column', ctx=Store()), iter=Name(id='out_c', ctx=Load()), ifs=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='any', ctx=Load()), args=[ListComp(elt=Compare(left=Name(id='regress', ctx=Load()), ops=[In()], comparators=[Name(id='out__column', ctx=Load())]), generators=[comprehension(target=Name(id='regress', ctx=Store()), iter=Name(id='regressors_in_column', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], is_async=0)]))])])], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Transform is not FutureMixin and does not have in_column attribute!')], keywords=[]))])])]), Assign(targets=[Name(id='new_regressorsE', ctx=Store())], value=ListComp(elt=Name(id='regress', ctx=Load()), generators=[comprehension(target=Name(id='regress', ctx=Store()), iter=Name(id='new_regressorsE', ctx=Load()), ifs=[Compare(left=Name(id='regress', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())])], is_async=0)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='new_regressorsE', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='fit_transformGPsao', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transforms', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='Transform'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fǳiͫtˈ ƿ¹¨^8anǯd apͣȌply ·ʓgiːve˯ɭn ȱtr͞an\x93ˊȺsŋfoHϼ5rȪm̓s tcȖoː th¢Űe dʜa̧ɓtaŚ.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_endings', ctx=Load()), args=[], keywords=[keyword(arg='warning', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Store())], value=Name(id='transforms', ctx=Load())), For(target=Name(id='transform', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[JoinedStr(values=[Constant(value='Transform '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' is applied to dataset')])], keywords=[])), Assign(targets=[Name(id='columns_befor_e', ctx=Store())], value=Call(func=Name(id='se', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='columns_afte', ctx=Store())], value=Call(func=Name(id='se', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_regressors', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Name(id='transform', ctx=Load())), keyword(arg='columns_before', value=Name(id='columns_befor_e', ctx=Load())), keyword(arg='columns_after', value=Name(id='columns_afte', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='_p', args=arguments(posonlyargs=[], args=[arg(arg='DF', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='     ')), Assign(targets=[Name(id='d_f_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='DF', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Name(id='columns_frame', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='DF', ctx=Load()), attr='columns', ctx=Load()), attr='to_frame', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='columns_frame', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='columns_frame', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='st', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='d_f_copy', ctx=Load()), attr='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='MultiIndex', ctx=Load()), attr='from_frame', ctx=Load()), args=[Name(id='columns_frame', ctx=Load())], keywords=[])), Return(value=Name(id='d_f_copy', ctx=Load()))], decorator_list=[Name(id='staticmethodKJDLH', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transforms', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='Transform'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_endings', ctx=Load()), args=[], keywords=[keyword(arg='warning', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Store())], value=Name(id='transforms', ctx=Load())), For(target=Name(id='transform', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[JoinedStr(values=[Constant(value='Transform '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' is applied to dataset')])], keywords=[])), Assign(targets=[Name(id='columns_befor_e', ctx=Store())], value=Call(func=Name(id='se', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='transform', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='columns_afte', ctx=Store())], value=Call(func=Name(id='se', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_regressors', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Name(id='transform', ctx=Load())), keyword(arg='columns_before', value=Name(id='columns_befor_e', ctx=Load())), keyword(arg='columns_after', value=Name(id='columns_afte', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='_repr_html_', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ̜ʥ ¸   Ȯʗč  ů  ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='_repr_html_', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='INDEX', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="RetΒur͑nżÓ\x87 TSDatϬaset ti\x9am´estaȋ'mp iēnŉ˔ȣͬǼ,$ǹčdĽeIx.\nŐ\nRetθurnsİ\x91\n-------\npȰǾd.Ƣcoʹre.indexͯŘes.da̋tƽetimes.DaƿʢtetimeIndˋex\n    tńŊimesûætamǐp i!ndex ͼof TSDaǃtasë́͗t")), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()))], decorator_list=[Name(id='prop', ctx=Load())], returns=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='core', ctx=Load()), attr='indexes', ctx=Load()), attr='datetimes', ctx=Load()), attr='DatetimeIndex', ctx=Load())), FunctionDef(name='to_torch_datasetg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='make_samples', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='dropna_', annotation=Name(id='bo', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Conv˄eŧĵrΚt ϚÖʮt\x9bġĨhˢēeɴ TSDataset\x9f toɌ a :py:clRassȎ:`͙t[orĆcǴȾhɮˋ.̲Daϡtase\x8eżt`.\n\nǔPλaramet\x8fers\n-----ɪΆ-----\nmak̆e_˾sampϱŽles:Ɯ\n    5function ˥thaęt iŮt\x8eakes perϩ segment DatȦaFraͧme ¨and retʺurns˹ iteraϘbale Ɖof sɗĵamʥpl˾ϱes\ndropna:ϯȇͻ\n    if `ƞ`Truɔe``\x90ɱ, miĎssinȖgĝǯ rows ̹are ǫdropǓped\n\nRé̡ɘtȯurǩnsǙC\nά----ϵ-ğĥ--\n:º\n  ǫ  ϝ:ħpy:Γcælass:`torch.Dataset`Ȯ with wiϻth9# train oʊΡƉr teŲs͜tǴ¹Ȅ sΤampĺes btoƃ in«fer ˎon')), Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), If(test=Name(id='dropna_', ctx=Load()), body=[Assign(targets=[Name(id='DF', ctx=Store())], value=Call(func=Attribute(value=Name(id='DF', ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ts_segments', ctx=Store())], value=ListComp(elt=Name(id='df_segment', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='df_segment', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='DF', ctx=Load()), attr='groupby', ctx=Load()), args=[Constant(value='segment')], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='ts_samples', ctx=Store())], value=ListComp(elt=Name(id='samples_', ctx=Load()), generators=[comprehension(target=Name(id='df_segment', ctx=Store()), iter=Name(id='ts_segments', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='samples_', ctx=Store()), iter=Call(func=Name(id='make_samples', ctx=Load()), args=[Name(id='df_segment', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='_TorchDataset', ctx=Load()), args=[], keywords=[keyword(arg='ts_samples', value=Name(id='ts_samples', ctx=Load()))]))], decorator_list=[], returns=Constant(value='Dataset')), FunctionDef(name='segments', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='prop', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='st', ctx=Load()), ctx=Load())), FunctionDef(name='to_flat', args=arguments(posonlyargs=[], args=[arg(arg='DF', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dtypes', ctx=Store())], value=Attribute(value=Name(id='DF', ctx=Load()), attr='dtypes', ctx=Load())), Assign(targets=[Name(id='category_co_lumns', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='dtypes', ctx=Load()), slice=Compare(left=Name(id='dtypes', ctx=Load()), ops=[Eq()], comparators=[Constant(value='category')]), ctx=Load()), attr='index', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value=1)], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='DF', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='DF', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df_dict', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Subscript(value=Name(id='df_dict', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='tile', ctx=Load()), args=[Attribute(value=Name(id='DF', ctx=Load()), attr='index', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='column', ctx=Store()), iter=Name(id='columns', ctx=Load()), body=[Assign(targets=[Name(id='df_cur', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='DF', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='column', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='column', ctx=Load()), ops=[In()], comparators=[Name(id='category_co_lumns', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='df_dict', ctx=Load()), slice=Name(id='column', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='api', ctx=Load()), attr='types', ctx=Load()), attr='union_categoricals', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='df_cur', ctx=Load()), slice=Name(id='col', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='col', ctx=Store()), iter=Attribute(value=Name(id='df_cur', ctx=Load()), attr='columns', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[Assign(targets=[Name(id='stac', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='df_cur', ctx=Load()), attr='values', ctx=Load()), attr='T', ctx=Load()), attr='ravel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_dict', ctx=Load()), slice=Name(id='column', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[Name(id='stac', ctx=Load())], keywords=[keyword(arg='dtype', value=Subscript(value=Attribute(value=Name(id='df_cur', ctx=Load()), attr='dtypes', ctx=Load()), slice=Constant(value=0), ctx=Load()))]))])], orelse=[]), Assign(targets=[Subscript(value=Name(id='df_dict', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='repeat', ctx=Load()), args=[Name(id='segments', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='DF', ctx=Load()), attr='index', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='df_flat', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='df_dict', ctx=Load())], keywords=[])), Return(value=Name(id='df_flat', ctx=Load()))], decorator_list=[Name(id='staticmethodKJDLH', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_gather_segments_datapcqAO', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='segments', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='st', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ʞGa«ʹtϧhōerÑƽÁ informafˠyǖtio͙Ãn about eacXh seg͊men\x97t.˴')), AnnAssign(target=Name(id='segme', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='st', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='start_timestamp'), Constant(value='end_timestamp'), Constant(value='length'), Constant(value='num_missing')], values=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())]), simple=1), For(target=Name(id='segment', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_series', ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='first_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='segment_series', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='last_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='segment_series', ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='segment_series', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='segment_series', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Name(id='first_index', ctx=Load()), upper=Name(id='last_index', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='segme', ctx=Load()), slice=Constant(value='start_timestamp'), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='first_index', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='segme', ctx=Load()), slice=Constant(value='end_timestamp'), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='last_index', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='segme', ctx=Load()), slice=Constant(value='length'), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='segment_series', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='segme', ctx=Load()), slice=Constant(value='num_missing'), ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='isna', ctx=Load()), args=[Name(id='segment_series', ctx=Load())], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='segme', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='st', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='loc', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ret˄urn sɋelfͻ.ϸdf.loc metɝhɕoŌd.\nε\nRǋetu͉rns\nĴ----éƙ---\npd.ͽʺcoŀ̸ɊƄrΑ1e.indexing˦Υb._LoĢcIn\x9edexër\n    daĲtaȫǵframe with selχf.df5W.loc[..Ϗ.]')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()))], decorator_list=[Name(id='prop', ctx=Load())], returns=Attribute(value=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='core', ctx=Load()), attr='indexing', ctx=Load()), attr='_LocIndexer', ctx=Load())), FunctionDef(name='reg_ressors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Load()))], decorator_list=[Name(id='prop', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='st', ctx=Load()), ctx=Load())), FunctionDef(name='_check_endin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='warning')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Check that alÊl targets ˴ends at the sameĤ timestamp.')), Assign(targets=[Name(id='max_indexeds', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='any', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='isna', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='max_indexeds', ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Name(id='warning', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Segments contains NaNs in the last timestamps.Some of the transforms might work incorrectly or even fail.Make sure that you use the imputer before making the forecast.')], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='All segments should end at the same timestamp')], keywords=[]))])], orelse=[])], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='s', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='st', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='DF', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Name(id='item', ctx=Load()), ctx=Load()), ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), Compare(left=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Is()], comparators=[Name(id='Ellipsis', ctx=Load())])]), body=[Assign(targets=[Name(id='DF', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Slice(), ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), Compare(left=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Is()], comparators=[Name(id='Ellipsis', ctx=Load())])]), body=[Assign(targets=[Name(id='DF', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='DF', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=1), ctx=Load()), Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))])])]), Assign(targets=[Name(id='first_valid_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='DF', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='DF', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='DF', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Name(id='first_valid_id', ctx=Load())), ctx=Load())), Return(value=Name(id='DF', ctx=Load()))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='͵     G   ǐ     Š    ĕϣ  ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])