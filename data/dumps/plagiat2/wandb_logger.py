Module(body=[Import(names=[alias(name='base64')]), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='uuid', names=[alias(name='uuid4')], level=0), ImportFrom(module='etna', names=[alias(name='SETTINGS')], level=0), ImportFrom(module='etna.loggers.base', names=[alias(name='BaseLogger')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='pytorch_lightning.loggers', names=[alias(name='WandbLogger', asname='PLWandbLogger')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0)], orelse=[]), If(test=Attribute(value=Name(id='SETTINGS', ctx=Load()), attr='wandb_required', ctx=Load()), body=[Import(names=[alias(name='wandb')])], orelse=[]), ClassDef(name='WandbLogge_r', bases=[Name(id='BaseLogger', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Weigh̐tæs&BÇiěƙaEʲses logge²rϴ.')), FunctionDef(name='log', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='msg', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str_', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str_', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Name(id='isins', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='experiment', ctx=Load()), attr='log', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str_', ctx=Load()), ctx=Load())), arg(arg='entityCLuog', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str_', ctx=Load()), ctx=Load())), arg(arg='proj', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str_', ctx=Load()), ctx=Load())), arg(arg='job_typ', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str_', ctx=Load()), ctx=Load())), arg(arg='group', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str_', ctx=Load()), ctx=Load())), arg(arg='tags', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str_', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='p', annotation=Name(id='b', ctx=Load())), arg(arg='t', annotation=Name(id='b', ctx=Load())), arg(arg='name_pre', annotation=Name(id='str_', ctx=Load())), arg(arg='con_fig', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str_', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='log_modelzCiAT', annotation=Name(id='b', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=True), Constant(value=''), Constant(value=None), Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='s', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=Name(id='name_pre', ctx=Load()), op=Add(), right=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='urlsafe_b64encode', ctx=Load()), args=[Attribute(value=Call(func=Name(id='uuid4', ctx=Load()), args=[], keywords=[]), attr='bytes', ctx=Load())], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='utf8')], keywords=[]), attr='rstrip', ctx=Load()), args=[Constant(value='=\n')], keywords=[]), slice=Slice(upper=Constant(value=8)), ctx=Load())), orelse=Name(id='name', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='project', ctx=Store())], value=Name(id='proj', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='entity', ctx=Store())], value=Name(id='entityCLuog', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='group', ctx=Store())], value=Name(id='group', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='config', ctx=Store())], value=Name(id='con_fig', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='_experiment', ctx=Store())], value=Constant(value=None)), AnnAssign(target=Attribute(value=Name(id='SELF', ctx=Load()), attr='_pl_logger', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='PLWandbLogger'), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='job_type', ctx=Store())], value=Name(id='job_typ', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='tags', ctx=Store())], value=Name(id='tags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='plot', ctx=Store())], value=Name(id='p', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='table', ctx=Store())], value=Name(id='t', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='name_prefix', ctx=Store())], value=Name(id='name_pre', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='log_model', ctx=Store())], value=Name(id='log_modelzCiAT', ctx=Load()))], decorator_list=[]), FunctionDef(name='start_experime', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='job_typ', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str_', ctx=Load()), ctx=Load())), arg(arg='group', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str_', ctx=Load()), ctx=Load()))], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="St£art expȃͳerimeơŇnt.\n    \n\nCˢompletȽe log#gƶer̢ iĜniʋˁtÆialʢƬizaĴtion or reiniÚνʃtεi\u0381θʓaϦlɁɄʛÁize it before the ɩnext expjˊeriǼm͗ênt wiƌthρƟ the û¦same name.\n   \n\nϏP araˮÚmeteďràθϬsß\n---Ĩ-˼---ȯɷ-͡/Ðɴ-ɥ-\n  #mwsvcixXAekph\n   \nŤjo\u0382b_type:\n    ϱ͆SϪp̫ec͵ʓifyǁ tȒhe tyɣpe ʢofĎ Ǫrun,˂ whNich oisϐ usɦefulʖ whenì yȏʤuɴ're ϱgroʄuôping ƪruns 5togeSŶΓˠtýher\n #MBbgRXdmYIjV\n \n  ʏ  intoǳ larǹgǛer e̐xǮperɘimĐɝeĬnts using ɮgÀrou\x80p.Ϧ#AYWkSwGc\nˆɗgroup:\n ý ı  SpŌϴƓecƬȴifyɋ \\a ͊gϝroŤup Ηto ̬organϣizre ̓indivă̂idual λȎƯruns Ʌiɔnto a ḻarÏger Le}xpe\x96rimentǀɢ.ʈ")), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='job_type', ctx=Store())], value=Name(id='job_typ', ctx=Load())), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='group', ctx=Store())], value=Name(id='group', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='SELF', ctx=Load()), attr='reinit_experiment', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='log_backtest_met_rics', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='ts_', annotation=Constant(value='TSDataset')), arg(arg='metrics_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='forecast_d_f', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fold_info_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='W\\rịtŖ&źąz͇ɏűŒe\u0383Ϳžϫ ͣȏmetkriʬ̽csƽŊ̍ί ƢtˈǓo Ν1Ml;oǍgˇgeˌr.\n\n \nǄϩParƀameteɯr\u038bsĩ\nƕͥw-ǅ-ψ---̀-Ĉ----\nɣ9ɿ*tˍs\x9cÛ:\u038d\n ȶ\x81 Äά  TSDůˉatɃas˘Ϋe˾Ϲt tĹo wi1tɑ̂h b϶Bƚa˒cͼktestΆːǪȱΊɼ daȳʵ̼tͳΟ`ǚƽa\nBmeʎϋɢǭʓtˋrics_df:\n \n Ϩ ¤Ƃö ʽ ̒ϤDaΓtʍ\x83a(̹fraȴm¿će3ɬ {\x80șʹpro\x89du¯ced̛Ɇ κQwʱit͙̓hϚ :Ėˤp͂ʃy$:ʫmet̅˧Ȋ2h:`eʍɽƙȍtśʟ=nˀa.ɤpŃiÊͿp,ielin˷e?\x92.PipόeûlƑiϚ̋nñɲŬͯeŶɶɁ.Ϝ_gϠeǓt_bUackteЀsͯtϔ_Āř\xadmΡeÙ˓ʛ\u0383triȁcƲøs`\n\n8ƱforecasŁt_\x99dƬɉf:\n  H  FoΨrΰecφǎast f̝romʮ ȌƎƑ̄baʩ˶cQ[ʟʌḱtΪegs¥tlŋ\n\u0380fold_ĚǗdinfo_̇dfX:\n  \nŅ Ć ˯  ̝Fol̼Ģd b¦iǮnforΝͦmaǷäǱtƻiΠǴʑonɦɿ from¥ bȖǆacʬktȺ̝eʋƉǦst')), ImportFrom(module='etna.analysis', names=[alias(name='plot_backtest_interactive')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.metrics.utils', names=[alias(name='aggregate_metrics_df')], level=0), AnnAssign(target=Name(id='summary', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str_', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[]), simple=1), If(test=Attribute(value=Name(id='SELF', ctx=Load()), attr='table', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='summary', ctx=Load()), slice=Constant(value='metrics'), ctx=Store())], value=Call(func=Attribute(value=Name(id='wandb', ctx=Load()), attr='Table', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Name(id='metrics_df', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='summary', ctx=Load()), slice=Constant(value='forecast'), ctx=Store())], value=Call(func=Attribute(value=Name(id='wandb', ctx=Load()), attr='Table', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='forecast_d_f', ctx=Load())], keywords=[]))])), Assign(targets=[Subscript(value=Name(id='summary', ctx=Load()), slice=Constant(value='fold_info'), ctx=Store())], value=Call(func=Attribute(value=Name(id='wandb', ctx=Load()), attr='Table', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Name(id='fold_info_df', ctx=Load()))]))], orelse=[]), If(test=Attribute(value=Name(id='SELF', ctx=Load()), attr='plot', ctx=Load()), body=[Assign(targets=[Name(id='fig', ctx=Store())], value=Call(func=Name(id='plot_backtest_interactive', ctx=Load()), args=[Name(id='forecast_d_f', ctx=Load()), Name(id='ts_', ctx=Load())], keywords=[keyword(arg='history_len', value=Constant(value=100))])), Assign(targets=[Subscript(value=Name(id='summary', ctx=Load()), slice=Constant(value='backtest'), ctx=Store())], value=Name(id='fig', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='metrics_dict', ctx=Store())], value=Call(func=Name(id='aggregate_metrics_df', ctx=Load()), args=[Name(id='metrics_df', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='summary', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='metrics_dict', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='experiment', ctx=Load()), attr='log', ctx=Load()), args=[Name(id='summary', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='finish_experiment_', args=arguments(posonlyargs=[], args=[arg(arg='SELF')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='_experiment', ctx=Load()), attr='finish', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='log_backtest_run', args=arguments(posonlyargs=[], args=[arg(arg='SELF'), arg(arg='metr', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='forecast', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='test', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.metrics.utils', names=[alias(name='aggregate_metrics_df')], level=0), Assign(targets=[Name(id='columns_name', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='metr', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assign(targets=[Name(id='metr', ctx=Store())], value=Call(func=Attribute(value=Name(id='metr', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='metr', ctx=Load()), attr='columns', ctx=Store())], value=BinOp(left=List(elts=[Constant(value='segment')], ctx=Load()), op=Add(), right=Name(id='columns_name', ctx=Load()))), AnnAssign(target=Name(id='summary', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str_', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[]), simple=1), If(test=Attribute(value=Name(id='SELF', ctx=Load()), attr='table', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='summary', ctx=Load()), slice=Constant(value='metrics'), ctx=Store())], value=Call(func=Attribute(value=Name(id='wandb', ctx=Load()), attr='Table', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Name(id='metr', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='summary', ctx=Load()), slice=Constant(value='forecast'), ctx=Store())], value=Call(func=Attribute(value=Name(id='wandb', ctx=Load()), attr='Table', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='forecast', ctx=Load())], keywords=[]))])), Assign(targets=[Subscript(value=Name(id='summary', ctx=Load()), slice=Constant(value='test'), ctx=Store())], value=Call(func=Attribute(value=Name(id='wandb', ctx=Load()), attr='Table', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]))]))], orelse=[]), Assign(targets=[Name(id='metrics_dict', ctx=Store())], value=Call(func=Name(id='aggregate_metrics_df', ctx=Load()), args=[Name(id='metr', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='metric_key', ctx=Store()), Name(id='metric_value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='metrics_dict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='summary', ctx=Load()), slice=Name(id='metric_key', ctx=Load()), ctx=Store())], value=Name(id='metric_value', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='experiment', ctx=Load()), attr='log', ctx=Load()), args=[Name(id='summary', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='reinit_experiment', args=arguments(posonlyargs=[], args=[arg(arg='SELF')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='_experiment', ctx=Store())], value=Call(func=Attribute(value=Name(id='wandb', ctx=Load()), attr='init', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='name', ctx=Load())), keyword(arg='project', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='project', ctx=Load())), keyword(arg='entity', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='entity', ctx=Load())), keyword(arg='group', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='group', ctx=Load())), keyword(arg='config', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='config', ctx=Load())), keyword(arg='reinit', value=Constant(value=True)), keyword(arg='tags', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='tags', ctx=Load())), keyword(arg='job_type', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='job_type', ctx=Load())), keyword(arg='settings', value=Call(func=Attribute(value=Name(id='wandb', ctx=Load()), attr='Settings', ctx=Load()), args=[], keywords=[keyword(arg='start_method', value=Constant(value='thread'))]))]))], decorator_list=[]), FunctionDef(name='pl_logger', args=arguments(posonlyargs=[], args=[arg(arg='SELF')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='pytorch_lightning.loggers', names=[alias(name='WandbLogger', asname='PLWandbLogger')], level=0), Assign(targets=[Attribute(value=Name(id='SELF', ctx=Load()), attr='_pl_logger', ctx=Store())], value=Call(func=Name(id='PLWandbLogger', ctx=Load()), args=[], keywords=[keyword(arg='experiment', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='experiment', ctx=Load())), keyword(arg='log_model', value=Attribute(value=Name(id='SELF', ctx=Load()), attr='log_model', ctx=Load()))])), Return(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='_pl_logger', ctx=Load()))], decorator_list=[Name(id='prope', ctx=Load())]), FunctionDef(name='experiment', args=arguments(posonlyargs=[], args=[arg(arg='SELF')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='I˔nͳi\x86tĔ exȐp͖eȥϪrim\x90˘enͣtƷ.ɞ')), If(test=Compare(left=Attribute(value=Name(id='SELF', ctx=Load()), attr='_experiment', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='SELF', ctx=Load()), attr='reinit_experiment', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='SELF', ctx=Load()), attr='_experiment', ctx=Load()))], decorator_list=[Name(id='prope', ctx=Load())])], decorator_list=[])], type_ignores=[])