Module(body=[ImportFrom(module='omegaconf', names=[alias(name='OmegaConf')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), Import(names=[alias(name='typer')]), Import(names=[alias(name='hydra_slayer')]), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), FunctionDef(name='forec_ast', args=arguments(posonlyargs=[], args=[arg(arg='config_path', annotation=Name(id='Path', ctx=Load())), arg(arg='target_path', annotation=Name(id='Path', ctx=Load())), arg(arg='freq', annotation=Name(id='str', ctx=Load())), arg(arg='output_path', annotation=Name(id='Path', ctx=Load())), arg(arg='e_xog_path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load())), arg(arg='f_orecast_config_path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load())), arg(arg='raw_output', annotation=Name(id='bool', ctx=Load())), arg(arg='known_future', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=Ellipsis)], keywords=[keyword(arg='help', value=Constant(value='path to yaml config with desired pipeline'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=Ellipsis)], keywords=[keyword(arg='help', value=Constant(value='path to csv with data to forecast'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=Ellipsis)], keywords=[keyword(arg='help', value=Constant(value='frequency of timestamp in files in pandas format'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=Ellipsis)], keywords=[keyword(arg='help', value=Constant(value='where to save forecast'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='help', value=Constant(value='path to csv with exog data'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='help', value=Constant(value='path to yaml config with forecast params'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=False)], keywords=[keyword(arg='help', value=Constant(value='by default we return only forecast without features'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='help', value=Constant(value='list of all known_future columns (regressor columns). If not specified then all exog_columns considered known_future.'))])]), body=[Assign(targets=[Name(id='pipeline_configs', ctx=Store())], value=Call(func=Attribute(value=Name(id='OmegaConf', ctx=Load()), attr='to_object', ctx=Load()), args=[Call(func=Attribute(value=Name(id='OmegaConf', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='config_path', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='f_orecast_config_path', ctx=Load()), body=[Assign(targets=[Name(id='forecast_params_config', ctx=Store())], value=Call(func=Attribute(value=Name(id='OmegaConf', ctx=Load()), attr='to_object', ctx=Load()), args=[Call(func=Attribute(value=Name(id='OmegaConf', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f_orecast_config_path', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='forecast_params_config', ctx=Store())], value=Dict(keys=[], values=[]))]), AnnAssign(target=Name(id='forecast_params', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='hydra_slayer', ctx=Load()), attr='get_from_params', ctx=Load()), args=[], keywords=[keyword(value=Name(id='forecast_params_config', ctx=Load()))]), simple=1), Assign(targets=[Name(id='df_timeseries', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='read_csv', ctx=Load()), args=[Name(id='target_path', ctx=Load())], keywords=[keyword(arg='parse_dates', value=List(elts=[Constant(value='timestamp')], ctx=Load()))])), Assign(targets=[Name(id='df_timeseries', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_timeseries', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df_exogNam', ctx=Store())], value=Constant(value=None)), AnnAssign(target=Name(id='k__f', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Tuple(elts=[], ctx=Load()), simple=1), If(test=Name(id='e_xog_path', ctx=Load()), body=[Assign(targets=[Name(id='df_exogNam', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='read_csv', ctx=Load()), args=[Name(id='e_xog_path', ctx=Load())], keywords=[keyword(arg='parse_dates', value=List(elts=[Constant(value='timestamp')], ctx=Load()))])), Assign(targets=[Name(id='df_exogNam', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_exogNam', ctx=Load())], keywords=[])), Assign(targets=[Name(id='k__f', ctx=Store())], value=IfExp(test=UnaryOp(op=Not(), operand=Name(id='known_future', ctx=Load())), body=Constant(value='all'), orelse=Name(id='known_future', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='tsdataset', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df_timeseries', ctx=Load())), keyword(arg='freq', value=Name(id='freq', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exogNam', ctx=Load())), keyword(arg='known_future', value=Name(id='k__f', ctx=Load()))])), AnnAssign(target=Name(id='p', ctx=Store()), annotation=Name(id='Pipeline', ctx=Load()), value=Call(func=Attribute(value=Name(id='hydra_slayer', ctx=Load()), attr='get_from_params', ctx=Load()), args=[], keywords=[keyword(value=Name(id='pipeline_configs', ctx=Load()))]), simple=1), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='tsdataset', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forec_ast', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(value=Name(id='forecast_params', ctx=Load()))])), Assign(targets=[Name(id='flatten', ctx=Store())], value=Call(func=Attribute(value=Name(id='forec_ast', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), If(test=Name(id='raw_output', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='flatten', ctx=Load()), attr='to_csv', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[keyword(arg='index', value=Constant(value=False))]))], orelse=[Assign(targets=[Name(id='quantile_columns', ctx=Store())], value=ListComp(elt=Name(id='column', ctx=Load()), generators=[comprehension(target=Name(id='column', ctx=Store()), iter=Attribute(value=Name(id='flatten', ctx=Load()), attr='columns', ctx=Load()), ifs=[Call(func=Attribute(value=Name(id='column', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='target_0.')], keywords=[])], is_async=0)])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='flatten', ctx=Load()), slice=BinOp(left=List(elts=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='target')], ctx=Load()), op=Add(), right=Name(id='quantile_columns', ctx=Load())), ctx=Load()), attr='to_csv', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[keyword(arg='index', value=Constant(value=False))]))])], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='forec_ast', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])