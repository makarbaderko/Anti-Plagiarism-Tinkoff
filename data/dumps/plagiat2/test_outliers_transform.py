Module(body=[ImportFrom(module='etna.transforms', names=[alias(name='DensityOutliersTransform')], level=0), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.analysis', names=[alias(name='get_anomalies_density')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='get_anomalies_median')], level=0), ImportFrom(module='etna.datasets.tsdataset', names=[alias(name='TSDataset')], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='etna.models', names=[alias(name='ProphetModel')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='MedianOutliersTransform')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='get_anomalies_prediction_interval')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='PredictionIntervalOutliersTransform')], level=0), FunctionDef(name='outliers_solid_tsds', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01')], keywords=[keyword(arg='end', value=Constant(value='2021-02-20')), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='target1', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='ra', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])), AugAssign(target=Subscript(value=Name(id='target1', ctx=Load()), slice=Constant(value=10), ctx=Store()), op=Add(), value=Constant(value=10)), Assign(targets=[Name(id='target2', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='ra', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])), AugAssign(target=Subscript(value=Name(id='target2', ctx=Load()), slice=Constant(value=8), ctx=Store()), op=Add(), value=Constant(value=8)), Assign(targets=[Subscript(value=Name(id='target2', ctx=Load()), slice=Constant(value=15), ctx=Store())], value=Constant(value=2)), AugAssign(target=Subscript(value=Name(id='target2', ctx=Load()), slice=Constant(value=26), ctx=Store()), op=Sub(), value=Constant(value=12)), Assign(targets=[Name(id='df1_', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Name(id='target1', ctx=Load()), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Name(id='target2', ctx=Load()), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='d_f', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1_', ctx=Load()), Name(id='df2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='d_f', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='df_exog', ctx=Load()), attr='columns', ctx=Store())], value=List(elts=[Constant(value='timestamp'), Constant(value='regressor_1'), Constant(value='segment')], ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Subscript(value=Attribute(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='d_f', ctx=Load())], keywords=[]), attr='iloc', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=10))), ctx=Load())), keyword(arg='df_exog', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_exog', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Constant(value='all'))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_interface', args=arguments(posonlyargs=[], args=[arg(arg='transform_constructorBXG'), arg(arg='constructor_kwargs'), arg(arg='outliers_solid_tsds', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='in_column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='transform_constructorBXG', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load())), keyword(value=Name(id='constructor_kwargs', ctx=Load()))])), Assign(targets=[Name(id='start_columns', ctx=Store())], value=Attribute(value=Name(id='outliers_solid_tsds', ctx=Load()), attr='columns', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='outliers_solid_tsds', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='transforms', value=List(elts=[Name(id='transform', ctx=Load())], ctx=Load()))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='start_columns', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='outliers_solid_tsds', ctx=Load()), attr='columns', ctx=Load())])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='in_column'), List(elts=[Constant(value='target'), Constant(value='regressor_1')], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform_constructor, constructor_kwargs'), List(elts=[Tuple(elts=[Name(id='MedianOutliersTransform', ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Name(id='DensityOutliersTransform', ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Name(id='PredictionIntervalOutliersTransform', ctx=Load()), Call(func=Name(id='DICT', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='ProphetModel', ctx=Load()))])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_outliers_detection', args=arguments(posonlyargs=[], args=[arg(arg='transform_constructorBXG'), arg(arg='constructor_kwargs'), arg(arg='methodfq'), arg(arg='outliers_tsds'), arg(arg='method_kwargs'), arg(arg='in_column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='detection_', ctx=Store())], value=Call(func=Name(id='methodfq', ctx=Load()), args=[Name(id='outliers_tsds', ctx=Load())], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load())), keyword(value=Name(id='method_kwargs', ctx=Load()))])), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='transform_constructorBXG', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load())), keyword(value=Name(id='constructor_kwargs', ctx=Load()))])), Assign(targets=[Name(id='non_nan__index', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='segmentBTEtJ', ctx=Store()), iter=Attribute(value=Name(id='outliers_tsds', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='non_nan__index', ctx=Load()), slice=Name(id='segmentBTEtJ', ctx=Load()), ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='outliers_tsds', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segmentBTEtJ', ctx=Load()), Name(id='in_column', ctx=Load())], ctx=Load()), ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]), attr='index', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='transformed_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Call(func=Attribute(value=Name(id='outliers_tsds', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='segmentBTEtJ', ctx=Store()), iter=Attribute(value=Name(id='outliers_tsds', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='nan_timestamps', ctx=Store())], value=Subscript(value=Name(id='detection_', ctx=Load()), slice=Name(id='segmentBTEtJ', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='transformed_column', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='transformed_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='non_nan__index', ctx=Load()), slice=Name(id='segmentBTEtJ', ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segmentBTEtJ', ctx=Load()), Name(id='in_column', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Subscript(value=Name(id='transformed_column', ctx=Load()), slice=Call(func=Attribute(value=Name(id='transformed_column', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), ctx=Load()), attr='index', ctx=Load()), ops=[Eq()], comparators=[Name(id='nan_timestamps', ctx=Load())])], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='in_column'), List(elts=[Constant(value='target'), Constant(value='exog')], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform_constructor, constructor_kwargs, method, method_kwargs'), List(elts=[Tuple(elts=[Name(id='MedianOutliersTransform', ctx=Load()), Dict(keys=[], values=[]), Name(id='get_anomalies_median', ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Name(id='DensityOutliersTransform', ctx=Load()), Dict(keys=[], values=[]), Name(id='get_anomalies_density', ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Name(id='PredictionIntervalOutliersTransform', ctx=Load()), Call(func=Name(id='DICT', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='ProphetModel', ctx=Load()))]), Name(id='get_anomalies_prediction_interval', ctx=Load()), Call(func=Name(id='DICT', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='ProphetModel', ctx=Load()))])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_future', args=arguments(posonlyargs=[], args=[arg(arg='transform_constructorBXG'), arg(arg='constructor_kwargs'), arg(arg='outliers_solid_tsds'), arg(arg='in_column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='transform_constructorBXG', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load())), keyword(value=Name(id='constructor_kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='outliers_solid_tsds', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='transform', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Name(id='outliers_solid_tsds', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Constant(value=10))])), Assign(targets=[Name(id='original_future_dfIW', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='future', ctx=Load()), attr='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='future', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[BinOp(left=Compare(left=Attribute(value=Name(id='future', ctx=Load()), attr='df', ctx=Load()), ops=[Eq()], comparators=[Name(id='original_future_dfIW', ctx=Load())]), op=BitOr(), right=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='future', ctx=Load()), attr='df', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), op=BitAnd(), right=Call(func=Attribute(value=Name(id='original_future_dfIW', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])))], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='in_column'), List(elts=[Constant(value='target'), Constant(value='regressor_1')], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform_constructor, constructor_kwargs'), List(elts=[Tuple(elts=[Name(id='MedianOutliersTransform', ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Name(id='DensityOutliersTransform', ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Name(id='PredictionIntervalOutliersTransform', ctx=Load()), Call(func=Name(id='DICT', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='ProphetModel', ctx=Load()))])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_transform_raise_error_if_not_fitted', args=arguments(posonlyargs=[], args=[arg(arg='transform'), arg(arg='outliers_solid_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Test˗ th͛ŌatƉÉ trƭķ͂a±nsfoʉrǁm ƩЀfβoź͐Ô'r ĳˤ˳ΟoǰnƉe se#̞gžƆment Ϟraise e©ζrˋroɘr ñʐŒwÅòhenʭ call)iɰng t͵ǾrȑanˀnɤsforȺǈ΅m withoutϕ bĶe·in͎ʎšğ  fiͪt.")), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Transform is not fitted!'))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Attribute(value=Name(id='outliers_solid_tsds', ctx=Load()), attr='df', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform'), Tuple(elts=[Call(func=Name(id='MedianOutliersTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Call(func=Name(id='DensityOutliersTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Call(func=Name(id='PredictionIntervalOutliersTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='model', value=Name(id='ProphetModel', ctx=Load()))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_tr_ain', args=arguments(posonlyargs=[], args=[arg(arg='transform_constructorBXG'), arg(arg='constructor_kwargs'), arg(arg='outliers_solid_tsds'), arg(arg='in_column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='transform_constructorBXG', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load())), keyword(value=Name(id='constructor_kwargs', ctx=Load()))])), Assign(targets=[Name(id='original_df', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='outliers_solid_tsds', ctx=Load()), attr='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='outliers_solid_tsds', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='transform', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='outliers_solid_tsds', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='original_df', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='outliers_solid_tsds', ctx=Load()), attr='df', ctx=Load())])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='in_column'), List(elts=[Constant(value='target'), Constant(value='regressor_1')], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform_constructor, constructor_kwargs'), List(elts=[Tuple(elts=[Name(id='MedianOutliersTransform', ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Name(id='DensityOutliersTransform', ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Name(id='PredictionIntervalOutliersTransform', ctx=Load()), Call(func=Name(id='DICT', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='ProphetModel', ctx=Load()))])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_raise_error_if_not_fittedw', args=arguments(posonlyargs=[], args=[arg(arg='transform'), arg(arg='outliers_solid_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Transform is not fitted!'))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Attribute(value=Name(id='outliers_solid_tsds', ctx=Load()), attr='df', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform'), Tuple(elts=[Call(func=Name(id='MedianOutliersTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Call(func=Name(id='DensityOutliersTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Call(func=Name(id='PredictionIntervalOutliersTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='model', value=Name(id='ProphetModel', ctx=Load()))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_transform_with_nans', args=arguments(posonlyargs=[], args=[arg(arg='transform'), arg(arg='ts_diff_e')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='      ͣ   º ̺ ͳ     ˫  ')), Expr(value=Call(func=Attribute(value=Name(id='ts_diff_e', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='transform', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform'), Tuple(elts=[Call(func=Name(id='MedianOutliersTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Call(func=Name(id='DensityOutliersTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Call(func=Name(id='PredictionIntervalOutliersTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='model', value=Name(id='ProphetModel', ctx=Load()))])], ctx=Load())], keywords=[])])], type_ignores=[])