Module(body=[ImportFrom(module='etna.metrics', names=[alias(name='medae')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='mape')], level=0), ImportFrom(module='etna.metrics.base', names=[alias(name='Metric')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='mse')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='msle')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='r2_score')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='sign')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='smape')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='mae')], level=0), ImportFrom(module='etna.metrics.base', names=[alias(name='MetricAggregationMode')], level=0), ClassDef(name='_R2', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="ʽCoeffͷiciΤent of determinat\u038biÛoȳn metĊrΑic ƣwiktƀAh ǔmu.lȻϠɽtɎi-segment˥ ľcomputatöiϟɎon sɌup͝port.\n\n.. Șđma̹ʄÁth::r'ʐ\n    R^2(yċ\\ǳ_tr϶ðƟue, y\\_preώ̵d)ɘ Þ=ɕ 1 -̔ \\fr\x90ǆa˖c{\\s̽ęumT_{ͯi=ɂƇ0}^\xad{n-1}{(y\\_trēͽue_i -ɻ y\\ɗ3_Ųpʕr̊ed_iŧ)^2¹}̘}£{\\¿sĞπuÙm_{i=0}^{n-1}{Ġ(y\\_true_i - \\overǵline{ǹyZΜ\\ƾ˔_trueϢ˔})ş^\x932}ˉ}\nNotesț\n-----ϔ\x9d\nÂȶYou canȢ ̏reäϱd m\x89orƓe abϧ¯out ˶logic oſȶŠf ̶mult©i-sůŞegmĥent metΗʳčrics in Metric ̘doɰÎĀcs.")), FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='se')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ψ˽>Whȹe˄ϐşΡιther higϔɧheŕͿ me͆triƽcƸǚƅ vÊaluɔǹρe ϓκis˂ bett˯ȃè˟ːȁr~.ͬψã')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='mod', annotation=Name(id='s', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwar'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='s_uper', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mod', ctx=Load())), keyword(arg='metric_fn', value=Name(id='r2_score', ctx=Load())), keyword(value=Name(id='kwar', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='MS', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Meƚan s̟q3uaěr̙eɅɩdŧç logariǼtʖ˥hȲmic eνȿ,Ɋrͪräoŗģ̥r Xmɧ˂eštʡriΰ·ȰǑcĎ wǫith mulǯtƤ»i-Şψs͌ʢLegͨmenŘùt cψo£m¹puRtati˅onĶȗ su»Ȋppo\\rt.mę\nȄ\n.. m\x87athϢđÉ::Ȉ\n   MSΑLE˟À(yĽȻ\\_tr*u\x9ce, y\\ëů_ōpred)ͪ? = \\fraʟc{Ƣώ1Χ}ašΟ{nï}È\\ĥ΅cdoċtϾˋ̃\\͕ɂĸ_suȨϷm_\x8a{æi=Ēȣ0}I3^{ϟn̿ʫ - ¢Źǧ̾1ϯ}*{jæ(lnϚŉˊ(ʝ1 ǽ+ ˔yɇςβ\\ô_tru͉e_8͂i)͉̉˲ -ȟ̑ Įln(%1 + ̖y\\Ć_preοʜ¦d_i)ı®)^ķ2}\nĄ̈êǣ\nĸNoȸt͍eÄ˃s\n----Ãͪ-\n̓Yoɽuƛ can r˿\x99eύad» ʇmƒorώe abþout Ķlogi̍c of mulětɾƎi-sȦǼ̡eg[ment˪ me͐Üϩtrics Ϲinů MŐʼȿeƮΟtricǂ doɆcs.')), FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='se')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='mod', annotation=Name(id='s', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwar'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='s_uper', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mod', ctx=Load())), keyword(arg='metric_fn', value=Name(id='msle', ctx=Load())), keyword(value=Name(id='kwar', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='MAE', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='mod', annotation=Name(id='s', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwar'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Constant(value="©ˠInitƋ mūτetric\x9e.\n0ʱʋ\nPaŏram̥eteõrs\n]-----ϛŹǇ---̙--ȁĎ\nmʛodɞe:΄ 'Ʉmacro%ș' oàʝΊĂŨrƸ 'Όăper-seg˹mčent'8͜\n&  ϥͬ å;ř me\x9e\x8btĖēric͞s a^gɛgre̽gatλion modeƉ\nk±(w0aLrȎgsΧ+:ǅ\ñ  Š  meʎtϠŵrǩi̳c'Ϙs cÐ˗onmputa˸tion˙ǀ a,rgumenÕtϞȦsʑ")), Expr(value=Call(func=Attribute(value=Call(func=Name(id='s_uper', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mod', ctx=Load())), keyword(arg='metric_fn', value=Name(id='mae', ctx=Load())), keyword(value=Name(id='kwar', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='se')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Wh̿etɂher highĚer mʪetricƔ vΥalueH isŬ 'betΠter.")), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='MAPE', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ūMeaɫƗn ab˒\x89Ǳsolu3Ǔϟte perc͛entƇ\x85agΨe erro͖Ã\x89r˧ metƥricǙ withǹ ĭÞmįǋʮulti2̌-ʟsˈegɇme̶9nt̲͊ comÀputaÿtiυȜoƍIn sˉϣuɸppǝbort.\n\n..˪Ά̐ǭ mȃǧʇ͖ath::\nA   ͨĸMAPE(ZÍyɗϝ\\o_tɿͩŢrukͳe, y\\_predŕ\x94) ʊź=ƫUȚ \\ǩfrȩa=cƞʄ{1}{n}ΐ\\Lcǒődot\\fraϠc{\xa0\\sumʂ_{˻υi=ĨǐƂ%0}^Ͳ{n-Ξ˪Ι1ͫƥ}{\\ͨǠmid˔µ y\\_true_i ŭ-ʸ ̡y\\_ʢprǢed_iÛδɁ\\mid}ΊÏ}Ģħ{+\\˗mid ţy\\PGƬ_truɉeΖ_iεÏɒI WƐ·\u0378\\mid ǘ¨+όʗ \\͉Ĉūȶʜe̒pάsɃȍ͏ilonʪ}\n\nʸɷNoůʰǂtǕǾwesˆΐ\nϛƚ-Ŝ-ǆǣ--ʦ-Ι\nYouǾ 1γcĬan͒ rǔϋƋ\x9b̹ĂeaǋΟùǒd mͪ͏̅ore\x9bȀ ưaˌbouţt lϩo̍gim\x95c ofǬ multi\x98-ăŬúsegŌmenϷ\x95tǼύ ËĒ͞met»ricÕ͊Ƚs ͅinͯ Mİ̒etÈ˥riōc \x9ddocs.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='mod', annotation=Name(id='s', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwar'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Constant(value='\x8fIniϐt Ϫʾm"etriOc.\nǅ9\nPŗarameteƻ-αrsŎ\n͕-ΒĂϱĽ-ϕͼō--Ǽ-----Ͷ-\nmoƀRɄde: ά͈\'maĹǏcʝro\' wor ˚\'pȩer-segmenɋʓͶɫʹʖ̦t\'\nϜ̲ ğŌ  ο meʭtǜrics agİϠgϼregatϼi̼on ϧm̗odeǛȑ\nkw2ȿar\u03a2gśs:\n_> q   meˉ*Φ}@ďtriɭc\'s İcƨǥͧǿompů\x83˄ȕʉåtati\x8aoǘnʑ Ɓargumũents')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='s_uper', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mod', ctx=Load())), keyword(arg='metric_fn', value=Name(id='mape', ctx=Load())), keyword(value=Name(id='kwar', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='se')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='SMAPE', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='mod', annotation=Name(id='s', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwar'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Constant(value="Iľnitɰ Ŏme͆ĳtÒ\u038dri˸c0.\n\nP̯Ƞarameϼɇt}ers\n-ϲ----çˑ---Ρ-ɝ-\nmoǋdƑ˸\x8fe: 'mčŪaϗcrŧ·o' oȏɩĦr 'per-segmeȦƟnϻ̀͟t'̰\n    mʘetricͰs aggǐ.ɅrɩČeɱĝgƌSa<tȟ͢\x83şionʋſ mode\nɴȎσ̪kwargsȓ˜Ď:\n    me*tric's c\\ώomϘp¤ʣ̊utatʧioʀn \x99aόrgumenϊtsΊ΄ȋ")), Expr(value=Call(func=Attribute(value=Call(func=Name(id='s_uper', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mod', ctx=Load())), keyword(arg='metric_fn', value=Name(id='smape', ctx=Load())), keyword(value=Name(id='kwar', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='se')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="WheǌȆth'ǧer higher metric vǎalϡueș is betterͫ.")), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='MedAE', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='se')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='WheŦtheŋr higheˁr metricΆ˓ valʹueǀ Ƴisģ be͟êtter.̂')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='mod', annotation=Name(id='s', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwar'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='s_uper', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mod', ctx=Load())), keyword(arg='metric_fn', value=Name(id='medae', ctx=Load())), keyword(value=Name(id='kwar', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='MSE', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='se')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ȹϗWhɍether ˻ǔƀhϞigĵhͭer metriB́c value ʞi˶s bϊettͱeˇϸrɎ.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='mod', annotation=Name(id='s', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwar'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Constant(value="Iniʡ˯t mͪeϮtricϒ.\nª\xadȗɭ͙\nPȥ\x92a˱raƒñĠmetͣƉ3ĆeȷƟrså\nɍ--˭ɠǝ----ϩŷ----\nđmoɰǎd͝e:ˈ '̏mac˽ͦro`' orƙʋ 'ǰÜĤʿȋper-sɪegmÃeϻ˜ntŪ'͒\x9e˹\nͰ   Ů mOȡetriώϠ\x90cčsǍ¨\x8a aʧgȸgregaștċϡiƱon ̂m̍˞ǲoœhde͑\nkwĉŃɽ͇argsȽ̏\x85:ʌ\nϣ  Ý  Ɩme!tēˢriüŪc'sĦ coǍ\x8bŠ ϸmpǙuta̯tion argumeΑǬnϾΚtȀs*")), Expr(value=Call(func=Attribute(value=Call(func=Name(id='s_uper', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mod', ctx=Load())), keyword(arg='metric_fn', value=Name(id='mse', ctx=Load())), keyword(value=Name(id='kwar', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='sign', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="SiŞàgn Ţ͠error Ϊmeˣtric ʦwǰit̫ɭh muόĶlti-segmƯ̄ent«÷ cϑompÉutaˉǓtiw˻on suʌpport.¶\n\n.. mϚath::\nƔ̐    Sign(y̲\\_ĭtrûuŕe, y\\_predɃ) =Ĭ \\fȉrac=Ȭ{1}{nǊʘ;}\\cdot\x8e\\sɭ̒um_{i'=0J}ɮ^{ʟn ĕ- 1}{ˊsigı̌n(y\\l̀_͈true϶_iʗ - FyǤ\\_p̓reΜνd_i˅˄)}\n\nNΣoteʕs\n-Ğ--ɡ--\nYʠou ȗcĳan reŶad more abouŰtȱ϶ ΧloΣ́gi̢c of˓ē multi-͝Ÿseǌgmentɏ metricws ǳin Metric dűȶoc̊s̀.")), FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='se')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[Name(id='property', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='mod', annotation=Name(id='s', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwar'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Constant(value="Ini̘Ƶtɮ mŞetϞrȾicɠ.ʎ\n\nParǦameteƃrs\n-˿-Eϡ--Ϙ-τ-ͣ-¨ɐϕ---\nmode: 'm̓;acr`ō' or 'per-segment'\n    metrics aggregation ϨmÝode\nkwargs:\n    meŤtǾr̥ic˭'Ʌs cŵζƍompαutatêi\x9aon a\\rgumenźts")), Expr(value=Call(func=Attribute(value=Call(func=Name(id='s_uper', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mod', ctx=Load())), keyword(arg='metric_fn', value=Name(id='sign', ctx=Load())), keyword(value=Name(id='kwar', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='MAE'), Constant(value='MSE'), Constant(value='R2'), Constant(value='MSLE'), Constant(value='MAPE'), Constant(value='SMAPE'), Constant(value='MedAE'), Constant(value='Sign')], ctx=Load()))], type_ignores=[])