Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='ModelType')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='etna.pipeline.pipeline', names=[alias(name='Pipeline')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='Transform')], level=0), FunctionDef(name='assemble_pipelines', args=arguments(posonlyargs=[], args=[arg(arg='models', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='ModelType', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='ModelType', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='transforms', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Transform', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Transform', ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='hori', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='n_models', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinsta', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=Call(func=Name(id='l', ctx=Load()), args=[Name(id='models', ctx=Load())], keywords=[]), orelse=Constant(value=1))), Assign(targets=[Name(id='n_horizons', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinsta', ctx=Load()), args=[Name(id='hori', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=Call(func=Name(id='l', ctx=Load()), args=[Name(id='hori', ctx=Load())], keywords=[]), orelse=Constant(value=1))), Assign(targets=[Name(id='N_TRANSFORMS', ctx=Store())], value=Constant(value=1)), For(target=Name(id='trans_form_item', ctx=Store()), iter=Name(id='transforms', ctx=Load()), body=[If(test=Call(func=Name(id='isinsta', ctx=Load()), args=[Name(id='trans_form_item', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='N_TRANSFORMS', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='l', ctx=Load()), args=[Name(id='trans_form_item', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='N_TRANSFORMS', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='valueerror', ctx=Load()), args=[Constant(value='Transforms elements should be either one Transform, ether sequence of Transforms with same length')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='N_TRANSFORMS', ctx=Store())], value=Call(func=Name(id='l', ctx=Load()), args=[Name(id='trans_form_item', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='lengths', ctx=Store())], value=Set(elts=[Name(id='n_models', ctx=Load()), Name(id='n_horizons', ctx=Load()), Name(id='N_TRANSFORMS', ctx=Load())])), Assign(targets=[Name(id='n__pipelines', ctx=Store())], value=Call(func=Name(id='MAX', ctx=Load()), args=[Name(id='n_models', ctx=Load()), Name(id='n_horizons', ctx=Load()), Name(id='N_TRANSFORMS', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Compare(left=Call(func=Name(id='l', ctx=Load()), args=[Name(id='lengths', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])), UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='l', ctx=Load()), args=[Name(id='lengths', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), Compare(left=Constant(value=1), ops=[In()], comparators=[Name(id='lengths', ctx=Load())])]))]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='n_models', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Compare(left=Name(id='n_models', ctx=Load()), ops=[NotEq()], comparators=[Name(id='n__pipelines', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='valueerror', ctx=Load()), args=[Constant(value='Lengths of the result models is not equals to horizons or transforms')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='N_TRANSFORMS', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Compare(left=Name(id='N_TRANSFORMS', ctx=Load()), ops=[NotEq()], comparators=[Name(id='n__pipelines', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='valueerror', ctx=Load()), args=[Constant(value='Lengths of the result transforms is not equals to models or horizons')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='n_horizons', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Compare(left=Name(id='n_horizons', ctx=Load()), ops=[NotEq()], comparators=[Name(id='n__pipelines', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='valueerror', ctx=Load()), args=[Constant(value='Lengths of the result horizons is not equals to models or transforms')], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='models', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinsta', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=Name(id='models', ctx=Load()), orelse=ListComp(elt=Name(id='models', ctx=Load()), generators=[comprehension(target=Name(id='__', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n__pipelines', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))), Assign(targets=[Name(id='hori', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinsta', ctx=Load()), args=[Name(id='hori', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=Name(id='hori', ctx=Load()), orelse=ListComp(elt=Name(id='hori', ctx=Load()), generators=[comprehension(target=Name(id='__', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n__pipelines', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))), AnnAssign(target=Name(id='tr_ansfoms_pipelines', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n__pipelines', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tr_ansfoms_pipelines', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])), For(target=Name(id='transformP', ctx=Store()), iter=Name(id='transforms', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinsta', ctx=Load()), args=[Name(id='transformP', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), Compare(left=Subscript(value=Name(id='transformP', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='tr_ansfoms_pipelines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='transformP', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinsta', ctx=Load()), args=[Name(id='transformP', ctx=Load()), Name(id='Transform', ctx=Load())], keywords=[]), Compare(left=Name(id='transformP', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='tr_ansfoms_pipelines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='transformP', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], orelse=[]), Return(value=ListComp(elt=Call(func=Name(id='Pipeline', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='model', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='transformP', ctx=Load())], keywords=[]), Name(id='horizon', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='model', ctx=Store()), Name(id='transformP', ctx=Store()), Name(id='horizon', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='tr_ansfoms_pipelines', ctx=Load()), Name(id='hori', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Pipeline', ctx=Load()), ctx=Load()))], type_ignores=[])