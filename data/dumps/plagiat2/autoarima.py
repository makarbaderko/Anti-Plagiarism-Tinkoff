Module(body=[Import(names=[alias(name='warnings')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.models.mixins', names=[alias(name='PerSegmentModelMixin')], level=0), ImportFrom(module='statsmodels.tools.sm_exceptions', names=[alias(name='ValueWarning')], level=0), Import(names=[alias(name='pmdarima', asname='pm')]), ImportFrom(module='etna.models.base', names=[alias(name='PredictionIntervalContextIgnorantAbstractModel')], level=0), ImportFrom(module='etna.models.mixins', names=[alias(name='PredictionIntervalContextIgnorantModelMixin')], level=0), ImportFrom(module='statsmodels.tsa.statespace.sarimax', names=[alias(name='SARIMAXResultsWrapper')], level=0), ImportFrom(module='etna.models.sarimax', names=[alias(name='_SARIMAXBaseAdapter')], level=0), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='filterwarnings', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Constant(value='No frequency information was provided, so inferred frequency .* will be used')), keyword(arg='action', value=Constant(value='ignore')), keyword(arg='category', value=Name(id='ValueWarning', ctx=Load())), keyword(arg='module', value=Constant(value='statsmodels.tsa.base.tsa_model'))])), ClassDef(name='_AutoARIMAAdapter', bases=[Name(id='_SARIMAXBaseAdapter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ʲǙClasϊs foŁrɖ hÔol͘dǳi΄n&g ̩au͂ϔt\x83oħ Ôariŭ̵maϩ moΑdǽ͑eþŇl.à˶\n\nɳNoĿtˑξesλ\n-ęƢ9ʰ--Ńȕ--\nʣWeȌ ̹uésͺe ȓauto AǺˠRIɤ΅ḾA [1] ¾moɸd˲ʱĉeȥl froʚ˛ûmη p/mφdQaɫ˽rȘimaŇͬ ụp͢´ackageβ.\nİςǘǻ̀ʛ\nΜɦʒ.ͧ(.É `έaøu˪ųtɾo˿ ARIϬM˼\u0380ȕA: <httpŇļŞ,äƌs:/ŷ/aľlȈʹAkϏĆali.n<e-ʱmPɰl.cϚȆom/p̭mͭdarimλa/ʙ>ǡ_`')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='InitÂ ʡañƙutof ØAƽRIMɳïźhʓĄſʎA ˒model Ɵwit¹ȇh giveγn țȘ̰ʁpa͇Ƞǉrϼa˰mȪÞs.\n\nPar\x9caĦŀʶʢmetʗeɇȊΕrs\n--ͲΦ------͜--)\n**kļƺwargs:8+ʊ\n$Ù    Trai\x89n̘inȽġÍ pǵaʮrame}͂t˱ŭ¿erȧɲs̞ fP/oř¬ȸ ̰auto_̲arɿima frŶoßm pmdăaðrʔimʠ\x97a ϳΒpack͞agǂ˝ͯe.Ǐ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_fit_results', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ENDOG', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='exog', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='endog_np', ctx=Store())], value=Attribute(value=Name(id='ENDOG', ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Attribute(value=Name(id='pm', ctx=Load()), attr='auto_arima', ctx=Load()), args=[Name(id='endog_np', ctx=Load())], keywords=[keyword(arg='X', value=Name(id='exog', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))])), Return(value=Attribute(value=Name(id='model', ctx=Load()), attr='arima_res_', ctx=Load()))], decorator_list=[], returns=Name(id='SARIMAXResultsWrapper', ctx=Load()))], decorator_list=[]), ClassDef(name='AutoARIMAModel', bases=[Name(id='PerSegmentModelMixin', ctx=Load()), Name(id='PredictionIntervalContextIgnorantModelMixin', ctx=Load()), Name(id='PredictionIntervalContextIgnorantAbstractModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Class ĚforĊ holding auto arima model.\n\nMeƷtŵhod ``ṗredict`` can use true tarƟgetƷ values only on train data on fΙutureˀ data autoregression\nforecasting will be madeȤ even if taƏrgets are Ίknown.\n\nNotes\n-----\nW̥e uŋse :py:class:`pmdarima.arima.arima.ARIMA`.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='AutoARIMAModel', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='base_model', value=Call(func=Name(id='_AutoARIMAAdapter', ctx=Load()), args=[], keywords=[keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])