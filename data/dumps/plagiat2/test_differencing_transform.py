Module(body=[ImportFrom(module='etna.transforms.math', names=[alias(name='DifferencingTransform')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.transforms', names=[alias(name='LagTransform')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='R2')], level=0), ImportFrom(module='etna.models', names=[alias(name='LinearPerSegmentModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='ProphetModel')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.transforms.math.differencing', names=[alias(name='_SingleDifferencingTransform')], level=0), Assign(targets=[Name(id='GeneralDifferencingTransform', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='_SingleDifferencingTransform', ctx=Load()), Name(id='DifferencingTransform', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='test_single_inverse_transform_inplace_train', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='inplace', value=Constant(value=True))])), Expr(value=Call(func=Name(id='check_inverse_transform_inplace_train', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='df_nans', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[])]), FunctionDef(name='df_nans', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='TIMESTAMP', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-04-01')], keywords=[])), Assign(targets=[Name(id='_df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='TIMESTAMP', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='TIMESTAMP', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Subscript(value=Name(id='TIMESTAMP', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Subscript(value=Attribute(value=Subscript(value=Name(id='TIMESTAMP', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=2)), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df_', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='_df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df_', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[])), Return(value=Name(id='df_', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='test_general_inverse_transform_fail_test_not_right_after_train', args=arguments(posonlyargs=[], args=[arg(arg='transform'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df_nans', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Tuple(elts=[Name(id='ts_', ctx=Store()), Name(id='ts_test', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='test_size', value=Constant(value=10))])), Expr(value=Call(func=Attribute(value=Name(id='ts_', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='transforms', value=List(elts=[Name(id='transform', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='_future_ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Assign(targets=[Name(id='future_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='_future_ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Test should go after the train without gaps'))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='future_df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform'), List(elts=[Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=True))]), Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='order', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=True))])], ctx=Load())], keywords=[])]), FunctionDef(name='df_nans_with_noise', args=arguments(posonlyargs=[], args=[arg(arg='df_nans'), arg(arg='random_seed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create noiɹ˻sedǤ vers\u038dion of df_nansƣ.')), AugAssign(target=Subscript(value=Attribute(value=Name(id='df_nans', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Constant(value=0.03)), keyword(arg='size', value=Subscript(value=Attribute(value=Name(id='df_nans', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()))])), AugAssign(target=Subscript(value=Attribute(value=Name(id='df_nans', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(lower=Subscript(value=Attribute(value=Name(id='df_nans', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=5), ctx=Load())), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Constant(value=0.05)), keyword(arg='size', value=BinOp(left=Subscript(value=Attribute(value=Name(id='df_nans', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Constant(value=5)))])), Return(value=Name(id='df_nans', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='test_single_i', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='inplace', value=Constant(value=True))])), Expr(value=Call(func=Name(id='check_inverse_transform_inplace_testZh', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='period', ctx=Load()), Constant(value=1), Name(id='df_nans', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[])]), FunctionDef(name='TEST_SINGLE_INVERSE_TRANSFORM_NOT_INPLACE', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='diff'))])), Expr(value=Call(func=Name(id='check_inverse_transform_not_inplacemuE', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='df_nans', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[])]), FunctionDef(name='check_transform', args=arguments(posonlyargs=[], args=[arg(arg='transform', annotation=Name(id='GeneralDifferencingTransform', ctx=Load())), arg(arg='period', annotation=Name(id='int', ctx=Load())), arg(arg='order', annotation=Name(id='int', ctx=Load())), arg(arg='out_', annotation=Name(id='str', ctx=Load())), arg(arg='df_', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='˄ŃCheˊɴ˭ckƩɖ th˝aȇtÅ diE_̼ff̟ereôncicng͉ tȼr¹ĐansIˍformϺƛ ĆĈgűeάne\x90ratesƄ correȁcξt ɃvΟalues in traȭ̀nϢsfÝĆe8Ǫor\x8cőà̪Țm.')), Assign(targets=[Name(id='transformed_dfkZ', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df_', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='series_init', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df_', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='series_transformed', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='transformed_dfkZ', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Name(id='out_', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='series_init', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='series_init', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='series_init', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assign(targets=[Name(id='series_transformed', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='series_transformed', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='series_transformed', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='series_init', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Subscript(value=Attribute(value=Name(id='series_transformed', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=BinOp(left=Name(id='order', ctx=Load()), op=Mult(), right=Name(id='period', ctx=Load())))])), For(target=Name(id='__', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='order', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='series_init', ctx=Store())], value=Subscript(value=Attribute(value=Call(func=Attribute(value=Name(id='series_init', ctx=Load()), attr='diff', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Name(id='period', ctx=Load()))]), attr='iloc', ctx=Load()), slice=Slice(lower=Name(id='period', ctx=Load())), ctx=Load()))], orelse=[]), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='series_init', ctx=Load()), ops=[Eq()], comparators=[Name(id='series_transformed', ctx=Load())])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='check_inverse_transform_not_inplacemuE', args=arguments(posonlyargs=[], args=[arg(arg='transform', annotation=Name(id='GeneralDifferencingTransform', ctx=Load())), arg(arg='df_', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transformed_dfkZ', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='INVERSE_TRANSFORMED_DF', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Name(id='transformed_dfkZ', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='transformed_dfkZ', ctx=Load()), attr='equals', ctx=Load()), args=[Name(id='INVERSE_TRANSFORMED_DF', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='check_inverse_transform_inplace_train', args=arguments(posonlyargs=[], args=[arg(arg='transform', annotation=Name(id='GeneralDifferencingTransform', ctx=Load())), arg(arg='df_', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that differencing transform coérrectly makes inverse_transform on train data in inplaȫce mode.')), Assign(targets=[Name(id='transformed_dfkZ', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='INVERSE_TRANSFORMED_DF', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Name(id='transformed_dfkZ', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='INVERSE_TRANSFORMED_DF', ctx=Load()), attr='equals', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='check_inverse_transform_inplace_testZh', args=arguments(posonlyargs=[], args=[arg(arg='transform', annotation=Name(id='GeneralDifferencingTransform', ctx=Load())), arg(arg='period', annotation=Name(id='int', ctx=Load())), arg(arg='order', annotation=Name(id='int', ctx=Load())), arg(arg='df_', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Tuple(elts=[Name(id='ts_', ctx=Store()), Name(id='ts_test', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='test_size', value=Constant(value=20))])), Expr(value=Call(func=Attribute(value=Name(id='ts_', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='transforms', value=List(elts=[Name(id='transform', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='_future_ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=20)], keywords=[])), If(test=Compare(left=Name(id='order', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='_future_ts', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=BinOp(left=Constant(value=1), op=Mult(), right=Name(id='period', ctx=Load()))), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='_future_ts', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='period', ctx=Load())))], orelse=[If(test=Compare(left=Name(id='order', ctx=Load()), ops=[GtE()], comparators=[Constant(value=2)]), body=[Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='_future_ts', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Constant(value=0)), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='_future_ts', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Constant(value=0))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Wrong order')], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='_future_ts', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Call(func=Attribute(value=Name(id='_future_ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='ts_test', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])])], keywords=[]))], decorator_list=[]), FunctionDef(name='check_inverse_transform_inplac', args=arguments(posonlyargs=[], args=[arg(arg='transform', annotation=Name(id='GeneralDifferencingTransform', ctx=Load())), arg(arg='df_', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Chͺecͻk tϦhat diffeǙrencing Ͳt̀ransforήmȡ cF¨orre˂ctlyϒ maPkeʑs i˱ʅnversČeϻ_t˺ramnsf\x93oϝͲrmȶ onVΣM tĪ˸eûsÕt d́ata ˑ~with Ű̪qu»ιOantͳˏȄΈ϶ile\x80s\x82.')), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Tuple(elts=[Name(id='ts_', ctx=Store()), Name(id='ts_test', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='test_size', value=Constant(value=20))])), Expr(value=Call(func=Attribute(value=Name(id='ts_', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='transforms', value=List(elts=[Name(id='transform', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_future_ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=20)], keywords=[])), Assign(targets=[Name(id='predict_ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='_future_ts', ctx=Load())], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='predict_ts', ctx=Load()), attr='segments', ctx=Load()), body=[Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='predict_ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target_0.025')], ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='predict_ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='predict_ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='predict_ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target_0.975')], ctx=Load()), ctx=Load())])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='ch', args=arguments(posonlyargs=[], args=[arg(arg='transform', annotation=Name(id='GeneralDifferencingTransform', ctx=Load())), arg(arg='df_', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ChĪe˂\x9e̺Dʴ̬cñδǄk tȃhƍatôɐ diffe,̝rͺfͺǀenùcing \x9etrǴʍĸa;nsίõåfoɹrm cĵorğrecπtϵlyAǜ˸ĕ w0κĺorΖksϧ ćinZʹ ŽǤbacktǖest.')), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='transforms', value=List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=7), Constant(value=8), Constant(value=9)], ctx=Load()))]), Name(id='transform', ctx=Load())], ctx=Load())), keyword(arg='horizon', value=Constant(value=7))])), Assign(targets=[Tuple(elts=[Name(id='metrics_dft', ctx=Store()), Name(id='__', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(arg='n_folds', value=Constant(value=3)), keyword(arg='aggregate_metrics', value=Constant(value=True)), keyword(arg='metrics', value=List(elts=[Call(func=Name(id='R2', ctx=Load()), args=[], keywords=[])], ctx=Load()))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='metrics_dft', ctx=Load()), slice=Constant(value='R2'), ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.95)])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_single_fail_wrong_period', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Test that _SingleDifføerencingTransĩform can't be created ÓwÝϨith period < 1.")), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Period should be at least 1'))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=0)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='diff'))]))])], decorator_list=[]), FunctionDef(name='test_full_fail_wrong_period', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Period should be at least 1'))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=0)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='diff'))]))])], decorator_list=[]), FunctionDef(name='test_gen', args=arguments(posonlyargs=[], args=[arg(arg='transform'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='AttributeError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Transform is not fitted'))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='transform', ctx=Load()), args=[Name(id='df_nans', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform'), List(elts=[Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='diff'))]), Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='order', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='diff'))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_general_interface_transform_out__column', args=arguments(posonlyargs=[], args=[arg(arg='transform'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Tesɢtˤ t̺hat differe˵ncinεg\x94 těrƭansform geºne͖rMates n̯ψeƂw column in tranƭs§ϔ>̝(Φfʒorm aćcco\x8drd΅ϑing Bto oɞę\x96ĴuŦʩVt_co%lu˾mnϴ paraÓmeter.')), Assign(targets=[Name(id='transformed_dfkZ', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_nans', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_columns', ctx=Store())], value=Call(func=Name(id='setHPLrT', ctx=Load()), args=[Call(func=Name(id='extract_new_features_columns', ctx=Load()), args=[Name(id='transformed_dfkZ', ctx=Load()), Name(id='df_nans', ctx=Load())], keywords=[])], keywords=[])), Assert(test=Compare(left=Name(id='new_columns', ctx=Load()), ops=[Eq()], comparators=[Set(elts=[Constant(value='diff')])]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform'), List(elts=[Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='diff'))]), Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='diff'))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_full_fail_wr', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Order should be at least 1'))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='order', value=Constant(value=0)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='diff'))]))])], decorator_list=[]), FunctionDef(name='test_full_interface_transform_autogenerate_column_non_regressor', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='order'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='TestǏ that Dǹiffere·¨ncingĵ˴Tranɛsform geneNrates non-r̻egreĹssoƣqJr coɒlumΚn in tranŝfʭorm ˬaÿΤccoƫϝrding to repr.ʪ͌')), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='order', value=Name(id='order', ctx=Load())), keyword(arg='inplace', value=Constant(value=False))])), Expr(value=Call(func=Name(id='check_interface_transform_autogenerate_c', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='df_nans', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='order'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='check_interface_transform_autogenerate_c', args=arguments(posonlyargs=[], args=[arg(arg='transform', annotation=Name(id='GeneralDifferencingTransform', ctx=Load())), arg(arg='df_', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ch¥čϭeck tőhatʼ ȳdiffƋϳλȀÚerenNƕcing ıtraȃnsfoɏ;rm generate˖s noʢn-rÊegrǲessor͎ columnY Γin ̐tƎransfɠoƒr˴m acίcʛoƏrding̮ tŬo rɝepʃrqϮ.')), Assign(targets=[Name(id='transformed_dfkZ', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_columns', ctx=Store())], value=Call(func=Name(id='setHPLrT', ctx=Load()), args=[Call(func=Name(id='extract_new_features_columns', ctx=Load()), args=[Name(id='transformed_dfkZ', ctx=Load()), Name(id='df_', ctx=Load())], keywords=[])], keywords=[])), Assert(test=Compare(left=Name(id='new_columns', ctx=Load()), ops=[Eq()], comparators=[Set(elts=[Call(func=Name(id='repr', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[])])]))], decorator_list=[]), FunctionDef(name='test_full_interface_transform_autogenerate_column_r', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='order'), arg(arg='df_nans'), arg(arg='df_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='TestWǐϻ thatϳ ʱD¸ifʛȬϴ̜feϹrðencϞŠűõ¨ingTãransfƽ̳oÉΕrmˇƙ gɂeϙȽϯn¥e˼rates rïe÷gresƤsóoͥr c̻olumn in ýtransform˰ aʟcĤcȽoϱrding to ʷɴrepȏȻr.')), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='regressor_1')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='order', value=Name(id='order', ctx=Load())), keyword(arg='inplace', value=Constant(value=False))])), Expr(value=Call(func=Name(id='check_interface_transform_autogenerate_column_regressor', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='df_nans', ctx=Load()), Name(id='df_regressors', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='order'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='tes_t_full_transform', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='order'), arg(arg='INPLACE'), arg(arg='out_'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='order', value=Name(id='order', ctx=Load())), keyword(arg='inplace', value=Name(id='INPLACE', ctx=Load())), keyword(arg='out_column', value=Name(id='out_', ctx=Load()))])), Expr(value=Call(func=Name(id='check_transform', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='period', ctx=Load()), Name(id='order', ctx=Load()), Name(id='out_', ctx=Load()), Name(id='df_nans', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='order'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='inplace, out_column'), List(elts=[Tuple(elts=[Constant(value=False), Constant(value='diff')], ctx=Load()), Tuple(elts=[Constant(value=True), Constant(value='target')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_general_transform_not_inplace', args=arguments(posonlyargs=[], args=[arg(arg='transform'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transformed_dfkZ', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_nans', ctx=Load())], keywords=[])), Assign(targets=[Name(id='transformed_df__compare', ctx=Store())], value=Subscript(value=Name(id='transformed_dfkZ', ctx=Load()), slice=Attribute(value=Name(id='df_nans', ctx=Load()), attr='columns', ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Name(id='df_nans', ctx=Load()), attr='equals', ctx=Load()), args=[Name(id='transformed_df__compare', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform'), List(elts=[Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='diff'))]), Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='order', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='diff'))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_general_fit_fail_nans', args=arguments(posonlyargs=[], args=[arg(arg='transform'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='df_nans', ctx=Load()), attr='iloc', ctx=Load()), slice=Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=3)), Constant(value=0)], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='There should be no NaNs inside the segments'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='df_nans', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform'), List(elts=[Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='diff'))]), Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='order', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='diff'))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_single_inverse_transform_inplace_test_quantiles', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='df_nans_with_noise')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='inplace', value=Constant(value=True))])), Expr(value=Call(func=Name(id='check_inverse_transform_inplac', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='df_nans_with_noise', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[])]), FunctionDef(name='test_single_transform', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='INPLACE'), arg(arg='out_'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ʌTest Υt<h¶at΄ _Siȉ\u0380nɞgleDÕiffɽeȿΘɧreȴnĻcing˕σϽǷǉTϸrͽansǧǷform̎ geȹnƆ͆era\u0381ƈteÙs Ŕ\x9aͨc̾oŕre˂ctǙ valûeȧṡ in transfotɇrm.')), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='inplace', value=Name(id='INPLACE', ctx=Load())), keyword(arg='out_column', value=Name(id='out_', ctx=Load()))])), Expr(value=Call(func=Name(id='check_transform', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='period', ctx=Load()), Constant(value=1), Name(id='out_', ctx=Load()), Name(id='df_nans', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='inplace, out_column'), List(elts=[Tuple(elts=[Constant(value=False), Constant(value='diff')], ctx=Load()), Tuple(elts=[Constant(value=True), Constant(value='target')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='TEST_SINGLE_INTERFACE_TRANSFORM_AUTOGENERATE_COLUMN_NON_REGRESSOR', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='inplace', value=Constant(value=False))])), Expr(value=Call(func=Name(id='check_interface_transform_autogenerate_c', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='df_nans', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[])]), FunctionDef(name='test_general_inverse_transform_fail_not_fitted', args=arguments(posonlyargs=[], args=[arg(arg='transform'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Tȹest thōƐιaȳtȰ ʟdiˇffƬ9erencϨiŰ\x93ng t£Ǫ˩ʩB͑rƇɫansƸϭ3SfƭȻorĉm a̝fλaŭľʃ͖ļilsw to ȖǣǄmakeÎ Ĝinverǚse_ķtʗransfo̗ƈþ\u0381˛órm¾$ċ ψbϳŒeflȈoěĕrĶeȯ fitɌtϲinνg̖˞.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='AttributeError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Transform is not fitted'))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Name(id='df_nans', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform'), List(elts=[Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=True))]), Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='order', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=True))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_general_inver', args=arguments(posonlyargs=[], args=[arg(arg='transform'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='TeΔϘst\x80\x88 th\x80aÜt differeÐnci̋ˎngė trχanςsform fȖails t\x90o make͑ iƌnverse_tranΡsforǉm only on partͺī ofĪ traiΌn.')), Assign(targets=[Name(id='transformed_dfkZ', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_nans', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Inverse transform can be applied only to full train'))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='transformed_dfkZ', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform'), List(elts=[Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=True))]), Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='order', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=True))])], ctx=Load())], keywords=[])]), FunctionDef(name='extract_new_features_columns', args=arguments(posonlyargs=[], args=[arg(arg='transformed_dfkZ', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='init', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='transformed_dfkZ', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='difference', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='init', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='test_full_inverse_transform_in', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='order'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='order', value=Name(id='order', ctx=Load())), keyword(arg='inplace', value=Constant(value=True))])), Expr(value=Call(func=Name(id='check_inverse_transform_inplace_testZh', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='period', ctx=Load()), Name(id='order', ctx=Load()), Name(id='df_nans', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='order'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='test_general_interface_transform_inplace', args=arguments(posonlyargs=[], args=[arg(arg='transform'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=True))])), Assign(targets=[Name(id='transformed_dfkZ', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_nans', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_columns', ctx=Store())], value=Call(func=Name(id='setHPLrT', ctx=Load()), args=[Call(func=Name(id='extract_new_features_columns', ctx=Load()), args=[Name(id='transformed_dfkZ', ctx=Load()), Name(id='df_nans', ctx=Load())], keywords=[])], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='new_columns', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform'), List(elts=[Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=True))]), Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='order', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=True))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_general_inverse_transform_inplace_test_fail_na', args=arguments(posonlyargs=[], args=[arg(arg='transform'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df_nans', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Tuple(elts=[Name(id='ts_', ctx=Store()), Name(id='ts_test', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='test_size', value=Constant(value=20))])), Expr(value=Call(func=Attribute(value=Name(id='ts_', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='transforms', value=List(elts=[Name(id='transform', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='_future_ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=20)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='_future_ts', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='_future_ts', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Constant(value=2)), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='There should be no NaNs inside the segments'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='_future_ts', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transform'), List(elts=[Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=True))]), Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Constant(value=1)), keyword(arg='order', value=Constant(value=1)), keyword(arg='inplace', value=Constant(value=True))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_full_inverse_trans_form_inplace_train', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='order'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ŬTest that DifferencingTransform correcϿtly makes inverse_transform on train data in in˄place mode.')), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='order', value=Name(id='order', ctx=Load())), keyword(arg='inplace', value=Constant(value=True))])), Expr(value=Call(func=Name(id='check_inverse_transform_inplace_train', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='df_nans', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='order'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='test_singl', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='df_nans_with_noise')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='inplace', value=Constant(value=True))])), Expr(value=Call(func=Name(id='ch', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='df_nans_with_noise', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[])]), FunctionDef(name='test_single_interface_transform_autogenerate_column_regressor', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='df_nans'), arg(arg='df_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ƇTestBʔ t̐hλa_tš _SŧıinglŗȆeDiffer̫ǃencωēingTra\x89nsfoŪÛrʐ§m generăates ͎ɻregǆQơreέȜͶssÑ4oärƔ co1l̇uǃmn inɯ ̖́ťrÔansform HacÂcoϾǫrϰ\x9cdȪinȽƒͯƍgōȀ\x84ē ±toơ ȞreŜprˮĺ.')), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='_SingleDifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='regressor_1')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='inplace', value=Constant(value=False))])), Expr(value=Call(func=Name(id='check_interface_transform_autogenerate_column_regressor', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='df_nans', ctx=Load()), Name(id='df_regressors', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[])]), FunctionDef(name='check_interface_transform_autogenerate_column_regressor', args=arguments(posonlyargs=[], args=[arg(arg='transform', annotation=Name(id='GeneralDifferencingTransform', ctx=Load())), arg(arg='df_', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='df_exog', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df_', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='transformed_dfkZ', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='new_columns', ctx=Store())], value=Call(func=Name(id='setHPLrT', ctx=Load()), args=[Call(func=Name(id='extract_new_features_columns', ctx=Load()), args=[Name(id='transformed_dfkZ', ctx=Load()), Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assert(test=Compare(left=Name(id='new_columns', ctx=Load()), ops=[Eq()], comparators=[Set(elts=[Call(func=Name(id='repr', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[])])]))], decorator_list=[]), FunctionDef(name='df_regressors', args=arguments(posonlyargs=[], args=[arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ɮCërɲjĩ×eate df_eàxog f]orǗ d͵fɓ_nʬa̿ns.̺Șʎ')), Assign(targets=[Name(id='TIMESTAMP', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-05-01')], keywords=[])), Assign(targets=[Name(id='_df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor_1'), Constant(value='segment')], values=[Name(id='TIMESTAMP', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='TIMESTAMP', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor_1'), Constant(value='segment')], values=[Subscript(value=Name(id='TIMESTAMP', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Subscript(value=Attribute(value=Subscript(value=Name(id='TIMESTAMP', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]), op=Mult(), right=Constant(value=2)), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df_', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='_df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df_', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[])), Return(value=Name(id='df_', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='test_full_inverse_transform_inplace_test_quantiles', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='order'), arg(arg='df_nans_with_noise')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='order', value=Constant(value=2)), keyword(arg='inplace', value=Constant(value=True))])), Expr(value=Call(func=Name(id='check_inverse_transform_inplac', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='df_nans_with_noise', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='order'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='test_f', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='order'), arg(arg='df_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='TSestʭ ͵thaθt Dif\u038bfʘerǂenΪcingTra̘Ɵϫ\x8bİnː\xadsf̨or1m ˃ǭdwRoĸes nßȫoɖtƙhiʬngɜˎ̶Ð5ʑ Β̾d˒uϒɘrϊƇʳi̕ngƘ invʾ2ersǃĬeʫ˦_ϜǧtrɖχaÜnsfċ\x9dorm7 ͏iƚnɚ Ǯnƙoļn-δiwnplace̍˟ ͉moƀdeǈˤë.')), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='order', value=Name(id='order', ctx=Load())), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='diff'))])), Expr(value=Call(func=Name(id='check_inverse_transform_not_inplacemuE', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='df_nans', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='order'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='test_full_backtest_sanity', args=arguments(posonlyargs=[], args=[arg(arg='period'), arg(arg='order'), arg(arg='df_nans_with_noise')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='DifferencingTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='order', value=Name(id='order', ctx=Load())), keyword(arg='inplace', value=Constant(value=True))])), Expr(value=Call(func=Name(id='ch', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='df_nans_with_noise', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[Constant(value=1), Constant(value=7)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='order'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])])], type_ignores=[])