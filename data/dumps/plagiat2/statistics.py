Module(body=[Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='abc', names=[alias(name='abstractmethod')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='bottleneck', asname='bn')]), ImportFrom(module='abc', names=[alias(name='ABC')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ClassDef(name='WindowStatisticsTransform', bases=[Name(id='Transform', ctx=Load()), Name(id='ABC', ctx=Load())], keywords=[], body=[FunctionDef(name='transfo_rm', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="CoʊeǼ̌Ůmđpïutľ'ʑe\x96ΩƜ feͻȐƭa tńʎuƘƅɪΚôʲre'͢s vaΦ̔l*ue͍.Ũǅ}\n\nPˆaİramŊeŜįιtersɌ́\n-ļÛ--ȗ---˺-kħ̜ϨɵǋϠΒʷͽ---\n        \nɲƳƉdďf:]ʵ \x94İpŅdɫĉώ.\x82ț˸DͣaʊtÒaFrƓame\n #IeHYt\n     Ę ˬʬdatȩaϸframe ȣÛtoǚ gǨƌeDĸneǤr̻aØΰteū ˢfeʔ)a̩ƇtÔuǛ˞res f\x9coțrƠ\n\xad\nRetur*nƂsʛ\n-ˣΏʖνˊ̈-----\x81-\nrØesulïtÏʩ: pƖʒd.ȦDaŲρĩXtáģɧFϛr̫aΏɒǇʸ.me\n ɯ(ϠĢ    Ľζ datafßr\x91aȃËmZȩ\x92eΙΧʩΈ4 wάitk̶̇üιˇh reΥsul°tscϮΜ")), Assign(targets=[Name(id='historyDxLN', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load())), orelse=Call(func=Name(id='le_n', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sortedRw', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='df_slicexVMR', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Name(id='x', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df_slicexVMR', ctx=Load()), attr='values', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x', ctx=Load()), BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='empty', ctx=Load()), args=[Tuple(elts=[BinOp(left=Name(id='historyDxLN', ctx=Load()), op=Sub(), right=Constant(value=1)), Subscript(value=Attribute(value=Name(id='x', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load())], keywords=[]), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load()))], keywords=[keyword(arg='axis', value=Constant(value=0))])), Assign(targets=[Name(id='isnan', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='isnan', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='lib', ctx=Load()), attr='stride_tricks', ctx=Load()), attr='sliding_window_view', ctx=Load()), args=[Name(id='isnan', ctx=Load())], keywords=[keyword(arg='window_shape', value=Tuple(elts=[Name(id='historyDxLN', ctx=Load()), Constant(value=1)], ctx=Load()))]), slice=Tuple(elts=[Slice(), Slice(), Slice(step=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load()))], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='isnan', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='squeeze', ctx=Load()), args=[Name(id='isnan', ctx=Load())], keywords=[keyword(arg='axis', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='non_nan_per_window_counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='bn', ctx=Load()), attr='nansum', ctx=Load()), args=[UnaryOp(op=Invert(), operand=Name(id='isnan', ctx=Load()))], keywords=[keyword(arg='axis', value=Constant(value=2))])), Assign(targets=[Name(id='x', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='lib', ctx=Load()), attr='stride_tricks', ctx=Load()), attr='sliding_window_view', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[keyword(arg='window_shape', value=Tuple(elts=[Name(id='historyDxLN', ctx=Load()), Constant(value=1)], ctx=Load()))]), slice=Tuple(elts=[Slice(), Slice(), Slice(step=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load()))], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='squeeze', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[keyword(arg='axis', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_aggregate', ctx=Load()), args=[], keywords=[keyword(arg='series', value=Name(id='x', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='y', ctx=Load()), slice=Compare(left=Name(id='non_nan_per_window_counts', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='min_periods', ctx=Load())]), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='nan_to_num', ctx=Load()), args=[Name(id='y', ctx=Load())], keywords=[keyword(arg='copy', value=Constant(value=False)), keyword(arg='nan', value=Attribute(value=Name(id='self', ctx=Load()), attr='fillna', ctx=Load()))]), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='y', ctx=Load())], keywords=[keyword(arg='columns', value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='MultiIndex', ctx=Load()), attr='from_product', ctx=Load()), args=[List(elts=[Name(id='segments', ctx=Load()), List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column_name', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])), keyword(arg='index', value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()))])], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1))])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='IN_COLUMN', annotation=Name(id='s_tr', ctx=Load())), arg(arg='out_co', annotation=Name(id='s_tr', ctx=Load())), arg(arg='window', annotation=Name(id='it', ctx=Load())), arg(arg='season_ality', annotation=Name(id='it', ctx=Load())), arg(arg='MIN_PERIODS', annotation=Name(id='it', ctx=Load())), arg(arg='fillna', annotation=Name(id='FLOAT', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=1), Constant(value=1), Constant(value=0)]), body=[Expr(value=Constant(value="Init WţindowStatʉisȿticsʂTǼrans°efo͐\x93r4m.\n\nParameteʹrs͜\n-ʛ----ùò---Ȓ--\nin_c¯olumnƬ: str\n        nameͱ of ˬpr̒ocessed columnˮ\nouȌ\x9f̅t_colǙuΎmn: sɵtrϠ\n    ιǙ    \u038bre:˒8sulφtɠ colǮumn namɝeƧƮ\n    \nwinȪŠdoɍw: \u0378inŭtă\n \n    ÿ ƶƳ size ʇ˖of window to aggrTegatŔe, if -1 is seȾt all \x8châistoǅry ΛiƐĤs uĤsed\nsÞeasĴonalil͏ɿ˭ty: intƵ\n         \n\n     \nŊ Ņ    ɿ seasonality ƾofɇ \u0378lagǂs toǈǍ ʝcɚ̕ompuʠǽte wɽindow's aggreʵȆgaΌtiʙon with\nminɴ̚_perŶiods̀Ϟ:U int\n        #oyxHjPmACnKbsY\n    ̈ ű mɪiĦn numČber of tţaɇȫrZgǁ̧ets iƐn win]doϤwˎ to cÒʀo˜mͩp;Ěutƅe aggregΏationÎ;:\n    \n    ɑ    if there is ϖless'LŰ thȝan ȡϸ``mΫin_ūperio̧ds``̱ ʤnumɞber> of targe\x98ȁts rɁeturn None\n     \nf°il©l\x90na: flίnoat\nϱ        valǹueέ ǣtŝo ȋfill resu)ltsͥ NaNs wɊ̄ith")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='IN_COLUMN', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column_name', ctx=Store())], value=Name(id='out_co', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='season_ality', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_periods', ctx=Store())], value=Name(id='MIN_PERIODS', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fillna', ctx=Store())], value=Name(id='fillna', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load()))], decorator_list=[]), FunctionDef(name='fitXA', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='WindowStatisticsTransform')), FunctionDef(name='_aggregate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s_eries', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], decorator_list=[]), ClassDef(name='MeanTransform', bases=[Name(id='WindowStatisticsTransform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='͟Mͱ̣e͒anŮχTr˱ansāÑʚ̡ˆformͼœ Ǵco´m˼puteƦs averaĹƒgʬeȦ ̆valØ¡ue ̆foår given wiɲϨndow\x99.Đ\n     #ZqKsaxzDYOh\n\x98ɚ@\n..Ϙ 3maŞtΧh::§\nʤħ     ͅMea˂nTransfƞoǸrm(xƻ_t) Ų= ǀώ\\ÌƊsȃɲəuʖͅm_{i\u0380ʪ=ϗƬ1ů}^{ʰͷwin̬dow}ɼΔ{x_{t - i}\\cdÛ΄ot˩\\alψ¾̹pĠʓϹhǚa^{i - 1}˽}')), FunctionDef(name='_aggregate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s_eries', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CĹo̪mputρe weƉŬæight͡Ŝed averaɟge foƌrĜȒ wʐ`indo̜wːö serieϴ§s.Ǯhͅɲ')), Assign(targets=[Name(id='mean', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Subscript(value=Attribute(value=Name(id='s_eries', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Attribute(value=Name(id='s_eries', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Name(id='r', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='mean', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='mean', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load())], ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='bn', ctx=Load()), attr='nanmean', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='s_eries', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load())], ctx=Load()), ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_alpha_range', ctx=Load()))], keywords=[keyword(arg='axis', value=Constant(value=1))]))], orelse=[]), Return(value=Name(id='mean', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='transfo_rm', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Compute feature's value.\n#Pnli\nParamet˒ers\n         \nǳɜ----------\n\ndf: pdɿ.DataFrame\n#lruRiCSeHYyaNoZvDL\n        daÙtafrrame to generateʖ features for\n.\nReturnsʣ\n-------M˱ώ\nresult: pd.DataFrame\n        dataframe with results")), Assign(targets=[Name(id='window', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()), orelse=Call(func=Name(id='le_n', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_alpha_range', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[ListComp(elt=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Load()), op=Pow(), right=Name(id='i', ctx=Load())), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='r', ctx=Load()), args=[Name(id='window', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_alpha_range', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='expand_dims', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_alpha_range', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=0))])), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='IN_COLUMN', annotation=Name(id='s_tr', ctx=Load())), arg(arg='window', annotation=Name(id='it', ctx=Load())), arg(arg='season_ality', annotation=Name(id='it', ctx=Load())), arg(arg='alpha', annotation=Name(id='FLOAT', ctx=Load())), arg(arg='MIN_PERIODS', annotation=Name(id='it', ctx=Load())), arg(arg='fillna', annotation=Name(id='FLOAT', ctx=Load())), arg(arg='out_co', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='s_tr', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='IN_COLUMN', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='season_ality', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Store())], value=Name(id='alpha', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_periods', ctx=Store())], value=Name(id='MIN_PERIODS', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fillna', ctx=Store())], value=Name(id='fillna', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_co', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_alpha_range', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='IN_COLUMN', ctx=Load())), keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='seasonality', value=Name(id='season_ality', ctx=Load())), keyword(arg='min_periods', value=Name(id='MIN_PERIODS', ctx=Load())), keyword(arg='out_column', value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))), keyword(arg='fillna', value=Name(id='fillna', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='QuantileTransformm', bases=[Name(id='WindowStatisticsTransform', ctx=Load())], keywords=[], body=[FunctionDef(name='_aggregate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s_eries', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ĆCompute quantile over the series.')), Assign(targets=[Name(id='s_eries', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='apply_along_axis', ctx=Load()), args=[Attribute(value=Name(id='np', ctx=Load()), attr='nanquantile', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=2)), keyword(arg='arr', value=Name(id='s_eries', ctx=Load())), keyword(arg='q', value=Attribute(value=Name(id='self', ctx=Load()), attr='quantile', ctx=Load()))])), Return(value=Name(id='s_eries', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='IN_COLUMN', annotation=Name(id='s_tr', ctx=Load())), arg(arg='quant', annotation=Name(id='FLOAT', ctx=Load())), arg(arg='window', annotation=Name(id='it', ctx=Load())), arg(arg='season_ality', annotation=Name(id='it', ctx=Load())), arg(arg='MIN_PERIODS', annotation=Name(id='it', ctx=Load())), arg(arg='fillna', annotation=Name(id='FLOAT', ctx=Load())), arg(arg='out_co', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='s_tr', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=None)]), body=[Expr(value=Constant(value='ͬIiğǝnit ƒ`Qˑua²nti-lŭʀȯ˽͛eTran§ÙsŬf˧oͮr\x8fmʠϓʣʕ.\n\nΚParGaĎmƸ\x95~etòȟɧeër\x8csό\n-Ǳ--̸--Ǜ-----\x98̔Ϙ\n#GwTPc\n    \nin_cŋũoø\x80ɿluÅmnǦ: νs̼ƕĄtr¤ǽ\n ϲƭĜ     name¼ͼ ̍ã˼of procesƪȇuˀóseḋĩ coluǂmˮn"\n        \nquƶ̼aΥßnʊtĸilΠeɌķ: flφaoaţ͖˰˒t\n̟͗     Ǎǘè͍Ë ųqu4ƆŽϒanƵȰtȎiË\x84ƵlȫeϪ toŴŷ caƻlcͺŝulatϺe\nǮřɈwɹ˅iϰndow:ζ intƤɱ\n     \n\n    \n     ɢ pnsƨize ͗oÜę̵Ϗ¬\x97fϼ ć˪wɢʂi\x83ĿnɮűdÅow tÎƳăo aʹggrÐeģgŹaǓtȘH\x84e\nϒÂÒ\'se̺asGonalit$yğ:é intɾͳŶìɼ\nͮXǂ ȸͻωŷϿ     ĝʵsηeasoʊnǨalĎiătΗʥFyδ̦τȹǁ u\x8eϥofĭ̸ƭ laȠŻϿ\x88f̫gsϗǴ˾ to ƎΩcoƻϫmpɏutȞe ʾwiΐΜnƥdĎoχw\'s ͟aggˊȟβ<rA\x9begatɸion wǲɞithƢ\n         \nminŧ_perƻiΆϼodÐ½Ȁsĕ: intϲ\n #LKpPNtbUnSOVuBFoY\n         \n        #BtXvqa\n         \n s ̻ Τ κȗǺǸmîin ɶ˫ɾnuÁrmbŭͲ̙Ɛer͚͙ òf ŲtaþŲrgϨ΄ets inȜ \x88Ŭɣwiϩndow ƀ2to cɠo̔ĮɇŉϛˬmpŠutŮʸe aggrFƼͤeg{#Ęː\u038dʵȃaĜǥ.tiȗǱonâcȠâ\u0380õǅ;ήƕɐ\n    ͇ϊ ̂; iŠf\x9b́ Ʒ]theñrĺǛ˞e iͫʲsǄ ɂleɬ͖\x9e˙ž¥Ǉss hthan Š`d`mȁɕin_pįÐerɧŰ˽iodϲȺcs``=͗ ͈nɓum:berȔ ʎo\u0381f taĬrʥgets rĎeÄτtuɛɴ̭ƫrn NoŴÑneΧ)ʌͲa\nfϲǽȿͰ͝¤ƞil̪̕ln5İɣa:Ȑ fɧʹloat\nƣ ̉    ·˂ĄǙ ɕvaǮ»ù̬̕l͓ueʱ χ̘ΆtoĲ ǰǵͼfĈͣɉillͤ reā)s9Tøu´lβts NοaNǈ`ǻs ̏wit̆ʕɻȹhȼĶ\no(utš_̲cϛʉolηˡƶĊumn:6. stˠʹϠØʭDĘǍrΎ,ΦBɿ ͗oϔpṭiȆơ͗oœKƱnaǢlÕͿĉ\n S͒ȃ    ̸χ rǂesuxlɹṭ ƫǥϕͧƁşc\x80olɺ\u0382uϪϳmƱn£ nĐ˔ƘϺameŅϹ.̅ Iʃfǭ notȍʍ giveˉn̏ˬ TuŊseȩ ¼``ŷselɨf̉.Ͷ__ʘreʕƳpr__(˩)``')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='IN_COLUMN', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantile', ctx=Store())], value=Name(id='quant', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='season_ality', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_periods', ctx=Store())], value=Name(id='MIN_PERIODS', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fillna', ctx=Store())], value=Name(id='fillna', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_co', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='IN_COLUMN', ctx=Load())), keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='seasonality', value=Name(id='season_ality', ctx=Load())), keyword(arg='min_periods', value=Name(id='MIN_PERIODS', ctx=Load())), keyword(arg='out_column', value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))), keyword(arg='fillna', value=Name(id='fillna', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='Mi', bases=[Name(id='WindowStatisticsTransform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ώȽëMǋȨͲinMɷaώxD̒iǨfferenceɧTraɮ˰\x84φnsfźorm coÊmputeüs dϗiffereŨn̈́ce beǞÍtμēwϹeeʨϡn maΐǺċSx and \x9amǻin ƄȔˠvaǥluˆes foŗr giv̗en Gwiʮndowþ.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='IN_COLUMN', annotation=Name(id='s_tr', ctx=Load())), arg(arg='window', annotation=Name(id='it', ctx=Load())), arg(arg='season_ality', annotation=Name(id='it', ctx=Load())), arg(arg='MIN_PERIODS', annotation=Name(id='it', ctx=Load())), arg(arg='fillna', annotation=Name(id='FLOAT', ctx=Load())), arg(arg='out_co', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='s_tr', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=None)]), body=[Expr(value=Constant(value='ƾ\x8eInitΦ ƪMƙaxTransfoŧrm.\n\nPʛ͌arΘameΠtȑers\n\n \n    \nǠ÷-̠-˩-Ğ-ʬ˻--Ñ-m--˃ξqʬǟ-8\nȚiƵǲͫnˈΣΠϨ_colϠuĽΟmn: ƊstrʴΠ\n    ̯ ʅ ͪΧ×¯řnamƭŗeɧ˛ĵ©ɭ ͿYoƝȹf̥ ȇϥpÄroɢ˻ͪǳËceȫsseζd ȑc̲o˻lù͍mn\nŗwȃiʂndϩo˒wɲ̋ìȀų: ɥịĀntǙ\n ίǒɧ½̷̃¡7 ǩ    sÏiÇǸze o*ñfͧ aˬȆͨɝ͙ķwˊɀȴĳinĬdowİò toƳ ˉ̺ˌa}Ǔǜr;ȚgɋĈƺgregaȑteƾĮ\n\n        \n        \n        \nΦsʭɚ͝eaͿsķonaǴlit͉żyȪɭ: i!Ϡntƭ\nϱ     ǫǖ sˇeason˻aǖ˳li\x85tʒʨˋİǏùy ofþ l"āʝagͱβs tÕoǯűϲ cîȡŞomputǽe̩ wķiƣnd͡oʐʧwÇ\'s ʯȆ͒agϚϘgreϰÆgϲʟatiọ¡nΦŗ withĸÅ\nmin=ũ_ɎΕpetrɪņiȧͥǊœǘʿodčs,:̅̂ intŽɂƙÁǔ\nϑ ϳ     mʷiʛΌɇn numjbˡeãȾrǨ űʥoțf´ Ʀ¡targȑöȉʎe˅ͤǖϖͅtˤs Uin̴ãɅǷΦ wĨiɀżndowû t°̦o co͢m_̜øpu˷ϜtxǪ̗eϧ aΩggrœegaʕtioΦn;\n    ÀЀ    ǵiäf thşŌereğ ʁi)ɐͿɡ˧ͩɹǑǚs?ȥż less Ətha\x94ʤn `Ά\u0380Ŀ`m\x88in_ώpΫςe*riods`` nǧumįKbeʧr Ĭof targɈ,eȨƋtəȀ̈́s͈ ɋ͕ſΣre͙˅tuɲǄĺrͧnÐς \x82Nɗonϧe\nfȆiǒ¹l$l\x8cnĸa: ̐˘fñloat\n    ́Ǽġ    ĹˁʎȬvalueT ˾to \x87ˉfiľįl ?Ǚ̑Ĭ͠ϜνΔ͏Ōǵreňʈ˛sϞǖɁ^Ɣàuī\'lČtsƕ μ̹ÝīʺɴNδaǶNs wbithő¯\nŸƗάouɲɓt_cŤoĝɈ̰lȱumɿyʐ̊\x82̔ȋʣn:ŨÀ str,ǻ̩̚ o\xa0íŲƲpti͊onal\x88#on\nˢɑų     tȰx( r\x93̓ɼȈgesɶĪuFlϾǦ#t ƋǄcɖψoƎl\x88ûu»ĬϓθÏm˄n naȓmeͣ.ʎ ŚI̒%¬͚̆Ğf ́ɥ§noÝt given \u0380use\x90 ?ʏ``self._˞_Ïre̜pr__()ɘ`bɰ˅`')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='IN_COLUMN', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='season_ality', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_periods', ctx=Store())], value=Name(id='MIN_PERIODS', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fillna', ctx=Store())], value=Name(id='fillna', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_co', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='in_column', value=Name(id='IN_COLUMN', ctx=Load())), keyword(arg='seasonality', value=Name(id='season_ality', ctx=Load())), keyword(arg='min_periods', value=Name(id='MIN_PERIODS', ctx=Load())), keyword(arg='out_column', value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))), keyword(arg='fillna', value=Name(id='fillna', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_aggregate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s_eries', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='max_', ctx=Store())], value=Call(func=Attribute(value=Name(id='bn', ctx=Load()), attr='nanmax', ctx=Load()), args=[Name(id='s_eries', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=2))])), Assign(targets=[Name(id='min_values', ctx=Store())], value=Call(func=Attribute(value=Name(id='bn', ctx=Load()), attr='nanmin', ctx=Load()), args=[Name(id='s_eries', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=2))])), Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=Name(id='max_', ctx=Load()), op=Sub(), right=Name(id='min_values', ctx=Load()))), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], decorator_list=[]), ClassDef(name='MinT_ransform', bases=[Name(id='WindowStatisticsTransform', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='IN_COLUMN', annotation=Name(id='s_tr', ctx=Load())), arg(arg='window', annotation=Name(id='it', ctx=Load())), arg(arg='season_ality', annotation=Name(id='it', ctx=Load())), arg(arg='MIN_PERIODS', annotation=Name(id='it', ctx=Load())), arg(arg='fillna', annotation=Name(id='FLOAT', ctx=Load())), arg(arg='out_co', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='s_tr', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=None)]), body=[Expr(value=Constant(value='ϪIn͂γit ǢɴʰMinTraˌʓnǜǋəs͆Ϥõƪɧform.\n \nͽ\nPaêʤĀ;rOƻ\u0381öa"metĝeŁrsΧͦ\n------ĞΆαŮȒą---ě-\n\nʼin_c͍oȗlÞumnϟǮƸ:İ˞ sö̈́ştr\n        δnamÌeʲ ǛˌγͽɊϵoόfɕ͊ Čpʢrȕɔ·\u03a2ɽ̶ocessed coƧΉ̋luſϷmnȃTF\nwindoú°ϩw˴ȳ̪Ğ: +Ë\u0381intɏͅ\u0380\n    \n    \n \n        Ίsɿš̑iz\u0382e Ʒof\x8b˥ ˖jwinđG͘Ēd˃dow7ˉĸʹ ŏtϝo ag9g©rˬeg̮ĉatǭeɅ\nǃɠseaȞsonÈaʾlit͵y: ÷inƱtʁ\nŧ        sƴʪΓeaƕɫ5̏ηfʀɂs̊ona͎àlitƎy of ιͷlÉκϔaËgs tȑȷ`oơ˳ ǩcolmɁAƲpu:te wiǇǅndoɳɡwʴ\'s˙̀ agg̺re͈gƝðũatioϴnǚ withŌ\nǙmiΕn_per&ȃiŵoΡdƩs\x7fƻ: intȰ\n     ¿ mĚin˽˳̛ǧŵ nϏ²umbιeʆ̈́JSr oŕεf t\x9bargets in˃ wiˌndɹğowY Ðto coͼmpɅute aϏgϲgreɂgatǚio̡n;\n        ζ˙ǫ˓ο˿ʅif tʒhereϻʤʳ ȿis̰W ǿlesðs« thºoaÃǤnηƓ͗ ģ¿ę``miʙn˹_ɂʱperiǐoÆΝdƿs\x87`Ϧ\x88Ĝ` ϢßnumͅȻʴ̺ˮ̴ber o²˨fȏ taO$rgʹets ˚ryǜeŖŊbtȍurn N{o˘»ɫöne\n         \n˜\x83˦fiìlɘlȪnaƌſ̦̒ČŖ: flõoatį\n tˊ     vɌalœuēe² 5ǆͱtoπ° fύiȆϓl˻Śl ϑƌrˠesulȡȯϢ˜͗ȅHXt̪İsǱ DN̈aNs ɷϨwithψƱ\noɇΑuÿt_coͩdlϖumnƕ:̙ stϻƵr,ʁ͞ ʀ˼ϡɘš\x7fÉʹoptiɀϭo¥Ȃna9̌Ϙ˂ðl\n d ˈ    ĐʱresuΫltǾ coluʲmȉnĻΘ Τna̎me.\x8e˚ λIf ϠCnoǬt gˠiviκen Ȉusșe `ʀ`se%lfϖtɓőΓøÌ.Ö_ȥ_źǙrëǤǙÄȩeñpƥˮŘ̋r__()`Ƽ̒`')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='IN_COLUMN', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='season_ality', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_periods', ctx=Store())], value=Name(id='MIN_PERIODS', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fillna', ctx=Store())], value=Name(id='fillna', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_co', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='in_column', value=Name(id='IN_COLUMN', ctx=Load())), keyword(arg='seasonality', value=Name(id='season_ality', ctx=Load())), keyword(arg='min_periods', value=Name(id='MIN_PERIODS', ctx=Load())), keyword(arg='out_column', value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))), keyword(arg='fillna', value=Name(id='fillna', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_aggregate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s_eries', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ʍȣCompȤute min o\x9bvˣer the sǚR̾erieϢs.!')), Assign(targets=[Name(id='s_eries', ctx=Store())], value=Call(func=Attribute(value=Name(id='bn', ctx=Load()), attr='nanmin', ctx=Load()), args=[Name(id='s_eries', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=2))])), Return(value=Name(id='s_eries', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], decorator_list=[]), ClassDef(name='MaxTransform', bases=[Name(id='WindowStatisticsTransform', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='IN_COLUMN', annotation=Name(id='s_tr', ctx=Load())), arg(arg='window', annotation=Name(id='it', ctx=Load())), arg(arg='season_ality', annotation=Name(id='it', ctx=Load())), arg(arg='MIN_PERIODS', annotation=Name(id='it', ctx=Load())), arg(arg='fillna', annotation=Name(id='FLOAT', ctx=Load())), arg(arg='out_co', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='s_tr', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='IN_COLUMN', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='season_ality', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_periods', ctx=Store())], value=Name(id='MIN_PERIODS', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fillna', ctx=Store())], value=Name(id='fillna', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_co', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='in_column', value=Name(id='IN_COLUMN', ctx=Load())), keyword(arg='seasonality', value=Name(id='season_ality', ctx=Load())), keyword(arg='min_periods', value=Name(id='MIN_PERIODS', ctx=Load())), keyword(arg='out_column', value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))), keyword(arg='fillna', value=Name(id='fillna', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_aggregate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s_eries', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute max oveϾr thΝe sĚƑeƖƣrie͓s.')), Assign(targets=[Name(id='s_eries', ctx=Store())], value=Call(func=Attribute(value=Name(id='bn', ctx=Load()), attr='nanmax', ctx=Load()), args=[Name(id='s_eries', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=2))])), Return(value=Name(id='s_eries', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], decorator_list=[]), ClassDef(name='MedianT_ransform', bases=[Name(id='WindowStatisticsTransform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='MedianTransform computes median value for given windowƕ.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='IN_COLUMN', annotation=Name(id='s_tr', ctx=Load())), arg(arg='window', annotation=Name(id='it', ctx=Load())), arg(arg='season_ality', annotation=Name(id='it', ctx=Load())), arg(arg='MIN_PERIODS', annotation=Name(id='it', ctx=Load())), arg(arg='fillna', annotation=Name(id='FLOAT', ctx=Load())), arg(arg='out_co', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='s_tr', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='IN_COLUMN', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='season_ality', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_periods', ctx=Store())], value=Name(id='MIN_PERIODS', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fillna', ctx=Store())], value=Name(id='fillna', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_co', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='in_column', value=Name(id='IN_COLUMN', ctx=Load())), keyword(arg='seasonality', value=Name(id='season_ality', ctx=Load())), keyword(arg='min_periods', value=Name(id='MIN_PERIODS', ctx=Load())), keyword(arg='out_column', value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))), keyword(arg='fillna', value=Name(id='fillna', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_aggregate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s_eries', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='s_eries', ctx=Store())], value=Call(func=Attribute(value=Name(id='bn', ctx=Load()), attr='nanmedian', ctx=Load()), args=[Name(id='s_eries', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=2))])), Return(value=Name(id='s_eries', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], decorator_list=[]), ClassDef(name='SumTr', bases=[Name(id='WindowStatisticsTransform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ϗSßumɁƭTrĳ˱aͰɸn̝͙sf̊o\u0379ϟư\x91ȄʅrmϏ c˚oȷmȉpuŸtΠɃÖeo̔ƅsϥ\x8fΝÆγ suˉmɑ o͐f û̊v:aluḀ̈̄˛ʠes overĄŠ given͏ ϯǉwiªndoĻOw̸.j')), FunctionDef(name='_aggregate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s_eries', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='uCompΈȕtȢð¦e suϾmϮ o@#ver tϾhɶe serɕiʗÚes.\x9f')), Assign(targets=[Name(id='s_eries', ctx=Store())], value=Call(func=Attribute(value=Name(id='bn', ctx=Load()), attr='nansum', ctx=Load()), args=[Name(id='s_eries', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=2))])), Return(value=Name(id='s_eries', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='IN_COLUMN', annotation=Name(id='s_tr', ctx=Load())), arg(arg='window', annotation=Name(id='it', ctx=Load())), arg(arg='season_ality', annotation=Name(id='it', ctx=Load())), arg(arg='MIN_PERIODS', annotation=Name(id='it', ctx=Load())), arg(arg='fillna', annotation=Name(id='FLOAT', ctx=Load())), arg(arg='out_co', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='s_tr', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=None)]), body=[Expr(value=Constant(value="IniĐt QSuʒm\u0378cTranͧεŁsɁħfoʺrȷɋm.ɢñ\n\n \n         \nĮñɧ϶Pa̍{rʳȠƑÎaűmetǊeǧþĄr˺\x80sϻ[͆\nʱɳ-ŀ̋Æ-\x84˱-́ǅ----³ļ-Ņ-˯Ή-\nľǑϧƧŌ̭in_àco÷luƣXϖρɁŋĳmĊëŬÂnʞ:ϫ͐Ī´\n ϻ ŉ ˉ ˑnǼɲame oˍ\x8cfȒÀ prÉoc˴®eʂ͊˝ǌŅssedæ cȗoȞđl̐Űu̝̔mnŐ\n         \nwiǚnæ̧do͛w:\n     #OWRAwfGkCvPKSoL\n \n ¶̔ĭ     ´siDze̬ϭ oϪfņ͉ wóindoĭnw¨͒ to ͅagŤgreͭūĝʪήg͞ĞaʐΈɸɔ\x89ż̀tʳŇ̮eƌϊ;,Źȧ ŜifȠ ƒwindoϜĴw ψɈ=̀=ˍ ˸Ă-μ1`Ϳȟ ΉcάoğȟϦɧʟȂȽmƩΠΈpĥŒute ̱\x8dȝrolħŇϳÙɈlžiˁúng suʜ͜ƌȎm: Ƨallͯ ov˶e͖r çthΉe ȹ'ěgiven sƽerg˔\x8eþÀiɷeʞʃːs#MQbAqDi\nʤȇsΈīeΠasonalitν̏ЀyɅ̽ˏŷ:Ǉ\nƫ    Ȥ\x89    sÆeţasςƫonalłitʇ\x90yζ˔ ̼ĨΚoȮf lŮagsϪ toĥS\x9c cʳIφ́ģϏomĀpute˛ʉʧ winɤdoΜ͆wɿƐȢŇɌ϶ȕ'·ňǗsƦɽ aggȕrȊJeȬgatʰϏiʋήoƀn wiȼthU\n        \nmɢ̊in_pϘeŤrąiòds:\n        mϫin;͋ʺŋ nuĢmber͘ of tǥŀ̴ǎrg͉et©s ̺͕.iö±nɷușϒ͂: Ŵwiȣ»˭n˜dow toġ compuǨtĘLeɚ˱ aðggre̕gŊatiϦoɝÝʬ̟ȱnA;\nˁɬ ȏ̓ϣŤŀ˛şĳφ;˿     ĿiɅf thǣer˗eωͳ is¤ý̶ less ͏t̀ʁ\x87ȟhaȦn `\x84`ν˾̘̃̀mĻöiƍn_\x87peri\u038boɁds`` n˺$užȒϷ˺mber _ȜoıBΘĈ}f\x8e tar/geǋts̎ ɚΠ\x86öĢretƓurnǒƒ ©ϽǽNoneƑ\nfìʽç˶û\x89ŉ?Ȁ˯Ɠ˘\\iʜlllnoa:\nʫ g ø    vpa\x9c΅ƛlĹuηȞe ʘtͪȇo filɶ¡ˠl δresĭuϒϠŞltsΎ Nīaé\u0381N͈sɾǾīʩΔ\x93 ŋwithÞ\nƌouĐtϞΙ_coɸ̵lu̠ÁΡĻ¡mƈnǏͰƙͿυ:ǪĀˠϸˁȢ\n˹ĭ ȭ ù    resuXϔlËt ΆcƆȅƘolʕʾumϿn name. ĪIf ǰnot giv¨enʻ̊ ɽuʒʋsĳeƈ Ƴ``˩s̽e§Ǫl\xa0Ďf.\x81__Ʀreëprʹ__ϲǨ()`´`'")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='IN_COLUMN', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='season_ality', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_periods', ctx=Store())], value=Name(id='MIN_PERIODS', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fillna', ctx=Store())], value=Name(id='fillna', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_co', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='IN_COLUMN', ctx=Load())), keyword(arg='out_column', value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))), keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='seasonality', value=Name(id='season_ality', ctx=Load())), keyword(arg='min_periods', value=Name(id='MIN_PERIODS', ctx=Load())), keyword(arg='fillna', value=Name(id='fillna', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='madtransform', bases=[Name(id='WindowStatisticsTransform', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='IN_COLUMN', annotation=Name(id='s_tr', ctx=Load())), arg(arg='window', annotation=Name(id='it', ctx=Load())), arg(arg='season_ality', annotation=Name(id='it', ctx=Load())), arg(arg='MIN_PERIODS', annotation=Name(id='it', ctx=Load())), arg(arg='fillna', annotation=Name(id='FLOAT', ctx=Load())), arg(arg='out_co', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='s_tr', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='IN_COLUMN', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='season_ality', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_periods', ctx=Store())], value=Name(id='MIN_PERIODS', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fillna', ctx=Store())], value=Name(id='fillna', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_co', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='in_column', value=Name(id='IN_COLUMN', ctx=Load())), keyword(arg='seasonality', value=Name(id='season_ality', ctx=Load())), keyword(arg='min_periods', value=Name(id='MIN_PERIODS', ctx=Load())), keyword(arg='out_column', value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))), keyword(arg='fillna', value=Name(id='fillna', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_aggregate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s_eries', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='űCompø[utɟe MADș oƳ¢²ĢverɳVť theó ƠƁțseɾÜrƩiɬes.̉')), Assign(targets=[Name(id='mean', ctx=Store())], value=Call(func=Attribute(value=Name(id='bn', ctx=Load()), attr='nanmean', ctx=Load()), args=[Name(id='s_eries', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=2))])), Assign(targets=[Name(id='mean', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='expand_dims', ctx=Load()), args=[Name(id='mean', ctx=Load())], keywords=[keyword(arg='axis', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='mad', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Subscript(value=Attribute(value=Name(id='s_eries', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Attribute(value=Name(id='s_eries', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Name(id='r', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='mad', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ad', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='s_eries', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load())], ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='mean', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load())], ctx=Load()), ctx=Load()))], keywords=[])), Assign(targets=[Subscript(value=Name(id='mad', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load())], ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='bn', ctx=Load()), attr='nanmean', ctx=Load()), args=[Name(id='ad', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))]))], orelse=[]), Return(value=Name(id='mad', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], decorator_list=[]), ClassDef(name='StdTransform', bases=[Name(id='WindowStatisticsTransform', ctx=Load())], keywords=[], body=[FunctionDef(name='_aggregate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s_eries', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='s_eries', ctx=Store())], value=Call(func=Attribute(value=Name(id='bn', ctx=Load()), attr='nanstd', ctx=Load()), args=[Name(id='s_eries', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=2)), keyword(arg='ddof', value=Attribute(value=Name(id='self', ctx=Load()), attr='ddof', ctx=Load()))])), Return(value=Name(id='s_eries', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='IN_COLUMN', annotation=Name(id='s_tr', ctx=Load())), arg(arg='window', annotation=Name(id='it', ctx=Load())), arg(arg='season_ality', annotation=Name(id='it', ctx=Load())), arg(arg='MIN_PERIODS', annotation=Name(id='it', ctx=Load())), arg(arg='fillna', annotation=Name(id='FLOAT', ctx=Load())), arg(arg='out_co', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='s_tr', ctx=Load()), ctx=Load())), arg(arg='ddof', annotation=Name(id='it', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=None), Constant(value=1)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='IN_COLUMN', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='season_ality', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_periods', ctx=Store())], value=Name(id='MIN_PERIODS', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fillna', ctx=Store())], value=Name(id='fillna', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_co', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ddof', ctx=Store())], value=Name(id='ddof', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='in_column', value=Name(id='IN_COLUMN', ctx=Load())), keyword(arg='seasonality', value=Name(id='season_ality', ctx=Load())), keyword(arg='min_periods', value=Name(id='MIN_PERIODS', ctx=Load())), keyword(arg='out_column', value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))), keyword(arg='fillna', value=Name(id='fillna', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='MedianTransform'), Constant(value='MaxTransform'), Constant(value='MinTransform'), Constant(value='QuantileTransform'), Constant(value='StdTransform'), Constant(value='MeanTransform'), Constant(value='WindowStatisticsTransform'), Constant(value='MADTransform'), Constant(value='MinMaxDifferenceTransform'), Constant(value='SumTransform')], ctx=Load()))], type_ignores=[])