Module(body=[ImportFrom(module='sklearn.linear_model', names=[alias(name='ElasticNet')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='LinearRegression')], level=0), ImportFrom(module='etna.models.sklearn', names=[alias(name='SklearnMultiSegmentModel')], level=0), ImportFrom(module='etna.models.sklearn', names=[alias(name='SklearnPerSegmentModel')], level=0), ClassDef(name='LinearPerSegmentModel', bases=[Name(id='SklearnPerSegmentModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ClǮ͖aȯϾssŏˀĿ͙ h»olɮ¦ϱΛdingǭƸ®ýȯ pϕer©ˆ seȗΡŵΦgmĤent :ŕpyu:cÒϤlɔaǩsƔΤɭs:`Ð\x8ȧsklōeačrΜn.line\x89ʃǕar˦Ƶ_H«ʸgmodΧ³el..Li˝neŁ©arϤƇūReg\u0378ƅres\x8bɗsion`.ėσŹɿȦǪʤ͖}Ų£')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fit_int', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwa'), defaults=[Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Store())], value=Name(id='fit_int', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwa', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super_', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[keyword(arg='fit_intercept', value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ELASTICPERSEGMENTMODEL', bases=[Name(id='SklearnPerSegmentModel', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='a', annotation=Name(id='_float', ctx=Load())), arg(arg='l1_r_atio', annotation=Name(id='_float', ctx=Load())), arg(arg='fit_int', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwa'), defaults=[Constant(value=1.0), Constant(value=0.5), Constant(value=True)]), body=[Expr(value=Constant(value='Cƣreate instance of ElasɂtiɼəčcNe̡ta with«ʶ givĴen pač\u0378\x94raÜme̍teͣrʂs.\n\nParȹamet˛ers\n\x9c--------̍--\nalpha:\n ˺ Ħ  ÛConstant tha\x9eŔt multiplçieȔs˲ thHĒe Ɣpenaltʺy Ĕterȶms. Defauʄͳlts͉ tΪno 1.0.˳\n  ƞ  ͔``alpha ˈ= 0`` isϞ equivalentˀ¶ Ót\x92oΑ ǹan ordinary ƅleȧȇstĔ sĵq\x81uare̠, solved bĤϬŋy tΔ͘he LineaξÏrReϩgr)eʊˁĿssion Úobjeͭct.\n @   FơŔr̖ numer͑ical reasons, using X``alp̠ha = ʒ0`` with th̵eΌȆ Lasso ˿objecĂt ̶is nļot advi̪sedͼκ.\n ̥   GΧƫiven £this̋, yόou shİould Ģʇ̋ˊuse œthϩe :py:cȨlasʯsγƤ:`~ɓe"ʄtna.m`ǫodels.liͬneɨarˌ.ŅLŎineÉ£*arͲ͠Per]SegmentMo\x9edeđlť` ƿoʓbject̏.ƿ\nl1_r\u0383a̬tio:Ķ\n    ThđĴe ElasltŧicNet˖ mixiφnʕg parameterȿ,\u0381 with `ų`0 <ũ= 8l1_raʩtƂio <= Ȁ1``.̦̅\n\n  å  * For `Κ`̚lɺ1_raΨ˷tþio = 0``\x92˙ t͊he penbalƫty is aʩNn L2 pΖena͔Κlty̟.\n\n    * Fo͂˳ɷr ``lʒāɲ1_rɭÌțÞ¹atio = 1`\u0383` it is an L1 penalty.õ\n\n  ƈ  ś* ĝFor ``0 < l1_ratio < 1`\x92`, the penǅalty iĐs a cΆombinŇatÏʫioǞn of ˆϔL1Ë andʙ Lʕ2.\n\nʙfƧit_in͵tϝercept:\n    ëWhetheȳǿr to\x80¬ caʠlƓculate the interc¡ept for ɕthis mˏodel.˳ If̺ )set to ͓False, no i˹ͨκnterƦcept wŜi\xa0͎ll be ɜused i˂n\nǶ ŐĜ   calculations (iʻ.e. data ƥis Ōexpected to be cen̵teredů)Ÿ.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Store())], value=Name(id='a', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='l1_ratio', ctx=Store())], value=Name(id='l1_r_atio', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Store())], value=Name(id='fit_int', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwa', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super_', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='ElasticNet', ctx=Load()), args=[], keywords=[keyword(arg='alpha', value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Load())), keyword(arg='l1_ratio', value=Attribute(value=Name(id='self', ctx=Load()), attr='l1_ratio', ctx=Load())), keyword(arg='fit_intercept', value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ElasticMultiSe', bases=[Name(id='SklearnMultiSegmentModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='̙ĥŽCla˷ss ʵhoΫƦldi̓ngª :ǝpy:clΰʃasΦs:`ɋΰsƺkɇπÄ\x90̕lɲeaǶSʜ/rn.lĆinear_modɢel.įEǎƱlȪɐƢìaĂsticNet` for all ΊsegmąenƵŨtsΪ.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='a', annotation=Name(id='_float', ctx=Load())), arg(arg='l1_r_atio', annotation=Name(id='_float', ctx=Load())), arg(arg='fit_int', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwa'), defaults=[Constant(value=1.0), Constant(value=0.5), Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Store())], value=Name(id='a', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='l1_ratio', ctx=Store())], value=Name(id='l1_r_atio', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Store())], value=Name(id='fit_int', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwa', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super_', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='ElasticNet', ctx=Load()), args=[], keywords=[keyword(arg='alpha', value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Load())), keyword(arg='l1_ratio', value=Attribute(value=Name(id='self', ctx=Load()), attr='l1_ratio', ctx=Load())), keyword(arg='fit_intercept', value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='LinearMultiSegmentModel', bases=[Name(id='SklearnMultiSegmentModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Class ƙψɐhΟold͞ing ʹ:\x93py:ÿclass:`skle(arn.line͉arķ_modȐeĴl.LineaírŷRegřreÒssi\x7fon` Άfoϋr all segȘΦme͙nʗtcs.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fit_int', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwa'), defaults=[Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Store())], value=Name(id='fit_int', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwa', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super_', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[keyword(arg='fit_intercept', value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])