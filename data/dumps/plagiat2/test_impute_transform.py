Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.models', names=[alias(name='NaiveModel')], level=0), ImportFrom(module='etna.transforms.missing_values', names=[alias(name='TimeSeriesImputerTransform')], level=0), ImportFrom(module='etna.transforms.missing_values.imputation', names=[alias(name='_OneSegmentTimeSeriesImputerTransform')], level=0), FunctionDef(name='ts_nans_be', args=arguments(posonlyargs=[], args=[arg(arg='example_reg_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='_ts', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='example_reg_tsds', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='_ts', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='_ts', ctx=Load()), attr='index', ctx=Load()), slice=Slice(upper=Constant(value=5)), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_1'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='_ts', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='_ts', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=8), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_1'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='_ts', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='_ts', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=10), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_2'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='_ts', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='_ts', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=40), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_2'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Return(value=Name(id='_ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_fill_value_with_constant_', args=arguments(posonlyargs=[], args=[arg(arg='df_wit_h_missing_range_x_index', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ˊ     ʩ  ̗  ϑȄ̠')), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='constant')), keyword(arg='constant_value', value=Constant(value=42)), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Tuple(elts=[Name(id='df_', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_wit_h_missing_range_x_index', ctx=Load())), Assign(targets=[Name(id='resultjXh', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='expected_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Name(id='rng', ctx=Load())), keyword(arg='data', value=ListComp(elt=Constant(value=42), generators=[comprehension(target=Name(id='__', ctx=Store()), iter=Name(id='rng', ctx=Load()), ifs=[], is_async=0)])), keyword(arg='name', value=Constant(value='target'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='rng', ctx=Load()), ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))]), Name(id='expected_series', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='smoke', ctx=Load())]), FunctionDef(name='test_wrong_init_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='all_date_present_df_two_segments')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Cheɗ͍ck tΏhaǱt ȡimϝpƭuteɛrǼ for tžw͋ɢȀĞo ʷϙseɆÃǹgmeΦnʺts ˸:ί˨|́ɷ\x8bˆPƇfailώs ͖\u0378ʦto± fϔiǫÀȝ¹t_Εtra±ôns˕*Űćfċo̫rń\x9c˧m ƯwʱʂîitȬɦ͠ƕh˟ w˶`ràonȬαƜg ˩imĲputiͭnĥgȨ sɉtrĕʳ͢Ģaetegy.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='strategy', value=Constant(value='wrong_strategy'))]))])], decorator_list=[]), FunctionDef(name='test_all_dates_present_impute', args=arguments(posonlyargs=[], args=[arg(arg='all_date_present_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fill_str_ategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Name(id='fill_str_ategy', ctx=Load())), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Name(id='resultjXh', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='all_date_present_df', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Name(id='all_date_present_df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), Subscript(value=Name(id='resultjXh', ctx=Load()), slice=Constant(value='target'), ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='smoke', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='constant'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_all_dates_present_impute_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='all_date_present_df_two_segments', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fill_str_ategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ȻCheck LðtĎhat ʰim<ȘȽpˉuʢterŴ ndoes ŌnothƵing with ʒ̎seĲr°ies w̋itɉhout gaps.')), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='strategy', value=Name(id='fill_str_ategy', ctx=Load()))])), Assign(targets=[Name(id='resultjXh', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='all_date_present_df_two_segments', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='all_date_present_df_two_segments', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load()), Subscript(value=Subscript(value=Name(id='resultjXh', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='smoke', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='constant'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_one_missing_value_running_mean', args=arguments(posonlyargs=[], args=[arg(arg='df_with_missing_value_x_index', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='window', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df_', ctx=Store()), Name(id='_idx', ctx=Store())], ctx=Store())], value=Name(id='df_with_missing_value_x_index', ctx=Load())), Assign(targets=[Name(id='timestamps', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='SORTED', ctx=Load()), args=[Attribute(value=Name(id='df_', ctx=Load()), attr='index', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='timestamp_id_x', ctx=Store())], value=Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='timestamps', ctx=Load()), ops=[Eq()], comparators=[Name(id='_idx', ctx=Load())])], keywords=[]), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='running_mean')), keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), If(test=Compare(left=Name(id='window', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='expected_value', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='df_', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(upper=Subscript(value=Name(id='timestamps', ctx=Load()), slice=BinOp(left=Name(id='timestamp_id_x', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), Constant(value='target')], ctx=Load()), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='expected_value', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='df_', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(lower=Subscript(value=Name(id='timestamps', ctx=Load()), slice=BinOp(left=Name(id='timestamp_id_x', ctx=Load()), op=Sub(), right=Name(id='window', ctx=Load())), ctx=Load()), upper=Subscript(value=Name(id='timestamps', ctx=Load()), slice=BinOp(left=Name(id='timestamp_id_x', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), Constant(value='target')], ctx=Load()), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='resultjXh', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='_idx', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_value', ctx=Load())])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='window'), List(elts=[Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='test_all_missing_impute_fail_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_all_missing_two_segments', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fill_str_ategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check that imputer can'õt fill nans if all values Ȧare nans.")), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='strategy', value=Name(id='fill_str_ategy', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="Series hasn't non NaN values which means it is empty and can't be filled"))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_all_missing_two_segments', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_one_missing_value_constant', args=arguments(posonlyargs=[], args=[arg(arg='df_with_missing_value_x_index', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='constan', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ChecȲ·kͥ thaϼṭ imp\x89uter witʙh conυȜsΝƤtaʫ³οnt-nstΎra̒tegͨy worksή ˻c\x94ȭõorrectƱlɿyͣ in case ˋϲνoʓf onȾǱeȻ \x8dmiŗssingǛ ShvaluȦeĜ i¸n d\x9catȣaĕ.̕Β¾ƅ')), Assign(targets=[Tuple(elts=[Name(id='df_', ctx=Store()), Name(id='_idx', ctx=Store())], ctx=Store())], value=Name(id='df_with_missing_value_x_index', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='constant')), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None)), keyword(arg='constant_value', value=Name(id='constan', ctx=Load()))])), Assign(targets=[Name(id='resultjXh', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='_idx', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='constan', ctx=Load())])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='constant_value'), Tuple(elts=[Constant(value=0), Constant(value=42)], ctx=Load())], keywords=[])]), FunctionDef(name='test_one_missing_value_forward_fill', args=arguments(posonlyargs=[], args=[arg(arg='df_with_missing_value_x_index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df_', ctx=Store()), Name(id='_idx', ctx=Store())], ctx=Store())], value=Name(id='df_with_missing_value_x_index', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='forward_fill')), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Name(id='resultjXh', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='timestamps', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='SORTED', ctx=Load()), args=[Attribute(value=Name(id='df_', ctx=Load()), attr='index', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='timestamp_id_x', ctx=Store())], value=Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='timestamps', ctx=Load()), ops=[Eq()], comparators=[Name(id='_idx', ctx=Load())])], keywords=[]), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='expected_value', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df_', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='timestamps', ctx=Load()), slice=BinOp(left=Name(id='timestamp_id_x', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='_idx', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_value', ctx=Load())])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[]), FunctionDef(name='test_on_e_missing_value_mean', args=arguments(posonlyargs=[], args=[arg(arg='df_with_missing_value_x_index', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='FCheck thatǃ imÁpƹuter̯ with ϼΠmean\u0382ͮ-ɈsϛtrǍȱƯaɣtɀegͽyY worɻks correăctly iƐn caȢse of} onĀe miĘssŬing valuĄe iĆn data.')), Assign(targets=[Tuple(elts=[Name(id='df_', ctx=Store()), Name(id='_idx', ctx=Store())], ctx=Store())], value=Name(id='df_with_missing_value_x_index', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='mean')), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Name(id='expected_value', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='resultjXh', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='_idx', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_value', ctx=Load())])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[]), FunctionDef(name='test_inverse_transform_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_wit_h_missing_range_x_index', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fill_str_ategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df_', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_wit_h_missing_range_x_index', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Name(id='fill_str_ategy', ctx=Load())), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Name(id='transform_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='inverse_transform_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Name(id='transform_result', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Name(id='df_', ctx=Load()), Name(id='inverse_transform_result', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='constant'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_range_missin_g_mean', args=arguments(posonlyargs=[], args=[arg(arg='df_wit_h_missing_range_x_index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Cyheck that imputer wȴiƃth mean-strategy wor̠ks ucorrectly in caǜse of rǘǨanϯge ofd missingØ[˦ valuesȰ in data.c')), Assign(targets=[Tuple(elts=[Name(id='df_', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_wit_h_missing_range_x_index', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='mean')), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Name(id='resultjXh', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='expected_value', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='expected_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Name(id='rng', ctx=Load())), keyword(arg='data', value=ListComp(elt=Name(id='expected_value', ctx=Load()), generators=[comprehension(target=Name(id='__', ctx=Store()), iter=Name(id='rng', ctx=Load()), ifs=[], is_async=0)])), keyword(arg='name', value=Constant(value='target'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='rng', ctx=Load()), ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))]), Name(id='expected_series', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[]), FunctionDef(name='test_range_mis', args=arguments(posonlyargs=[], args=[arg(arg='df_wit_h_missing_range_x_index', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='window', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df_', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_wit_h_missing_range_x_index', ctx=Load())), Assign(targets=[Name(id='timestamps', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='SORTED', ctx=Load()), args=[Attribute(value=Name(id='df_', ctx=Load()), attr='index', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='timestamp_idxs', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[ListComp(elt=Compare(left=Name(id='X', ctx=Load()), ops=[In()], comparators=[Name(id='rng', ctx=Load())]), generators=[comprehension(target=Name(id='X', ctx=Store()), iter=Name(id='timestamps', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='running_mean')), keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Name(id='resultjXh', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[]))), For(target=Name(id='_idx', ctx=Store()), iter=Name(id='timestamp_idxs', ctx=Load()), body=[If(test=Compare(left=Name(id='window', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='expected_value', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(upper=Subscript(value=Name(id='timestamps', ctx=Load()), slice=BinOp(left=Name(id='_idx', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='expected_value', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Subscript(value=Name(id='timestamps', ctx=Load()), slice=BinOp(left=Name(id='_idx', ctx=Load()), op=Sub(), right=Name(id='window', ctx=Load())), ctx=Load()), upper=Subscript(value=Name(id='timestamps', ctx=Load()), slice=BinOp(left=Name(id='_idx', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))]), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='loc', ctx=Load()), slice=Subscript(value=Name(id='timestamps', ctx=Load()), slice=Name(id='_idx', ctx=Load()), ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_value', ctx=Load())]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='window'), List(elts=[Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='test_range_missing_forward_fill', args=arguments(posonlyargs=[], args=[arg(arg='df_wit_h_missing_range_x_index', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df_', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_wit_h_missing_range_x_index', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='forward_fill')), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Name(id='resultjXh', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='timestamps', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='SORTED', ctx=Load()), args=[Attribute(value=Name(id='df_', ctx=Load()), attr='index', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='rng', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Name(id='X', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='X', ctx=Store()), iter=Name(id='rng', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='timestamp_id_x', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[ListComp(elt=Compare(left=Name(id='X', ctx=Load()), ops=[In()], comparators=[Name(id='rng', ctx=Load())]), generators=[comprehension(target=Name(id='X', ctx=Store()), iter=Name(id='timestamps', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='expected_value', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df_', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='timestamps', ctx=Load()), slice=BinOp(left=Name(id='timestamp_id_x', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='expected_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Name(id='rng', ctx=Load())), keyword(arg='data', value=ListComp(elt=Name(id='expected_value', ctx=Load()), generators=[comprehension(target=Name(id='__', ctx=Store()), iter=Name(id='rng', ctx=Load()), ifs=[], is_async=0)])), keyword(arg='name', value=Constant(value='target'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='rng', ctx=Load()), ctx=Load()), Name(id='expected_series', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[]), FunctionDef(name='test_inverse_transform_many_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_with_missing_range_x_index_two_segments', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fill_str_ategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df_', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_with_missing_range_x_index_two_segments', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='strategy', value=Name(id='fill_str_ategy', ctx=Load()))])), Assign(targets=[Name(id='transform_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='inverse_transform_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Name(id='transform_result', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Name(id='df_', ctx=Load()), Name(id='inverse_transform_result', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='constant'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_constant_fill_strategy', args=arguments(posonlyargs=[], args=[arg(arg='df_with_missing_range_x_index_two_segments', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='constan', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ǿȆ˙ʜ ɡ ˼ſ   ~Ƅ  ǿ  ùɤ  ̰ơ ̰̭  ')), Assign(targets=[Tuple(elts=[Name(id='raw_df', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_with_missing_range_x_index_two_segments', ctx=Load())), Assign(targets=[Name(id='inferred_freq', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='infer_freq', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='raw_df', ctx=Load()), attr='index', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=5))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='_ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='raw_df', ctx=Load())], keywords=[keyword(arg='freq', value=Name(id='inferred_freq', ctx=Load()))])), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='constant')), keyword(arg='constant_value', value=Name(id='constan', ctx=Load())), keyword(arg='default_value', value=BinOp(left=Name(id='constan', ctx=Load()), op=Sub(), right=Constant(value=1)))])), Expr(value=Call(func=Attribute(value=Name(id='_ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='imputer', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='df_', ctx=Store())], value=Call(func=Attribute(value=Name(id='_ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=False))])), For(target=Name(id='segment', ctx=Store()), iter=List(elts=[Constant(value='segment_1'), Constant(value='segment_2')], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Attribute(value=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='df_', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='rng', ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='values', ctx=Load()), BinOp(left=List(elts=[Name(id='constan', ctx=Load())], ctx=Load()), op=Mult(), right=Constant(value=5))], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='constant_value'), Tuple(elts=[Constant(value=0), Constant(value=32)], ctx=Load())], keywords=[])]), FunctionDef(name='sample_ts', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='timest_amp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='end', value=Constant(value='2020-01-11')), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='DF1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='DF1', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Name(id='timest_amp', ctx=Load())), Assign(targets=[Subscript(value=Name(id='DF1', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_1')), Assign(targets=[Subscript(value=Name(id='DF1', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=10)], keywords=[])), Assign(targets=[Name(id='df2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='df2', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Name(id='timest_amp', ctx=Load())), Assign(targets=[Subscript(value=Name(id='df2', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_2')), Assign(targets=[Subscript(value=Name(id='df2', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Constant(value=0), Constant(value=110), Constant(value=10)], keywords=[])), Assign(targets=[Name(id='df_', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='DF1', ctx=Load()), Name(id='df2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='_ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='D'))])), Return(value=Name(id='_ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='ts_to_fill', args=arguments(posonlyargs=[], args=[arg(arg='sample_ts')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='_ts', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='sample_ts', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='_ts', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='2020-01-01'), Constant(value='2020-01-03'), Constant(value='2020-01-08'), Constant(value='2020-01-09')], ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Return(value=Name(id='_ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_missing_v_alues_seasonal', args=arguments(posonlyargs=[], args=[arg(arg='ts_to_fill'), arg(arg='window', annotation=Name(id='int', ctx=Load())), arg(arg='seasonalit', annotation=Name(id='int', ctx=Load())), arg(arg='expected', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ʊʗ  SϞ  ̀.Ƌ    ')), Assign(targets=[Name(id='_ts', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_to_fill', ctx=Load())], keywords=[])), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='seasonal')), keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='seasonality', value=Name(id='seasonalit', ctx=Load())), keyword(arg='default_value', value=Constant(value=None))])), Expr(value=Call(func=Attribute(value=Name(id='_ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='imputer', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='resultjXh', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='_ts', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Slice(), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='values', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Name(id='resultjXh', ctx=Load()), Name(id='expected', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='window, seasonality, expected'), List(elts=[Tuple(elts=[Constant(value=1), Constant(value=3), Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=0), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=3), Constant(value=4), Constant(value=8), Constant(value=9)], ctx=Load()), List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=10), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=30), Constant(value=40), Constant(value=50), Constant(value=60), Constant(value=40), Constant(value=50), Constant(value=90), Constant(value=100)], ctx=Load())], ctx=Load())], keywords=[]), attr='T', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value=1), Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=0), Constant(value=0), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=4), BinOp(left=Constant(value=13), op=Div(), right=Constant(value=3)), Constant(value=8), Constant(value=9)], ctx=Load()), List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=10), Constant(value=10), Constant(value=30), Constant(value=40), Constant(value=50), Constant(value=60), Constant(value=50), BinOp(left=Constant(value=160), op=Div(), right=Constant(value=3)), Constant(value=90), Constant(value=100)], ctx=Load())], ctx=Load())], keywords=[]), attr='T', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value=3), Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=0), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), BinOp(left=Constant(value=3), op=Div(), right=Constant(value=2)), Constant(value=4), Constant(value=8), Constant(value=9)], ctx=Load()), List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=10), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=30), Constant(value=40), Constant(value=50), Constant(value=60), Constant(value=25), Constant(value=50), Constant(value=90), Constant(value=100)], ctx=Load())], ctx=Load())], keywords=[]), attr='T', ctx=Load())], ctx=Load()), Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=3), Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=0), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), BinOp(left=Constant(value=3), op=Div(), right=Constant(value=2)), Constant(value=4), Constant(value=8), Constant(value=9)], ctx=Load()), List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=10), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=30), Constant(value=40), Constant(value=50), Constant(value=60), Constant(value=25), Constant(value=50), Constant(value=90), Constant(value=100)], ctx=Load())], ctx=Load())], keywords=[]), attr='T', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_default_value', args=arguments(posonlyargs=[], args=[arg(arg='ts_to_fill'), arg(arg='window', annotation=Name(id='int', ctx=Load())), arg(arg='seasonalit', annotation=Name(id='int', ctx=Load())), arg(arg='default_value', annotation=Name(id='float', ctx=Load())), arg(arg='expected', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='     ͻ       ')), Assign(targets=[Name(id='_ts', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_to_fill', ctx=Load())], keywords=[])), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='seasonal')), keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='seasonality', value=Name(id='seasonalit', ctx=Load())), keyword(arg='default_value', value=Name(id='default_value', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='_ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='imputer', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='resultjXh', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='_ts', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Slice(), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='values', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Name(id='resultjXh', ctx=Load()), Name(id='expected', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='window, seasonality, default_value, expected'), List(elts=[Tuple(elts=[Constant(value=1), Constant(value=3), Constant(value=100), Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=0), Constant(value=100), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=3), Constant(value=4), Constant(value=8), Constant(value=9)], ctx=Load()), List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=10), Constant(value=100), Constant(value=30), Constant(value=40), Constant(value=50), Constant(value=60), Constant(value=40), Constant(value=50), Constant(value=90), Constant(value=100)], ctx=Load())], ctx=Load())], keywords=[]), attr='T', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_all_missing_impute_fail', args=arguments(posonlyargs=[], args=[arg(arg='df_all_missing', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fill_str_ategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Cheɩck̔[ ×tjƟ̓ha~ƃt iŽmjpîϏɅuteʮr˰λ caĳϖn't ϼfUilɴlˊˢϾ¥ùϳ̃ naͶȬns iΕf \x89allϿ ϖvaȯlξȯʰuκeȵɞʺ\x80s̚ ξa\x93̺rˋāeJW nˋans.Ê")), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Name(id='fill_str_ategy', ctx=Load())), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="Series hasn't non NaN values which means it is empty and can't be filled"))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_all_missing', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='constant'), Constant(value='mean'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_wrong_init_one_segment', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='wrong_strategy')), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))]))])], decorator_list=[]), FunctionDef(name='test_inverse_transform_in_', args=arguments(posonlyargs=[], args=[arg(arg='df_with_missing_range_x_index_two_segments', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fill_str_ategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df_', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_with_missing_range_x_index_two_segments', ctx=Load())), Assign(targets=[Name(id='_ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[keyword(arg='freq', value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='infer_freq', ctx=Load()), args=[Attribute(value=Name(id='df_', ctx=Load()), attr='index', ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='strategy', value=Name(id='fill_str_ategy', ctx=Load()))])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='transforms', value=List(elts=[Name(id='imputer', ctx=Load())], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='_ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts_test', ctx=Store())], value=Call(func=Attribute(value=Name(id='_ts', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Constant(value=3)), keyword(arg='tail_steps', value=Attribute(value=Name(id='model', ctx=Load()), attr='context_size', ctx=Load()))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='ts_test', ctx=Load()), slice=Tuple(elts=[Slice(lower=Subscript(value=Attribute(value=Name(id='ts_test', ctx=Load()), attr='index', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=3)), ctx=Load())), Slice(), Constant(value='target')], ctx=Load()), ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='ts_foreca', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='ts_test', ctx=Load())], keywords=[keyword(arg='prediction_size', value=Constant(value=3))])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='_ts', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='true_value', ctx=Store())], value=Subscript(value=Attribute(value=Subscript(value=Name(id='_ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), attr='values', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='ts_foreca', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='true_value', ctx=Load())])], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='constant'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_transform_nans_at_the_beginning', args=arguments(posonlyargs=[], args=[arg(arg='fill_str_ategy'), arg(arg='ts_nans_be')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check that tra\x86nìsform doesn't filƩl\x9c͒ NaNs at the beginning.")), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Name(id='fill_str_ategy', ctx=Load()))])), Assign(targets=[Name(id='df_inittWTLr', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_nans_be', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ts_nans_be', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='imputer', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='df_filled', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_nans_be', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='ts_nans_be', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='df_segment_init', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df_inittWTLr', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='df_segment_filled', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df_filled', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='first_valid_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_segment_init', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Subscript(value=Name(id='df_segment_init', ctx=Load()), slice=Slice(upper=Name(id='first_valid_index', ctx=Load())), ctx=Load()), attr='equals', ctx=Load()), args=[Subscript(value=Name(id='df_segment_filled', ctx=Load()), slice=Slice(upper=Name(id='first_valid_index', ctx=Load())), ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='df_segment_filled', ctx=Load()), slice=Slice(lower=Name(id='first_valid_index', ctx=Load())), ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='constant'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_transform_nans_at_the_end', args=arguments(posonlyargs=[], args=[arg(arg='fill_str_ategy'), arg(arg='ts_diff_endings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ʟ%CheΘɞcɢkı̀ Ɗtćhatϣ tȂraś˃nƂs˔form coÄΣržreɵ̲ͫÆcŤtl;y woʳrksƁηʁǢ΄ with +͓ϡő͕ˏʢNa,ͰęNs Ɍat̃āϕ t϶ϊhYe ɼenÀd.')), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Name(id='fill_str_ategy', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='imputer', ctx=Load())], ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='ts_diff_endings', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='target')], ctx=Load()), ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='constant'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='TEST_RANGE_MISSING_CONSTANT', args=arguments(posonlyargs=[], args=[arg(arg='df_wit_h_missing_range_x_index', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='constan', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df_', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_wit_h_missing_range_x_index', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='constant')), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None)), keyword(arg='constant_value', value=Name(id='constan', ctx=Load()))])), Assign(targets=[Name(id='resultjXh', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='expected_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Name(id='rng', ctx=Load())), keyword(arg='data', value=ListComp(elt=Name(id='constan', ctx=Load()), generators=[comprehension(target=Name(id='__', ctx=Store()), iter=Name(id='rng', ctx=Load()), ifs=[], is_async=0)])), keyword(arg='name', value=Constant(value='target'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='rng', ctx=Load()), ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))]), Name(id='expected_series', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultjXh', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='constant_value'), Tuple(elts=[Constant(value=0), Constant(value=42)], ctx=Load())], keywords=[])])], type_ignores=[])