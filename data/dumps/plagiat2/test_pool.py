Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.auto.pool', names=[alias(name='Pool')], level=0), ImportFrom(module='etna.auto.pool.templates', names=[alias(name='DEFAULT')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), FunctionDef(name='test_generate_config', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pi', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='Pool', ctx=Load()), attr='default', ctx=Load()), attr='value', ctx=Load()), attr='generate', ctx=Load()), args=[], keywords=[keyword(arg='horizon', value=Constant(value=1))])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='pi', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='DEFAULT', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='test_default_pool_fit_predict', args=arguments(posonlyargs=[], args=[arg(arg='example_reg_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='hori', ctx=Store())], value=Constant(value=7)), Assign(targets=[Name(id='pi', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='Pool', ctx=Load()), attr='default', ctx=Load()), attr='value', ctx=Load()), attr='generate', ctx=Load()), args=[], keywords=[keyword(arg='horizon', value=Name(id='hori', ctx=Load()))])), FunctionDef(name='fit_predi', args=arguments(posonlyargs=[], args=[arg(arg='pipel_ine', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='pipel_ine', ctx=Load()), attr='fit', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='example_reg_tsds', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='ts_for', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipel_ine', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ts_for', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load())), Assign(targets=[Name(id='ts_forecasts', ctx=Store())], value=ListComp(elt=Call(func=Name(id='fit_predi', ctx=Load()), args=[Name(id='pipel_ine', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='pipel_ine', ctx=Store()), iter=Name(id='pi', ctx=Load()), ifs=[], is_async=0)])), For(target=Name(id='ts_for', ctx=Store()), iter=Name(id='ts_forecasts', ctx=Load()), body=[Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ts_for', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Name(id='hori', ctx=Load())]))], orelse=[])], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='long_2', ctx=Load())])], type_ignores=[])