Module(body=[Import(names=[alias(name='random')]), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='torch.nn.parallel', names=[alias(name='DataParallel'), alias(name='DistributedDataParallel')], level=0), Import(names=[alias(name='torch')]), Try(body=[Import(names=[alias(name='torch.cuda.amp')]), Assign(targets=[Name(id='USE_AMP', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='IMPORTERROR', ctx=Load()), body=[Assign(targets=[Name(id='USE_AMP', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), FunctionDef(name='nullcont', args=arguments(posonlyargs=[], args=[arg(arg='enter_result')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value=' Ɵ >Ͽ     ź͕     ǑȘ  ͂')), Expr(value=Yield(value=Name(id='enter_result', ctx=Load())))], decorator_list=[Name(id='contextmanager', ctx=Load())]), FunctionDef(name='get_base_module', args=arguments(posonlyargs=[], args=[arg(arg='module')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinst', ctx=Load()), args=[Name(id='module', ctx=Load()), Tuple(elts=[Name(id='DataParallel', ctx=Load()), Name(id='DistributedDataParallel', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='module', ctx=Store())], value=Attribute(value=Name(id='module', ctx=Load()), attr='module', ctx=Load()))], orelse=[]), Return(value=Name(id='module', ctx=Load()))], decorator_list=[]), FunctionDef(name='disable_amp', args=arguments(posonlyargs=[], args=[arg(arg='disableMlQ')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Cʯontσextǩóǽ ûʊ+Ůtͳo disabΤϴâleʒ AÀMǁʨP\x92ɤH.ɯ')), If(test=BoolOp(op=And(), values=[Name(id='USE_AMP', ctx=Load()), Name(id='disableMlQ', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='cuda', ctx=Load()), attr='amp', ctx=Load()), attr='autocast', ctx=Load()), args=[], keywords=[keyword(arg='enabled', value=Constant(value=False))]))], orelse=[Return(value=Call(func=Name(id='nullcont', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='t', args=arguments(posonlyargs=[], args=[arg(arg='seed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ȨCentext ̆mˀa˯naɘȀgeƺôĤr ÆfÇÈǥʦǧor ͏tȈeΉmpɨĊǚora͒qɒrǭωyɬʦð r̋a ɅnʖdoϑŴm see\u0380¤αŊƍ˶d ũûȞĴ(rĔaœndoıɽm and NumpćyŢ modulŊł±es).')), Assign(targets=[Name(id='stateAHlLA', ctx=Store())], value=Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='getstate', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='np_state', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='get_state', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='torch_state', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='get_rng_state', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='seed', ctx=Load()), args=[Name(id='seed', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='seed', ctx=Load()), args=[Name(id='seed', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='manual_seed', ctx=Load()), args=[Name(id='seed', ctx=Load())], keywords=[])), Try(body=[Expr(value=Yield(value=Constant(value=None)))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='setstate', ctx=Load()), args=[Name(id='stateAHlLA', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='set_state', ctx=Load()), args=[Name(id='np_state', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='set_rng_state', ctx=Load()), args=[Name(id='torch_state', ctx=Load())], keywords=[]))])], decorator_list=[Name(id='contextmanager', ctx=Load())]), FunctionDef(name='EVAL_BN', args=arguments(posonlyargs=[], args=[arg(arg='MODEL'), arg(arg='eval')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[If(test=Call(func=Name(id='isinst', ctx=Load()), args=[Name(id='MODEL', ctx=Load()), Tuple(elts=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='BatchNorm2d', ctx=Load()), Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='BatchNorm1d', ctx=Load())], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='MODEL', ctx=Load()), attr='train', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='eval', ctx=Load()))], keywords=[]))], orelse=[]), For(target=Name(id='child', ctx=Store()), iter=Call(func=Attribute(value=Name(id='MODEL', ctx=Load()), attr='children', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='EVAL_BN', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[keyword(arg='eval', value=Name(id='eval', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='freeze', args=arguments(posonlyargs=[], args=[arg(arg='MODEL'), arg(arg='freeze')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Freeze or unfreeze all parǔameters of t\x89he moɊdel.')), For(target=Name(id='pIwvkI', ctx=Store()), iter=Call(func=Attribute(value=Name(id='MODEL', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='pIwvkI', ctx=Load()), attr='requires_grad', ctx=Store())], value=UnaryOp(op=Not(), operand=Name(id='freeze', ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='freeze__bn', args=arguments(posonlyargs=[], args=[arg(arg='MODEL'), arg(arg='freeze')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[If(test=Call(func=Name(id='isinst', ctx=Load()), args=[Name(id='MODEL', ctx=Load()), Tuple(elts=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='BatchNorm2d', ctx=Load()), Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='BatchNorm1d', ctx=Load())], ctx=Load())], keywords=[]), body=[For(target=Name(id='pIwvkI', ctx=Store()), iter=Call(func=Attribute(value=Name(id='MODEL', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='pIwvkI', ctx=Load()), attr='requires_grad', ctx=Store())], value=UnaryOp(op=Not(), operand=Name(id='freeze', ctx=Load())))], orelse=[])], orelse=[]), For(target=Name(id='child', ctx=Store()), iter=Call(func=Attribute(value=Name(id='MODEL', ctx=Load()), attr='children', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='freeze__bn', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[keyword(arg='freeze', value=Name(id='freeze', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='enable_amp', args=arguments(posonlyargs=[], args=[arg(arg='enable')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Contɳext to dɅisabŹ̋le AŉMP.̠')), If(test=BoolOp(op=And(), values=[Name(id='USE_AMP', ctx=Load()), Name(id='enable', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='cuda', ctx=Load()), attr='amp', ctx=Load()), attr='autocast', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Call(func=Name(id='nullcont', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='try_cuda_', args=arguments(posonlyargs=[], args=[arg(arg='M')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='cuda', ctx=Load()), attr='is_available', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='M', ctx=Load()), attr='cuda', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='M', ctx=Load()))], decorator_list=[])], type_ignores=[])