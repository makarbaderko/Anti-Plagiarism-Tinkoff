Module(body=[Import(names=[alias(name='os')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='sphinx.application', names=[alias(name='Sphinx')], level=0), Import(names=[alias(name='shutil')]), Import(names=[alias(name='toml')]), Import(names=[alias(name='sys')]), ImportFrom(module='sphinx.ext.autosummary', names=[alias(name='Autosummary')], level=0), Assign(targets=[Name(id='SOURCE_PATH', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='project_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='SOURCE_PATH', ctx=Load()), attr='joinpath', ctx=Load()), args=[Constant(value='../..')], keywords=[])), Assign(targets=[Name(id='COMMIT_SHORT_SHAdRPhG', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='CI_COMMIT_SHORT_SHA'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='WORKFLOW_NAME', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='WORKFLOW_NAME'), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='str', ctx=Load()), args=[Name(id='project_path', ctx=Load())], keywords=[])], keywords=[])), Import(names=[alias(name='etna')]), Assign(targets=[Name(id='pro', ctx=Store())], value=Constant(value='ETNA Time Series Library')), Assign(targets=[Name(id='copyright', ctx=Store())], value=Constant(value='2021, etna-tech@tinkoff.ru')), Assign(targets=[Name(id='author', ctx=Store())], value=Constant(value='etna-tech@tinkoff.ru')), With(items=[withitem(context_expr=Call(func=Name(id='o_pen', ctx=Load()), args=[BinOp(left=Name(id='project_path', ctx=Load()), op=Div(), right=Constant(value='pyproject.toml')), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='pyproject_toml', ctx=Store())], value=Call(func=Attribute(value=Name(id='toml', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='WORKFLOW_NAME', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Publish')]), body=[Assign(targets=[Name(id='relea', ctx=Store())], value=Subscript(value=Subscript(value=Subscript(value=Name(id='pyproject_toml', ctx=Load()), slice=Constant(value='tool'), ctx=Load()), slice=Constant(value='poetry'), ctx=Load()), slice=Constant(value='version'), ctx=Load()))], orelse=[Assign(targets=[Name(id='relea', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='COMMIT_SHORT_SHAdRPhG', ctx=Load()), conversion=-1)]))]), Assign(targets=[Name(id='extensions', ctx=Store())], value=List(elts=[Constant(value='nbsphinx'), Constant(value='myst_parser'), Constant(value='sphinx.ext.napoleon'), Constant(value='sphinx.ext.autodoc'), Constant(value='sphinx.ext.autosummary'), Constant(value='sphinx.ext.doctest'), Constant(value='sphinx.ext.intersphinx'), Constant(value='sphinx.ext.mathjax'), Constant(value='sphinx-mathjax-offline'), Constant(value='sphinx.ext.viewcode'), Constant(value='sphinx.ext.githubpages')], ctx=Load())), Assign(targets=[Name(id='INTERSPHINX_MAPPING', ctx=Store())], value=Dict(keys=[Constant(value='statsmodels'), Constant(value='sklearn'), Constant(value='pytorch_forecasting'), Constant(value='matplotlib'), Constant(value='scipy'), Constant(value='torch'), Constant(value='pytorch_lightning'), Constant(value='optuna')], values=[Tuple(elts=[Constant(value='https://www.statsmodels.org/stable/'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='http://scikit-learn.org/stable'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='https://pytorch-forecasting.readthedocs.io/en/stable/'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='https://matplotlib.org/3.5.0/'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='https://docs.scipy.org/doc/scipy/'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='https://pytorch.org/docs/stable/'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='https://pytorch-lightning.readthedocs.io/en/stable/'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='https://optuna.readthedocs.io/en/stable/'), Constant(value=None)], ctx=Load())])), Assign(targets=[Name(id='autodoc_typehints', ctx=Store())], value=Constant(value='both')), Assign(targets=[Name(id='autodoc_typehints_description_target', ctx=Store())], value=Constant(value='all')), Assign(targets=[Name(id='add_module_names', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='templates_path', ctx=Store())], value=List(elts=[Constant(value='_templates')], ctx=Load())), Assign(targets=[Name(id='exclude_patte_rns', ctx=Store())], value=List(elts=[Constant(value='**/.ipynb_checkpoints')], ctx=Load())), Assign(targets=[Name(id='HTML_THEME', ctx=Store())], value=Constant(value='sphinx_rtd_theme')), Assign(targets=[Name(id='html_static_path', ctx=Store())], value=List(elts=[Constant(value='_static')], ctx=Load())), FunctionDef(name='skip', args=arguments(posonlyargs=[], args=[arg(arg='app'), arg(arg='what'), arg(arg='nam_e'), arg(arg='ob'), arg(arg='skip'), arg(arg='options')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='nam_e', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__init__')]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Name(id='skip', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='apidoc_output_folder', ctx=Store())], value=Call(func=Attribute(value=Name(id='SOURCE_PATH', ctx=Load()), attr='joinpath', ctx=Load()), args=[Constant(value='api')], keywords=[])), Assign(targets=[Name(id='PACKAGES', ctx=Store())], value=List(elts=[Attribute(value=Name(id='etna', ctx=Load()), attr='__name__', ctx=Load())], ctx=Load())), FunctionDef(name='get_by_na_me', args=arguments(posonlyargs=[], args=[arg(arg='str', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="ÙIŦúmport byŜ nâˠa̤ńmțĲeď Κandɨ \x89return iĚϲmpÓořr̉Ǐted˕ mŖoduleϟ/function˭/Ʋ\x8fclaƀ̀ssƠ\n\nArǐΧgsϴ:\n \n    strinϊ˵g (sȤtr)ç:Ó moƹödulƷϣɯeͷ/fJu͇nctiεΞonƷ/claϖǱss ̗topȤ impoτrt, e.g. 'ϫpʨandas.ýreadĘ_csv'ĝS ̛will reǎtuĜrn˳ read_ʗcsΌv ƋfuTYnȞctiŷon as\n    \n ̫ ȩ͍  dïefiɎ͓neḓ© by pandaƱs\n\nR&etuŌrȳns:#XJZIrQxqBLwhCOMEy\n  ϳʍ  imˆϦportϑed ·objec̣tŪĐ")), Assign(targets=[Name(id='class__name', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='str', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='module_name', ctx=Store())], value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='str', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='module_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='__name__', ctx=Load()), ctx=Load()), Name(id='class__name', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='module_name', ctx=Load())], keywords=[keyword(arg='fromlist', value=List(elts=[Name(id='class__name', ctx=Load())], ctx=Load()))])), Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Name(id='class__name', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='ModuleAutoSummary', bases=[Name(id='Autosummary', ctx=Load())], keywords=[], body=[FunctionDef(name='get_items', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='names')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Ē ')), Assign(targets=[Name(id='new_names', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='nam_e', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Assign(targets=[Name(id='mod', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='nam_e', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='mod_items', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Constant(value='__all__'), Attribute(value=Name(id='mod', ctx=Load()), attr='__dict__', ctx=Load())], keywords=[])), For(target=Name(id='t', ctx=Store()), iter=Name(id='mod_items', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='.'), ops=[NotIn()], comparators=[Name(id='t', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='_')], keywords=[]))]), body=[Assign(targets=[Name(id='ob', ctx=Store())], value=Call(func=Name(id='get_by_na_me', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='nam_e', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Name(id='t', ctx=Load()), conversion=-1)])], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='ob', ctx=Load()), Constant(value='__module__')], keywords=[]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='ob', ctx=Load()), attr='__module__', ctx=Load())), Assign(targets=[Name(id='t', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='m', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Name(id='t', ctx=Load()), conversion=-1)]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='etna')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='new_names', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='get_items', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='new_names', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='X')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Call(func=Attribute(value=Name(id='X', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())))])], keywords=[])), Return(value=Name(id='new', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='s', args=arguments(posonlyargs=[], args=[arg(arg='app', annotation=Name(id='Sphinx', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ǜu      ü ˲ ̡ƅŞ  \x88\x8fĚϡ Ƙ  ˤ')), Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='connect', ctx=Load()), args=[Constant(value='autodoc-skip-member'), Name(id='skip', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='add_directive', ctx=Load()), args=[Constant(value='moduleautosummary'), Name(id='ModuleAutoSummary', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='add_js_file', ctx=Load()), args=[Constant(value='https://buttons.github.io/buttons.js')], keywords=[keyword(value=Dict(keys=[Constant(value='async')], values=[Constant(value='async')]))]))], decorator_list=[]), Assign(targets=[Name(id='autodoc_member_orde', ctx=Store())], value=Constant(value='groupwise')), Assign(targets=[Name(id='autoclass_content', ctx=Store())], value=Constant(value='both')), Assign(targets=[Name(id='autosummary_generate', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Call(func=Attribute(value=Name(id='SOURCE_PATH', ctx=Load()), attr='joinpath', ctx=Load()), args=[Constant(value='api')], keywords=[])], keywords=[keyword(arg='ignore_errors', value=Constant(value=True))]))], type_ignores=[])