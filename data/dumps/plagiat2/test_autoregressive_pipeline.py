Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='unittest.mock', names=[alias(name='ANY')], level=0), ImportFrom(module='etna.models', names=[alias(name='NaiveModel')], level=0), ImportFrom(module='unittest.mock', names=[alias(name='patch')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='unittest.mock', names=[alias(name='MagicMock')], level=0), ImportFrom(module='etna.models', names=[alias(name='LinearPerSegmentModel')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='AutoRegressivePipeline')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='MetricAggregationMode')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='MAE')], level=0), ImportFrom(module='etna.models', names=[alias(name='CatBoostPerSegmentModel')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.transforms', names=[alias(name='DateFlagsTransform')], level=0), ImportFrom(module='etna.models', names=[alias(name='ProphetModel')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='PredictionIntervalContextIgnorantAbstractModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='SeasonalMovingAverageModel')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='NonPredictionIntervalContextIgnorantAbstractModel')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='NonPredictionIntervalContextRequiredAbstractModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='CatBoostMultiSegmentModel')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='PredictionIntervalContextRequiredAbstractModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='SARIMAXModel')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='LagTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='LinearTrendTransform')], level=0), Assign(targets=[Name(id='DEFAULT_METRICS', ctx=Store())], value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load()))])], ctx=Load())), FunctionDef(name='test_fitHmqI', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='modelbps', ctx=Store())], value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='transforms', ctx=Store())], value=List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=1)], ctx=Load()))]), Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[])], ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='AutoRegressivePipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='modelbps', ctx=Load())), keyword(arg='transforms', value=Name(id='transforms', ctx=Load())), keyword(arg='horizon', value=Constant(value=5)), keyword(arg='step', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_backtest_forecasts_sani', args=arguments(posonlyargs=[], args=[arg(arg='step_ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='ts', ctx=Store()), Name(id='expected_metrics_df', ctx=Store()), Name(id='expected_forecast_df', ctx=Store())], ctx=Store())], value=Name(id='step_ts', ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='AutoRegressivePipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[])), keyword(arg='horizon', value=Constant(value=5)), keyword(arg='step', value=Constant(value=1))])), Assign(targets=[Tuple(elts=[Name(id='me', ctx=Store()), Name(id='forecast_df', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='n_folds', value=Constant(value=3))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Call(func=Attribute(value=Name(id='me', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))]), ops=[Eq()], comparators=[Name(id='expected_metrics_df', ctx=Load())])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='forecast_df', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_forecast_df', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='spy_decorator', args=arguments(posonlyargs=[], args=[arg(arg='method_to_decorate')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='         ')), Assign(targets=[Name(id='moc', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[arg(arg='SELF')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='  ̛Ο Ƨ      ǅ      O ')), Expr(value=Call(func=Name(id='moc', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Return(value=Call(func=Name(id='method_to_decorate', ctx=Load()), args=[Name(id='SELF', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='wrapper', ctx=Load()), attr='mock', ctx=Store())], value=Name(id='moc', ctx=Load())), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), FunctionDef(name='test_private_forecast_context_ignorant_model', args=arguments(posonlyargs=[], args=[arg(arg='model_class'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='MAKE_FUTURE', ctx=Store())], value=Call(func=Name(id='spy_decorator', ctx=Load()), args=[Attribute(value=Name(id='TSDataset', ctx=Load()), attr='make_future', ctx=Load())], keywords=[])), Assign(targets=[Name(id='modelbps', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='spec', value=Name(id='model_class', ctx=Load()))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='modelbps', ctx=Load()), attr='forecast', ctx=Load()), attr='side_effect', ctx=Store())], value=Name(id='fake_forecast', ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='patch', ctx=Load()), attr='object', ctx=Load()), args=[Name(id='TSDataset', ctx=Load()), Constant(value='make_future'), Name(id='MAKE_FUTURE', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='AutoRegressivePipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='modelbps', ctx=Load())), keyword(arg='horizon', value=Constant(value=5)), keyword(arg='step', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='_forecast', ctx=Load()), args=[], keywords=[]))]), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='MAKE_FUTURE', ctx=Load()), attr='mock', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=5)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='MAKE_FUTURE', ctx=Load()), attr='mock', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Attribute(value=Name(id='pipeline', ctx=Load()), attr='step', ctx=Load()))])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='modelbps', ctx=Load()), attr='forecast', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=5)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='modelbps', ctx=Load()), attr='forecast', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ANY', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model_class'), List(elts=[Name(id='NonPredictionIntervalContextIgnorantAbstractModel', ctx=Load()), Name(id='PredictionIntervalContextIgnorantAbstractModel', ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_private_forecast_context_required_model', args=arguments(posonlyargs=[], args=[arg(arg='model_class'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='MAKE_FUTURE', ctx=Store())], value=Call(func=Name(id='spy_decorator', ctx=Load()), args=[Attribute(value=Name(id='TSDataset', ctx=Load()), attr='make_future', ctx=Load())], keywords=[])), Assign(targets=[Name(id='modelbps', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[keyword(arg='spec', value=Name(id='model_class', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='modelbps', ctx=Load()), attr='context_size', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Attribute(value=Name(id='modelbps', ctx=Load()), attr='forecast', ctx=Load()), attr='side_effect', ctx=Store())], value=Name(id='fake_forecast', ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='patch', ctx=Load()), attr='object', ctx=Load()), args=[Name(id='TSDataset', ctx=Load()), Constant(value='make_future'), Name(id='MAKE_FUTURE', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='AutoRegressivePipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='modelbps', ctx=Load())), keyword(arg='horizon', value=Constant(value=5)), keyword(arg='step', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='_forecast', ctx=Load()), args=[], keywords=[]))]), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='MAKE_FUTURE', ctx=Load()), attr='mock', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=5)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='MAKE_FUTURE', ctx=Load()), attr='mock', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Attribute(value=Name(id='pipeline', ctx=Load()), attr='step', ctx=Load())), keyword(arg='tail_steps', value=Attribute(value=Name(id='modelbps', ctx=Load()), attr='context_size', ctx=Load()))])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='modelbps', ctx=Load()), attr='forecast', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=5)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='modelbps', ctx=Load()), attr='forecast', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ANY', ctx=Load())), keyword(arg='prediction_size', value=Attribute(value=Name(id='pipeline', ctx=Load()), attr='step', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model_class'), List(elts=[Name(id='NonPredictionIntervalContextRequiredAbstractModel', ctx=Load()), Name(id='PredictionIntervalContextRequiredAbstractModel', ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_forecast_columns', args=arguments(posonlyargs=[], args=[arg(arg='example_reg_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ƹʅ́ĶTesÅtϏ> ȀɎʥtĖhĈat ϋAΑuIώȰt˭oĭRe\u0379grreȅϤsɽǞs²ivePipeǲǔΌlKi̿ɨn\x91e geÑneratɖesƍ^ öal\u0379lę the ɂ˃ǖcol»ƓumnDs.Έˣ')), Assign(targets=[Name(id='original_ts', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='example_reg_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='h_orizon', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='modelbps', ctx=Store())], value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='transforms', ctx=Store())], value=List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=1)], ctx=Load()))]), Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[keyword(arg='is_weekend', value=Constant(value=True))])], ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='AutoRegressivePipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='modelbps', ctx=Load())), keyword(arg='transforms', value=Name(id='transforms', ctx=Load())), keyword(arg='horizon', value=Name(id='h_orizon', ctx=Load())), keyword(arg='step', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_reg_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast_pipelineX', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='original_ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='forecast_pipelineX', ctx=Load()), attr='columns', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='original_ts', ctx=Load()), attr='columns', ctx=Load())], keywords=[])])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='forecast_pipelineX', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[]), attr='isna', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])), Assert(test=Call(func=Attribute(value=Subscript(value=Name(id='forecast_pipelineX', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='regressor_exog_weekend')], ctx=Load()), ctx=Load()), attr='equals', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='original_ts', ctx=Load()), attr='df_exog', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='forecast_pipelineX', ctx=Load()), attr='index', ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='regressor_exog_weekend')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_forecast_on', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='TeƕstƢɗ t˥Ūhat˔ ÞA\x85utoūR͛ƖegɕǃȺæ̂ressiºǴv\x84ʔ)e¸ǤͿɴPipeºɾlinαeŬ ȏg̳et\x9cösġȅˁϨƺ pŒred͡iɔc,tiǿĴo̙ƕnƛsƦ ̔one ɺbǅϴ¹ɶyΰ od\x95?̨ά˪ne \x7fǼiϗf stepĿ̺ŷΝʹƂ ͳįs eϨquΨÚΦal tͤϵ<̀Ũ^o Ƹ1.')), Assign(targets=[Name(id='original_ts', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='h_orizon', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='modelbps', ctx=Store())], value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='transforms', ctx=Store())], value=List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=1)], ctx=Load()))])], ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='AutoRegressivePipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='modelbps', ctx=Load())), keyword(arg='transforms', value=Name(id='transforms', ctx=Load())), keyword(arg='horizon', value=Name(id='h_orizon', ctx=Load())), keyword(arg='step', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast_pipelineX', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='original_ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='original_ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[])), Assign(targets=[Name(id='modelbps', ctx=Store())], value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='modelbps', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='original_ts', ctx=Load())], keywords=[])), For(target=Name(id='iW', ctx=Store()), iter=Call(func=Name(id='RANGE', ctx=Load()), args=[Name(id='h_orizon', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='cu', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[keyword(arg='freq', value=Attribute(value=Name(id='original_ts', ctx=Load()), attr='freq', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='cu', ctx=Load()), attr='transform', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cur_forecast_ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='cu', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='CUR_FUTURE_TS', ctx=Store())], value=Call(func=Attribute(value=Name(id='modelbps', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='cur_forecast_ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='to_add_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='CUR_FUTURE_TS', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df', ctx=Load()), Subscript(value=Name(id='to_add_df', ctx=Load()), slice=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='forecast_manual', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='tail', ctx=Load()), args=[Name(id='h_orizon', ctx=Load())], keywords=[])], keywords=[keyword(arg='freq', value=Attribute(value=Name(id='original_ts', ctx=Load()), attr='freq', ctx=Load()))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='forecast_pipelineX', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='target')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='forecast_manual', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='target')], ctx=Load()), ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_forecast_multi_step', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds'), arg(arg='h_orizon'), arg(arg='step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='̆Test that AutŴo\x7fRegressivȝeŗPŶipe̍linˍe gʥe\x8ctŦs rc¡orrect̤ ŏ˵ɐήnumbeσɷr of ĝʅpredi²cŦt˫ionsǮ iíf sǣ̹ŰteĿpɜ is more ȋthǻan 1.ȴȒ')), Assign(targets=[Name(id='modelbps', ctx=Store())], value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='transforms', ctx=Store())], value=List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Name(id='step', ctx=Load())], ctx=Load()))])], ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='AutoRegressivePipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='modelbps', ctx=Load())), keyword(arg='transforms', value=Name(id='transforms', ctx=Load())), keyword(arg='horizon', value=Name(id='h_orizon', ctx=Load())), keyword(arg='step', value=Name(id='step', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast_pipelineX', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Subscript(value=Attribute(value=Attribute(value=Name(id='forecast_pipelineX', ctx=Load()), attr='df', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='h_orizon', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='horizon, step'), Tuple(elts=[Tuple(elts=[Constant(value=1), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value=5), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value=5), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=5), Constant(value=3)], ctx=Load()), Tuple(elts=[Constant(value=5), Constant(value=4)], ctx=Load()), Tuple(elts=[Constant(value=5), Constant(value=5)], ctx=Load()), Tuple(elts=[Constant(value=20), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value=20), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=20), Constant(value=3)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_forecast_prediction_interval_interface', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='TʱestƮͶ tΞŹ͈Ưhe forec9astʠ interfaceπ wϊith predictƫion iͼnʩtervals.')), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='AutoRegressivePipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), keyword(arg='transforms', value=List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=1)], ctx=Load()))])], ctx=Load())), keyword(arg='horizon', value=Constant(value=5)), keyword(arg='step', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='forecast', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_slice', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Set(elts=[Constant(value='target_0.025'), Constant(value='target_0.975'), Constant(value='target')]), attr='issubset', ctx=Load()), args=[Attribute(value=Name(id='segment_slice', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=BinOp(left=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.975'), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.025'), ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)]), attr='all', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_forecast_raise_error_if_not_fitted', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='TăestM that AutoRegΑ\x8eresùs\u0379ivePipeͅǁlώiÊĈne raϽise erroÃρr¼ when c\x9fallɢing forecast wi thouŰt bežeing  ¯fit.')), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='AutoRegressivePipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), keyword(arg='horizon', value=Constant(value=5))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='AutoRegressivePipeline is not fitted!'))]))], body=[Assign(targets=[Name(id='__', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_forecast_with_fit_transforms', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='γ˚TéeȨĖ\u0380st ĿɩthĄat Aǀuň͂ȚʃłļtoReƀgr̊eƁɤssiɌv+˸¹ʖρƇeɖȳϖʹPŉˤiΥpe̵line canŕ workί̮ ąw¸ͻʈiɎ*ÜƆth t(ŒŌr¨ansϛɎfΩǖoǅǩƴīrmsȪɰ\x86Ζ tĔʶha˘t̊ need fiʿ̰ǒλktϖtːing.\x94\x94ĺ')), Assign(targets=[Name(id='h_orizon', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='modelbps', ctx=Store())], value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='transforms', ctx=Store())], value=List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=1)], ctx=Load()))]), Call(func=Name(id='LinearTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))])], ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='AutoRegressivePipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='modelbps', ctx=Load())), keyword(arg='transforms', value=Name(id='transforms', ctx=Load())), keyword(arg='horizon', value=Name(id='h_orizon', ctx=Load())), keyword(arg='step', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='fake_forecast', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='prediction_size', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='intrRe', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='prediction_size', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='prediction_size', ctx=Load()))), ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Store())], value=Name(id='df', ctx=Load())), Return(value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_bac', args=arguments(posonlyargs=[], args=[arg(arg='big_examp_le_tsdf', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ChecEk that˧Ǽ AujtoReȥgrʈessivePͨipe͒Ǌl̬ine.backtest̝ \x8fgives the same res˳ułϐlts Ǒin c̵ase of siȩngle and multipleȔ jobs modeʨs͙.')), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='AutoRegressivePipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='CatBoostPerSegmentModel', ctx=Load()), args=[], keywords=[])), keyword(arg='transforms', value=List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())), keyword(arg='out_column', value=Constant(value='regressor_lag_feature'))])], ctx=Load())), keyword(arg='horizon', value=Constant(value=7)), keyword(arg='step', value=Constant(value=1))])), Assign(targets=[Name(id='ts1', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='big_examp_le_tsdf', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts2', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='big_examp_le_tsdf', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pipeline_1', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='pipeline', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pipeline_2', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='pipeline', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='__', ctx=Store()), Name(id='forecast_1', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline_1', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts1', ctx=Load())), keyword(arg='n_jobs', value=Constant(value=1)), keyword(arg='metrics', value=Name(id='DEFAULT_METRICS', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='__', ctx=Store()), Name(id='forec', ctx=Store()), Name(id='__', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline_2', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts2', ctx=Load())), keyword(arg='n_jobs', value=Constant(value=3)), keyword(arg='metrics', value=Name(id='DEFAULT_METRICS', ctx=Load()))])), Assert(test=Call(func=Attribute(value=Name(id='forecast_1', ctx=Load()), attr='equals', ctx=Load()), args=[Name(id='forec', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='long_1', ctx=Load())]), FunctionDef(name='te', args=arguments(posonlyargs=[], args=[arg(arg='modelbps'), arg(arg='transforms'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Name(id='example_tsds', ctx=Load())), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='AutoRegressivePipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='modelbps', ctx=Load())), keyword(arg='transforms', value=Name(id='transforms', ctx=Load())), keyword(arg='horizon', value=Constant(value=7))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='start_idx', ctx=Store())], value=Constant(value=50)), Assign(targets=[Name(id='end_idx', ctx=Store())], value=Constant(value=70)), Assign(targets=[Name(id='sta', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), slice=Name(id='start_idx', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='end_timestamp', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), slice=Name(id='end_idx', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='num_points', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='end_idx', ctx=Load()), op=Sub(), right=Name(id='start_idx', ctx=Load())), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='predict_ts', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='predict_ts', ctx=Load()), attr='df', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='predict_ts', ctx=Load()), attr='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=Constant(value=5), upper=BinOp(left=Name(id='end_idx', ctx=Load()), op=Add(), right=Constant(value=5))), ctx=Load())), Assign(targets=[Name(id='result_tswhLoT', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='predict_ts', ctx=Load())), keyword(arg='start_timestamp', value=Name(id='sta', ctx=Load())), keyword(arg='end_timestamp', value=Name(id='end_timestamp', ctx=Load()))])), Assign(targets=[Name(id='result_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='result_tswhLoT', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='any', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='result_df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])], keywords=[]))), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='result_df', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='example_tsds', ctx=Load()), attr='segments', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='num_points', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, transforms'), List(elts=[Tuple(elts=[Call(func=Name(id='CatBoostMultiSegmentModel', ctx=Load()), args=[], keywords=[keyword(arg='iterations', value=Constant(value=100))]), List(elts=[Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=Call(func=Name(id='li_st', ctx=Load()), args=[Call(func=Name(id='RANGE', ctx=Load()), args=[Constant(value=7), Constant(value=15)], keywords=[])], keywords=[]))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=Call(func=Name(id='li_st', ctx=Load()), args=[Call(func=Name(id='RANGE', ctx=Load()), args=[Constant(value=7), Constant(value=15)], keywords=[])], keywords=[]))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SeasonalMovingAverageModel', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Constant(value=2)), keyword(arg='seasonality', value=Constant(value=7))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])])], type_ignores=[])