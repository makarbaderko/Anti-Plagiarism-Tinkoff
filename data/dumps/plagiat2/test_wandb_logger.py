Module(body=[ImportFrom(module='unittest.mock', names=[alias(name='call')], level=0), ImportFrom(module='unittest.mock', names=[alias(name='patch')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.loggers', names=[alias(name='WandbLogger')], level=0), ImportFrom(module='etna.loggers', names=[alias(name='tslogger', asname='_tslogger')], level=0), FunctionDef(name='tslogger', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ǈ   0 ̏ʨ   ǕΣ Ä̽áN ɗ \x95    ǲ˳   đ·')), Assign(targets=[Attribute(value=Name(id='_tslogger', ctx=Load()), attr='loggers', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Yield(value=Name(id='_tslogger', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='_tslogger', ctx=Load()), attr='loggers', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_wandb_logger_log', args=arguments(posonlyargs=[], args=[arg(arg='wandb'), arg(arg='tslogger')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='WANDB_LOGGER', ctx=Store())], value=Call(func=Name(id='WandbLogger', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='WANDB_LOGGER', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[Constant(value='test')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[Dict(keys=[Constant(value='MAE')], values=[Constant(value=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[Dict(keys=[Constant(value='MAPE')], values=[Constant(value=1.5)])], keywords=[])), Assign(targets=[Name(id='call', ctx=Store())], value=List(elts=[Call(func=Name(id='call', ctx=Load()), args=[Dict(keys=[Constant(value='MAE')], values=[Constant(value=0)])], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Dict(keys=[Constant(value='MAPE')], values=[Constant(value=1.5)])], keywords=[])], ctx=Load())), Assert(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='wandb', ctx=Load()), attr='init', ctx=Load()), attr='return_value', ctx=Load()), attr='log', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='wandb', ctx=Load()), attr='init', ctx=Load()), attr='return_value', ctx=Load()), attr='log', ctx=Load()), attr='assert_has_calls', ctx=Load()), args=[Name(id='call', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='etna.loggers.wandb_logger.wandb')], keywords=[])])], type_ignores=[])