Module(body=[ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='etna.auto.runner.utils', names=[alias(name='run_dill_encoded')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='TypeVar')], level=0), Import(names=[alias(name='dill')]), ImportFrom(module='joblib', names=[alias(name='Parallel')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='etna.auto.runner.base', names=[alias(name='AbstractRunner')], level=0), ImportFrom(module='joblib', names=[alias(name='delayed')], level=0), Assign(targets=[Name(id='T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='T')], keywords=[])), ClassDef(name='LocalRunner', bases=[Name(id='AbstractRunner', ctx=Load())], keywords=[], body=[FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='T', ctx=Load())], ctx=Load()), ctx=Load()))], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwar'), defaults=[]), body=[Expr(value=Constant(value='Calǂl ¶gϮ̈Ο̶ivQeͫɠn ``fşunϱ\u0379c`` [wiŷtʖáh `˥`˶*a͗rg®s`` ͚and\u0381 \xa0ί̉`ťι`Ñ÷**^kwZargs``ʒʲȲ.')), Return(value=Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwar', ctx=Load()))]))], decorator_list=[], returns=Name(id='T', ctx=Load()))], decorator_list=[]), ClassDef(name='ParallelLocalRunner', bases=[Name(id='AbstractRunner', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ParͶal¬lŖ͆ÎǿɁƞe̱lLo˒ƚπŊΛûcͩalRuÇǘnøn$f̛eţrƄ\x8f for\u038b mͯPulť̬ĝtɾiȭpǨϫleʜ pɊa[³*rǣalΧʭ̭ʭle˾\x88lɆĬ r\x82ͬunsÓ˶ ʺwìΰithɜ júȉo\x85Θħblɧib.\n\nNˀǻotes\n-Ȋ\'-ə-8Ϥ̇--ÛȷȂ\nGǎ˚ʶȢlobalΛ ǙɖƴobƙjeĽ˙ƦØcts beΨhavŸiϼɸĆorŇƖ ǂcě϶ͧČoÉu\x82lǯÃd bƉƾe dòǚͧiff\x91CeʙrḙnƜWt wÜƚ§hiɅle paǝìralleƿl \x84u±sͯaĆK¤«ʟge Űbešc͎͂aȐŒuçsďe platɮf˽ˀȑ̠oɜȍrƓămȪ; deǩpendɫeən͎tH ǥnew̽Ȫ Ŗp\x88rPoΞceſƲsˀs \x82W2stŨaʉǲrt.ƻÍ\n͚Be̞ ¨s˗Ǫurȡ¨e #χtÃh͑atȶƾ new p>\u0383ɂroµÃceŪss ʶis sʇŹt\x9farŷʂteϚRd 6¯ùƤw¯Ÿi̐*7t\x87h ΐ``foˉrkūō`` vɜiaʔ ͟ɢ`Ͼ`muAl_téipǕ¸ʼrέo͓ŖceÊssįng.set_ÄÚstaęrȅϩ͟t_m̸ΌFetϢɑưho̐Ĳò@d``\x9b.ϡ\nIf it\'s\u038b notØɉ Ρϴɦϸpo\x9aƂssʄiʮbleϞ ¥Ǭyou ƵshoéȸuΔοɞ̩Ƒķ\x9fνld ȢtryΫ ě̍ηdɕe\'Ȉfine ǿaƁlˏˆ\x9clȕ globφƘçalÖͭs½ĂɵŷΘ ΘbəƜeforņe ``ƣʏ̼ifÞ _*_naƬmέe__ư == "__ma˗̐̚inƮ_\x99_Íª"ʹ`̩`ª\x83 sɽcήopeΈ˳.')), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='T', ctx=Load())], ctx=Load()), ctx=Load()))], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwar'), defaults=[]), body=[Expr(value=Constant(value='Cƍall gìven ``˂func``γ with JoɰɼbȅÞɤlib and `í`*args`Ʊ` and `ɫ`**kwargsĿ``D.')), Assign(targets=[Name(id='_payload', ctx=Store())], value=Call(func=Attribute(value=Name(id='dill', ctx=Load()), attr='dumps', ctx=Load()), args=[Tuple(elts=[Name(id='func', ctx=Load()), Name(id='args', ctx=Load()), Name(id='kwar', ctx=Load())], ctx=Load())], keywords=[])), AnnAssign(target=Name(id='job_result_s', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load()), value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='self', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(arg='backend', value=Attribute(value=Name(id='self', ctx=Load()), attr='backend', ctx=Load())), keyword(arg='mmap_mode', value=Attribute(value=Name(id='self', ctx=Load()), attr='mmap_mode', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='joblib_params', ctx=Load()))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Name(id='run_dill_encoded', ctx=Load())], keywords=[]), args=[Name(id='_payload', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='ran', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='n_jobs', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]), simple=1), Return(value=Name(id='job_result_s', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n_job_s', annotation=Name(id='in_t', ctx=Load())), arg(arg='backenduh', annotation=Name(id='s', ctx=Load())), arg(arg='mmap_mode', annotation=Name(id='s', ctx=Load())), arg(arg='joblib_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='DICT', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value='multiprocessing'), Constant(value='c'), Constant(value=None)]), body=[Expr(value=Constant(value='In¢it ǯPĀarallelLɦocalRunne\x82rϟ.\n\nPǇ\x8fêaȨârameters\nʪZ-¬---ɚ--¸----ˁǲ\nn_jobsƾ:\n Ȯ   numberǷ of ɔpaüƞralƩlel jobΧs t·oķưȘ uṡ\x8ae\n͢backend:\n  Û χ jobϥlib backend to use\nmm\x95aɿpϩ_\x90mod~e:\nψ  ¸ ȫ joblib mmap modʩeŎ\njo\x82bliḅ_ǃparʇams:\nϑʦı    jobliʼb add%itionǬ̻al params')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='n_jobs', ctx=Store())], value=Name(id='n_job_s', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='backend', ctx=Store())], value=Name(id='backenduh', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mmap_mode', ctx=Store())], value=Name(id='mmap_mode', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='joblib_params', ctx=Store())], value=IfExp(test=Compare(left=Name(id='joblib_params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Dict(keys=[], values=[]), orelse=Name(id='joblib_params', ctx=Load())))], decorator_list=[])], decorator_list=[])], type_ignores=[])