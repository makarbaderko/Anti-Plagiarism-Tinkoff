Module(body=[ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), Import(names=[alias(name='torch')]), ImportFrom(module='common', names=[alias(name='non_diag')], level=1), ImportFrom(module='config', names=[alias(name='prepare_config'), alias(name='ConfigError')], level=2), ClassDef(name='MultiSimilarityLoss', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='config'), arg(arg='aggregation')], kw_defaults=[Constant(value=None), Constant(value='mean')], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_aggregation', ctx=Store())], value=Name(id='aggregation', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='threshold'), arg(arg='margin'), arg(arg='positive_scale'), arg(arg='ne')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0.5), Constant(value=0.1), Constant(value=2.0), Constant(value=40.0)]), body=[Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='threshold'), Name(id='threshold', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='margin'), Name(id='margin', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='positive_scale'), Name(id='positive_scale', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='negative_scale'), Name(id='ne', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='embeddings'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='embeddings', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Embeddings and labels shape mismatch')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='embeddings', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='dim', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='embeddings', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='embeddings', ctx=Store())], value=Call(func=Attribute(value=Name(id='embeddings', ctx=Load()), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Name(id='dim', ctx=Load())], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='flatten', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='all_scores', ctx=Store())], value=Call(func=Name(id='non_diag', ctx=Load()), args=[Call(func=Name(id='scorer', ctx=Load()), args=[Subscript(value=Name(id='embeddings', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load()), Subscript(value=Name(id='embeddings', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='all_same', ctx=Store())], value=Call(func=Name(id='non_diag', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='labels', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='labels', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Slice()], ctx=Load()), ctx=Load())])], keywords=[])), Assign(targets=[Name(id='zero_loss', ctx=Store())], value=BinOp(left=Constant(value=0), op=Mult(), right=Subscript(value=Call(func=Attribute(value=Name(id='embeddings', ctx=Load()), attr='flatten', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()))), Assign(targets=[Name(id='loss_es', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='same', ctx=Store()), Name(id='scores', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='z', ctx=Load()), args=[Name(id='all_same', ctx=Load()), Name(id='all_scores', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='positive_scores', ctx=Store())], value=Subscript(value=Name(id='scores', ctx=Load()), slice=Name(id='same', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='negative_scoressqNn', ctx=Store())], value=Subscript(value=Name(id='scores', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Name(id='same', ctx=Load())), ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='negative_scoressqNn', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='positive_scores', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='loss_es', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='zero_loss', ctx=Load())], keywords=[])), Continue()], orelse=[]), Assign(targets=[Name(id='selected_negative_scores', ctx=Store())], value=Subscript(value=Name(id='negative_scoressqNn', ctx=Load()), slice=Compare(left=BinOp(left=Name(id='negative_scoressqNn', ctx=Load()), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='margin'), ctx=Load())), ops=[Gt()], comparators=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='positive_scores', ctx=Load())], keywords=[])]), ctx=Load())), Assign(targets=[Name(id='selected_positive_scores', ctx=Store())], value=Subscript(value=Name(id='positive_scores', ctx=Load()), slice=Compare(left=BinOp(left=Name(id='positive_scores', ctx=Load()), op=Sub(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='margin'), ctx=Load())), ops=[Lt()], comparators=[Call(func=Name(id='max', ctx=Load()), args=[Name(id='negative_scoressqNn', ctx=Load())], keywords=[])]), ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='selected_negative_scores', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='selected_positive_scores', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='loss_es', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='zero_loss', ctx=Load())], keywords=[])), Continue()], orelse=[]), Assign(targets=[Name(id='positive_loss', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=1.0), op=Div(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='positive_scale'), ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Add(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='exp', ctx=Load()), args=[BinOp(left=UnaryOp(op=USub(), operand=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='positive_scale'), ctx=Load())), op=Mult(), right=BinOp(left=Name(id='selected_positive_scores', ctx=Load()), op=Sub(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='threshold'), ctx=Load())))], keywords=[])], keywords=[]))], keywords=[]))), Assign(targets=[Name(id='negative_loss', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=1.0), op=Div(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='negative_scale'), ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Add(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='exp', ctx=Load()), args=[BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='negative_scale'), ctx=Load()), op=Mult(), right=BinOp(left=Name(id='selected_negative_scores', ctx=Load()), op=Sub(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='threshold'), ctx=Load())))], keywords=[])], keywords=[]))], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='loss_es', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='positive_loss', ctx=Load()), op=Add(), right=Name(id='negative_loss', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='loss_es', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='stack', ctx=Load()), args=[Name(id='loss_es', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_aggregation', ctx=Load()), ops=[Eq()], comparators=[Constant(value='none')]), body=[Return(value=Name(id='loss_es', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_aggregation', ctx=Load()), ops=[Eq()], comparators=[Constant(value='mean')]), body=[Return(value=Call(func=Attribute(value=Name(id='loss_es', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknown aggregation: {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_aggregation', ctx=Load())], keywords=[])], keywords=[]))])])], decorator_list=[])], decorator_list=[])], type_ignores=[])