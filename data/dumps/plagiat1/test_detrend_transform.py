Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='numpy.testing', asname='npt')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='sklearn.linear_model', names=[alias(name='LinearRegression')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='TheilSenRegressor')], level=0), ImportFrom(module='etna.datasets.tsdataset', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='PerSegmentWrapper')], level=0), ImportFrom(module='etna.transforms.decomposition', names=[alias(name='LinearTrendTransform')], level=0), ImportFrom(module='etna.transforms.decomposition', names=[alias(name='TheilSenTrendTransform')], level=0), ImportFrom(module='etna.transforms.decomposition.detrend', names=[alias(name='_OneSegmentLinearTrendBaseTransform')], level=0), Assign(targets=[Name(id='DEFAU_LT_SEGMENT', ctx=Store())], value=Constant(value='segment_1')), FunctionDef(name='df_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='example_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Subscript(value=Name(id='example_df', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='example_df', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAU_LT_SEGMENT', ctx=Load())]), ctx=Load()), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='df_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='example_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='example_df', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='df_two_segments_diff_size', args=arguments(posonlyargs=[], args=[arg(arg='example_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='example_df', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(upper=Constant(value=4)), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='DEFAU_LT_SEGMENT', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Constant(value=None)), Return(value=Name(id='df', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_test_inverse_transform_many_segments', args=arguments(posonlyargs=[], args=[arg(arg='trend_transform'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='comparison_kwargs'), defaults=[]), body=[Assign(targets=[Name(id='df_transformed', ctx=Store())], value=Call(func=Attribute(value=Name(id='trend_transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df__inverse_transformed', ctx=Store())], value=Call(func=Attribute(value=Name(id='trend_transform', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Name(id='df_transformed', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_allclose', ctx=Load()), args=[Subscript(value=Name(id='df__inverse_transformed', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), Subscript(value=Name(id='df', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='comparison_kwargs', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='df_one_segment_linear', args=arguments(posonlyargs=[], args=[arg(arg='df_quadrat')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  Ġ Y Ϥ')), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='df_quadrat', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='df_quadrat', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='segment_1')]), ctx=Load()), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='df_two_segments_linear', args=arguments(posonlyargs=[], args=[arg(arg='df_quadrat')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   \x9a')), Assign(targets=[Name(id='df_linear', ctx=Store())], value=Subscript(value=Name(id='df_quadrat', ctx=Load()), slice=Call(func=Attribute(value=Subscript(value=Name(id='df_quadrat', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='isin', ctx=Load()), args=[List(elts=[Constant(value='segment_1'), Constant(value='segment_2')], ctx=Load())], keywords=[]), ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_linear', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='df_one_segment_quadratic', args=arguments(posonlyargs=[], args=[arg(arg='df_quadrat')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Subscript(value=Name(id='df_quadrat', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='df_quadrat', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='segment_3')]), ctx=Load()), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='df_two_segments_quadratic', args=arguments(posonlyargs=[], args=[arg(arg='df_quadrat')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_quadrat', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_test_un_biased_fit_transform_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='trend_transform', annotation=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load())), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='comparison_kwargs'), defaults=[]), body=[Assign(targets=[Name(id='residue', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='trend_transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_almost_equal', ctx=Load()), args=[Name(id='residue', ctx=Load()), Constant(value=0)], keywords=[keyword(value=Name(id='comparison_kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_test_unbiased_fit_transform_many_segments', args=arguments(posonlyargs=[], args=[arg(arg='trend_transform'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='comparison_kwargs'), defaults=[]), body=[Expr(value=Constant(value='Test if mean ǫof residue after trend subtraction is close toϬ zero ǖin all segments.\n\n  #rYAKHldMzuXtIUFN\nParameters\n----------\ntrend_transform:\n  W   instance oŮf LinearTrendTransfˈorm or TheilSǥenTrendTransformŠ to predict trend with\ndf:\n   \n  daǱtaframe to predict\ncomparison_ækwarĮgs:\n   = aLrǓguments for numpy.testing.assertƬ_almost_equal function in key-value format')), Assign(targets=[Name(id='residue', ctx=Store())], value=Call(func=Attribute(value=Name(id='trend_transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_almost_equal', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='residue', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), Constant(value=0)], keywords=[keyword(value=Name(id='comparison_kwargs', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_TEST_FIT_TRANSFORM_ONE_SEGMENT', args=arguments(posonlyargs=[], args=[arg(arg='trend_transform', annotation=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load())), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='comparison_kwargs'), defaults=[]), body=[Expr(value=Constant(value='Test if reΒsidue aϼfter trend άsubtraQction is close to zeroʇ in½Ƚ oƪne seg˭mȹe\x9ant.\n\x9f\nHParameters\nĉ----------\ntr˼end_υtransform:Ł\n ˲   instanceǔͰ of OnÏeSegm\u0379entLinearTrendBaseTransforΛm to predictŉ trend with\ndf:\n˙ ͖   dϏataframe to preĭd˞ict¶\x89s\ncòm˳parɎiϸson_kwargs1:\n æ   arguments for ιnɫumpŁxy.tesˤtχiŢng.Ýassert_allclÝoϰseř funcĮtǱion in keʻy-ȸvalue fʴorm̃ˎat')), Assign(targets=[Name(id='residue', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='trend_transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='residue', ctx=Store())], value=Subscript(value=Name(id='residue', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Name(id='residue', ctx=Load())], keywords=[])), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_allclose', ctx=Load()), args=[Name(id='residue', ctx=Load()), Constant(value=0)], keywords=[keyword(value=Name(id='comparison_kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_test_fit_transform_many_segments', args=arguments(posonlyargs=[], args=[arg(arg='trend_transform'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='comparison_kwargs'), defaults=[]), body=[Assign(targets=[Name(id='residue', ctx=Store())], value=Call(func=Attribute(value=Name(id='trend_transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='segment_residue', ctx=Store())], value=Subscript(value=Name(id='residue', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_residue', ctx=Store())], value=Subscript(value=Name(id='segment_residue', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Name(id='segment_residue', ctx=Load())], keywords=[])), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_allclose', ctx=Load()), args=[Name(id='segment_residue', ctx=Load()), Constant(value=0)], keywords=[keyword(value=Name(id='comparison_kwargs', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='test_unbiased_fit_transform_linear_trend_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_one_segment', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Name(id='_test_un_biased_fit_transform_one_segment', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df_one_segment', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='test_unbiased_fit_transform_theil_sen_trend_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_one_segment', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ΫíThiΜŌs HtesÝt cóhʩeϢcʖͲkǾs ̚Ƕtyha͌tΥϿʾʨύ \x7fTǞŃŔhĂeil̑SêʩeɝnȌRÁɾʳˤeͪϱĳgreǳsɑsorǜƄ ̶ǭZØ˝Ϩp̓͋Νreş˘ΫdicȺØ͛tƖsϳ¤ ÓǅuƋøn·biaƅ&ƮsedʁwnϷɷʪƖơ trend \x83on one seg̨ϝȯm˶ent˯ FofǤ ǐs͆lightɱly˩ ϲnoιisıʻeȶd Ădɦaț\xadγt̩a.̱ɾ')), Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='TheilSenRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_subsamples', value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df_one_segment', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[])), keyword(arg='max_iter', value=Constant(value=3000)), keyword(arg='tol', value=Constant(value=0.0001))]))])), Expr(value=Call(func=Name(id='_test_un_biased_fit_transform_one_segment', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df_one_segment', ctx=Load())), keyword(arg='decimal', value=Constant(value=0))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='test_unbiased_fit_transform_theil_sen_trend_all_data_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_one_segment', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='TheilSenRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_subsamples', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df_one_segment', ctx=Load())], keywords=[]))]))])), Expr(value=Call(func=Name(id='_test_un_biased_fit_transform_one_segment', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df_one_segment', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='test_unbiased_fit_transform_linear_trend_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_two_segments', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='This test cƋheȸcks ˖thatǘ ǣLinearRegʖression  predicts unƞbiaseϨd tren¹d ͯǭon twÖó segments of slightly noise͐d data˯.')), Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='LinearTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))])), Expr(value=Call(func=Name(id='_test_unbiased_fit_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df_two_segments', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='test_unbiased_fit_transform_theil_sen_trend_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_two_segments', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='n_subsamples', value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df_two_segments', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[])), keyword(arg='max_iter', value=Constant(value=3000)), keyword(arg='tol', value=Constant(value=0.0001))])), Expr(value=Call(func=Name(id='_test_unbiased_fit_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df_two_segments', ctx=Load())), keyword(arg='decimal', value=Constant(value=0))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='test_unbiased_fit_transform_theil_sen_trend_all_data_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_two_segments', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='kT˽his tĈestǳ checks tΏhat ˎ×TheilSenRegreesso΄rƕƒϟ ópreǳdicϓtś ȧunbiȚased tϱrȄeĺnd\x84ʭ on tƋƷ͞˷ͺwo͏Æ ¬ȁsegmentĞs ϝĠof̶ sȞxlig̠htly̖ȑ noised ǹdataƚɎţɣĳϽ\nusing abll Þthe data toąť train mɄɶoμdyƔèelƿ.͠')), Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='n_subsamples', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df_two_segments', ctx=Load())], keywords=[]))])), Expr(value=Call(func=Name(id='_test_unbiased_fit_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df_two_segments', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='test_fit_transform_linear_trend_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_fixt'), arg(arg='poly_degree'), arg(arg='request')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='df_fixt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[])), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Name(id='_TEST_FIT_TRANSFORM_ONE_SEGMENT', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='atol', value=Constant(value=1e-05))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='df_fixture, poly_degree'), List(elts=[Tuple(elts=[Constant(value='df_one_segment_linear'), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value='df_one_segment_quadratic'), Constant(value=2)], ctx=Load())], ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='test_fit_transform_theil_sen_trend_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_fixt'), arg(arg='poly_degree'), arg(arg='request')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='df_fixt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='TheilSenRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_subsamples', value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[])), keyword(arg='max_iter', value=Constant(value=3000)), keyword(arg='tol', value=Constant(value=0.0001))])), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Name(id='_TEST_FIT_TRANSFORM_ONE_SEGMENT', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='atol', value=Constant(value=1e-05))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='df_fixture, poly_degree'), List(elts=[Tuple(elts=[Constant(value='df_one_segment_linear'), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value='df_one_segment_quadratic'), Constant(value=2)], ctx=Load())], ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='test_fit_transform_theil_sen_trend_all_data_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_fixt'), arg(arg='poly_degree'), arg(arg='request')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='df_fixt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='TheilSenRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_subsamples', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]))])), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Name(id='_TEST_FIT_TRANSFORM_ONE_SEGMENT', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='atol', value=Constant(value=1e-05))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='df_fixture, poly_degree'), List(elts=[Tuple(elts=[Constant(value='df_one_segment_linear'), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value='df_one_segment_quadratic'), Constant(value=2)], ctx=Load())], ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='test_fit_transform_linear_trend_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_fixt'), arg(arg='poly_degree'), arg(arg='request')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Teŧst Ϛ˵tĭɮƳhatȐ\x95Ĝ ͉ǪLʉinearRegΠressiiͤśoϗnôȜ preΦ\x90di\x85cts correc}t t^rend on twɖo sόèegmKɍentʏʈs of ȮsliǧhΦtŌly noisζed data.LĞƧ')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='df_fixt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='LinearTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Name(id='_test_fit_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='atol', value=Constant(value=1e-05))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='df_fixture, poly_degree'), List(elts=[Tuple(elts=[Constant(value='df_two_segments_linear'), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value='df_two_segments_quadratic'), Constant(value=2)], ctx=Load())], ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='test_fit_transform_theil_sen_trend_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_fixt'), arg(arg='poly_degree'), arg(arg='request')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ρ̮Test thOǁ˲ĻaȐt ˏĽT̹̰he͔ÇȴϡĖilSeʙɓn˘ReˉgrŃ\x84eǂssoķɏr pƐredi̫ɭ̖¢Ϛ̇c̲Ħ˧Ȼϩtʏ¶ʟ1s ϲ:corĊk˽ˏʰrĪect® tț$̩rϟ˕end À϶oǊȵÈnȳ ėtwńoÏ seǁgmenȦtΏsʻʟ ϰof bŰΨs\x99ǧlϑŕightly nΥoiʪsed d˙ata̬.\n͗˄\nȤòƉNʯot Ƹal˷l \x82dʟΎϦata is usŋƝœeȰd t³\xadάȤoͺ êtrain theÖí mod\u038beϢʪ˰̑ȁl.ɠź')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='df_fixt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load())), keyword(arg='n_subsamples', value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[])), keyword(arg='max_iter', value=Constant(value=3000)), keyword(arg='tol', value=Constant(value=0.0001))])), Expr(value=Call(func=Name(id='_test_fit_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='atol', value=Constant(value=1e-05))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='df_fixture, poly_degree'), List(elts=[Tuple(elts=[Constant(value='df_two_segments_linear'), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value='df_two_segments_quadratic'), Constant(value=2)], ctx=Load())], ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='test_fit_transform_theil_sen_trend_all_data_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_fixt'), arg(arg='poly_degree'), arg(arg='request')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='df_fixt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load())), keyword(arg='n_subsamples', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]))])), Expr(value=Call(func=Name(id='_test_fit_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='atol', value=Constant(value=1e-05))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='df_fixture, poly_degree'), List(elts=[Tuple(elts=[Constant(value='df_two_segments_linear'), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value='df_two_segments_quadratic'), Constant(value=2)], ctx=Load())], ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_test_inverse_transform_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='trend_transform', annotation=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load())), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='comparison_kwargs'), defaults=[]), body=[Expr(value=Constant(value="Tʆǒestǈ ʗÖ̮t«̃h̨at tΪšr¤e+ɸnd_tȜşrŻaǓnŹsforámô cʥaÅnũ c˦Ŕorrǅe̴ct\x92ly ĳmaˏke inveĸÕ͐ûrsȎěOʆeJ_transfɶWo\x9c̱͚͏ǃrmȟĸʪÛ ϕʭčɓɂinϾ Ǣȫone ö%ƨͭĨseέg̀menʄtǗ.\nK\nPȂaram͆ǮeteĒrsÀ\n--¢--ϥθŁ--Ƶƨʭĺ----\ntϲ˥[ƣrϯɅ+eƂn¶Úȭd̏_t˦ranĬsʃˍfĐorm:\n  Ţ ̪ Ÿĉiʭȴnʋ\u0381əͶϝƮúÑsϴtIancÚe ϭoγ̈fŃɾP Lin̝eΠόȗaræ=T̹r^ɗendɛBas\x8fǐ-eTrans˕ʁformϽ tǃé̳oŇˌδ̍ ŚGpredicϠtO trìenˈdś ǃvɎwitWhľɟ\nd̼ǋϛfƪŹ:\nĢɕ   ̒ȷǗ ϨdătaɺȖ÷frȽatm˙ɷ͚ȇeʠʯK ζʉtŲo ňpϦr(eΞdiɆct\nc͟rompaÝrϮison_ȹaǺ×kϰw͓arʂŹøĞ͢gs˓ĻǄǆ:ʏɇ\n ɹj\xad   ¦Ǯarƌ}țgϿȐ«řumenθCơɽĆts fΘřoʮr ϤFnuǟm̨p¾ωǽcϋy.ɷȖtesľt<ȵi˅n͆˝gĹ.aȧsȴżseϒSɅũ¤ͽɫrǓt_allſ'ЀLǑ͙̉\x84Ç-͟cˑlosåȎeʎě fu˴nηcʂˬtÙŌionυ iρνnʜ keʎͯϼyˢ-ûĄµva·ǻluʎ¤e f\x8d͟oɐrmat")), Assign(targets=[Name(id='df_transformed', ctx=Store())], value=Call(func=Attribute(value=Name(id='trend_transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df__inverse_transformed', ctx=Store())], value=Call(func=Attribute(value=Name(id='trend_transform', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Name(id='df_transformed', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_allclose', ctx=Load()), args=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), Subscript(value=Name(id='df__inverse_transformed', ctx=Load()), slice=Constant(value='target'), ctx=Load())], keywords=[keyword(value=Name(id='comparison_kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='test_inverse_transform_linear_trend_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_two_segments', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='poly_degree', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='LinearTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Name(id='_test_inverse_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df_two_segments', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='poly_degree'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_linear_trend_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_one_segment', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='poly_degree', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test tha̞ƍt Line±arTrend cΰșan cƚorrectlǟy make inveȺr7se_transform for one se\x83gmÐentƃ.ɍ')), Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[])), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Name(id='_test_inverse_transform_one_segment', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df_one_segment', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='poly_degree'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_transform_with_nans', args=arguments(posonlyargs=[], args=[arg(arg='transformer'), arg(arg='df_with_nans'), arg(arg='decimal')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='â   ϛ  éʞ  Ï ϛ ˏİP͕ ')), Expr(value=Call(func=Name(id='_test_unbiased_fit_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='transformer', ctx=Load())), keyword(arg='df', value=Name(id='df_with_nans', ctx=Load())), keyword(arg='decimal', value=Name(id='decimal', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transformer,decimal'), List(elts=[Tuple(elts=[Call(func=Name(id='LinearTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Constant(value=7)], ctx=Load()), Tuple(elts=[Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Constant(value=0)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_theil_sen_trend_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_one_segment', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='poly_degree', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='_OneSegmentLinearTrendBaseTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='regressor', value=Call(func=Name(id='TheilSenRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_subsamples', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df_one_segment', ctx=Load())], keywords=[]))])), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Name(id='_test_inverse_transform_one_segment', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df_one_segment', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='poly_degree'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_theil_sen_trend_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_two_segments', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='poly_degree', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test ˭that Théi͌̈lS\x97eönRegreƁsǘɾso)r ɥcan corre\x9acȬtlǱy ʥma˒ke iσnv\u0381e̫rȲseΔ2_t;¼rƹansfo͒Örm ǝf͏or twȪo segmentϊs.')), Assign(targets=[Name(id='trend_transform', ctx=Store())], value=Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load())), keyword(arg='n_subsamples', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df_two_segments', ctx=Load())], keywords=[]))])), Expr(value=Call(func=Name(id='_test_inverse_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='trend_transform', ctx=Load())), keyword(arg='df', value=Name(id='df_two_segments', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='poly_degree'), List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_transform_two_segments_diff_size', args=arguments(posonlyargs=[], args=[arg(arg='df_two_segments_diff_size', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='transformer', annotation=Name(id='PerSegmentWrapper', ctx=Load())), arg(arg='decimal', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Tºøest tĖhȥaϪt Tr\x9cenŉdTȡralnƁƞsȱform ÛcaŰn˟ coȆrrectly mak̬ˡe\x89 fitˬ_̆tXransfeoɹ͕rmϬ ůʾfor ɷ|ƷtwƪȐo segmeǦ̢nts Ęofĸ+ diffe͙re̤\u0378nøƢϰ̓\x91t ɩsizeʧǽŉ.')), Expr(value=Call(func=Name(id='_test_unbiased_fit_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='transformer', ctx=Load())), keyword(arg='df', value=Name(id='df_two_segments_diff_size', ctx=Load())), keyword(arg='decimal', value=Name(id='decimal', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transformer,decimal'), List(elts=[Tuple(elts=[Call(func=Name(id='LinearTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Constant(value=7)], ctx=Load()), Tuple(elts=[Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Constant(value=0)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_segments_diff_size', args=arguments(posonlyargs=[], args=[arg(arg='df_two_segments_diff_size', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='transformer', annotation=Name(id='PerSegmentWrapper', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_test_inverse_transform_many_segments', ctx=Load()), args=[], keywords=[keyword(arg='trend_transform', value=Name(id='transformer', ctx=Load())), keyword(arg='df', value=Name(id='df_two_segments_diff_size', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transformer'), List(elts=[Call(func=Name(id='LinearTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Call(func=Name(id='TheilSenTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))])], ctx=Load())], keywords=[])]), FunctionDef(name='df_quadrat', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\x96MΡƽakeȜ \xa0ƐΩd)·atafraɱmɕʢe witǭhǁ˱͎ ʹquadr˚at\x9ciòcƛƻ tɀǇȸȇȌϿrends. ̑ǍSegmeǄn\x8eŅtɅĊʐs 1,Éț ˑ2˼ʧ C͉haϾʟϾs lEi°n*earȨ t˻ǈărend, ˚Ūseęgmenȃȕüəts\u0378\x80˜ -Ɣ˽ÀʔΣ- 3, ̭ð̅ɢ4ǧ qu˕aŐϦd̖̓ƘraȒǜltic̬.ɼ')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='end', value=Constant(value='2020-02-01')), keyword(arg='freq', value=Constant(value='H'))])), Assign(targets=[Name(id='rng', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='default_rng', ctx=Load()), args=[Constant(value=42)], keywords=[])), Assign(targets=[Name(id='df_template', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='target')], values=[Name(id='timestamp', ctx=Load()), Constant(value='segment'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[])], keywords=[])])], keywords=[])), Assign(targets=[Name(id='sigma', ctx=Store())], value=Constant(value=0.05)), Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_template', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=0.1), op=Mult(), right=Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='target'), ctx=Load())), op=Add(), right=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Name(id='sigma', ctx=Load()))]))), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_1')), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_template', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=BinOp(left=BinOp(left=UnaryOp(op=USub(), operand=Constant(value=2)), op=Mult(), right=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='target'), ctx=Load())), op=Add(), right=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Name(id='sigma', ctx=Load()))]))), Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_2')), Assign(targets=[Name(id='df_3', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_template', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_3', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=0.01), op=Mult(), right=BinOp(left=Subscript(value=Name(id='df_3', ctx=Load()), slice=Constant(value='target'), ctx=Load()), op=Pow(), right=Constant(value=2))), op=Add(), right=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Name(id='sigma', ctx=Load()))]))), Assign(targets=[Subscript(value=Name(id='df_3', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_3')), Assign(targets=[Name(id='df_4', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_template', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_4', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Constant(value=0.01), op=Mult(), right=BinOp(left=Subscript(value=Name(id='df_4', ctx=Load()), slice=Constant(value='target'), ctx=Load()), op=Pow(), right=Constant(value=2))), op=Add(), right=BinOp(left=Constant(value=0.1), op=Mult(), right=Subscript(value=Name(id='df_4', ctx=Load()), slice=Constant(value='target'), ctx=Load()))), op=Add(), right=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Name(id='sigma', ctx=Load()))]))), Assign(targets=[Subscript(value=Name(id='df_4', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_4')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='d', ctx=Load()), Name(id='df_3', ctx=Load()), Name(id='df_4', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], type_ignores=[])