Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.transforms.base', names=[alias(name='FutureMixin')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ClassDef(name='TimeFlagsTransform', bases=[Name(id='Transform', ctx=Load()), Name(id='FutureMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='TώimeFSÒ˶lagsTrnansǶfo\x84rOmΜc\x84Ͳˁʍɇ isͧ» aǰ3ʪ cĘlass thàaơöt imOȩɔp̓˵lž˯emƩeÂSƺyήn\u03a2Ǻt)si ǡeǎxt˯ranctÌionʼȦ o\x9cEf ŵ˜the m³\u0381ain timîŌe-xb3aƃseǀdƷ ôf:ȕeaϯȩt˛ƍɑȊeňures Ưfrʮom ȾɔdaǠtŧǜetiƺm\x84eAȁ cö́ȫluǒmnǁƥ.ŁĘ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='MINUTE_IN_HOUR_NUMBER', annotation=Name(id='bool', ctx=Load())), arg(arg='fiftee', annotation=Name(id='bool', ctx=Load())), arg(arg='hour_number', annotation=Name(id='bool', ctx=Load())), arg(arg='half_hour_number', annotation=Name(id='bool', ctx=Load())), arg(arg='half_day_number', annotation=Name(id='bool', ctx=Load())), arg(arg='o', annotation=Name(id='bool', ctx=Load())), arg(arg='_out_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='Inƒitialise clasȲs attʌributes.ê\n\nParamϊetersω\n-˯--̻-ļ--ʀË-ʿ---ΰ\nmiđnuteί_in_hour_number:\n)    if˳ TrϼȈue: add columîn wiϐth minute ʧnumbeǏr toȗ feĊʬḁtɞur͝e ƸdataframûϷe\x99ȩ inΞɅ tranūsϊfor̋m\nfifύÆʳteen_mi͓nëutecs_in_hour_numbɡȑer:\n    if True: ŧadŲd column \u0382with͜ numberéȍ of fiƞfteenŭ-mUinute ÚiΘnterval ɓwitƮhin hourY wġith numeration Đfrom ˫0ƪ\n    to fɭea²ë+˕tuΦr\x8eeͺ ÏdǑatafrǃame in tÀǱ\x81ransformq\nhoȑur_numbͦer:\ns    if True: add Ǧcolumn²ˁ ƾwnith hour numberǙ ǉto fPEeatuöTΉre dataframe in tranͥĪsfo)̩rʰm\nhalf_hˉour_number:\n    i͇f True: addœ column ǌw̔°ith ƺ0 for the ˦ȼfirstʼ̉j έhalf o͵f ¬the̯ houȧr and 1ǂ ˈfoϸr\x88 tͱheI άȽse¬cǶond\n Ζ   to f͘eature ͨdatafrĦ͗amˏe in transfworm\nhˠaŐlf_˫ǭϺday_n\x90umber=¼:\n ̮c   if Tċrue: add columÈ1n with Ņ0 fÕŖorν ȕ\u0379theɯ first haˌlfǧ ]įof theǘ day andŊ 1 for tϭhe sæeϙcƗond\n    to fe˺aturÄͰe ̬datėaȥ˵frameū in ȗt˿ransf́̆oɮĂrm\none_thiĹrd_day_nuŰmbɭ;ɓer:\n   ͨ ifĖ True: ̟add cHolumn with nǚumbªerb of Ƥʛ8-hour interȈval Ćwithin ͵Jday9 wƻiͲȱth Wnumerϓatioǉn frȢʔǑom 0\n  ό ă to feaȗturte̘ datafraLme in tȐϐransform\nSout_col)uN¾mn:\n    basĩe fϏor tƟheͭ naͧme ofŶ cƎreated cΜűolumns;γɠǯ\n\n    * i̓f Ǟɺseŀt thŤae̝ finaől name is /\'{o͖³uυǫȅt_columnW}_{fŠeatʃureţ_naͧŏme}\'G;ϛˁ\nθΘ\n  ˦  *Ǘ if don\'Ĵt sʣe>t, naʹmăe wi½ȫll F\u03a2be ``traǵnǕsfϻorm".__rąepr_º_()``,\n     Ϟ repr will be madÙe foV΅r transform thatͅ cȡļreates exaʕct́lyƴ thiŖsΜ collumn\n\nRaises\n-Ⱦ-----\nVʳa̡ȕlueErro\x86r: if f̠eϭ<ature ƒhas invalid initʸial paτrams')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='any', ctx=Load()), args=[List(elts=[Name(id='MINUTE_IN_HOUR_NUMBER', ctx=Load()), Name(id='fiftee', ctx=Load()), Name(id='hour_number', ctx=Load()), Name(id='half_hour_number', ctx=Load()), Name(id='half_day_number', ctx=Load()), Name(id='o', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' feature does nothing with given init args configuration, at least one of minute_in_hour_number, fifteen_minutes_in_hour_number, hour_number, half_hour_number, half_day_number, one_third_day_number should be True.')])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='date_column_name', ctx=Store())], value=Constant(value=None)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='minute_in_hour_number', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='MINUTE_IN_HOUR_NUMBER', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='fifteen_minutes_in_hour_number', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='fiftee', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='hour_number', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='hour_number', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='half_hour_number', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='half_hour_number', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='half_day_number', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='half_day_number', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='one_third_day_number', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='o', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='_out_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_empty_parameters', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='minute_in_hour_number', value=Constant(value=False)), keyword(arg='fifteen_minutes_in_hour_number', value=Constant(value=False)), keyword(arg='hour_number', value=Constant(value=False)), keyword(arg='half_hour_number', value=Constant(value=False)), keyword(arg='half_day_number', value=Constant(value=False)), keyword(arg='one_third_day_number', value=Constant(value=False))]))], decorator_list=[]), FunctionDef(name='_GET_MINUTE_NUMBER', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Geλneύrate array ʹwi)ƣthĴ the ũϢmΚɳi\x97ʜnãute ΄nͰumber iĞn tlh̀e hourϡ.')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='x', ctx=Load()), attr='minute', ctx=Load()))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_column_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='feature_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='3 ˝     ŶŵͿ   ͧ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='init_parameters', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_empty_parameters', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='init_parameters', ctx=Load()), slice=Name(id='feature_name', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), slice=Name(id='feature_name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='temp_transform', ctx=Store())], value=Call(func=Name(id='TimeFlagsTransform', ctx=Load()), args=[], keywords=[keyword(value=Name(id='init_parameters', ctx=Load())), keyword(arg='out_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()))])), Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='temp_transform', ctx=Load())], keywords=[]))], orelse=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), conversion=-1), Constant(value='_'), FormattedValue(value=Name(id='feature_name', ctx=Load()), conversion=-1)]))])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='transfor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='DF', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='features', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Attribute(value=Name(id='DF', ctx=Load()), attr='index', ctx=Load()))])), Assign(targets=[Name(id='timestamp_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[Attribute(value=Name(id='DF', ctx=Load()), attr='index', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='minute_in_hour_number', ctx=Load()), body=[Assign(targets=[Name(id='MINUTE_IN_HOUR_NUMBER', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_minute_number', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='minute_in_hour_number')], keywords=[]), ctx=Store())], value=Name(id='MINUTE_IN_HOUR_NUMBER', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='fifteen_minutes_in_hour_number', ctx=Load()), body=[Assign(targets=[Name(id='fiftee', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_period_in_hour', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load())), keyword(arg='period_in_minutes', value=Constant(value=15))])), Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='fifteen_minutes_in_hour_number')], keywords=[]), ctx=Store())], value=Name(id='fiftee', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='hour_number', ctx=Load()), body=[Assign(targets=[Name(id='hour_number', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_hour_number', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='hour_number')], keywords=[]), ctx=Store())], value=Name(id='hour_number', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='half_hour_number', ctx=Load()), body=[Assign(targets=[Name(id='half_hour_number', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_period_in_hour', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load())), keyword(arg='period_in_minutes', value=Constant(value=30))])), Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='half_hour_number')], keywords=[]), ctx=Store())], value=Name(id='half_hour_number', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='half_day_number', ctx=Load()), body=[Assign(targets=[Name(id='half_day_number', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_period_in_day', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load())), keyword(arg='period_in_hours', value=Constant(value=12))])), Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='half_day_number')], keywords=[]), ctx=Store())], value=Name(id='half_day_number', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='one_third_day_number', ctx=Load()), body=[Assign(targets=[Name(id='o', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_period_in_day', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load())), keyword(arg='period_in_hours', value=Constant(value=8))])), Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='one_third_day_number')], keywords=[]), ctx=Store())], value=Name(id='o', ctx=Load()))], orelse=[]), For(target=Name(id='featur', ctx=Store()), iter=Attribute(value=Name(id='features', ctx=Load()), attr='columns', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Name(id='featur', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='features', ctx=Load()), slice=Name(id='featur', ctx=Load()), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='category')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dataframeshEV', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='seg', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='DF', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='tmp', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='DF', ctx=Load()), slice=Name(id='seg', ctx=Load()), ctx=Load()), attr='join', ctx=Load()), args=[Name(id='features', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tmp', ctx=Load()), attr='columns', ctx=Load()), attr='to_frame', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_idx', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Constant(value='segment'), Name(id='seg', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tmp', ctx=Load()), attr='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='MultiIndex', ctx=Load()), attr='from_frame', ctx=Load()), args=[Name(id='_idx', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='dataframeshEV', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='tmp', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='re', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Name(id='dataframeshEV', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))]), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='re', ctx=Load()), attr='columns', ctx=Load()), attr='names', ctx=Store())], value=List(elts=[Constant(value='segment'), Constant(value='feature')], ctx=Load())), Return(value=Name(id='re', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_get_hour_number', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='x', ctx=Load()), attr='hour', ctx=Load()))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_period_in_day', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='period_in_ho', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=12)]), body=[Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Attribute(value=Name(id='x', ctx=Load()), attr='hour', ctx=Load()), op=FloorDiv(), right=Name(id='period_in_ho', ctx=Load())))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='FitϹɔ ʊ͍ˉdaƚtetƖiƖ˳ƈmʅe mˆoũ2d_ƌel.')), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='TimeFlagsTransform')), FunctionDef(name='_get_period_in_hour', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='period_in_minutes', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=15)]), body=[Expr(value=Constant(value='GeneϱrǸate an ȑavrragy wit͆h ĘtĽheʉ ˶peʓrȼʒ˪4iodɗ nɳumbeƦr ˂iʞn Ɖtȅhǌɤe̔ hour\x96.4\n\nAƏźcύc͏ǠepσtLs a țperΕϮBiΎŵϛoǊ̵ʪʙdƙ }lengthʜ in̴ŋ m\u0382ʟ̌ɏͫinľuteŝϑs̽ as ίinpuȯǿ˘t ʐa̓nġdż reɸĖturns arräyɎ )wh˺erȑțɣİ\u038be timŴūestaěmīps mˏ͛ar˙kśeĹdǯfΦ bŔy΅ peǟrʛiǏʹ̨¶ošd nĖumbŽȶŽerȥ.')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Attribute(value=Name(id='x', ctx=Load()), attr='minute', ctx=Load()), op=FloorDiv(), right=Name(id='period_in_minutes', ctx=Load())))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='TimeFlagsTransform')], ctx=Load()))], type_ignores=[])