Module(body=[ImportFrom(module='collections', names=[alias(name='Counter')], level=0), ImportFrom(module='unittest', names=[alias(name='TestCase'), alias(name='main')], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='probabilistic_embeddings.dataset.debug', names=[alias(name='DebugDataset')], level=0), ImportFrom(module='probabilistic_embeddings.dataset.sampler', names=[alias(name='*')], level=0), ClassDef(name='TestShuffledClassBalancedBatchSampler', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_balanced_sampler', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ɟ̙ ')), Assign(targets=[Name(id='labels', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=0), Constant(value=3)], ctx=Load())), Assign(targets=[Name(id='sampler', ctx=Store())], value=Call(func=Name(id='BalancedLabelsSampler', ctx=Load()), args=[Name(id='labels', ctx=Load()), Constant(value=2)], keywords=[keyword(arg='num_batches', value=Constant(value=10))])), Assign(targets=[Name(id='sampled', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='sampler', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[Name(id='sampled', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), Constant(value=20)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='counts', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value=10)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='counts', ctx=Load()), slice=Constant(value=3), ctx=Load()), Constant(value=10)], keywords=[]))], decorator_list=[]), FunctionDef(name='test_sampler', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='P      ƍ      ξ ȁ    ')), Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='DebugDataset', ctx=Load()), args=[], keywords=[keyword(arg='root', value=Constant(value=None))])), Assert(test=Compare(left=Attribute(value=Name(id='dataset', ctx=Load()), attr='num_classes', ctx=Load()), ops=[Eq()], comparators=[Constant(value=4)])), Assign(targets=[Name(id='batch_size', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='labels_per_batch', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='samples_per_class', ctx=Store())], value=BinOp(left=Name(id='batch_size', ctx=Load()), op=FloorDiv(), right=Name(id='labels_per_batch', ctx=Load()))), For(target=Name(id='uniform', ctx=Store()), iter=List(elts=[Constant(value=True), Constant(value=False)], ctx=Load()), body=[Assign(targets=[Name(id='sampler', ctx=Store())], value=Call(func=Name(id='ShuffledClassBalancedBatchSampler', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='batch_size', value=Name(id='batch_size', ctx=Load())), keyword(arg='samples_per_class', value=Name(id='samples_per_class', ctx=Load())), keyword(arg='uniform', value=Name(id='uniform', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='sampler', ctx=Load())], keywords=[]), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[]), op=FloorDiv(), right=Name(id='batch_size', ctx=Load()))], keywords=[])), For(target=Name(id='batch', ctx=Store()), iter=Name(id='sampler', ctx=Load()), body=[For(target=Name(id='i', ctx=Store()), iter=Name(id='batch', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertLessEqual', ctx=Load()), args=[Name(id='i', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='i', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='labels', ctx=Store())], value=ListComp(elt=Subscript(value=Attribute(value=Name(id='dataset', ctx=Load()), attr='labels', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='batch', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='counts', ctx=Load())], keywords=[]), Name(id='labels_per_batch', ctx=Load())], keywords=[])), For(target=Name(id='v', ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='samples_per_class', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='TestSameClassMixupCollator', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_simpleVTA', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mixu_p', ctx=Store())], value=Call(func=Name(id='SAMECLASSMIXUPCOLLATOR', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='images', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='TORCH', ctx=Load()), attr='tensor', ctx=Load()), args=[List(elts=[Constant(value=0.0), Constant(value=1.0), Constant(value=1.0), Constant(value=2.0), Constant(value=2.0), Constant(value=2.5), Constant(value=3.0)], ctx=Load())], keywords=[]), attr='float', ctx=Load()), args=[], keywords=[]), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1), Constant(value=1), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='TORCH', ctx=Load()), attr='tensor', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=2), Constant(value=2)], ctx=Load())], keywords=[]), attr='long', ctx=Load()), args=[], keywords=[])), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='rangeY', ctx=Load()), args=[Constant(value=10)], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='mixed_images', ctx=Store()), Name(id='mixed_labelsL', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='mixu_p', ctx=Load()), attr='_mixup', ctx=Load()), args=[Name(id='images', ctx=Load()), Name(id='labels', ctx=Load())], keywords=[])), Assign(targets=[Name(id='mixed_images', ctx=Store())], value=Call(func=Attribute(value=Name(id='mixed_images', ctx=Load()), attr='squeeze', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Attribute(value=Compare(left=Name(id='mixed_labelsL', ctx=Load()), ops=[Eq()], comparators=[Name(id='labels', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Attribute(value=BinOp(left=Compare(left=Name(id='mixed_images', ctx=Load()), ops=[GtE()], comparators=[Name(id='labels', ctx=Load())]), op=BitAnd(), right=Compare(left=Name(id='mixed_images', ctx=Load()), ops=[LtE()], comparators=[BinOp(left=Name(id='labels', ctx=Load()), op=Add(), right=Constant(value=1))])), attr='all', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='main', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])