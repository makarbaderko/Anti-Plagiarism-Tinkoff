Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.transforms', names=[alias(name='TheilSenTrendTransform')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='TheilSenRegressor')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='get_residuals')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='plot_residuals')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='plot_trend')], level=0), ImportFrom(module='etna.analysis.plotters', names=[alias(name='_create_holidays_df')], level=0), ImportFrom(module='etna.analysis.plotters', names=[alias(name='_get_labels_names')], level=0), ImportFrom(module='etna.analysis.plotters', names=[alias(name='_validate_intersecting_segments')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='generate_ar_df')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='MAE')], level=0), ImportFrom(module='etna.models', names=[alias(name='LinearPerSegmentModel')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='BinsegTrendTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='LagTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='LinearTrendTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='STLTransform')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='LinearRegression')], level=0), FunctionDef(name='residuals', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Constant(value=100)), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='target')], values=[BinOp(left=Call(func=Attribute(value=Name(id='timestamp', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Constant(value=2)), BinOp(left=BinOp(left=List(elts=[Constant(value='segment_0')], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[])), op=Add(), right=BinOp(left=List(elts=[Constant(value='segment_1')], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[]))), BinOp(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[])], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value=1)), attr='tolist', ctx=Load()), args=[], keywords=[]))])], keywords=[])), Assign(targets=[Name(id='df_wide', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df_wide', ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='forecast_df', ctx=Store())], value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(lower=Constant(value=10)), ctx=Load()), Slice(), Slice()], ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_0'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Subscript(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_1'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='residuals_df', ctx=Store())], value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(lower=Constant(value=10)), ctx=Load()), Slice(), Slice()], ctx=Load()), ctx=Load())), AugAssign(target=Subscript(value=Attribute(value=Name(id='residuals_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_0'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Subscript(value=Attribute(value=Name(id='residuals_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_1'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store()), op=Sub(), value=Constant(value=1)), Return(value=Tuple(elts=[Name(id='residuals_df', ctx=Load()), Name(id='forecast_df', ctx=Load()), Name(id='ts', ctx=Load())], ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_get_residuals', args=arguments(posonlyargs=[], args=[arg(arg='residuals')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='residuals_df', ctx=Store()), Name(id='forecast_df', ctx=Store()), Name(id='ts', ctx=Store())], ctx=Store())], value=Name(id='residuals', ctx=Load())), Assign(targets=[Name(id='actual_residuals', ctx=Store())], value=Call(func=Name(id='get_residuals', ctx=Load()), args=[], keywords=[keyword(arg='forecast_df', value=Name(id='forecast_df', ctx=Load())), keyword(arg='ts', value=Name(id='ts', ctx=Load()))])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='actual_residuals', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[]), attr='equals', ctx=Load()), args=[Name(id='residuals_df', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_get_r_esiduals_not_matching_lengths', args=arguments(posonlyargs=[], args=[arg(arg='residuals')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="ζTeDɖ˻s\x93tǨćF tʧhaύt g͇ʪeʭtɏ_resiŮdƍ\x9buȄaϢls ʾfailsî t͆ȫo Ȗfiűnϙd resʇįduals corfrectƼly Ζ]iǭPf ͉tˍs̎Ģ haɂŝsn'tù ϬπansweΪƤrȯs.")), Assign(targets=[Tuple(elts=[Name(id='residuals_df', ctx=Store()), Name(id='forecast_df', ctx=Store()), Name(id='ts', ctx=Store())], ctx=Store())], value=Name(id='residuals', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=10))), ctx=Load()), Slice(), Slice()], ctx=Load()), ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='KeyError', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='get_residuals', ctx=Load()), args=[], keywords=[keyword(arg='forecast_df', value=Name(id='forecast_df', ctx=Load())), keyword(arg='ts', value=Name(id='ts', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='test_get_residuals_not_matching_segments', args=arguments(posonlyargs=[], args=[arg(arg='residuals')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='residuals_df', ctx=Store()), Name(id='forecast_df', ctx=Store()), Name(id='ts', ctx=Store())], ctx=Store())], value=Name(id='residuals', ctx=Load())), Assign(targets=[Name(id='columns_frame', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='columns', ctx=Load()), attr='to_frame', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='columns_frame', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=List(elts=[Constant(value='segment_0'), Constant(value='segment_3')], ctx=Load())), Assign(targets=[Attribute(value=Name(id='forecast_df', ctx=Load()), attr='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='MultiIndex', ctx=Load()), attr='from_frame', ctx=Load()), args=[Name(id='columns_frame', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='KeyError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Segments of `ts` and `forecast_df` should be the same'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='get_residuals', ctx=Load()), args=[], keywords=[keyword(arg='forecast_df', value=Name(id='forecast_df', ctx=Load())), keyword(arg='ts', value=Name(id='ts', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='test_plot_residuals_fails_unkown_feature', args=arguments(posonlyargs=[], args=[arg(arg='example_tsdf')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), keyword(arg='transforms', value=List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=5), Constant(value=6), Constant(value=7)], ctx=Load()))])], ctx=Load())), keyword(arg='horizon', value=Constant(value=5))])), Assign(targets=[Tuple(elts=[Name(id='metrics', ctx=Store()), Name(id='forecast_df', ctx=Store()), Name(id='infoh', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdf', ctx=Load())), keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='n_folds', value=Constant(value=3))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="Given feature isn't present in the dataset"))]))], body=[Expr(value=Call(func=Name(id='plot_residuals', ctx=Load()), args=[], keywords=[keyword(arg='forecast_df', value=Name(id='forecast_df', ctx=Load())), keyword(arg='ts', value=Name(id='example_tsdf', ctx=Load())), keyword(arg='feature', value=Constant(value='unkown_feature'))]))])], decorator_list=[]), FunctionDef(name='test_plot_trend', args=arguments(posonlyargs=[], args=[arg(arg='poly_degree'), arg(arg='example_tsdf'), arg(arg='trend_transform_class')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='plot_trend', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdf', ctx=Load())), keyword(arg='trend_transform', value=Call(func=Name(id='trend_transform_class', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))]))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='poly_degree, trend_transform_class'), Tuple(elts=[List(elts=[Constant(value=1), Name(id='LinearTrendTransform', ctx=Load())], ctx=Load()), List(elts=[Constant(value=2), Name(id='LinearTrendTransform', ctx=Load())], ctx=Load()), List(elts=[Constant(value=1), Name(id='TheilSenTrendTransform', ctx=Load())], ctx=Load()), List(elts=[Constant(value=2), Name(id='TheilSenTrendTransform', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_plot_bin_seg', args=arguments(posonlyargs=[], args=[arg(arg='example_tsdf'), arg(arg='detrend_model')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='plot_trend', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdf', ctx=Load())), keyword(arg='trend_transform', value=Call(func=Name(id='BinsegTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='detrend_model', value=Name(id='detrend_model', ctx=Load()))]))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='detrend_model'), Tuple(elts=[Call(func=Name(id='TheilSenRegressor', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])]), FunctionDef(name='test_plot_stl', args=arguments(posonlyargs=[], args=[arg(arg='example_tsdf'), arg(arg='period')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='plot_trend', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsdf', ctx=Load())), keyword(arg='trend_transform', value=Call(func=Name(id='STLTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='period', value=Name(id='period', ctx=Load()))]))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), Tuple(elts=[Constant(value=7), Constant(value=30)], ctx=Load())], keywords=[])]), FunctionDef(name='test_create_holidays_df_zero_windo', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Ń̨ êâ   Ή΄ɽ   ƕȯ ΄ ')), Assign(targets=[Name(id='holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='holiday'), Constant(value='ds'), Constant(value='lower_window'), Constant(value='upper_window')], values=[Constant(value='Christmas'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[List(elts=[Constant(value='2020-01-07')], ctx=Load())], keywords=[]), Constant(value=0), Constant(value=0)])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load()), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])), Assert(test=Compare(left=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Constant(value='2020-01-07'), ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]))], decorator_list=[]), FunctionDef(name='test_validate_intersecting_segments_ok', args=arguments(posonlyargs=[], args=[arg(arg='FOLD_NUMBERS')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ë    ϲĤ            ˷')), Expr(value=Call(func=Name(id='_validate_intersecting_segments', ctx=Load()), args=[Name(id='FOLD_NUMBERS', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fold_numbers'), List(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=2)], ctx=Load())], keywords=[keyword(arg='index', value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Constant(value=6)), keyword(arg='freq', value=Constant(value='D'))]))]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=2)], ctx=Load())], keywords=[keyword(arg='index', value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Constant(value=6)), keyword(arg='freq', value=Constant(value='2D'))]))]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[List(elts=[Constant(value=2), Constant(value=2), Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=1)], ctx=Load())], keywords=[keyword(arg='index', value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Constant(value=6)), keyword(arg='freq', value=Constant(value='D'))]))]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=1)], ctx=Load())], keywords=[keyword(arg='index', value=List(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-02')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-05')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-06')], keywords=[])], ctx=Load()))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_validate_intersecting_segments_fail', args=arguments(posonlyargs=[], args=[arg(arg='FOLD_NUMBERS')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Name(id='_validate_intersecting_segments', ctx=Load()), args=[Name(id='FOLD_NUMBERS', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fold_numbers'), List(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=1)], ctx=Load())], keywords=[keyword(arg='index', value=List(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-02')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-02')], keywords=[])], ctx=Load()))]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=0)], ctx=Load())], keywords=[keyword(arg='index', value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Constant(value=6)), keyword(arg='freq', value=Constant(value='D'))]))]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=1)], ctx=Load())], keywords=[keyword(arg='index', value=List(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-02')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-02')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-03')], keywords=[])], ctx=Load()))]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=0)], ctx=Load())], keywords=[keyword(arg='index', value=List(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-02')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-02')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-03')], keywords=[])], ctx=Load()))]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=1)], ctx=Load())], keywords=[keyword(arg='index', value=List(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-05')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-03')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-08')], keywords=[])], ctx=Load()))]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=0)], ctx=Load())], keywords=[keyword(arg='index', value=List(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-05')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-03')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-08')], keywords=[])], ctx=Load()))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_create_holidays_df_str_fail', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Constant(value='RU'), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=True))]))])], decorator_list=[]), FunctionDef(name='test_create_holidays_df_str_non_existing_country', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Tuple(elts=[Name(id='NotImplementedError', ctx=Load()), Name(id='KeyError', ctx=Load())], ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Constant(value='THIS_COUNTRY_DOES_NOT_EXIST'), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))]))])], decorator_list=[]), FunctionDef(name='test_create_holidays_df_str', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Constant(value='RU'), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='simple_df', ctx=Load()), attr='df', ctx=Load())], keywords=[])])), Assert(test=Call(func=Name(id='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='df', ctx=Load()), attr='dtypes', ctx=Load()), ops=[Eq()], comparators=[Name(id='bool', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_create_holidays_df_empty_fail', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))]))])], decorator_list=[]), FunctionDef(name='test_create_holidays_df_intersect_none', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ͚ ')), Assign(targets=[Name(id='holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='holiday'), Constant(value='ds')], values=[Constant(value='New Year'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[List(elts=[Constant(value='1900-01-01'), Constant(value='1901-01-01')], ctx=Load())], keywords=[])])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load()), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='all', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=None))])))], decorator_list=[]), FunctionDef(name='test_create_holidays_df_one_day', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='holiday'), Constant(value='ds')], values=[Constant(value='New Year'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[List(elts=[Constant(value='2020-01-01')], ctx=Load())], keywords=[])])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load()), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])), Assert(test=Compare(left=Constant(value='New Year'), ops=[In()], comparators=[Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_create_holidays_df_upper_window', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='          ')), Assign(targets=[Name(id='holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='holiday'), Constant(value='ds'), Constant(value='upper_window')], values=[Constant(value='New Year'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[List(elts=[Constant(value='2020-01-01')], ctx=Load())], keywords=[]), Constant(value=2)])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load()), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]))], decorator_list=[]), FunctionDef(name='test_create_holidays_df_u', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='holiday'), Constant(value='ds'), Constant(value='upper_window')], values=[Constant(value='Christmas'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[List(elts=[Constant(value='2019-12-25')], ctx=Load())], keywords=[]), Constant(value=10)])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load()), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=4)]))], decorator_list=[]), FunctionDef(name='test_create_holidays_df_lower_window', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='holiday'), Constant(value='ds'), Constant(value='lower_window')], values=[Constant(value='Christmas'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[List(elts=[Constant(value='2020-01-07')], ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=2))])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load()), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]))], decorator_list=[]), FunctionDef(name='test_create_holidays_df_lower_window_out_of_index', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Ŗ')), Assign(targets=[Name(id='holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='holiday'), Constant(value='ds'), Constant(value='lower_window')], values=[Constant(value='Moscow Anime Festival'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[List(elts=[Constant(value='2020-02-22')], ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=5))])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load()), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]))], decorator_list=[]), FunctionDef(name='test_create_holidays_df_lower_upper_windows', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ')), Assign(targets=[Name(id='holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='holiday'), Constant(value='ds'), Constant(value='upper_window'), Constant(value='lower_window')], values=[Constant(value='Christmas'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[List(elts=[Constant(value='2020-01-07')], ctx=Load())], keywords=[]), Constant(value=3), UnaryOp(op=USub(), operand=Constant(value=3))])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load()), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=7)]))], decorator_list=[]), FunctionDef(name='test_create_holidays_df_as_is', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ʘ   \x82 ğ Ŝǆή        ̲  ')), Assign(targets=[Name(id='holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-07')), keyword(arg='end', value=Constant(value='2020-01-10'))])), keyword(arg='columns', value=List(elts=[Constant(value='Christmas')], ctx=Load())), keyword(arg='data', value=Constant(value=1))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load()), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=True))])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=4)]))], decorator_list=[]), FunctionDef(name='test_create_holidays_df_non_day_freq', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='       ɾ      ')), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Constant(value=30)), keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='n_segments', value=Constant(value=1)), keyword(arg='freq', value=Constant(value='H'))])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='classic_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='holiday'), Constant(value='ds'), Constant(value='upper_window')], values=[Constant(value='Christmas'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[List(elts=[Constant(value='2020-01-01')], ctx=Load())], keywords=[]), Constant(value=3)])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load()), Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=4)]))], decorator_list=[]), FunctionDef(name='test_create_holidays_df_lower_window_positive', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='holiday'), Constant(value='ds'), Constant(value='lower_window')], values=[Constant(value='Christmas'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[List(elts=[Constant(value='2020-01-07')], ctx=Load())], keywords=[]), Constant(value=1)])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load()), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))]))])], decorator_list=[]), FunctionDef(name='test', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='christmas', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='holiday'), Constant(value='ds'), Constant(value='lower_window')], values=[Constant(value='Christmas'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[List(elts=[Constant(value='2020-01-07')], ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=3))])], keywords=[])), Assign(targets=[Name(id='new_year', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='holiday'), Constant(value='ds'), Constant(value='upper_window')], values=[Constant(value='New Year'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[List(elts=[Constant(value='2020-01-01')], ctx=Load())], keywords=[]), Constant(value=2)])], keywords=[])), Assign(targets=[Name(id='holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Name(id='christmas', ctx=Load()), Name(id='new_year', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load()), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=7)]))], decorator_list=[]), FunctionDef(name='test_create_holidays_df_15t_freq', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ϵˡ  ̡  ')), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Constant(value=30)), keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='n_segments', value=Constant(value=1)), keyword(arg='freq', value=Constant(value='15T'))])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='classic_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='holiday'), Constant(value='ds'), Constant(value='upper_window')], values=[Constant(value='New Year'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[List(elts=[Constant(value='2020-01-01 01:00:00')], ctx=Load())], keywords=[]), Constant(value=3)])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load()), Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=4)])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Constant(value='2020-01-01 01:00:00'), upper=Constant(value='2020-01-01 01:45:00')), ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=4)]))], decorator_list=[]), FunctionDef(name='test_create_holidays_df_upper_window_negative', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ŷ¼Ŧ Ɉ  ˧  ')), Assign(targets=[Name(id='holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='holiday'), Constant(value='ds'), Constant(value='upper_window')], values=[Constant(value='Christmas'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[List(elts=[Constant(value='2020-01-07')], ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1))])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load()), Attribute(value=Name(id='simple_df', ctx=Load()), attr='index', ctx=Load())], keywords=[keyword(arg='as_is', value=Constant(value=False))]))])], decorator_list=[]), FunctionDef(name='test_get_labels_names_linear_coeffs', args=arguments(posonlyargs=[], args=[arg(arg='example_tsdf'), arg(arg='poly_degree'), arg(arg='e_xpect_values'), arg(arg='trend_class')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ln_tr', ctx=Store())], value=Call(func=Name(id='trend_class', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='poly_degree', value=Name(id='poly_degree', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='example_tsdf', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='ln_tr', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='example_tsdf', ctx=Load()), attr='segments', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='linear_coeffs', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_labels_names', ctx=Load()), args=[List(elts=[Name(id='ln_tr', ctx=Load())], ctx=Load()), Name(id='segments', ctx=Load())], keywords=[])), If(test=Name(id='e_xpect_values', ctx=Load()), body=[Assert(test=Compare(left=Call(func=Name(id='listh', ctx=Load()), args=[Call(func=Attribute(value=Name(id='linear_coeffs', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[NotEq()], comparators=[List(elts=[Constant(value=''), Constant(value='')], ctx=Load())]))], orelse=[Assert(test=Compare(left=Call(func=Name(id='listh', ctx=Load()), args=[Call(func=Attribute(value=Name(id='linear_coeffs', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[Eq()], comparators=[List(elts=[Constant(value=''), Constant(value='')], ctx=Load())]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='poly_degree, expect_values, trend_class'), Tuple(elts=[List(elts=[Constant(value=1), Constant(value=True), Name(id='LinearTrendTransform', ctx=Load())], ctx=Load()), List(elts=[Constant(value=2), Constant(value=False), Name(id='LinearTrendTransform', ctx=Load())], ctx=Load()), List(elts=[Constant(value=1), Constant(value=True), Name(id='TheilSenTrendTransform', ctx=Load())], ctx=Load()), List(elts=[Constant(value=2), Constant(value=False), Name(id='TheilSenTrendTransform', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])])], type_ignores=[])