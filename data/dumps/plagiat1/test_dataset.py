Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='pandas.testing', names=[alias(name='assert_frame_equal')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='generate_ar_df')], level=0), ImportFrom(module='etna.datasets.tsdataset', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='AddConstTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='FilterFeaturesTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='LagTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='MaxAbsScalerTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='OneHotEncoderTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='SegmentEncoderTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='TimeSeriesImputerTransform')], level=0), FunctionDef(name='test_make_future_small_horizon_', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-01')], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-02-01')], keywords=[])], keywords=[])), Assign(targets=[Name(id='ta_rget1', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='l', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='target2', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='l', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Name(id='ta_rget1', ctx=Load()), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Name(id='target2', ctx=Load()), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='df2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='trainNekT', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(upper=Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=10), ctx=Load())), Slice(), Slice()], ctx=Load()), ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='D'))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='UserWarning', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="TSDataset freq can't be inferred"))]))], body=[Assert(test=Compare(left=Call(func=Name(id='l', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='trainNekT', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=1)], keywords=[]), attr='df', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]))])], decorator_list=[]), FunctionDef(name='df_and_regressors', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-02-01')], keywords=[])), Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=11), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), Constant(value=12), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-12-01'), Constant(value='2021-02-11')], keywords=[])), Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=1), Constant(value=2), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='segment')], values=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), Constant(value=3), Constant(value=4), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_exog', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='df', ctx=Load()), Name(id='df_exog', ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())], ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='df_and_regressors_flat', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-02-01')], keywords=[])), Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=11), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), Constant(value=12), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-12-01'), Constant(value='2021-02-11')], keywords=[])), Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=1), Constant(value='3'), Constant(value=5), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='segment')], values=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), Constant(value=2), Constant(value='4'), Constant(value=6), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Subscript(value=Name(id='df_exog', ctx=Load()), slice=Constant(value='regressor_2'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_exog', ctx=Load()), slice=Constant(value='regressor_2'), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='category')], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_exog', ctx=Load()), slice=Constant(value='regressor_3'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_exog', ctx=Load()), slice=Constant(value='regressor_3'), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='category')], keywords=[])), Return(value=Tuple(elts=[Name(id='df', ctx=Load()), Name(id='df_exog', ctx=Load())], ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='ts_with', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-01-05')], keywords=[])), Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=11), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=12), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-01-06')], keywords=[])), Assign(targets=[Name(id='categorical_values', ctx=Store())], value=List(elts=[Constant(value='1'), Constant(value='2'), Constant(value='1'), Constant(value='2'), Constant(value='1'), Constant(value='2')], ctx=Load())), Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor'), Constant(value='not_regressor'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Name(id='categorical_values', ctx=Load()), Name(id='categorical_values', ctx=Load()), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor'), Constant(value='not_regressor'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Name(id='categorical_values', ctx=Load()), Name(id='categorical_values', ctx=Load()), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_exog', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='known_future', value=List(elts=[Constant(value='regressor')], ctx=Load()))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='ts_future', args=arguments(posonlyargs=[], args=[arg(arg='example_reg_tsd_s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ˠ      ')), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Name(id='example_reg_tsd_s', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Return(value=Name(id='future', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='df_segments_int', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='DaKt\x8daFraáÎǍmeȾ wit͛˪h inϸčètàEƄeΛgeƸr ̂seÿΘgςmʊʊ«e˰ɏnts.˧Č?')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-02-01')], keywords=[])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=3), Constant(value=1)])], keywords=[])), Assign(targets=[Name(id='df2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=4), Constant(value=2)])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='df2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_check_endings_error', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ͽChecΌkχ t9hat ȅ_ʼch͗eck_endiϽÀngs method rai͓seʟϦsΥ exÈceƻɋptionɺì{ iȱf somÜe ȼǵΜse¦gmentsÑ ǛenǩdɄ wiǮṭąh nȳΔan.')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-02-01')], keywords=[])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=11), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=5))), ctx=Load()), Constant(value=12), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='df2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='_check_endings', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_check_endings_pass', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CZheė̻ck tÆh̤at ș_Ίc͙ͭheck_Ȩendings Ĕme˲ʚt˗hod paʚss͆e˖s ȵifƀͨ ˱therĞe is̵̈́ζ ʠƷnjo naʆnɩs at the ϶end of al#lɪ segmentsK.')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-02-01')], keywords=[])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=11), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=12), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='df2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='_check_endings', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='test_check_known_future_wrong_literal', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that _check_known_futurͶe raiΈŻsǲesōΎ eκxͻdceptioan if ùwʗroͪǎnəǯͲg literǰfal is g˫iven.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="The only possible literal is 'all'"))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_known_future', ctx=Load()), args=[Constant(value='wrong-literal'), Constant(value=None)], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_check_known_future_error_no_df_exog', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="ͥC¾Ǳ˵\u0379hecΛĪkȭ tɡȍ͓ŗĴϒ:hatk _checŕk_knϕo͇ΓwϚn_Ȱ˃f%uturůÐeDĭš rϋaisƄeƿsçϔǝ ãϟ\x91e\x92xcepʠtiȬͼzǫoϿ<n if thƤeŝMre ¯aϥ\x8aÖr̋˧e˷̩ no ɫd͒Ƴªf_qͱexog*,÷ ¯ͧb̸u̞xt\u0380IƟ k̙no̘ʗwnĀ_f~uūture is\x9cͿ̞n\u0378ǌ'͗t̓ Γempôt«yϖΦ2.")), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Some features in known_future are not present in df_exog'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_known_future', ctx=Load()), args=[List(elts=[Constant(value='regressor_1')], ctx=Load()), Constant(value=None)], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_check_known_future_error_not_matching', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='df_exog', ctx=Store()), Name(id='known_future', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='known_future', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='regressor_new')], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Some features in known_future are not present in df_exog'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_known_future', ctx=Load()), args=[Name(id='known_future', ctx=Load()), Name(id='df_exog', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_check_known_future_pass_all_empty', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='regresso', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_known_future', ctx=Load()), args=[List(elts=[], ctx=Load()), Constant(value=None)], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='l', ctx=Load()), args=[Name(id='regresso', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[]), FunctionDef(name='test_check_known_future_pass_non_empty', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors'), arg(arg='known_future'), arg(arg='expected_columns')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='        ͚   ')), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='df_exog', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Expr(value=Constant(value='Check that _check_known_future passes if df_exog is not empty.')), Assign(targets=[Name(id='regresso', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_known_future', ctx=Load()), args=[Name(id='known_future', ctx=Load()), Name(id='df_exog', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='regresso', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_columns', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='known_future, expected_columns'), List(elts=[Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Constant(value='regressor_1')], ctx=Load()), List(elts=[Constant(value='regressor_1')], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Constant(value='regressor_1'), Constant(value='regressor_1')], ctx=Load()), List(elts=[Constant(value='regressor_1')], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='all'), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_categorical_after_call_to_pandas', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   Ɣ ')), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Constant(value=30)), keyword(arg='start_time', value=Constant(value='2021-06-01')), keyword(arg='n_segments', value=Constant(value=2))])), Assign(targets=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='categorical_column'), ctx=Store())], value=BinOp(left=BinOp(left=List(elts=[Constant(value=0)], ctx=Load()), op=Mult(), right=Constant(value=30)), op=Add(), right=BinOp(left=List(elts=[Constant(value=1)], ctx=Load()), op=Mult(), right=Constant(value=30)))), Assign(targets=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='categorical_column'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='categorical_column'), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='category')], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=List(elts=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='target')], ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=List(elts=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='categorical_column')], ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load()), Constant(value='D'), Name(id='exog', ctx=Load())], keywords=[])), Assign(targets=[Name(id='flatten_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), Assert(test=Compare(left=Attribute(value=Subscript(value=Name(id='flatten_df', ctx=Load()), slice=Constant(value='categorical_column'), ctx=Load()), attr='dtype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='category')]))], decorator_list=[]), FunctionDef(name='_test_update_regressors_fit_transformUZ', args=arguments(posonlyargs=[], args=[arg(arg='ts'), arg(arg='t_ransforms'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='          ')), Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='t_ransforms', ctx=Load())], keywords=[])), Assign(targets=[Name(id='regresso', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())), Assert(test=Compare(left=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='regresso', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='expected_regressors', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='test_train_test_split_with_test_sizeh', args=arguments(posonlyargs=[], args=[arg(arg='test_size'), arg(arg='true_borders'), arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ͉  ͯ     ʵ͞')), Assign(targets=[Tuple(elts=[Name(id='train_start_true', ctx=Store()), Name(id='train_end_true', ctx=Store()), Name(id='test_start_true', ctx=Store()), Name(id='test_end_true', ctx=Store())], ctx=Store())], value=Name(id='true_borders', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='trainNekT', ctx=Store()), Name(id='test', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='test_size', value=Name(id='test_size', ctx=Load()))])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='trainNekT', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='test', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='trainNekT', ctx=Load()), attr='df', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='train_start_true', ctx=Load()), upper=Name(id='train_end_true', ctx=Load())), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='trainNekT', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df_exog', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='df', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='test_start_true', ctx=Load()), upper=Name(id='test_end_true', ctx=Load())), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df_exog', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='test_size, true_borders'), Tuple(elts=[Tuple(elts=[Constant(value=11), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=9), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-22'), Constant(value='2021-06-23'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=1), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-30'), Constant(value='2021-07-01'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_train_test_split_both', args=arguments(posonlyargs=[], args=[arg(arg='test_size'), arg(arg='borders'), arg(arg='true_borders'), arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='train_start', ctx=Store()), Name(id='train_end', ctx=Store()), Name(id='test_start', ctx=Store()), Name(id='test_end', ctx=Store())], ctx=Store())], value=Name(id='borders', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='train_start_true', ctx=Store()), Name(id='train_end_true', ctx=Store()), Name(id='test_start_true', ctx=Store()), Name(id='test_end_true', ctx=Store())], ctx=Store())], value=Name(id='true_borders', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='trainNekT', ctx=Store()), Name(id='test', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='train_start', value=Name(id='train_start', ctx=Load())), keyword(arg='train_end', value=Name(id='train_end', ctx=Load())), keyword(arg='test_start', value=Name(id='test_start', ctx=Load())), keyword(arg='test_end', value=Name(id='test_end', ctx=Load())), keyword(arg='test_size', value=Name(id='test_size', ctx=Load()))])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='trainNekT', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='test', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='trainNekT', ctx=Load()), attr='df', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='train_start_true', ctx=Load()), upper=Name(id='train_end_true', ctx=Load())), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='trainNekT', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df_exog', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='df', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='test_start_true', ctx=Load()), upper=Name(id='test_end_true', ctx=Load())), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df_exog', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='test_size, borders, true_borders'), Tuple(elts=[Tuple(elts=[Constant(value=10), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=15), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-22'), Constant(value='2021-07-01')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-22'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=11), Tuple(elts=[Constant(value='2021-02-02'), Constant(value=None), Constant(value=None), Constant(value='2021-06-28')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-02'), Constant(value='2021-06-17'), Constant(value='2021-06-18'), Constant(value='2021-06-28')], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=4), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value=None), Constant(value='2021-07-01')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-28'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=4), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value=None), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-06-24')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_train_test_split_warning', args=arguments(posonlyargs=[], args=[arg(arg='borders'), arg(arg='match'), arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='          şΚ ˨Ɇϫ   ͱ u')), Assign(targets=[Tuple(elts=[Name(id='train_start', ctx=Store()), Name(id='train_end', ctx=Store()), Name(id='test_start', ctx=Store()), Name(id='test_end', ctx=Store())], ctx=Store())], value=Name(id='borders', ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='UserWarning', ctx=Load())], keywords=[keyword(arg='match', value=Name(id='match', ctx=Load()))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='train_start', value=Name(id='train_start', ctx=Load())), keyword(arg='train_end', value=Name(id='train_end', ctx=Load())), keyword(arg='test_start', value=Name(id='test_start', ctx=Load())), keyword(arg='test_end', value=Name(id='test_end', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='borders, match'), Tuple(elts=[Tuple(elts=[Tuple(elts=[Constant(value='2021-01-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load()), Constant(value='Min timestamp in df is')], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-08-01')], ctx=Load()), Constant(value='Max timestamp in df is')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_train_test_split_warning2', args=arguments(posonlyargs=[], args=[arg(arg='test_size'), arg(arg='borders'), arg(arg='match'), arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ʺ7  ')), Assign(targets=[Tuple(elts=[Name(id='train_start', ctx=Store()), Name(id='train_end', ctx=Store()), Name(id='test_start', ctx=Store()), Name(id='test_end', ctx=Store())], ctx=Store())], value=Name(id='borders', ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='UserWarning', ctx=Load())], keywords=[keyword(arg='match', value=Name(id='match', ctx=Load()))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='train_start', value=Name(id='train_start', ctx=Load())), keyword(arg='train_end', value=Name(id='train_end', ctx=Load())), keyword(arg='test_start', value=Name(id='test_start', ctx=Load())), keyword(arg='test_end', value=Name(id='test_end', ctx=Load())), keyword(arg='test_size', value=Name(id='test_size', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='test_size, borders, match'), Tuple(elts=[Tuple(elts=[Constant(value=10), Tuple(elts=[Constant(value='2021-02-01'), Constant(value=None), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load()), Constant(value='test_size, test_start and test_end cannot be applied at the same time. test_size will be ignored')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_train_test_split_failedzzxW', args=arguments(posonlyargs=[], args=[arg(arg='test_size'), arg(arg='borders'), arg(arg='match'), arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='train_start', ctx=Store()), Name(id='train_end', ctx=Store()), Name(id='test_start', ctx=Store()), Name(id='test_end', ctx=Store())], ctx=Store())], value=Name(id='borders', ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[keyword(arg='match', value=Name(id='match', ctx=Load()))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='train_start', value=Name(id='train_start', ctx=Load())), keyword(arg='train_end', value=Name(id='train_end', ctx=Load())), keyword(arg='test_start', value=Name(id='test_start', ctx=Load())), keyword(arg='test_end', value=Name(id='test_end', ctx=Load())), keyword(arg='test_size', value=Name(id='test_size', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='test_size, borders, match'), Tuple(elts=[Tuple(elts=[Constant(value=None), Tuple(elts=[Constant(value='2021-02-03'), Constant(value=None), Constant(value=None), Constant(value='2021-07-01')], ctx=Load()), Constant(value='At least one of train_end, test_start or test_size should be defined')], ctx=Load()), Tuple(elts=[Constant(value=17), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value=None), Constant(value='2021-07-01')], ctx=Load()), Constant(value='The beginning of the test goes before the end of the train')], ctx=Load()), Tuple(elts=[Constant(value=17), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-26'), Constant(value=None)], ctx=Load()), Constant(value='test_size is 17, but only 6 available with your test_start')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_train_test_split_pass_regressors_to_output', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='        ȥ˯ ǉʐŔğɁˇϰǷ  ȿȉ Ț Ơ  Ȑ  Bϴ ɥ ')), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store()), Name(id='known_future', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='known_future', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='trainNekT', ctx=Store()), Name(id='test', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='test_size', value=Constant(value=5))])), Assert(test=Compare(left=Attribute(value=Name(id='trainNekT', ctx=Load()), attr='regressors', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='regressors', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_make_future_i', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ȅ Ǝ ')), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store()), Name(id='known_future', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='known_future', ctx=Load()))])), Assign(targets=[Name(id='ts_future', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='ts_future', ctx=Load()), attr='regressors', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_dataset_datetime_conversion_during_init', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Constant(value=30)), keyword(arg='start_time', value=Constant(value='2021-06-01')), keyword(arg='n_segments', value=Constant(value=2))])), Assign(targets=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='categorical_column'), ctx=Store())], value=BinOp(left=BinOp(left=List(elts=[Constant(value=0)], ctx=Load()), op=Mult(), right=Constant(value=30)), op=Add(), right=BinOp(left=List(elts=[Constant(value=1)], ctx=Load()), op=Mult(), right=Constant(value=30)))), Assign(targets=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='categorical_column'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='categorical_column'), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='category')], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=List(elts=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='target')], ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=List(elts=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='categorical_column')], ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='exog', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load()), Constant(value='D'), Name(id='exog', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='dtype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='datetime64[ns]')]))], decorator_list=[]), FunctionDef(name='test_to_dataset_segment_conversion', args=arguments(posonlyargs=[], args=[arg(arg='df_segments_int')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Tes˭̬t˶˗ǁȱ: thaĬƹ̾ȳt ˫Τɟ`TȇSÍDǽatasįeÅt.toʢ˗V_dćaɑt͕asʤ¥ńet` ma˽ɣkes ca®sātÚing of segʯΫʿmˌent ˘toɆ sƿřtȱrƊině̥hg.')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_segments_int', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), ops=[Eq()], comparators=[List(elts=[Constant(value='1'), Constant(value='2')], ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='TEST_DATASET_SEGMENT_CONVERSION_DURING_INIT', args=arguments(posonlyargs=[], args=[arg(arg='df_segments_int')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ż\\ȼǓTΧeȇȜİŋ~st tϳhAa\x8dt ő`æŅTS\x8aɏDƩοatήTaʪse͏tʮ.ɮ_ţ_ŃiκɴniǨtċ_o_Ƽ` mmakes̺͍ ca©̍st̯¸ßöin͠Ɗgŝ oƛf\x7f qsˢegmǕent t͟Ϳo ƥͭstıŶring.')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_segments_int', ctx=Load())], keywords=[])), Assign(targets=[Name(id='columns_frame', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='to_frame', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='columns_frame', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='columns_frame', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='int', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='MultiIndex', ctx=Load()), attr='from_frame', ctx=Load()), args=[Name(id='columns_frame', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), ops=[Eq()], comparators=[List(elts=[Constant(value='1'), Constant(value='2')], ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_make_future_with_regressors_and_context', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors'), arg(arg='tail_steps')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store()), Name(id='known_future', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Assign(targets=[Name(id='ho', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='known_future', ctx=Load()))])), Assign(targets=[Name(id='ts_future', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[Name(id='ho', ctx=Load())], keywords=[keyword(arg='tail_steps', value=Name(id='tail_steps', ctx=Load()))])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='ts_future', ctx=Load()), attr='index', ctx=Load()), slice=Name(id='tail_steps', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timedelta', ctx=Load()), args=[Constant(value='1 day')], keywords=[]))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='tail_steps'), List(elts=[Constant(value=11), Constant(value=0)], ctx=Load())], keywords=[])]), FunctionDef(name='test_make_future_with_imputer', args=arguments(posonlyargs=[], args=[arg(arg='ts_diff_endings'), arg(arg='ts_future')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))])), Expr(value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='imputer', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Expr(value=Call(func=Name(id='assert_frame_equal', ctx=Load()), args=[Attribute(value=Name(id='future', ctx=Load()), attr='df', ctx=Load()), Attribute(value=Name(id='ts_future', ctx=Load()), attr='df', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_make_future', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Constant(value=100)), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=1), Constant(value='segment_1')])], keywords=[])), Assign(targets=[Name(id='df2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=2), Constant(value='segment_2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='df2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=False))])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='ts_future', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='ts_future', ctx=Load()), attr='index', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timedelta', ctx=Load()), args=[Constant(value='1D')], keywords=[]))], keywords=[keyword(arg='periods', value=Constant(value=10)), keyword(arg='freq', value=Constant(value='D'))])])], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='ts_future', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Set(elts=[Constant(value='target')])]))], decorator_list=[]), FunctionDef(name='test_dataset_datetime_conversion', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Constant(value=30)), keyword(arg='start_time', value=Constant(value='2021-06-01')), keyword(arg='n_segments', value=Constant(value=2))])), Assign(targets=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='classic_df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Subscript(value=Name(id='classic_df', ctx=Load()), slice=List(elts=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='target')], ctx=Load()), ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), attr='dtype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='datetime64[ns]')]))], decorator_list=[]), FunctionDef(name='test_make_future_with_exog', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ą  ʡ   ͑ \x9e     ˖  ')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Constant(value=100)), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=1), Constant(value='segment_1')])], keywords=[])), Assign(targets=[Name(id='df2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=2), Constant(value='segment_2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='df2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=False))])), Assign(targets=[Name(id='exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='exog', ctx=Load()), attr='columns', ctx=Store())], value=List(elts=[Constant(value='timestamp'), Constant(value='exog'), Constant(value='segment')], ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), keyword(arg='df_exog', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='exog', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='ts_future', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='ts_future', ctx=Load()), attr='index', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timedelta', ctx=Load()), args=[Constant(value='1D')], keywords=[]))], keywords=[keyword(arg='periods', value=Constant(value=10)), keyword(arg='freq', value=Constant(value='D'))])])], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='ts_future', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Set(elts=[Constant(value='target'), Constant(value='exog')])]))], decorator_list=[]), FunctionDef(name='test_make_future_with_regressors', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store()), Name(id='known_future', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='known_future', ctx=Load()))])), Assign(targets=[Name(id='ts_future', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='ts_future', ctx=Load()), attr='index', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timedelta', ctx=Load()), args=[Constant(value='1D')], keywords=[]))], keywords=[keyword(arg='periods', value=Constant(value=10)), keyword(arg='freq', value=Constant(value='D'))])])], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='ts_future', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Set(elts=[Constant(value='target'), Constant(value='regressor_1'), Constant(value='regressor_2')])]))], decorator_list=[]), FunctionDef(name='test_to_torch_dataset_without_drop', args=arguments(posonlyargs=[], args=[arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  Ȁ ̥ e  +Ǯˡϱ \x9fŃ  Ƕ ')), FunctionDef(name='make_sa', args=arguments(posonlyargs=[], args=[arg(arg='df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ')), Return(value=List(elts=[Dict(keys=[Constant(value='target'), Constant(value='segment')], values=[Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='target', ctx=Load()), attr='values', ctx=Load()), Subscript(value=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='values', ctx=Load()), slice=Constant(value=0), ctx=Load())])], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='tor', ctx=Store())], value=Call(func=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='to_torch_dataset', ctx=Load()), args=[Name(id='make_sa', ctx=Load())], keywords=[keyword(arg='dropna', value=Constant(value=False))])), Assert(test=Compare(left=Call(func=Name(id='l', ctx=Load()), args=[Name(id='tor', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='l', ctx=Load()), args=[Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='segments', ctx=Load())], keywords=[])])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='tor', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='target'), ctx=Load()), Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='Moscow'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='values', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='tor', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value='target'), ctx=Load()), Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='Omsk'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='values', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_update_regressors_with_onehotencoder_transform', args=arguments(posonlyargs=[], args=[arg(arg='ts_with'), arg(arg='t_ransforms'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ľ  ñ')), Expr(value=Call(func=Name(id='_test_update_regressors_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='t_ransforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_test_update_regressors_fit_transformUZ', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='t_ransforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transforms, expected_regressors'), Tuple(elts=[Tuple(elts=[List(elts=[Call(func=Name(id='OneHotEncoderTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='regressor')), keyword(arg='out_column', value=Constant(value='regressor_ohe'))])], ctx=Load()), List(elts=[Constant(value='regressor_ohe_0'), Constant(value='regressor_ohe_1'), Constant(value='regressor')], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Call(func=Name(id='OneHotEncoderTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='not_regressor'))])], ctx=Load()), List(elts=[Constant(value='regressor')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_make_future_warn_not_enough_regressors', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="ǲChȏ\x92geck ƃthˣatɂ rw̳͡arŎni͗ng iưs throwʙnǸʓ iϑf ˞ǰ\x9eregrƱesĮZȨsors ̡dʚoƫn'͜t Iha¾\x81veϯ ΪenƮough valȞ̫Ʒup-šČǟe°s Ű̝fȀor ˍthΩȲύe futÃuſȵǼrƱeŘi/.")), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store()), Name(id='known_future', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='known_future', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='UserWarning', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="Some regressors don't have enough values"))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[BinOp(left=Subscript(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df_exog', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Constant(value=100))], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_check_regressors_error', args=arguments(posonlyargs=[], args=[arg(arg='exog_starts_later', annotation=Name(id='bool', ctx=Load())), arg(arg='exog_ends_earlier', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Checkƚ thǯ́Ƶat̕ ̀ʧerroωr iās ƌra͊iseήd if regre̻s̶ȱsoĕϏrs˂ dWo̺ǵn'Ɛt\x8d ɞhaveǼ enoʶu\x93gh ȲvaluḙȚłusɟɯ for thϷe train dΜata.ÿ")), Assign(targets=[Name(id='START_TIME_MAIN', ctx=Store())], value=Constant(value='2021-01-01')), Assign(targets=[Name(id='end_time_main', ctx=Store())], value=Constant(value='2021-02-01')), Assign(targets=[Name(id='start_time_regressors', ctx=Store())], value=IfExp(test=Name(id='exog_starts_later', ctx=Load()), body=Constant(value='2021-01-10'), orelse=Name(id='START_TIME_MAIN', ctx=Load()))), Assign(targets=[Name(id='end_time_regr', ctx=Store())], value=IfExp(test=Name(id='exog_ends_earlier', ctx=Load()), body=Constant(value='2021-01-20'), orelse=Name(id='end_time_main', ctx=Load()))), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-02-01')], keywords=[])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=11), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), Constant(value=12), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='df2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Name(id='start_time_regressors', ctx=Load()), Name(id='end_time_regr', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor_aaa'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=1), Constant(value='1')])], keywords=[])), Assign(targets=[Name(id='df2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='regressor_aaa'), Constant(value='segment')], values=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load()), Constant(value=2), Constant(value='2')])], keywords=[])), Assign(targets=[Name(id='df_regressors', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='df2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df_regressors', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_regressors', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_regressors', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_regressors', value=Name(id='df_regressors', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='exog_starts_later,exog_ends_earlier'), Tuple(elts=[Tuple(elts=[Constant(value=True), Constant(value=False)], ctx=Load()), Tuple(elts=[Constant(value=False), Constant(value=True)], ctx=Load()), Tuple(elts=[Constant(value=True), Constant(value=True)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='TEST_CHECK_REGRESSORS_PASS', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ch΄Śeckž thyatʩ ̕rnegressoϑƅrs check oϼ̅ƹ-nƫ crĘÿeati;on paťsses w͆ith c͢orrec\u0378tęȇ regressors.')), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_regressors', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_regressors', value=Name(id='df_exog', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_check_regressors_pass_empty', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='̐Check that regreCssoϥrsϦϵ˺Ġ ˺check onx˧ creation p³asseńs with no regressors.Ǝ')), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='_check_regressors', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_regressors', value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[]), FunctionDef(name='test_getitem_only_date', args=arguments(posonlyargs=[], args=[arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ')), Assign(targets=[Name(id='df_date_only', ctx=Store())], value=Subscript(value=Name(id='tsdf_with_exog', ctx=Load()), slice=Constant(value='2021-02-01'), ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='df_date_only', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-02-01')], keywords=[])])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_series_equal', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Constant(value='2021-02-01'), ctx=Load()), Name(id='df_date_only', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_getitem_s', args=arguments(posonlyargs=[], args=[arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='DF_SLICE', ctx=Store())], value=Subscript(value=Name(id='tsdf_with_exog', ctx=Load()), slice=Slice(lower=Constant(value='2021-02-01'), upper=Constant(value='2021-02-03')), ctx=Load())), Assign(targets=[Name(id='expected_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DatetimeIndex', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-02-01'), Constant(value='2021-02-03')], keywords=[])], keywords=[keyword(arg='name', value=Constant(value='timestamp'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_index_equal', ctx=Load()), args=[Attribute(value=Name(id='DF_SLICE', ctx=Load()), attr='index', ctx=Load()), Name(id='expected_index', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Constant(value='2021-02-01'), upper=Constant(value='2021-02-03')), ctx=Load()), Name(id='DF_SLICE', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_getitem_second_ellipsis', args=arguments(posonlyargs=[], args=[arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='DF_SLICE', ctx=Store())], value=Subscript(value=Name(id='tsdf_with_exog', ctx=Load()), slice=Tuple(elts=[Slice(lower=Constant(value='2021-02-01'), upper=Constant(value='2021-02-03')), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='expected_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DatetimeIndex', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-02-01'), Constant(value='2021-02-03')], keywords=[])], keywords=[keyword(arg='name', value=Constant(value='timestamp'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_index_equal', ctx=Load()), args=[Attribute(value=Name(id='DF_SLICE', ctx=Load()), attr='index', ctx=Load()), Name(id='expected_index', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Constant(value='2021-02-01'), upper=Constant(value='2021-02-03')), ctx=Load()), Name(id='DF_SLICE', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_getitem_first_ellipsis', args=arguments(posonlyargs=[], args=[arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='DF_SLICE', ctx=Store())], value=Subscript(value=Name(id='tsdf_with_exog', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value='target')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='df_expected', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), List(elts=[List(elts=[Constant(value='Moscow'), Constant(value='target')], ctx=Load()), List(elts=[Constant(value='Omsk'), Constant(value='target')], ctx=Load())], ctx=Load())], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Name(id='df_expected', ctx=Load()), Name(id='DF_SLICE', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_getitem_all_indexes', args=arguments(posonlyargs=[], args=[arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='DF_SLICE', ctx=Store())], value=Subscript(value=Name(id='tsdf_with_exog', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Slice()], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='df_expected', ctx=Store())], value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Name(id='df_expected', ctx=Load()), Name(id='DF_SLICE', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_finding_regressors_marked', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that ts.rMegresʘ\x92ǆÈsȼoȩȃrs prope͑rtʵy ͚w͉Ɗorʪksε ņcorrecďtly wƣhȻe̒ŀn̩͛å ²ͶŲregȗressors seΙėt.Ͽ')), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store()), Name(id='known_future', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load()))])), Assert(test=Compare(left=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_finding_regressors_unmarked', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), Assert(test=Compare(left=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_update_regressors_not_add_not_regressors', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_regressors'), arg(arg='t_ransforms'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_test_update_regressors_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='t_ransforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_test_update_regressors_fit_transformUZ', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='t_ransforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transforms, expected_regressors'), Tuple(elts=[Tuple(elts=[List(elts=[Call(func=Name(id='MaxAbsScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='scaled_target'))])], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='value', value=Constant(value=2)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='add_constant_target'))])], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_tail_default', args=arguments(posonlyargs=[], args=[arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  Č Ĝƹ ī   ɲ   ί      ˱Ϡλ ¾£ ǩęȎ ηǖ')), Expr(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Call(func=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='tail', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), attr='tail', ctx=Load()), args=[], keywords=[])])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_right_format_sorting', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Constant(value=100))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_1')), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='reg_2'), ctx=Store())], value=Constant(value=1)), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='reg_1'), ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='tsd', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='inv_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='tsd', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_series_equal', ctx=Load()), args=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='reg_1'), ctx=Load()), Subscript(value=Name(id='inv_df', ctx=Load()), slice=Constant(value='reg_1'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_series_equal', ctx=Load()), args=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='reg_2'), ctx=Load()), Subscript(value=Name(id='inv_df', ctx=Load()), slice=Constant(value='reg_2'), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_to_flatten_simple', args=arguments(posonlyargs=[], args=[arg(arg='example_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ɚCheck th\x97at TSÐDaϺtasēt.toʮ_ƻͫfl̲aαtten worƂks \u0382correctly iʆͧn sƅiǞ̯mʈple caĉse.')), Assign(targets=[Name(id='flat_df', ctx=Store())], value=Name(id='example_df', ctx=Load())), Assign(targets=[Name(id='sorted_columns', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='flat_df', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assign(targets=[Name(id='expected_df', ctx=Store())], value=Subscript(value=Name(id='flat_df', ctx=Load()), slice=Name(id='sorted_columns', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='obtained_df', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='flat_df', ctx=Load())], keywords=[])], keywords=[]), slice=Name(id='sorted_columns', ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='expected_df', ctx=Load()), attr='columns', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='obtained_df', ctx=Load()), attr='columns', ctx=Load())])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='expected_df', ctx=Load()), attr='dtypes', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='obtained_df', ctx=Load()), attr='dtypes', ctx=Load())])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='expected_df', ctx=Load()), attr='values', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='obtained_df', ctx=Load()), attr='values', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_to_flatten_with_exog', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors_flat')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors_flat', ctx=Load())), Assign(targets=[Subscript(value=Name(id='df_exog', ctx=Load()), slice=Constant(value='regressor_boolean'), ctx=Store())], value=Constant(value=1)), Assign(targets=[Subscript(value=Name(id='df_exog', ctx=Load()), slice=Constant(value='regressor_boolean'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_exog', ctx=Load()), slice=Constant(value='regressor_boolean'), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='boolean')], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_exog', ctx=Load()), slice=Constant(value='regressor_Int64'), ctx=Store())], value=Constant(value=1)), Assign(targets=[Subscript(value=Attribute(value=Name(id='df_exog', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value=1), Constant(value='regressor_Int64')], ctx=Load()), ctx=Store())], value=Constant(value=None)), Assign(targets=[Subscript(value=Name(id='df_exog', ctx=Load()), slice=Constant(value='regressor_Int64'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_exog', ctx=Load()), slice=Constant(value='regressor_Int64'), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='Int64')], keywords=[])), Assign(targets=[Name(id='flat_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='merge', ctx=Load()), args=[], keywords=[keyword(arg='left', value=Name(id='df', ctx=Load())), keyword(arg='right', value=Name(id='df_exog', ctx=Load())), keyword(arg='left_on', value=List(elts=[Constant(value='timestamp'), Constant(value='segment')], ctx=Load())), keyword(arg='right_on', value=List(elts=[Constant(value='timestamp'), Constant(value='segment')], ctx=Load()))])), Assign(targets=[Name(id='sorted_columns', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='flat_df', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assign(targets=[Name(id='expected_df', ctx=Store())], value=Subscript(value=Name(id='flat_df', ctx=Load()), slice=Name(id='sorted_columns', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='to_append', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='segment')], values=[Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), slice=Slice(upper=Constant(value=5)), ctx=Load()), BinOp(left=List(elts=[Constant(value='2')], ctx=Load()), op=Mult(), right=Constant(value=5))])], keywords=[])), Assign(targets=[Name(id='dtypesZYpy', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='expected_df', ctx=Load()), attr='dtypes', ctx=Load()), attr='to_dict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='expected_df', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Name(id='expected_df', ctx=Load()), Name(id='to_append', ctx=Load())], ctx=Load())], keywords=[]), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='by', value=List(elts=[Constant(value='segment'), Constant(value='timestamp')], ctx=Load()))]), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='column', ctx=Store()), Name(id='dtype', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='dtypesZYpy', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='dtype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='category')]), body=[Assign(targets=[Subscript(value=Name(id='expected_df', ctx=Load()), slice=Name(id='column', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='expected_df', ctx=Load()), slice=Name(id='column', ctx=Load()), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='dtype', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='obtained_df', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='flat_df', ctx=Load())], keywords=[])], keywords=[]), slice=Name(id='sorted_columns', ctx=Load()), ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='by', value=List(elts=[Constant(value='segment'), Constant(value='timestamp')], ctx=Load()))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='sorted_columns', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='obtained_df', ctx=Load()), attr='columns', ctx=Load())])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='expected_df', ctx=Load()), attr='dtypes', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='obtained_df', ctx=Load()), attr='dtypes', ctx=Load())])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='expected_df', ctx=Load()), attr='equals', ctx=Load()), args=[Name(id='obtained_df', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_transform_raise_warning_on_diff_endings', args=arguments(posonlyargs=[], args=[arg(arg='ts_diff_endings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   Ɵ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='warning', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Segments contains NaNs in the last timestamps.'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='transform', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_fit_transform_raise_warning_on_diff_endings', args=arguments(posonlyargs=[], args=[arg(arg='ts_diff_endings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ˴ ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='warning', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Segments contains NaNs in the last timestamps.'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_gather_common_data', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store()), Name(id='known_future', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='known_future', ctx=Load()))])), Assign(targets=[Name(id='common_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='_gather_common_data', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Subscript(value=Name(id='common_data', ctx=Load()), slice=Constant(value='num_segments'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), Assert(test=Compare(left=Subscript(value=Name(id='common_data', ctx=Load()), slice=Constant(value='num_exogs'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), Assert(test=Compare(left=Subscript(value=Name(id='common_data', ctx=Load()), slice=Constant(value='num_regressors'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), Assert(test=Compare(left=Subscript(value=Name(id='common_data', ctx=Load()), slice=Constant(value='num_known_future'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), Assert(test=Compare(left=Subscript(value=Name(id='common_data', ctx=Load()), slice=Constant(value='freq'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='D')]))], decorator_list=[]), FunctionDef(name='test_gather_segments_data', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store()), Name(id='known_future', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=5)), Constant(value=0)], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Tuple(elts=[Slice(lower=UnaryOp(op=USub(), operand=Constant(value=3))), Constant(value=1)], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='known_future', ctx=Load()))])), Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())), Assign(targets=[Name(id='se_gments_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='_gather_segments_data', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='se_gments_dict', ctx=Load())], keywords=[keyword(arg='index', value=Name(id='segments', ctx=Load()))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())])], keywords=[])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='start_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-01-01')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='start_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-01-06')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='end_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-02-01')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='end_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-01-29')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='length')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=32)])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='length')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=24)])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='num_missing')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='num_missing')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[]), FunctionDef(name='te_st_describe', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that TS˰Dataˆset.describe woƱrks coġrrectly.')), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store()), Name(id='known_future', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=5)), Constant(value=0)], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Tuple(elts=[Slice(lower=UnaryOp(op=USub(), operand=Constant(value=3))), Constant(value=1)], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Name(id='known_future', ctx=Load()))])), Assign(targets=[Name(id='description', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='describe', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='description', ctx=Load()), attr='index', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())])], keywords=[])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='start_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-01-01')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='start_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-01-06')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='end_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-02-01')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='end_timestamp')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2021-01-29')], keywords=[])])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='length')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=32)])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='length')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=24)])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='1'), Constant(value='num_missing')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='description', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Constant(value='2'), Constant(value='num_missing')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='description', ctx=Load()), slice=Constant(value='num_segments'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='description', ctx=Load()), slice=Constant(value='num_exogs'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='description', ctx=Load()), slice=Constant(value='num_regressors'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='description', ctx=Load()), slice=Constant(value='num_known_future'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='description', ctx=Load()), slice=Constant(value='freq'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='D')])], keywords=[]))], decorator_list=[]), FunctionDef(name='ts_with_regressors', args=arguments(posonlyargs=[], args=[arg(arg='df_and_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='$  ̘  ')), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store()), Name(id='regresso', ctx=Store())], ctx=Store())], value=Name(id='df_and_regressors', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Constant(value='D')), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='known_future', value=Constant(value='all'))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='_test_update_regressors_transform', args=arguments(posonlyargs=[], args=[arg(arg='ts'), arg(arg='t_ransforms'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   Ħ˵ Γ      ΈTĎ ǅ Ț)ί ȡλϜ ʶͽ ûń ċ  ')), Assign(targets=[Name(id='fitted_transforms', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='transform', ctx=Store()), iter=Name(id='t_ransforms', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='transform', ctx=Load()), args=[Name(id='fitted_transforms', ctx=Load())], keywords=[])), Assign(targets=[Name(id='regresso', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())), Assert(test=Compare(left=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='regresso', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='expected_regressors', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='test_head_default', args=arguments(posonlyargs=[], args=[arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='        ')), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Call(func=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='head', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), attr='head', ctx=Load()), args=[], keywords=[])])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_update_regressors_with_futuremixin_transform', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_regressors'), arg(arg='t_ransforms'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='             ̿      ')), Expr(value=Call(func=Name(id='_test_update_regressors_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='t_ransforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_test_update_regressors_fit_transformUZ', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='t_ransforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transforms, expected_regressors'), Tuple(elts=[Tuple(elts=[List(elts=[Call(func=Name(id='SegmentEncoderTransform', ctx=Load()), args=[], keywords=[])], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='segment_code')], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=1), Constant(value=2)], ctx=Load())), keyword(arg='out_column', value=Constant(value='regressor_lag'))])], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_lag_1'), Constant(value='regressor_lag_2')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='tsdf_with_exog', args=arguments(posonlyargs=[], args=[arg(arg='random_seed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), attr='from_dict', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-02-01'), Constant(value='2021-07-01')], keywords=[keyword(arg='freq', value=Constant(value='1d'))])])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), attr='from_dict', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-02-01'), Constant(value='2021-07-01')], keywords=[keyword(arg='freq', value=Constant(value='1d'))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='Moscow')), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Name(id='x_', ctx=Load()), op=Pow(), right=Constant(value=2)), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='uniform', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2)), Constant(value=2)], keywords=[])), generators=[comprehension(target=Name(id='x_', ctx=Store()), iter=Call(func=Name(id='li', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='l', ctx=Load()), args=[Name(id='df_1', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='Omsk')), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Name(id='x_', ctx=Load()), op=Pow(), right=Constant(value=0.5)), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='uniform', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2)), Constant(value=2)], keywords=[])), generators=[comprehension(target=Name(id='x_', ctx=Store()), iter=Call(func=Name(id='li', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='l', ctx=Load()), args=[Name(id='df_2', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='classic_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='classic_df_exog', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='start_time', value=Constant(value='2021-01-01')), keyword(arg='periods', value=Constant(value=600)), keyword(arg='n_segments', value=Constant(value=2))])), Assign(targets=[Subscript(value=Name(id='classic_df_exog', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='classic_df_exog', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x_')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=IfExp(test=Compare(left=Name(id='x_', ctx=Load()), ops=[Eq()], comparators=[Constant(value='segment_0')]), body=Constant(value='Moscow'), orelse=Constant(value='Omsk')))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='classic_df_exog', ctx=Load()), attr='rename', ctx=Load()), args=[], keywords=[keyword(arg='columns', value=Dict(keys=[Constant(value='target')], values=[Constant(value='exog')])), keyword(arg='inplace', value=Constant(value=True))])), Assign(targets=[Name(id='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='classic_df_exog', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='freq', value=Constant(value='1D'))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='test_update_regressors_with_regressor_in_column', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_regressors'), arg(arg='t_ransforms'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_test_update_regressors_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='t_ransforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_test_update_regressors_fit_transformUZ', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='t_ransforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transforms, expected_regressors'), Tuple(elts=[Tuple(elts=[List(elts=[Call(func=Name(id='MaxAbsScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='regressor_1')), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='scaled'))])], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='scaled_regressor_1')], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Call(func=Name(id='MaxAbsScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value=None))])], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Call(func=Attribute(value=Call(func=Name(id='MaxAbsScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=List(elts=[Constant(value='regressor_1')], ctx=Load())), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value=None))]), attr='__repr__', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Call(func=Name(id='MaxAbsScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=List(elts=[Constant(value='regressor_2')], ctx=Load())), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value=None))]), attr='__repr__', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='regressor_1')), keyword(arg='value', value=Constant(value=2)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='regressor_add_constant_regressor_1'))])], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_add_constant_regressor_1')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_train_test_split', args=arguments(posonlyargs=[], args=[arg(arg='borders'), arg(arg='true_borders'), arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='train_start', ctx=Store()), Name(id='train_end', ctx=Store()), Name(id='test_start', ctx=Store()), Name(id='test_end', ctx=Store())], ctx=Store())], value=Name(id='borders', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='train_start_true', ctx=Store()), Name(id='train_end_true', ctx=Store()), Name(id='test_start_true', ctx=Store()), Name(id='test_end_true', ctx=Store())], ctx=Store())], value=Name(id='true_borders', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='trainNekT', ctx=Store()), Name(id='test', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='train_start', value=Name(id='train_start', ctx=Load())), keyword(arg='train_end', value=Name(id='train_end', ctx=Load())), keyword(arg='test_start', value=Name(id='test_start', ctx=Load())), keyword(arg='test_end', value=Name(id='test_end', ctx=Load()))])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='trainNekT', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='test', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='trainNekT', ctx=Load()), attr='df', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='train_start_true', ctx=Load()), upper=Name(id='train_end_true', ctx=Load())), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='trainNekT', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df_exog', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='df', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='test_start_true', ctx=Load()), upper=Name(id='test_end_true', ctx=Load())), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df_exog', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='borders, true_borders'), Tuple(elts=[Tuple(elts=[Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-22'), Constant(value='2021-07-01')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-22'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-06-28')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-06-28')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value='2021-07-01')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value=None), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value='2021-06-28')], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value='2021-06-28')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='2021-02-03'), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value=None), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-23'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value=None), Constant(value='2021-06-20'), Constant(value=None), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value='2021-06-21'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='2021-02-01'), Constant(value='2021-06-20'), Constant(value='2021-06-21'), Constant(value='2021-07-01')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_update_regressors_after_filter', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_regressors'), arg(arg='t_ransforms'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_test_update_regressors_transform', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='t_ransforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_test_update_regressors_fit_transformUZ', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='t_ransforms', ctx=Load())], keywords=[]), Name(id='expected_regressors', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='transforms, expected_regressors'), Tuple(elts=[Tuple(elts=[List(elts=[Call(func=Name(id='FilterFeaturesTransform', ctx=Load()), args=[], keywords=[keyword(arg='exclude', value=List(elts=[Constant(value='regressor_1')], ctx=Load()))])], ctx=Load()), List(elts=[Constant(value='regressor_2')], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Call(func=Name(id='FilterFeaturesTransform', ctx=Load()), args=[], keywords=[keyword(arg='exclude', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load()))])], ctx=Load()), List(elts=[], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_back_included_columns', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_fea'), arg(arg='columns'), arg(arg='return_features')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='original_regressor', ctx=Store())], value=Attribute(value=Name(id='ts_with_fea', ctx=Load()), attr='regressors', ctx=Load())), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='FilterFeaturesTransform', ctx=Load()), args=[], keywords=[keyword(arg='include', value=Name(id='columns', ctx=Load())), keyword(arg='return_features', value=Name(id='return_features', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ts_with_fea', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='transform', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ts_with_fea', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='original_regressor', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='ts_with_fea', ctx=Load()), attr='regressors', ctx=Load())], keywords=[])]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='xfail', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='return_features'), List(elts=[Constant(value=True), Constant(value=False)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='columns'), List(elts=[List(elts=[], ctx=Load()), List(elts=[Constant(value='target')], ctx=Load()), List(elts=[Constant(value='exog_1'), Constant(value='exog_2')], ctx=Load()), List(elts=[Constant(value='target'), Constant(value='exog_1'), Constant(value='exog_2')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_to_dataset_not_modify_dataframe', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-01-01'), Constant(value='2021-02-01')], keywords=[])), Assign(targets=[Name(id='df_original', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Name(id='timestamp', ctx=Load()), Constant(value=11), Constant(value=1)])], keywords=[])), Assign(targets=[Name(id='df_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_original', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Name(id='df_m', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_original', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Name(id='df_original', ctx=Load()), Name(id='df_copy', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_tsdataset_idx_slice', args=arguments(posonlyargs=[], args=[arg(arg='tsdf_with_exog'), arg(arg='start_idx'), arg(arg='end_idx')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ȡ  ')), Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='tsdataset_idx_slice', ctx=Load()), args=[], keywords=[keyword(arg='start_idx', value=Name(id='start_idx', ctx=Load())), keyword(arg='end_idx', value=Name(id='end_idx', ctx=Load()))])), Assert(test=Compare(left=Attribute(value=Name(id='t', ctx=Load()), attr='known_future', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='known_future', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='t', ctx=Load()), attr='regressors', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='regressors', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='t', ctx=Load()), attr='transforms', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='transforms', ctx=Load())])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Attribute(value=Name(id='t', ctx=Load()), attr='df', ctx=Load()), Subscript(value=Attribute(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=Name(id='start_idx', ctx=Load()), upper=Name(id='end_idx', ctx=Load())), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Attribute(value=Name(id='t', ctx=Load()), attr='df_exog', ctx=Load()), Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df_exog', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='start_idx,end_idx'), List(elts=[Tuple(elts=[Constant(value=1), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value=None), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value=1), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_make_f_uture_raise_error_on_diff_endings', args=arguments(posonlyargs=[], args=[arg(arg='ts_diff_endings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ķΩDƤ  Ȟ ǀ 0        ɹ ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='All segments should end at the same timestamp'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[]))])], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='xfail', ctx=Load())]), FunctionDef(name='test_to_torch_dataset_with_drop', args=arguments(posonlyargs=[], args=[arg(arg='tsdf_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='make_sa', args=arguments(posonlyargs=[], args=[arg(arg='df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Ğ     Ģ\x8bƉ  ŉ ξ    ƺ ˂')), Return(value=List(elts=[Dict(keys=[Constant(value='target'), Constant(value='segment')], values=[Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='target', ctx=Load()), attr='values', ctx=Load()), Subscript(value=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='values', ctx=Load()), slice=Constant(value=0), ctx=Load())])], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='fill_na_idx', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=3), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(upper=Name(id='fill_na_idx', ctx=Load())), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='Moscow'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load())), Assign(targets=[Name(id='tor', ctx=Store())], value=Call(func=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='to_torch_dataset', ctx=Load()), args=[Name(id='make_sa', ctx=Load())], keywords=[keyword(arg='dropna', value=Constant(value=True))])), Assert(test=Compare(left=Call(func=Name(id='l', ctx=Load()), args=[Name(id='tor', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='l', ctx=Load()), args=[Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='segments', ctx=Load())], keywords=[])])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='tor', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='target'), ctx=Load()), Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(lower=BinOp(left=Name(id='fill_na_idx', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timedelta', ctx=Load()), args=[Constant(value='1 day')], keywords=[]))), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='Moscow'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='values', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='tor', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value='target'), ctx=Load()), Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='tsdf_with_exog', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='Omsk'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='values', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])