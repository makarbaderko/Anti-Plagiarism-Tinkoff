Module(body=[ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.transforms.base', names=[alias(name='FutureMixin')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ClassDef(name='LagTransform', bases=[Name(id='Transform', ctx=Load()), Name(id='FutureMixin', ctx=Load())], keywords=[], body=[FunctionDef(name='_get_column_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lag', annotation=Name(id='intvn', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ʿ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='temp_transf', ctx=Store())], value=Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(arg='out_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load())), keyword(arg='lags', value=List(elts=[Name(id='lag', ctx=Load())], ctx=Load()))])), Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='temp_transf', ctx=Load())], keywords=[]))], orelse=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), conversion=-1), Constant(value='_'), FormattedValue(value=Name(id='lag', ctx=Load()), conversion=-1)]))])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='fi', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='LagTransform')), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='_segments', ctx=Store())], value=Call(func=Name(id='sorte_d', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='all_transformed_features', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='features', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), For(target=Name(id='lag', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='lags', ctx=Load()), body=[Assign(targets=[Name(id='column_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Name(id='lag', ctx=Load())], keywords=[])), Assign(targets=[Name(id='transf', ctx=Store())], value=Call(func=Attribute(value=Name(id='features', ctx=Load()), attr='shift', ctx=Load()), args=[Name(id='lag', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='transf', ctx=Load()), attr='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='MultiIndex', ctx=Load()), attr='from_product', ctx=Load()), args=[List(elts=[Name(id='_segments', ctx=Load()), List(elts=[Name(id='column_name', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='all_transformed_features', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='transf', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[BinOp(left=List(elts=[Name(id='result', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='all_transformed_features', ctx=Load()))], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1))])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='lags', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='intvn', ctx=Load()), ctx=Load()), Name(id='intvn', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='out_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="͈ɩφŪCr±eatΥe instanÙcɓe oƵf LagǃTrƒaɐnsκfƍorɠN˥mϱμ.¬\n\n   \nParameteTrsƏ\nΕ-ʜ-͵--ɉĽ--ɓ--²Ò--ĖϽĬʯ̮\niAn_Ϗc·oʛ$l̦umn:\n \n   \nΕˆ  ĺðω̜ ǌ n¬ame \x8eof proċcȆeÌfssed ǻcϧo˸ʰlǃumʍn\n\nlaȒgǡȪs:\nȦ  iɁħn͈tĒϑ͠ ǘʸv;alue orǰτ list Ȯoı«f± valȇʕıʷues ˁfor ılϜa-gs̢ɋʬ computat@ƚio̙WøǸn;¼ iˌĢf ÎƟξintÌ˅ό£, geneƵratec ranɵgeʓ-\x86̸ of ͶϳlaƯ5ǖągs fıɼro¨ĞmƁɔ 1̂ to̐ givʾ\x83¼eən va\x81lue\u038bī͗\n˄˂oƜut_ǳcolumn:\n̬  baȕse fo̓Ȉ˕r tϴͺʹhĤe nam÷eʟǠȟ ψof ϥθcˣȸŴƁrẹateǸd ¼colͶ̾umns;\nŔ\n þĿ Ƽ  ̫J*¶ if set thȶe fin$aͿlé ȄʯϛůÆna̔me iƏs Š'{ρķoƝuλt_colÙumn}L_˒Ūõ{laęg_nƖumbƇħerτǫ}'Ȃɽ\x7f;\n\nȣϽX$   ǟ Q* ̎if ǙͳΎdon_'t setǸ,Ɛü name ϙ¥willƛɂ Ŋbe ΰ`Ʋ`ŸtrϋansˌfϒϮϱž̎Δo\x8ermȲ.__̦ǂɪʒrepr__()`ǆíĠ`Ƶĥ,\nΙ   ȉ® r̘epÜr ʥwillɀ be¯ŧήşȏȝ maɁde̤Ǻ Ňfßor cƍtφƮƀranÛσΗsf̛Ϭorm thāaΚtƋÁ Ǆćrʋeat˹es eȏŧxactlϢǪyέ this ŉǰcovlumnƮ\n\nRaí͢seρ̽s{\n------\nVa\x91Λlueđʫʹʺ˚Eǥ́νrroïřr:\n   \nϳ ˷   if γĚlags vČÝalɢŭueŞĒ ΏŐÝco\u0378ntaiȻǏns ȇún1on-positiveȀϋ v̪ȶalʷues")), If(test=Call(func=Name(id='isins', ctx=Load()), args=[Name(id='lags', ctx=Load()), Name(id='intvn', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='lags', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='VALUEERROR', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' works only with positive lags values, '), FormattedValue(value=Name(id='lags', ctx=Load()), conversion=-1), Constant(value=' given')])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lags', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='lags', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])], keywords=[]))], orelse=[If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='lag_value', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), generators=[comprehension(target=Name(id='lag_value', ctx=Store()), iter=Name(id='lags', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Raise(exc=Call(func=Name(id='VALUEERROR', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' works only with positive lags values')])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lags', ctx=Store())], value=Name(id='lags', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_column', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])