Module(body=[Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.datasets.tsdataset', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='MAE')], level=0), ImportFrom(module='etna.models.nn', names=[alias(name='TFTModel')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='AddConstTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='DateFlagsTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='PytorchForecastingTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='StandardScalerTransform')], level=0), FunctionDef(name='test_fit_wrong_order_transform', args=arguments(posonlyargs=[], args=[arg(arg='weekly_period_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='weekly_period_df', ctx=Load())], keywords=[]), Constant(value='D')], keywords=[])), Assign(targets=[Name(id='add_const', ctx=Store())], value=Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='value', value=Constant(value=1.0))])), Assign(targets=[Name(id='pft', ctx=Store())], value=Call(func=Name(id='PytorchForecastingTransform', ctx=Load()), args=[], keywords=[keyword(arg='max_encoder_length', value=Constant(value=21)), keyword(arg='min_encoder_length', value=Constant(value=21)), keyword(arg='max_prediction_length', value=Constant(value=8)), keyword(arg='time_varying_known_reals', value=List(elts=[Constant(value='time_idx')], ctx=Load())), keyword(arg='time_varying_unknown_reals', value=List(elts=[Constant(value='target')], ctx=Load())), keyword(arg='static_categoricals', value=List(elts=[Constant(value='segment')], ctx=Load())), keyword(arg='target_normalizer', value=Constant(value=None))])), Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='pft', ctx=Load()), Name(id='add_const', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='TFTModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=300)), keyword(arg='learning_rate', value=List(elts=[Constant(value=0.1)], ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='add PytorchForecastingTransform'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_tft_model_run_weekly_overfit', args=arguments(posonlyargs=[], args=[arg(arg='ts_dataset_weekly_function_with_horizon'), arg(arg='horizon')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ÍGiveǝn:\x96 I ĕhaīve̎ dăataframe w˖ithǏ 2[ ˦̡sΠegments with weǄeėʎ͇kl%̨ym sea˘soGnalΊϑÀity wiɕthK knΖow\x9en\u0379 fíut͚¼ʀuJre\nWhen:˿\nŠTheʽn: ƔI gqet {÷ho\x91rºizon͍Č} pɳeriods ϳͱͻper da\x9bɀtaîsʐĞɽȏe\u0380āt aƧFs ač fo¬re̦cĬasϫút and õthey "the Ǌˬsame" as ȭpas;t')), Assign(targets=[Tuple(elts=[Name(id='ts_train', ctx=Store()), Name(id='ts_test', ctx=Store())], ctx=Store())], value=Call(func=Name(id='ts_dataset_weekly_function_with_horizon', ctx=Load()), args=[Name(id='horizon', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dft', ctx=Store())], value=Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[keyword(arg='day_number_in_week', value=Constant(value=True)), keyword(arg='day_number_in_month', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='regressor_dateflag'))])), Assign(targets=[Name(id='pft', ctx=Store())], value=Call(func=Name(id='PytorchForecastingTransform', ctx=Load()), args=[], keywords=[keyword(arg='max_encoder_length', value=Constant(value=21)), keyword(arg='min_encoder_length', value=Constant(value=21)), keyword(arg='max_prediction_length', value=Name(id='horizon', ctx=Load())), keyword(arg='time_varying_known_reals', value=List(elts=[Constant(value='time_idx')], ctx=Load())), keyword(arg='time_varying_known_categoricals', value=List(elts=[Constant(value='regressor_dateflag_day_number_in_week')], ctx=Load())), keyword(arg='time_varying_unknown_reals', value=List(elts=[Constant(value='target')], ctx=Load())), keyword(arg='static_categoricals', value=List(elts=[Constant(value='segment')], ctx=Load())), keyword(arg='target_normalizer', value=Constant(value=None))])), Expr(value=Call(func=Attribute(value=Name(id='ts_train', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='dft', ctx=Load()), Name(id='pft', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='TFTModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=300)), keyword(arg='learning_rate', value=List(elts=[Constant(value=0.1)], ctx=Load()))])), Assign(targets=[Name(id='ts_pred', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_train', ctx=Load()), attr='make_future', ctx=Load()), args=[Name(id='horizon', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts_train', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts_pred', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='ts_pred', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Name(id='MAE', ctx=Load()), args=[Constant(value='macro')], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='m', ctx=Load()), args=[Name(id='ts_test', ctx=Load()), Name(id='ts_pred', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=0.24)]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='long_2', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='horizon'), List(elts=[Constant(value=8), Constant(value=21)], ctx=Load())], keywords=[])]), FunctionDef(name='test_tft_model_run_weekly_overfit_with_scaler', args=arguments(posonlyargs=[], args=[arg(arg='ts_dataset_weekly_function_with_horizon'), arg(arg='horizon')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='ts_train', ctx=Store()), Name(id='ts_test', ctx=Store())], ctx=Store())], value=Call(func=Name(id='ts_dataset_weekly_function_with_horizon', ctx=Load()), args=[Name(id='horizon', ctx=Load())], keywords=[])), Assign(targets=[Name(id='std', ctx=Store())], value=Call(func=Name(id='StandardScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))])), Assign(targets=[Name(id='dft', ctx=Store())], value=Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[keyword(arg='day_number_in_week', value=Constant(value=True)), keyword(arg='day_number_in_month', value=Constant(value=False)), keyword(arg='out_column', value=Constant(value='regressor_dateflag'))])), Assign(targets=[Name(id='pft', ctx=Store())], value=Call(func=Name(id='PytorchForecastingTransform', ctx=Load()), args=[], keywords=[keyword(arg='max_encoder_length', value=Constant(value=21)), keyword(arg='min_encoder_length', value=Constant(value=21)), keyword(arg='max_prediction_length', value=Name(id='horizon', ctx=Load())), keyword(arg='time_varying_known_reals', value=List(elts=[Constant(value='time_idx')], ctx=Load())), keyword(arg='time_varying_known_categoricals', value=List(elts=[Constant(value='regressor_dateflag_day_number_in_week')], ctx=Load())), keyword(arg='time_varying_unknown_reals', value=List(elts=[Constant(value='target')], ctx=Load())), keyword(arg='static_categoricals', value=List(elts=[Constant(value='segment')], ctx=Load())), keyword(arg='target_normalizer', value=Constant(value=None))])), Expr(value=Call(func=Attribute(value=Name(id='ts_train', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='std', ctx=Load()), Name(id='dft', ctx=Load()), Name(id='pft', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='TFTModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=300)), keyword(arg='learning_rate', value=List(elts=[Constant(value=0.1)], ctx=Load()))])), Assign(targets=[Name(id='ts_pred', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_train', ctx=Load()), attr='make_future', ctx=Load()), args=[Name(id='horizon', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts_train', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts_pred', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='ts_pred', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Name(id='MAE', ctx=Load()), args=[Constant(value='macro')], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='m', ctx=Load()), args=[Name(id='ts_test', ctx=Load()), Name(id='ts_pred', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=0.24)]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='long_2', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='horizon'), List(elts=[Constant(value=8)], ctx=Load())], keywords=[])]), FunctionDef(name='test_forecast_without_make_future', args=arguments(posonlyargs=[], args=[arg(arg='weekly_period_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='weekly_period_df', ctx=Load())], keywords=[]), Constant(value='D')], keywords=[])), Assign(targets=[Name(id='pft', ctx=Store())], value=Call(func=Name(id='PytorchForecastingTransform', ctx=Load()), args=[], keywords=[keyword(arg='max_encoder_length', value=Constant(value=21)), keyword(arg='min_encoder_length', value=Constant(value=21)), keyword(arg='max_prediction_length', value=Constant(value=8)), keyword(arg='time_varying_known_reals', value=List(elts=[Constant(value='time_idx')], ctx=Load())), keyword(arg='time_varying_unknown_reals', value=List(elts=[Constant(value='target')], ctx=Load())), keyword(arg='static_categoricals', value=List(elts=[Constant(value='segment')], ctx=Load())), keyword(arg='target_normalizer', value=Constant(value=None))])), Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='pft', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='TFTModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timedelta', ctx=Load()), args=[], keywords=[keyword(arg='days', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load())], keywords=[]))]))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='The future is not generated!'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='_get_default_transform', args=arguments(posonlyargs=[], args=[arg(arg='horizon', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='              ')), Return(value=Call(func=Name(id='PytorchForecastingTransform', ctx=Load()), args=[], keywords=[keyword(arg='max_encoder_length', value=Constant(value=21)), keyword(arg='min_encoder_length', value=Constant(value=21)), keyword(arg='max_prediction_length', value=Name(id='horizon', ctx=Load())), keyword(arg='time_varying_known_reals', value=List(elts=[Constant(value='time_idx')], ctx=Load())), keyword(arg='time_varying_unknown_reals', value=List(elts=[Constant(value='target')], ctx=Load())), keyword(arg='static_categoricals', value=List(elts=[Constant(value='segment')], ctx=Load())), keyword(arg='target_normalizer', value=Constant(value=None))]))], decorator_list=[]), FunctionDef(name='test_prediction_interval_run_infuture', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='horizon', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='_get_default_transform', ctx=Load()), args=[Name(id='horizon', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='transform', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='TFTModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=8)), keyword(arg='learning_rate', value=List(elts=[Constant(value=0.1)], ctx=Load())), keyword(arg='gpus', value=Constant(value=0)), keyword(arg='batch_size', value=Constant(value=64))])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='make_future', ctx=Load()), args=[Name(id='horizon', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future', ctx=Load())], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Constant(value=0.02), Constant(value=0.98)], ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='forecast', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_slice', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Set(elts=[Constant(value='target_0.02'), Constant(value='target_0.98'), Constant(value='target')]), attr='issubset', ctx=Load()), args=[Attribute(value=Name(id='segment_slice', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=BinOp(left=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.98'), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.02'), ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=BinOp(left=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target'), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.02'), ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=BinOp(left=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.98'), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target'), ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)]), attr='all', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_prediction_interval_run_infuture_warning_', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='         ̸͇ǥ ĺ   ƄΨí')), Assign(targets=[Name(id='horizon', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='_get_default_transform', ctx=Load()), args=[Name(id='horizon', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='transform', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='TFTModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=2)), keyword(arg='learning_rate', value=List(elts=[Constant(value=0.1)], ctx=Load())), keyword(arg='gpus', value=Constant(value=0)), keyword(arg='batch_size', value=Constant(value=64))])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='make_future', ctx=Load()), args=[Name(id='horizon', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='UserWarning', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="Quantiles: \\[0.4\\] can't be computed"))]))], body=[Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future', ctx=Load())], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Constant(value=0.02), Constant(value=0.4), Constant(value=0.98)], ctx=Load()))]))]), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='forecast', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_slice', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Set(elts=[Constant(value='target_0.02'), Constant(value='target_0.98'), Constant(value='target')]), attr='issubset', ctx=Load()), args=[Attribute(value=Name(id='segment_slice', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Set(elts=[Constant(value='target_0.4')]), attr='isdisjoint', ctx=Load()), args=[Attribute(value=Name(id='segment_slice', ctx=Load()), attr='columns', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_prediction_interval_run_infuture_warning_loss', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ŖÑ ¨   Ǝ¾ π ϵ̲Ʋ   ')), ImportFrom(module='pytorch_forecasting.metrics', names=[alias(name='MAE', asname='MAEPF')], level=0), Assign(targets=[Name(id='horizon', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='_get_default_transform', ctx=Load()), args=[Name(id='horizon', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='transform', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='TFTModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=2)), keyword(arg='learning_rate', value=List(elts=[Constant(value=0.1)], ctx=Load())), keyword(arg='gpus', value=Constant(value=0)), keyword(arg='batch_size', value=Constant(value=64)), keyword(arg='loss', value=Call(func=Name(id='MAEPF', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='make_future', ctx=Load()), args=[Name(id='horizon', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='UserWarning', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="Quantiles can't be computed"))]))], body=[Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future', ctx=Load())], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Constant(value=0.02), Constant(value=0.98)], ctx=Load()))]))]), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='forecast', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_slice', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Set(elts=[Constant(value='target')]), attr='issubset', ctx=Load()), args=[Attribute(value=Name(id='segment_slice', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Set(elts=[Constant(value='target_0.02'), Constant(value='target_0.98')]), attr='isdisjoint', ctx=Load()), args=[Attribute(value=Name(id='segment_slice', ctx=Load()), attr='columns', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])