Module(body=[ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='optuna')]), ImportFrom(module='optuna.pruners', names=[alias(name='BasePruner')], level=0), ImportFrom(module='optuna.samplers', names=[alias(name='BaseSampler')], level=0), ImportFrom(module='optuna.storages', names=[alias(name='BaseStorage')], level=0), ImportFrom(module='optuna.study', names=[alias(name='Study')], level=0), ImportFrom(module='optuna.study', names=[alias(name='StudyDirection')], level=0), ImportFrom(module='optuna.trial', names=[alias(name='Trial')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='etna.auto.runner', names=[alias(name='AbstractRunner')], level=0), ImportFrom(module='etna.auto.runner', names=[alias(name='LocalRunner')], level=0), Assign(targets=[Name(id='OptunaDirection', ctx=Store())], value=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='minimize'), Constant(value='maximize')], ctx=Load()), ctx=Load())), ClassDef(name='_Optuna', bases=[], keywords=[], body=[Expr(value=Constant(value='C?lasǿs \xa0\x8cfˌorŐ encåapΘsÅu®late Ƅw˴orkĎ wi\x99th OptuɅ̢ǿn˃˹\x87a.ȵ')), FunctionDef(name='tune', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='objective', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Trial', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='flo_at', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='flo_at', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='n_trials', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='INT', ctx=Load()), ctx=Load())), arg(arg='timeout', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='INT', ctx=Load()), ctx=Load())), arg(arg='runner', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='AbstractRunner', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Call optunD?a8Ϳ˨ `ŀ̜ǌ`̧optΚ͌imɎōize``Ļ for chosόˑe2n Runϲnĳerͫ.\n\nParaā́mϨeɊtś6ers\n--ɳ--------9Ϝå\nobjeƾctive:\n    objϝϕe̹Ϛctiɥv̥ͥe function to+ Ĵopt\x95imize in½ǌ o˚ptunξaǟ śtyle\nn_triưaŭls:\n  ό  nϘʒumberͽ of( ʹΆtriaȸls toÍ rĆun. N.\x92B.Ƃ˂Ϥ in ͭƁcaȕsƣe ʰof ʈparal̊½lelƇ runnȖer,* tȡhis ǯisǶ numbd̻er ɬof trsʋƉiaʜls ˱peǔrŀ work\x84er\ntimeȲ\xa0out:\n r  \x9c ϸ{§timeoutŪ ΪfńƗorļ optimÔ(ization. ÕN.̡B̹.ƭ inʧ ɷŴcasĖeş˭ of pĄaralle˻ƀlĒĎŔ? runneϪr,˕ ͲthòÞiΟȈIs is tiϡmeǊo˼ut ΛɁper worɼker\nkw¶args:\n ɛ   Ĝaȶ¦dditioënaǠlė ȸaȶrϭ\u0380guments͚ t́o pāass Âto ɵ:py:meth:`oűpȪtunaϔ.stuΙdyŘú.ƼStʳudy.òptimize`̂')), If(test=Compare(left=Name(id='runner', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='runner', ctx=Store())], value=Call(func=Name(id='LocalRunner', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='runner', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='study', ctx=Load()), attr='optimize', ctx=Load()), Name(id='objective', ctx=Load())], keywords=[keyword(arg='n_trials', value=Name(id='n_trials', ctx=Load())), keyword(arg='timeout', value=Name(id='timeout', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='study', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_study', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Study', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='direct_ion', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='OptunaDirection', ctx=Load()), Name(id='StudyDirection', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='study_name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='sampler', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseSampler', ctx=Load()), ctx=Load())), arg(arg='storage', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseStorage', ctx=Load()), ctx=Load())), arg(arg='pruner', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BasePruner', ctx=Load()), ctx=Load())), arg(arg='directions', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='OptunaDirection', ctx=Load()), Name(id='StudyDirection', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='load_if_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='IniÊt wr˓Ɲŉapperύƾ foĤȌr Optuna.ʿÖ\n\nParameters\n--------͒ɰ--\nd̰Ţirection:\n    optKuna\x96 Ë\x81directio\xadnϡ\nstudyǬ_name:\n   " naɕˎme ʜofƚʧʰ study\nsĊȜamplerȘ:\n² yζƕ   zoptuna˖ Ƣs\x80am̞pƾǛler to Óuse\nÊsξňtoraʇgeʕ:\n  Ʒ  sʏtýɆȽorage to͆ uŭs̐e\npfrunÐżer:\n Ĉ Ǩ  ɝoptuɝna pruner\ndirections:\n  Ț  directions toǼ \'ƒoptimʯʏize Äin case oάf mƾΩu̮ŁlôtǸi-ʘobjectƉiķvˍɭΰe opύti.mi\xadzatioɋn\nloaÉd_if_exisVts:\n˼    loadňɼ studɊŴy fΛrom Ǌstor̭ɮage if κ;ϭitɤ ex̄Šists or ͘r˙aΒͬisḙʨ exceptioná if iƐt Īdoŉȸʈesn\'t')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_study', ctx=Store())], value=Call(func=Attribute(value=Name(id='optuna', ctx=Load()), attr='create_study', ctx=Load()), args=[], keywords=[keyword(arg='storage', value=Name(id='storage', ctx=Load())), keyword(arg='study_name', value=Name(id='study_name', ctx=Load())), keyword(arg='direction', value=Name(id='direct_ion', ctx=Load())), keyword(arg='sampler', value=Name(id='sampler', ctx=Load())), keyword(arg='load_if_exists', value=Name(id='load_if_exists', ctx=Load())), keyword(arg='pruner', value=Name(id='pruner', ctx=Load())), keyword(arg='directions', value=Name(id='directions', ctx=Load()))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])