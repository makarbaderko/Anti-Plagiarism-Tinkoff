Module(body=[Import(names=[alias(name='pytest')]), ImportFrom(module='sklearn.tree', names=[alias(name='DecisionTreeRegressor')], level=0), ImportFrom(module='etna.analysis.feature_relevance', names=[alias(name='ModelRelevanceTable')], level=0), ImportFrom(module='etna.analysis.feature_relevance', names=[alias(name='StatisticsRelevanceTable')], level=0), FunctionDef(name='test_statistics_relevance_table', args=arguments(posonlyargs=[], args=[arg(arg='simple_df_relevance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ˈ  ș   ȑĜ ̂')), Assign(targets=[Name(id='rt', ctx=Store())], value=Call(func=Name(id='StatisticsRelevanceTable', ctx=Load()), args=[], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='rt', ctx=Load()), attr='greater_is_better', ctx=Load()))), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store())], ctx=Store())], value=Name(id='simple_df_relevance', ctx=Load())), Assert(test=Compare(left=Attribute(value=Call(func=Name(id='rt', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='return_ranks', value=Constant(value=False))]), attr='shape', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Constant(value=2), Constant(value=2)], ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_model_relevance_table', args=arguments(posonlyargs=[], args=[arg(arg='simple_df_relevance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Õ      ¹  Éʏ ')), Assign(targets=[Name(id='rt', ctx=Store())], value=Call(func=Name(id='ModelRelevanceTable', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='rt', ctx=Load()), attr='greater_is_better', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store())], ctx=Store())], value=Name(id='simple_df_relevance', ctx=Load())), Assert(test=Compare(left=Attribute(value=Call(func=Name(id='rt', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='return_ranks', value=Constant(value=False)), keyword(arg='model', value=Call(func=Name(id='DecisionTreeRegressor', ctx=Load()), args=[], keywords=[]))]), attr='shape', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Constant(value=2), Constant(value=2)], ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_relevance_table_ranks', args=arguments(posonlyargs=[], args=[arg(arg='greater_is_better'), arg(arg='answer'), arg(arg='simple_df_relevance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rt', ctx=Store())], value=Call(func=Name(id='ModelRelevanceTable', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='rt', ctx=Load()), attr='greater_is_better', ctx=Store())], value=Name(id='greater_is_better', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store())], ctx=Store())], value=Name(id='simple_df_relevance', ctx=Load())), Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Name(id='rt', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='return_ranks', value=Constant(value=True)), keyword(arg='model', value=Call(func=Name(id='DecisionTreeRegressor', ctx=Load()), args=[], keywords=[]))])), Assert(test=Compare(left=Subscript(value=Subscript(value=Name(id='table', ctx=Load()), slice=Constant(value='regressor_1'), ctx=Load()), slice=Constant(value='1'), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='answer', ctx=Load()), slice=Constant(value=0), ctx=Load())])), Assert(test=Compare(left=Subscript(value=Subscript(value=Name(id='table', ctx=Load()), slice=Constant(value='regressor_2'), ctx=Load()), slice=Constant(value='1'), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='answer', ctx=Load()), slice=Constant(value=1), ctx=Load())])), Assert(test=Compare(left=Subscript(value=Subscript(value=Name(id='table', ctx=Load()), slice=Constant(value='regressor_1'), ctx=Load()), slice=Constant(value='2'), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='answer', ctx=Load()), slice=Constant(value=2), ctx=Load())])), Assert(test=Compare(left=Subscript(value=Subscript(value=Name(id='table', ctx=Load()), slice=Constant(value='regressor_2'), ctx=Load()), slice=Constant(value='2'), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='answer', ctx=Load()), slice=Constant(value=3), ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='greater_is_better,answer'), Tuple(elts=[Tuple(elts=[Constant(value=True), List(elts=[Constant(value=1), Constant(value=2), Constant(value=2), Constant(value=1)], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=False), List(elts=[Constant(value=2), Constant(value=1), Constant(value=1), Constant(value=2)], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])])], type_ignores=[])