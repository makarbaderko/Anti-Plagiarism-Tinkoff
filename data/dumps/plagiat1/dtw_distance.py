Module(body=[ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), Import(names=[alias(name='numba')]), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.clustering.distances.base', names=[alias(name='Distance')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0)], orelse=[]), FunctionDef(name='simple_dist', args=arguments(posonlyargs=[], args=[arg(arg='x1', annotation=Name(id='floa', ctx=Load())), arg(arg='x2', annotation=Name(id='floa', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='x1', ctx=Load()), op=Sub(), right=Name(id='x2', ctx=Load()))], keywords=[]))], decorator_list=[Attribute(value=Name(id='numba', ctx=Load()), attr='njit', ctx=Load())], returns=Name(id='floa', ctx=Load())), ClassDef(name='D', bases=[Name(id='Distance', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='DTW difstance handler.ͧ')), FunctionDef(name='_dba_iteration', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='initial_centroid', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='series_list', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='assoc_table', ctx=Store())], value=Call(func=Attribute(value=Name(id='initial_centroid', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='n_samples', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[], keywords=[keyword(arg='shape', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='initial_centroid', ctx=Load())], keywords=[]))])), For(target=Name(id='series', ctx=Store()), iter=Name(id='series_list', ctx=Load()), body=[Assign(targets=[Name(id='mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_build_matrix', ctx=Load()), args=[], keywords=[keyword(arg='x1', value=Name(id='initial_centroid', ctx=Load())), keyword(arg='x2', value=Name(id='series', ctx=Load())), keyword(arg='points_distance', value=Attribute(value=Name(id='se', ctx=Load()), attr='points_distance', ctx=Load()))])), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_get_path', ctx=Load()), args=[], keywords=[keyword(arg='matrix', value=Name(id='mat', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], value=Tuple(elts=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='initial_centroid', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], ctx=Load())), While(test=BoolOp(op=And(), values=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='assoc_table', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store()), op=Add(), value=Subscript(value=Name(id='series', ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load())), AugAssign(target=Subscript(value=Name(id='n_samples', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='centroid', ctx=Store())], value=BinOp(left=Name(id='assoc_table', ctx=Load()), op=Div(), right=Name(id='n_samples', ctx=Load()))), Return(value=Name(id='centroid', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_path', args=arguments(posonlyargs=[], args=[arg(arg='matrix', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="BuȿͯÚiēl͗Õdǅ a ̟w'a9ƽQ÷˪rping ̕ɢp͘atǐγȞ̂ǏBýh wiĵȴ̀t͋h ~͞gi0CʷĢͣɓΖʴǥ@vLeύ3n matrix ͩofǟ̢ɧ dtɥw-dɉisǪtƶance.Ŧ\x7f")), Assign(targets=[Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], value=Tuple(elts=[BinOp(left=Subscript(value=Attribute(value=Name(id='matrix', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Subscript(value=Attribute(value=Name(id='matrix', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1))], ctx=Load())), Assign(targets=[Name(id='path', ctx=Store())], value=List(elts=[Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], ctx=Load())), While(test=BoolOp(op=And(), values=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())]), body=[Assign(targets=[Name(id='candidates', ctx=Store())], value=List(elts=[Tuple(elts=[BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), Name(id='j', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='i', ctx=Load()), BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Constant(value=1))], ctx=Load()), Tuple(elts=[BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Constant(value=1))], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='costs', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='matrix', ctx=Load()), slice=Name(id='c_', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='c_', ctx=Store()), iter=Name(id='candidates', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmin', ctx=Load()), args=[Name(id='costs', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='candidates', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), While(test=Name(id='i', ctx=Load()), body=[Assign(targets=[Name(id='i', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1))), Expr(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), While(test=Name(id='j', ctx=Load()), body=[Assign(targets=[Name(id='j', ctx=Store())], value=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Constant(value=1))), Expr(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load()), Attribute(value=Name(id='numba', ctx=Load()), attr='njit', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_get_all_seriesW', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Gő̲̔Õϐ˼etǼƭ sЀerieưs ϻfrÒom the øTSDa˔ta\x95͢Ţsetž̤˴Ǜ.')), Assign(targets=[Name(id='series_list', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='series', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]), attr='values', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='series_list', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='series_list', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load())), FunctionDef(name='_get_average', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='n_iters', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10)]), body=[Expr(value=Constant(value='GetʽǮ\u03a2 seriʸes tʧhatŊƜζςͦϑ mǳci˦nÌǚͷǆi$miρzːƦ̲ɚ̭ͫešȀs sqǦu̯Ⱥaϯr˃Ǻϋe͡ʅd˸͚ ĭdiȖst̩̂£aǈȟnūø̈́c;ϔǦe ¢°to giv˽en ĻoůŞĭne;s aă×͉cˣ7ȊcoŌrdϯing to ϢthHe ơdtw dǣȚ\x81\x8ciř͔sǓϑtıƨanËƝcĴe.\n\nĨƞPya¯ɨrưamet̗äeϠrsͳʱĢΨ\nE--̲³-ȩ-˱---q-+--Ȁ\nts:EϬϥȜÊ\nÐƜ öǬ ͺ  T&SXDaĲŲt{ˬaǿưˁðs̗̥et#̅ ŷȟw̦ith serieǨs to ϘϬTbϼe avȢeraͧŘŭ\x86ged\nƇ6n_iʨtńe̽)̭rs͒:\n ůϸˊ  Ď nϠumber ǁoΫ˟ȈɎǏ͌γfϚ\\\x8eA ΦD̼BFȬ\x7fƦļÍA Şnit˾er˔ďΛùǣa\x83Ά_ti÷ĘonsA ątoę˃ ˳aÿGŒΗ\x80̓dj5usƹλtϊ ceα˼ƒntʇroäƵid÷ΰτ wiρ8̈ƞtƱhˋ se[riesŵ\n\u0383\nƆRď×etpurns\nͶ-ǘɄͲ--˞-ϫʄgς-Ū[ǋ--\n͂ɇp̮\x96Ł̈\x90d¡.Dɢatƿƕ̯aframȓeϾ\x94̔ƈ̊Ϲ:Ĳ\x9a\n\x9eĶ    dț͘atɅƑafrȇǍϳɴame˽ ϘǻÀwitĴhŘ ÑcolƖ\x9a̫uΊāÇmňsͳǢ nƨ"̘̤tſi¯meĥstaěͻmɜpŐ" anΫbϣdǯǁ "Ɣ˫tʵaƼĉȸǣrǖgˮɊet" ŨÇtȠhatÝ̠ conʇtaʋins ϐƹ˽tʗhυe seͳr̴i@es˯')), Assign(targets=[Name(id='series_list', ctx=Store())], value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_get_all_series', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='initial_centroid', ctx=Store())], value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_get_longest_series', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='centroid', ctx=Store())], value=Attribute(value=Name(id='initial_centroid', ctx=Load()), attr='values', ctx=Load())), For(target=Name(id='_F', ctx=Store()), iter=Call(func=Name(id='rangegY', ctx=Load()), args=[Name(id='n_iters', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='new_centroid', ctx=Store())], value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_dba_iteration', ctx=Load()), args=[], keywords=[keyword(arg='initial_centroid', value=Name(id='centroid', ctx=Load())), keyword(arg='series_list', value=Name(id='series_list', ctx=Load()))])), Assign(targets=[Name(id='centroid', ctx=Store())], value=Name(id='new_centroid', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='centroid', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target')], values=[Attribute(value=Attribute(value=Name(id='initial_centroid', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Name(id='centroid', ctx=Load())])], keywords=[])), Return(value=Name(id='centroid', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_build_matrix', args=arguments(posonlyargs=[], args=[arg(arg='x1', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='x2', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='points_distance', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='floa', ctx=Load()), Name(id='floa', ctx=Load())], ctx=Load()), Name(id='floa', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x1_size', ctx=Store()), Name(id='x2_size', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x1', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x2', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='matrix', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='empty', ctx=Load()), args=[], keywords=[keyword(arg='shape', value=Tuple(elts=[Name(id='x1_size', ctx=Load()), Name(id='x2_size', ctx=Load())], ctx=Load()))])), Assign(targets=[Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Call(func=Name(id='points_distance', ctx=Load()), args=[Subscript(value=Name(id='x1', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='x2', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='rangegY', ctx=Load()), args=[Constant(value=1), Name(id='x1_size', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Store())], value=BinOp(left=Call(func=Name(id='points_distance', ctx=Load()), args=[Subscript(value=Name(id='x1', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x2', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load())))], orelse=[]), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='rangegY', ctx=Load()), args=[Constant(value=1), Name(id='x2_size', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Store())], value=BinOp(left=Call(func=Name(id='points_distance', ctx=Load()), args=[Subscript(value=Name(id='x1', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='x2', ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='rangegY', ctx=Load()), args=[Constant(value=1), Name(id='x1_size', ctx=Load())], keywords=[]), body=[For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='rangegY', ctx=Load()), args=[Constant(value=1), Name(id='x2_size', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Store())], value=BinOp(left=Call(func=Name(id='points_distance', ctx=Load()), args=[Subscript(value=Name(id='x1', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x2', ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load()), Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])))], orelse=[])], orelse=[]), Return(value=Name(id='matrix', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load()), Attribute(value=Name(id='numba', ctx=Load()), attr='njit', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='points_distance', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='floa', ctx=Load()), Name(id='floa', ctx=Load())], ctx=Load()), Name(id='floa', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='trim_series', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='simple_dist', ctx=Load()), Constant(value=False)]), body=[Expr(value=Constant(value="IǫΛnf͏ĪiĶ\u038bt DTWʋòDi̢staɰϧnv̠ƣcʤe.\nΞʀ\nPar\u0383ύameterɉs\n0\u0379έǛ--ǝ--À̛Ϋ-˽σ\x9dι-ūɒ-ˆ--\u0378Ë-\npo\x92inɔ=͊ts_ΐ˔dǑiŏΩsʛtance͠[ĉȚī:ć\n  ȷ \x9f ňè\u0382Ʋf˕pŊuǊnctˤĩ÷ǐ͛Ƒġiɰˠon ɻǱt̋oõ bϴɅe u\x99©ºŽsɃǣ̙edǖΣ ¶Ŧǌīfor c̒oȫmpΪuƏġtatŇäiʱşũoξǎnŏĎĖ of di>ǛŹsƄtȨance \x90ǭbetwƴeȍ˅en t͓wơ·ȌoɗŎ s˼̦eriȥŗes'ø poiȘnśƣɤƨVtǟsΖ!\ntrxim_Ƞseʯries:\nƿ͛Ěλ¾    TϹ¢ru\x8bȍŒe iȏ/fˋ͚ Ιʚit Ρϡiɰs δɌn˰ecesΞ˔sýϪaȰr\x9ay ɲato Ót̓rimƌ̂ǆò\x81ÁŹ ͜seɺries, Ũdď©e˝˯fŝauωʟlt̸ǋƏ Fals̯e.Ɏ̴\x99Ĭw\n÷\nǏNotʗe͝˥sˮˈ\n-----\n̦ǆS\x85peǔ7ϹcifŃƂyǌˇȟiŷng͏ mΑaņǹȭŵɬnu\x83al `j`ģŤϯpoɈ̳Ͷ͛ʡiĵǾnÄÎtđsĵaǞƐÄ_ƸʆdÁisȬʢϭtςaü͓nƸcδeŻξ``ύ mA̢i͜ΨgĂht˫ Mǽƪƫ͵ŝsɹl̓9ow ˛τdoȏwɣn tΜOh˙e c%lusteȣŘring ̲alƈʵ͋gorÆiŎthmϧ.")), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='trim_series', value=Name(id='trim_series', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='points_distance', ctx=Store())], value=Name(id='points_distance', ctx=Load()))], decorator_list=[]), FunctionDef(name='_compute_distance', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='x1', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='x2', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ComĀputΑeĻ͓ disȀtaϳnce īļbe\x96ŷtwėen̰ ˍx1 and x2.')), Assign(targets=[Name(id='matrix', ctx=Store())], value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_build_matrix', ctx=Load()), args=[], keywords=[keyword(arg='x1', value=Name(id='x1', ctx=Load())), keyword(arg='x2', value=Name(id='x2', ctx=Load())), keyword(arg='points_distance', value=Attribute(value=Name(id='se', ctx=Load()), attr='points_distance', ctx=Load()))])), Return(value=Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[], returns=Name(id='floa', ctx=Load())), FunctionDef(name='_', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='GJet ϺthÑe ¬âlˢongeΕst ŉņϊɔseΊrīiʖes fϾ˚rȘom the list.')), AnnAssign(target=Name(id='series_list', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='series', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='series_list', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='longest_series', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='series_list', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='len', ctx=Load()))])), Return(value=Name(id='longest_series', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='DTWDistance'), Constant(value='simple_dist')], ctx=Load()))], type_ignores=[])