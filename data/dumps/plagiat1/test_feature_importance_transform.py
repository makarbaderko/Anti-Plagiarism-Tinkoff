Module(body=[Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='catboost', names=[alias(name='CatBoostRegressor')], level=0), ImportFrom(module='numpy.random', names=[alias(name='RandomState')], level=0), ImportFrom(module='sklearn.ensemble', names=[alias(name='ExtraTreesRegressor')], level=0), ImportFrom(module='sklearn.ensemble', names=[alias(name='GradientBoostingRegressor')], level=0), ImportFrom(module='sklearn.ensemble', names=[alias(name='RandomForestRegressor')], level=0), ImportFrom(module='sklearn.metrics', names=[alias(name='r2_score')], level=0), ImportFrom(module='sklearn.tree', names=[alias(name='DecisionTreeRegressor')], level=0), ImportFrom(module='sklearn.tree', names=[alias(name='ExtraTreeRegressor')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='ModelRelevanceTable')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='StatisticsRelevanceTable')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='generate_ar_df')], level=0), ImportFrom(module='etna.models', names=[alias(name='LinearPerSegmentModel')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='SegmentEncoderTransform')], level=0), ImportFrom(module='etna.transforms.feature_selection', names=[alias(name='TreeFeatureSelectionTransform')], level=0), ImportFrom(module='etna.transforms.feature_selection.feature_importance', names=[alias(name='MRMRFeatureSelectionTransform')], level=0), FunctionDef(name='ts_with_regressors', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num_segmentsX', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=300)), keyword(arg='ar_coef', value=List(elts=[Constant(value=1)], ctx=Load())), keyword(arg='sigma', value=Constant(value=1)), keyword(arg='n_segments', value=Name(id='num_segmentsX', ctx=Load())), keyword(arg='random_seed', value=Constant(value=0)), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='example_segment', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), ops=[Eq()], comparators=[Name(id='example_segment', ctx=Load())]), ctx=Load()), slice=Constant(value='timestamp'), ctx=Load())), Assign(targets=[Name(id='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Name(id='timestamp', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='num_useless', ctx=Store())], value=Constant(value=12)), Assign(targets=[Name(id='df_regressors_useless', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=300)), keyword(arg='ar_coef', value=List(elts=[Constant(value=1)], ctx=Load())), keyword(arg='sigma', value=Constant(value=1)), keyword(arg='n_segments', value=Name(id='num_useless', ctx=Load())), keyword(arg='random_seed', value=Constant(value=1)), keyword(arg='freq', value=Constant(value='D'))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='df_regressors_useless', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='regressor', ctx=Store())], value=Attribute(value=Subscript(value=Subscript(value=Name(id='df_regressors_useless', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='df_regressors_useless', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), ops=[Eq()], comparators=[Name(id='segment', ctx=Load())]), ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Subscript(value=Name(id='df_exog', ctx=Load()), slice=JoinedStr(values=[Constant(value='regressor_useless_'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1)]), ctx=Store())], value=Name(id='regressor', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='df_regressors_useful', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sampler', ctx=Store())], value=Attribute(value=Call(func=Name(id='RandomState', ctx=Load()), args=[], keywords=[keyword(arg='seed', value=Constant(value=2))]), attr='normal', ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='df_regressors_useful', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='regressor', ctx=Store())], value=Attribute(value=Subscript(value=Subscript(value=Name(id='df_regressors_useful', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='df_regressors_useful', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), ops=[Eq()], comparators=[Name(id='segment', ctx=Load())]), ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='noise', ctx=Store())], value=Call(func=Name(id='sampler', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Constant(value=0.05)), keyword(arg='size', value=Attribute(value=Name(id='regressor', ctx=Load()), attr='shape', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='df_exog', ctx=Load()), slice=JoinedStr(values=[Constant(value='regressor_useful_'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1)]), ctx=Store())], value=BinOp(left=Name(id='regressor', ctx=Load()), op=Add(), right=Name(id='noise', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='classic_exog_list', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='tmp', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_exog', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Subscript(value=Name(id='tmp', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Name(id='segment', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='classic_exog_list', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='tmp', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='df_exog_all_segments', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Name(id='classic_exog_list', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Constant(value=200), ctx=Load())]), ctx=Load())), Return(value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), keyword(arg='df_exog', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_exog_all_segments', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Constant(value='all'))]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_work_with_non_regressors', args=arguments(posonlyargs=[], args=[arg(arg='ts_wi'), arg(arg='mo_del')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ť    nɺɘƆʵ ϼ  ʞǃ  ǡ  ϋγ  ')), Assign(targets=[Name(id='selector', ctx=Store())], value=Call(func=Name(id='TreeFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='mo_del', ctx=Load())), keyword(arg='top_k', value=Constant(value=3)), keyword(arg='features_to_use', value=Constant(value='all'))])), Expr(value=Call(func=Attribute(value=Name(id='ts_wi', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='selector', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='DecisionTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='RandomForestRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreesRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='GradientBoostingRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='CatBoostRegressor', ctx=Load()), args=[], keywords=[keyword(arg='iterations', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42)), keyword(arg='silent', value=Constant(value=True))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_selected_top_k_regressors', args=arguments(posonlyargs=[], args=[arg(arg='mo_del'), arg(arg='top_k'), arg(arg='ts_with_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_with_regressors', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='le_encoder', ctx=Store())], value=Call(func=Name(id='SegmentEncoderTransform', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df_encoded', ctx=Store())], value=Call(func=Attribute(value=Name(id='le_encoder', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='selector', ctx=Store())], value=Call(func=Name(id='TreeFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='mo_del', ctx=Load())), keyword(arg='top_k', value=Name(id='top_k', ctx=Load()))])), Assign(targets=[Name(id='df_selected', ctx=Store())], value=Call(func=Attribute(value=Name(id='selector', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_encoded', ctx=Load())], keywords=[])), Assign(targets=[Name(id='all_regressors', ctx=Store())], value=Attribute(value=Name(id='ts_with_regressors', ctx=Load()), attr='regressors', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='all_regressors', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='segment_code')], keywords=[])), Assign(targets=[Name(id='selected_regressors', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='df_selected', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), attr='difference', ctx=Load()), args=[Set(elts=[Constant(value='target')])], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='selected_regressors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='all_regressors', ctx=Load())], keywords=[]), Name(id='top_k', ctx=Load())], keywords=[])]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='DecisionTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='RandomForestRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreesRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='GradientBoostingRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='CatBoostRegressor', ctx=Load()), args=[], keywords=[keyword(arg='iterations', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42)), keyword(arg='silent', value=Constant(value=True)), keyword(arg='cat_features', value=List(elts=[Constant(value='segment_code')], ctx=Load()))])], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='top_k'), List(elts=[Constant(value=0), Constant(value=1), Constant(value=5), Constant(value=15), Constant(value=50)], ctx=Load())], keywords=[])]), FunctionDef(name='test_retain_values', args=arguments(posonlyargs=[], args=[arg(arg='mo_del'), arg(arg='top_k'), arg(arg='ts_with_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Ch³eŦck thast ÿt̗ïϳǲÊranΫsϡˌform doesn't· ͬcϴhöaƗʺ\x81nge vaȞϥ(l̀uɴSes Ϫ¸ŊʒƃɐýƔof col̷ǫumnsΆȋ.")), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_with_regressors', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='le_encoder', ctx=Store())], value=Call(func=Name(id='SegmentEncoderTransform', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df_encoded', ctx=Store())], value=Call(func=Attribute(value=Name(id='le_encoder', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='selector', ctx=Store())], value=Call(func=Name(id='TreeFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='mo_del', ctx=Load())), keyword(arg='top_k', value=Name(id='top_k', ctx=Load()))])), Assign(targets=[Name(id='df_selected', ctx=Store())], value=Call(func=Attribute(value=Name(id='selector', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_encoded', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='ts_with_regressors', ctx=Load()), attr='segments', ctx=Load()), body=[For(target=Name(id='c', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df_selected', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Call(func=Attribute(value=Compare(left=Subscript(value=Attribute(value=Name(id='df_selected', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Name(id='c', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='df_encoded', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Name(id='c', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='DecisionTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='RandomForestRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreesRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='GradientBoostingRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='CatBoostRegressor', ctx=Load()), args=[], keywords=[keyword(arg='iterations', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42)), keyword(arg='silent', value=Constant(value=True)), keyword(arg='cat_features', value=List(elts=[Constant(value='segment_code')], ctx=Load()))])], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='top_k'), List(elts=[Constant(value=0), Constant(value=1), Constant(value=5), Constant(value=15), Constant(value=50)], ctx=Load())], keywords=[])]), FunctionDef(name='test_fails_negative_top_k', args=arguments(posonlyargs=[], args=[arg(arg='mo_del')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="ChϬe-ćck Ǯtα̿hˬaȊ\x9ft˸ ɚt˒rʤanɵsforơm doesn'˶tκɊ͛´1;>Κ ȈaĒllϰow yoɽu½ to\x81Ź sʌet ŀΈtŵ̀ʾoɨ̧p_k tǒ neρgĤative nvǔaΈlueĿ͏s.")), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='positive integer'))]))], body=[Assign(targets=[Name(id='_smdit', ctx=Store())], value=Call(func=Name(id='TreeFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='mo_del', ctx=Load())), keyword(arg='top_k', value=UnaryOp(op=USub(), operand=Constant(value=1)))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='DecisionTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='RandomForestRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreesRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='GradientBoostingRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='CatBoostRegressor', ctx=Load()), args=[], keywords=[keyword(arg='iterations', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42)), keyword(arg='silent', value=Constant(value=True)), keyword(arg='cat_features', value=List(elts=[Constant(value='segment_code')], ctx=Load()))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_warns_no_regressors', args=arguments(posonlyargs=[], args=[arg(arg='mo_del'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='˔Chec̘ǩk t¡hƒat ʕůͣφ§ϺʟtΞr\x96ansfϧġo̪\x93rm ĆalloȌws Ʒyoħu ͫto fʮit ǐon dataseĻtɵ withǙ̂ noɮ ̲ϠŽre͘grȼesÆ˿F\x91sorȆȭ\x90s ͘bħuÄt waɘrn¼ϥϏsɠ ɳ̿aFbouʩtΟ iʘ\x8cʌώ͒˘ét.')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='selector', ctx=Store())], value=Call(func=Name(id='TreeFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='mo_del', ctx=Load())), keyword(arg='top_k', value=Constant(value=3))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='UserWarning', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='not possible to select features'))]))], body=[Assign(targets=[Name(id='df_selected', ctx=Store())], value=Call(func=Attribute(value=Name(id='selector', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Name(id='df', ctx=Load()), ops=[Eq()], comparators=[Name(id='df_selected', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='DecisionTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='RandomForestRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreesRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='GradientBoostingRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='CatBoostRegressor', ctx=Load()), args=[], keywords=[keyword(arg='iterations', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42)), keyword(arg='silent', value=Constant(value=True))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_sanity_selected', args=arguments(posonlyargs=[], args=[arg(arg='mo_del'), arg(arg='ts_with_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_with_regressors', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='le_encoder', ctx=Store())], value=Call(func=Name(id='SegmentEncoderTransform', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df_encoded', ctx=Store())], value=Call(func=Attribute(value=Name(id='le_encoder', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='selector', ctx=Store())], value=Call(func=Name(id='TreeFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='mo_del', ctx=Load())), keyword(arg='top_k', value=Constant(value=8))])), Assign(targets=[Name(id='df_selected', ctx=Store())], value=Call(func=Attribute(value=Name(id='selector', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_encoded', ctx=Load())], keywords=[])), Assign(targets=[Name(id='features_columns', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df_selected', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='selected_regressors', ctx=Store())], value=ListComp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='features_columns', ctx=Load()), ifs=[Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='regressor_')], keywords=[])], is_async=0)])), Assign(targets=[Name(id='useful_regressors', ctx=Store())], value=ListComp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='selected_regressors', ctx=Load()), ifs=[Compare(left=Constant(value='useful'), ops=[In()], comparators=[Name(id='c', ctx=Load())])], is_async=0)])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='useful_regressors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='DecisionTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='RandomForestRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreesRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='GradientBoostingRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='CatBoostRegressor', ctx=Load()), args=[], keywords=[keyword(arg='iterations', value=Constant(value=700)), keyword(arg='random_state', value=Constant(value=42)), keyword(arg='silent', value=Constant(value=True)), keyword(arg='cat_features', value=List(elts=[Constant(value='segment_code')], ctx=Load()))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_sanity_model', args=arguments(posonlyargs=[], args=[arg(arg='mo_del'), arg(arg='ts_with_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='ts_train', ctx=Store()), Name(id='ts_test_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_with_regressors', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='test_size', value=Constant(value=30))])), Assign(targets=[Name(id='le_encoder', ctx=Store())], value=Call(func=Name(id='SegmentEncoderTransform', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='selector', ctx=Store())], value=Call(func=Name(id='TreeFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='mo_del', ctx=Load())), keyword(arg='top_k', value=Constant(value=8))])), Assign(targets=[Name(id='mo_del', ctx=Store())], value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='mo_del', ctx=Load())), keyword(arg='transforms', value=List(elts=[Name(id='le_encoder', ctx=Load()), Name(id='selector', ctx=Load())], ctx=Load())), keyword(arg='horizon', value=Constant(value=30))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts_train', ctx=Load()))])), Assign(targets=[Name(id='ts_forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='ts_forecast', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='test_target', ctx=Store())], value=Subscript(value=Name(id='ts_test_', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='forecasted_target', ctx=Store())], value=Subscript(value=Name(id='ts_forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='r2', ctx=Store())], value=Call(func=Name(id='r2_score', ctx=Load()), args=[Name(id='forecasted_target', ctx=Load()), Name(id='test_target', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='r2', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.99)]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='DecisionTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='RandomForestRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreesRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='GradientBoostingRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='CatBoostRegressor', ctx=Load()), args=[], keywords=[keyword(arg='iterations', value=Constant(value=500)), keyword(arg='silent', value=Constant(value=True)), keyword(arg='random_state', value=Constant(value=42)), keyword(arg='cat_features', value=List(elts=[Constant(value='segment_code')], ctx=Load()))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_transform_with_nans', args=arguments(posonlyargs=[], args=[arg(arg='mo_del'), arg(arg='ts_diff_endings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='selector', ctx=Store())], value=Call(func=Name(id='TreeFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='mo_del', ctx=Load())), keyword(arg='top_k', value=Constant(value=10))])), Expr(value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='selector', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='DecisionTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreeRegressor', ctx=Load()), args=[], keywords=[keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='RandomForestRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='ExtraTreesRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='GradientBoostingRegressor', ctx=Load()), args=[], keywords=[keyword(arg='n_estimators', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42))]), Call(func=Name(id='CatBoostRegressor', ctx=Load()), args=[], keywords=[keyword(arg='iterations', value=Constant(value=10)), keyword(arg='random_state', value=Constant(value=42)), keyword(arg='silent', value=Constant(value=True)), keyword(arg='cat_features', value=List(elts=[Constant(value='regressor_exog_weekend')], ctx=Load()))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_mrmr_right_len', args=arguments(posonlyargs=[], args=[arg(arg='relevance_table'), arg(arg='top_k'), arg(arg='ts_with_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Chžeck ̓ɢtƳhaʏͩǧt tran8ͫɓǀsɢfor˛m seleϑcts \u038be˝xactlƬy̆ ɏto˷¡\x97p_k reg)resΧsorsŧȓ.')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_with_regressors', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='mrmr', ctx=Store())], value=Call(func=Name(id='MRMRFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='relevance_table', value=Name(id='relevance_table', ctx=Load())), keyword(arg='top_k', value=Name(id='top_k', ctx=Load()))])), Assign(targets=[Name(id='df_selected', ctx=Store())], value=Call(func=Attribute(value=Name(id='mrmr', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='all_regressors', ctx=Store())], value=Attribute(value=Name(id='ts_with_regressors', ctx=Load()), attr='regressors', ctx=Load())), Assign(targets=[Name(id='selected_regressors', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='c', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='df_selected', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='regressor')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='selected_regressors', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='selected_regressors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='all_regressors', ctx=Load())], keywords=[]), Name(id='top_k', ctx=Load())], keywords=[])]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='relevance_table'), List(elts=[Call(func=Name(id='StatisticsRelevanceTable', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='top_k'), List(elts=[Constant(value=0), Constant(value=1), Constant(value=5), Constant(value=15), Constant(value=50)], ctx=Load())], keywords=[])]), FunctionDef(name='test_mrmr_right_regressors', args=arguments(posonlyargs=[], args=[arg(arg='relevance_table'), arg(arg='ts_with_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that transform selects Φright top_k regressors.')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_with_regressors', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='mrmr', ctx=Store())], value=Call(func=Name(id='MRMRFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='relevance_table', value=Name(id='relevance_table', ctx=Load())), keyword(arg='top_k', value=Constant(value=3)), keyword(arg='model', value=Call(func=Name(id='RandomForestRegressor', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='df_selected', ctx=Store())], value=Call(func=Attribute(value=Name(id='mrmr', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='selected_regressors', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='c', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='df_selected', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='regressor')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='selected_regressors', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='selected_regressors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Set(elts=[Constant(value='regressor_useful_0'), Constant(value='regressor_useful_1'), Constant(value='regressor_useful_2')])]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='relevance_table'), List(elts=[Call(func=Name(id='ModelRelevanceTable', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])])], type_ignores=[])