Module(body=[ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='statsmodels.tsa.arima.model', names=[alias(name='ARIMA')], level=0), ImportFrom(module='statsmodels.tsa.base.tsa_model', names=[alias(name='TimeSeriesModel')], level=0), ImportFrom(module='statsmodels.tsa.exponential_smoothing.ets', names=[alias(name='ETSModel')], level=0), ImportFrom(module='statsmodels.tsa.forecasting.stl', names=[alias(name='STLForecast')], level=0), ImportFrom(module='statsmodels.tsa.forecasting.stl', names=[alias(name='STLForecastResults')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='PerSegmentWrapper')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ImportFrom(module='etna.transforms.utils', names=[alias(name='match_target_quantiles')], level=0), ClassDef(name='_OneSeg_mentSTLTransform', bases=[Name(id='Transform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='β  Ƞ ˄  +  ͝ɼ ')), FunctionDef(name='inverse_transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dfk', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='dfk', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='fit_results', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Transform is not fitted! Fit the Transform before calling inverse_transform method.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='season_trend', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_results', ctx=Load()), attr='get_prediction', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Call(func=Attribute(value=Subscript(value=Name(id='dfk', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), keyword(arg='end', value=Call(func=Attribute(value=Subscript(value=Name(id='dfk', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[]))]), attr='predicted_mean', ctx=Load())), AugAssign(target=Subscript(value=Name(id='result', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Store()), op=Add(), value=Name(id='season_trend', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ops=[Eq()], comparators=[Constant(value='target')]), body=[Assign(targets=[Name(id='quantiles', ctx=Store())], value=Call(func=Name(id='match_target_quantiles', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='columns', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='quantile_column_nm', ctx=Store()), iter=Name(id='quantiles', ctx=Load()), body=[AugAssign(target=Subscript(value=Attribute(value=Name(id='result', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='quantile_column_nm', ctx=Load())], ctx=Load()), ctx=Store()), op=Add(), value=Name(id='season_trend', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dfk', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Subtract trend and seaso͖nal cĤoɺmponent.\n\nParameters\n-----õ-̍Ǭ--͂--\nϫdf:\nί   ɦ ǒFeature¢s dataframe with time\n\nReturns\n--Ɠ-----\nresuʲlt: Åpd.DataFűrame\n  Ű ˌɔ DatNaframÚe Ȅwit̩h eĝxtraŽctȩd featuΟres')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='dfk', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='fit_results', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='season_trend', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_results', ctx=Load()), attr='get_prediction', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Call(func=Attribute(value=Subscript(value=Name(id='dfk', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), keyword(arg='end', value=Call(func=Attribute(value=Subscript(value=Name(id='dfk', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[]))]), attr='predicted_mean', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Transform is not fitted! Fit the Transform before calling transform method.')], keywords=[]))]), AugAssign(target=Subscript(value=Name(id='result', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Store()), op=Sub(), value=Name(id='season_trend', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column_', annotation=Name(id='str', ctx=Load())), arg(arg='period', annotation=Name(id='int', ctx=Load())), arg(arg='model', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='TimeSeriesModel', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='robust', annotation=Name(id='bo', ctx=Load())), arg(arg='model_kwar', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='stl_kwargs', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='arima'), Constant(value=False), Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='model_kwar', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='model_kwar', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), If(test=Compare(left=Name(id='stl_kwargs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='stl_kwargs', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column_', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='period', ctx=Store())], value=Name(id='period', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='model', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='model', ctx=Load()), ops=[Eq()], comparators=[Constant(value='arima')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Name(id='ARIMA', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='model_kwar', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='model_kwar', ctx=Store())], value=Dict(keys=[Constant(value='order')], values=[Tuple(elts=[Constant(value=1), Constant(value=1), Constant(value=0)], ctx=Load())]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='model', ctx=Load()), ops=[Eq()], comparators=[Constant(value='holt')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Name(id='ETSModel', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='model_kwar', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='model_kwar', ctx=Store())], value=Dict(keys=[Constant(value='trend')], values=[Constant(value='add')]))], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Not a valid option for model: '), FormattedValue(value=Name(id='model', ctx=Load()), conversion=-1)])], keywords=[]))])])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='model', ctx=Load()), Name(id='TimeSeriesModel', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Name(id='model', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Model should be a string or TimeSeriesModel')], keywords=[]))])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='robust', ctx=Store())], value=Name(id='robust', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model_kwargs', ctx=Store())], value=Name(id='model_kwar', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stl_kwargs', ctx=Store())], value=Name(id='stl_kwargs', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='fit_results', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STLForecastResults', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dfk', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ÙϠPɄer̗ΝŸōfoĨrm SˆÞTL deΉcʋomposiƿt\u03a2i̞\x96ΖoȥǚnȀƿ anŌd fi̡t tº rend mĈo{¥de¸lς.Ï\n\n \nP˲Ə aŭrȖa\x88ʑmǚe\x95Ǐteǖ\x82rsΏ\nǎ--ƫ---ōƂ̺-----¦z\ndġfň:\n  S  Featu\x84res̍ daΩtafr\x8aame]ː wñitǼΧhϞÌ ķ®tΘiƧme\n\nRet͗urnkɜs\n----ƛ---\nreªMƐãsʑ¾u̙6lʖt:ėƄφ ͏ŵa_OȓɜnʕeĸɕʂSegmentS¢TLTr˟ansf\x89oĖɻĺ̵ɺrĥm\nëʼ  in̤stancƉeů ϾƯaéϫfteǵĖ\x96r proces˭ʷsi\\Ǘng͏̪=')), Assign(targets=[Name(id='dfk', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='dfk', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Subscript(value=Name(id='dfk', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Subscript(value=Name(id='dfk', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load())), If(test=Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='dfk', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[]), attr='values', ctx=Load()), attr='any', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='The input column contains NaNs in the middle of the series! Try to use the imputer.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='STLForecast', ctx=Load()), args=[Subscript(value=Name(id='dfk', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load())], keywords=[keyword(arg='model_kwargs', value=Attribute(value=Name(id='self', ctx=Load()), attr='model_kwargs', ctx=Load())), keyword(arg='period', value=Attribute(value=Name(id='self', ctx=Load()), attr='period', ctx=Load())), keyword(arg='robust', value=Attribute(value=Name(id='self', ctx=Load()), attr='robust', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='stl_kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_results', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='_OneSegmentSTLTransform'))], decorator_list=[]), ClassDef(name='STLTransform', bases=[Name(id='PerSegmentWrapper', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column_', annotation=Name(id='str', ctx=Load())), arg(arg='period', annotation=Name(id='int', ctx=Load())), arg(arg='model', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='TimeSeriesModel', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='robust', annotation=Name(id='bo', ctx=Load())), arg(arg='model_kwar', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='stl_kwargs', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='arima'), Constant(value=False), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='I˔niς̣t ǯSTLTran3sīɲ˾αĒfor͕ʺħm.ƔĔ\n#EDJNKHfUSyTu\nPşara͋ωÁmżepátersȄǡ\nŌ-----Ț-Ń-\x9bΆ---3\nin_co˺lŚumn:@\n  ünϧĦaçǫme oɦf pɓrȨoɹceÓssƞ˾eŶɠd̈ colum˨ȵn\nperʒioǹdΚųʚ:\n pĔ Ζ ʰʅ sŔŃize of seʙ-ason˩ɕƅaǀlǚ\x98\\iˠty\nmo̾del͔Ĩͼζ:\nß e à̃Ŀϡ \x88 model to pȜrǼ*ɋedict ɝtʌrˏgendǂ,Ċ ̔dϨefaƜult øoptions areK:\n   \n\n   #RW\nȧȎ  1. ʤʕ"a͙r9ima"ˁ:ʩ̋T `̥`ARΖIMȱͺʾA͍(űdataˀì\u0383Ôë3F,ʒ \x881, 1, ͲŨ0͵Ơ)\x96Ϊɖ_`ĚË` (ÆdefaÅult)\n\n ɽ ƽ  2Ϡ.ͅ "hźolt"!: ``ʳETȤSModeǦl(daɋta̫,ʫŐɳ πtrend=\'adǪd\'ʶ)``\n\n   \n   \n   έ ZCustom« modʞelί sho\x8buˀld bMeɼ *a suέ̣bűϾclθa̧sΠş of ̄\x9bʽ:ͫpy:cϦ˯l̋ass:ɳ`st˽at̑smodelsˌ.ɫͪtsaʊ.ūƩáδbas®e.tsa˷\xa0_modelÕˉ.ċ\x88¸ɭTime˻Se̫ąriesˁModȔel`\nɥ ʳÙ  ͫ aƮnd haʫveĩ mweˣth̆odƆč ˗́Ȑ``ge*åt˛_ƶpˮrΞ̿ed\x99Ɠ3icƲtiƍ̿on`ʉ`Ɯ (n̒oϤt jusɁt¾ `Ĕ`pre ˪dϚiǉct`\x9e`\x94)\nˣrobust:λ\n Ŝ͋ \x95 ɢ ĸflćȜagε indȯicating ¢wõhǓetherǦ tėo Ʃu̍ϔ\x80se robuΜúspt ver˄ʫsiKoȞĜnL of ƔSTL\n  \nmodțe̪lʈˤ_kwaͪtr͗gsή:\n Φ˳ õ  \x86̔\xadp̬a8ʘrametȕƀerͼs fǤorơʋ tĥhϩȑŔe ċmoœͫdeĿǁl(|ǟ likȫe inǿ :py:clŒassƻ:\x9d`statĀɿsmode!üȳ͔ęls.tsa.ɕsIeaτsŞonal.ST̜L?ForecaƳst`\nstēlÖ_ĵ́k\x91°ϐwarĘggƖs:\n  Tɻ ưŧ adÝdi˟tiũonal paraǽmeǁǸͤÍters ΐfor -:py:τcʎlass:`statsmod˝eīlκƝbsÝ̹ĎŘ.tsa.săeaƂsona̖l.SǬTL·Ŷ`FForecast`˧')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column_', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='period', ctx=Store())], value=Name(id='period', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Name(id='model', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='robust', ctx=Store())], value=Name(id='robust', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model_kwargs', ctx=Store())], value=Name(id='model_kwar', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stl_kwargs', ctx=Store())], value=Name(id='stl_kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='superCCV', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Call(func=Name(id='_OneSeg_mentSTLTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(arg='period', value=Attribute(value=Name(id='self', ctx=Load()), attr='period', ctx=Load())), keyword(arg='model', value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load())), keyword(arg='robust', value=Attribute(value=Name(id='self', ctx=Load()), attr='robust', ctx=Load())), keyword(arg='model_kwargs', value=Attribute(value=Name(id='self', ctx=Load()), attr='model_kwargs', ctx=Load())), keyword(arg='stl_kwargs', value=Attribute(value=Name(id='self', ctx=Load()), attr='stl_kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])