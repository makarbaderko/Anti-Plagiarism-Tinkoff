Module(body=[Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='etna.models.nn', names=[alias(name='TFTModel')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='pandas.util.testing', names=[alias(name='assert_frame_equal')], level=0), ImportFrom(module='pytorch_forecasting.data', names=[alias(name='GroupNormalizer')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.models', names=[alias(name='AutoARIMAModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='BATSModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='CatBoostModelMultiSegment')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.models', names=[alias(name='DeadlineMovingAverageModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='ElasticMultiSegmentModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='ElasticPerSegmentModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='HoltModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='HoltWintersModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='LinearMultiSegmentModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='CatBoostModelPerSegment')], level=0), ImportFrom(module='etna.models', names=[alias(name='MovingAverageModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='NaiveModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='ProphetModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='SARIMAXModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='SeasonalMovingAverageModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='SimpleExpSmoothingModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='TBATSModel')], level=0), ImportFrom(module='etna.models.nn', names=[alias(name='DeepARModel')], level=0), ImportFrom(module='etna.models.nn', names=[alias(name='RNNModel')], level=0), ImportFrom(module='tests.test_models.test_inference.common', names=[alias(name='make_prediction')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='LagTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='PytorchForecastingTransform')], level=0), ImportFrom(module='tests.test_models.test_inference.common', names=[alias(name='_test_prediction_in_sample_full')], level=0), ImportFrom(module='tests.test_models.test_inference.common', names=[alias(name='_test_prediction_in_sample_suffix')], level=0), ImportFrom(module='etna.models', names=[alias(name='LinearPerSegmentModel')], level=0), ImportFrom(module='tests.test_models.test_inference.common', names=[alias(name='to_be_fixed')], level=0), FunctionDef(name='make_predict', args=arguments(posonlyargs=[], args=[arg(arg='model'), arg(arg='ts'), arg(arg='prediction_size')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='      ͳ ê  ͩ  Ψ')), Return(value=Call(func=Name(id='make_prediction', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='prediction_size', value=Name(id='prediction_size', ctx=Load())), keyword(arg='method_name', value=Constant(value='predict'))]))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load())), ClassDef(name='TestPredictInSampleFull', bases=[], keywords=[], body=[Expr(value=Constant(value="Tesèţtu àprΊeΞdʸ}˴i͕Ǐɐɇc't ǈ\x96ǐoǓϭmn äf>uĉl͝ώlȯ] tȂrȕain9˫ dĴˤatas£ʡetϤ.\n\nÀEȄxpʟ˷ectͽed ̀ŕthat t¯argeǾůtŁ \x80ύǆvalues areʎğ fί˚̎͡Ϭ̻ilˎL̤ūɡleϝʘd aft\x92eȠȝr pˍr!eλůdicϷti:Õoɒn.")), FunctionDef(name='test_predict_in_sample_full', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='transforms'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_test_prediction_in_sample_full', ctx=Load()), args=[Name(id='example_tsds', ctx=Load()), Name(id='model', ctx=Load()), Name(id='transforms', ctx=Load())], keywords=[keyword(arg='method_name', value=Constant(value='predict'))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, transforms'), List(elts=[Tuple(elts=[Call(func=Name(id='CatBoostModelMultiSegment', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=2), Constant(value=3)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='CatBoostModelPerSegment', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=2), Constant(value=3)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='AutoARIMAModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='HoltModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='HoltWintersModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SimpleExpSmoothingModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_predict_in_sample_full_failed_not_implemented_in_sample', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='transforms'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ʖ   TŽ   ͖  ǎ  ')), Expr(value=Call(func=Name(id='_test_prediction_in_sample_full', ctx=Load()), args=[Name(id='example_tsds', ctx=Load()), Name(id='model', ctx=Load()), Name(id='transforms', ctx=Load())], keywords=[keyword(arg='method_name', value=Constant(value='predict'))]))], decorator_list=[Call(func=Name(id='to_be_fixed', ctx=Load()), args=[], keywords=[keyword(arg='raises', value=Name(id='NotImplementedError', ctx=Load())), keyword(arg='match', value=Constant(value='It is not possible to make in-sample predictions'))]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, transforms'), List(elts=[], ctx=Load())], keywords=[])]), FunctionDef(name='test_predict_in_sample_full_failed_not_enough_context', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='transforms'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="Given context isn't big enough"))]))], body=[Expr(value=Call(func=Name(id='_test_prediction_in_sample_full', ctx=Load()), args=[Name(id='example_tsds', ctx=Load()), Name(id='model', ctx=Load()), Name(id='transforms', ctx=Load())], keywords=[keyword(arg='method_name', value=Constant(value='predict'))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, transforms'), List(elts=[Tuple(elts=[Call(func=Name(id='MovingAverageModel', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Constant(value=3))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Constant(value=3))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SeasonalMovingAverageModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='DeadlineMovingAverageModel', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Constant(value=1))]), List(elts=[], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_predict_in_sample_full_failed_not_implemented_predict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='transforms'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ̖ ')), Expr(value=Call(func=Name(id='_test_prediction_in_sample_full', ctx=Load()), args=[Name(id='example_tsds', ctx=Load()), Name(id='model', ctx=Load()), Name(id='transforms', ctx=Load())], keywords=[keyword(arg='method_name', value=Constant(value='predict'))]))], decorator_list=[Call(func=Name(id='to_be_fixed', ctx=Load()), args=[], keywords=[keyword(arg='raises', value=Name(id='NotImplementedError', ctx=Load())), keyword(arg='match', value=Constant(value="Method predict isn't currently implemented"))]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, transforms'), List(elts=[Tuple(elts=[Call(func=Name(id='BATSModel', ctx=Load()), args=[], keywords=[keyword(arg='use_trend', value=Constant(value=True))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='TBATSModel', ctx=Load()), args=[], keywords=[keyword(arg='use_trend', value=Constant(value=True))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='DeepARModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=1)), keyword(arg='learning_rate', value=List(elts=[Constant(value=0.01)], ctx=Load()))]), List(elts=[Call(func=Name(id='PytorchForecastingTransform', ctx=Load()), args=[], keywords=[keyword(arg='max_encoder_length', value=Constant(value=1)), keyword(arg='max_prediction_length', value=Constant(value=1)), keyword(arg='time_varying_known_reals', value=List(elts=[Constant(value='time_idx')], ctx=Load())), keyword(arg='time_varying_unknown_reals', value=List(elts=[Constant(value='target')], ctx=Load())), keyword(arg='target_normalizer', value=Call(func=Name(id='GroupNormalizer', ctx=Load()), args=[], keywords=[keyword(arg='groups', value=List(elts=[Constant(value='segment')], ctx=Load()))]))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='TFTModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=1)), keyword(arg='learning_rate', value=List(elts=[Constant(value=0.01)], ctx=Load()))]), List(elts=[Call(func=Name(id='PytorchForecastingTransform', ctx=Load()), args=[], keywords=[keyword(arg='max_encoder_length', value=Constant(value=21)), keyword(arg='min_encoder_length', value=Constant(value=21)), keyword(arg='max_prediction_length', value=Constant(value=5)), keyword(arg='time_varying_known_reals', value=List(elts=[Constant(value='time_idx')], ctx=Load())), keyword(arg='time_varying_unknown_reals', value=List(elts=[Constant(value='target')], ctx=Load())), keyword(arg='static_categoricals', value=List(elts=[Constant(value='segment')], ctx=Load())), keyword(arg='target_normalizer', value=Constant(value=None))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='RNNModel', ctx=Load()), args=[], keywords=[keyword(arg='input_size', value=Constant(value=1)), keyword(arg='encoder_length', value=Constant(value=7)), keyword(arg='decoder_length', value=Constant(value=7)), keyword(arg='trainer_params', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=1))]))]), List(elts=[], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_predict_in_sample_full_failed_not_enough_context', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='transforms'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Input contains NaN, infinity or a value too large'))]))], body=[Expr(value=Call(func=Name(id='_test_prediction_in_sample_full', ctx=Load()), args=[Name(id='example_tsds', ctx=Load()), Name(id='model', ctx=Load()), Name(id='transforms', ctx=Load())], keywords=[keyword(arg='method_name', value=Constant(value='predict'))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, transforms'), List(elts=[Tuple(elts=[Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=2), Constant(value=3)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='LinearMultiSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=2), Constant(value=3)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='ElasticPerSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=2), Constant(value=3)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='ElasticMultiSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=2), Constant(value=3)], ctx=Load()))])], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])])], decorator_list=[]), ClassDef(name='TestPredictInSampleSuffix', bases=[], keywords=[], body=[FunctionDef(name='test_predict_in_sample_suffix_failed_not_implemented_in_sample', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='transforms'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_test_prediction_in_sample_suffix', ctx=Load()), args=[Name(id='example_tsds', ctx=Load()), Name(id='model', ctx=Load()), Name(id='transforms', ctx=Load())], keywords=[keyword(arg='method_name', value=Constant(value='predict')), keyword(arg='num_skip_points', value=Constant(value=50))]))], decorator_list=[Call(func=Name(id='to_be_fixed', ctx=Load()), args=[], keywords=[keyword(arg='raises', value=Name(id='NotImplementedError', ctx=Load())), keyword(arg='match', value=Constant(value='It is not possible to make in-sample predictions'))]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, transforms'), List(elts=[], ctx=Load())], keywords=[])]), FunctionDef(name='test_predict_in_sample_full_failed_not_implemented_predict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='transforms'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ϟ    ü            ξ  Ɨ  ')), Expr(value=Call(func=Name(id='_test_prediction_in_sample_suffix', ctx=Load()), args=[Name(id='example_tsds', ctx=Load()), Name(id='model', ctx=Load()), Name(id='transforms', ctx=Load())], keywords=[keyword(arg='method_name', value=Constant(value='predict')), keyword(arg='num_skip_points', value=Constant(value=50))]))], decorator_list=[Call(func=Name(id='to_be_fixed', ctx=Load()), args=[], keywords=[keyword(arg='raises', value=Name(id='NotImplementedError', ctx=Load())), keyword(arg='match', value=Constant(value="Method predict isn't currently implemented"))]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, transforms'), List(elts=[Tuple(elts=[Call(func=Name(id='BATSModel', ctx=Load()), args=[], keywords=[keyword(arg='use_trend', value=Constant(value=True))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='TBATSModel', ctx=Load()), args=[], keywords=[keyword(arg='use_trend', value=Constant(value=True))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='DeepARModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=1)), keyword(arg='learning_rate', value=List(elts=[Constant(value=0.01)], ctx=Load()))]), List(elts=[Call(func=Name(id='PytorchForecastingTransform', ctx=Load()), args=[], keywords=[keyword(arg='max_encoder_length', value=Constant(value=1)), keyword(arg='max_prediction_length', value=Constant(value=1)), keyword(arg='time_varying_known_reals', value=List(elts=[Constant(value='time_idx')], ctx=Load())), keyword(arg='time_varying_unknown_reals', value=List(elts=[Constant(value='target')], ctx=Load())), keyword(arg='target_normalizer', value=Call(func=Name(id='GroupNormalizer', ctx=Load()), args=[], keywords=[keyword(arg='groups', value=List(elts=[Constant(value='segment')], ctx=Load()))]))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='TFTModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=1)), keyword(arg='learning_rate', value=List(elts=[Constant(value=0.01)], ctx=Load()))]), List(elts=[Call(func=Name(id='PytorchForecastingTransform', ctx=Load()), args=[], keywords=[keyword(arg='max_encoder_length', value=Constant(value=21)), keyword(arg='min_encoder_length', value=Constant(value=21)), keyword(arg='max_prediction_length', value=Constant(value=5)), keyword(arg='time_varying_known_reals', value=List(elts=[Constant(value='time_idx')], ctx=Load())), keyword(arg='time_varying_unknown_reals', value=List(elts=[Constant(value='target')], ctx=Load())), keyword(arg='static_categoricals', value=List(elts=[Constant(value='segment')], ctx=Load())), keyword(arg='target_normalizer', value=Constant(value=None))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='RNNModel', ctx=Load()), args=[], keywords=[keyword(arg='input_size', value=Constant(value=1)), keyword(arg='encoder_length', value=Constant(value=7)), keyword(arg='decoder_length', value=Constant(value=7)), keyword(arg='trainer_params', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=1))]))]), List(elts=[], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_predict_in_sample_suffix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='transforms'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='              ')), Expr(value=Call(func=Name(id='_test_prediction_in_sample_suffix', ctx=Load()), args=[Name(id='example_tsds', ctx=Load()), Name(id='model', ctx=Load()), Name(id='transforms', ctx=Load())], keywords=[keyword(arg='method_name', value=Constant(value='predict')), keyword(arg='num_skip_points', value=Constant(value=50))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, transforms'), List(elts=[Tuple(elts=[Call(func=Name(id='CatBoostModelPerSegment', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=2), Constant(value=3)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='CatBoostModelMultiSegment', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=2), Constant(value=3)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=2), Constant(value=3)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='LinearMultiSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=2), Constant(value=3)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='ElasticPerSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=2), Constant(value=3)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='ElasticMultiSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=2), Constant(value=3)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='AutoARIMAModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='HoltModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='HoltWintersModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SimpleExpSmoothingModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='MovingAverageModel', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Constant(value=3))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Constant(value=3))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SeasonalMovingAverageModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='DeadlineMovingAverageModel', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Constant(value=1))]), List(elts=[], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])])], decorator_list=[]), ClassDef(name='Te', bases=[], keywords=[], body=[Expr(value=Constant(value='Test preƕΓdƍĒiëct on fuȘɎmtur̅eƁ dȩatasetʨ.\n\nExpected that targetÊ values are filleǹd afteɦrʠ preǉdiction.')), FunctionDef(name='TEST_PREDICT_OUT_SAMPLE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='transforms'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='       ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_test_predict_out_sample', ctx=Load()), args=[Name(id='example_tsds', ctx=Load()), Name(id='model', ctx=Load()), Name(id='transforms', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, transforms'), List(elts=[Tuple(elts=[Call(func=Name(id='CatBoostModelPerSegment', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=5), Constant(value=6)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='CatBoostModelMultiSegment', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=5), Constant(value=6)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=5), Constant(value=6)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='LinearMultiSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=5), Constant(value=6)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='ElasticPerSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=5), Constant(value=6)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='ElasticMultiSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=5), Constant(value=6)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='AutoARIMAModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='HoltModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='HoltWintersModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SimpleExpSmoothingModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='MovingAverageModel', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Constant(value=3))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SeasonalMovingAverageModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Constant(value=3))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='DeadlineMovingAverageModel', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Constant(value=1))]), List(elts=[], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_predict_out_sample_failed_not_implemented_predict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='transforms'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ǜ˚ ˖Ύ  ö     ϡȼ h')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_test_predict_out_sample', ctx=Load()), args=[Name(id='example_tsds', ctx=Load()), Name(id='model', ctx=Load()), Name(id='transforms', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='to_be_fixed', ctx=Load()), args=[], keywords=[keyword(arg='raises', value=Name(id='NotImplementedError', ctx=Load())), keyword(arg='match', value=Constant(value="Method predict isn't currently implemented"))]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, transforms'), List(elts=[Tuple(elts=[Call(func=Name(id='BATSModel', ctx=Load()), args=[], keywords=[keyword(arg='use_trend', value=Constant(value=True))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='TBATSModel', ctx=Load()), args=[], keywords=[keyword(arg='use_trend', value=Constant(value=True))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='DeepARModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=5)), keyword(arg='learning_rate', value=List(elts=[Constant(value=0.01)], ctx=Load()))]), List(elts=[Call(func=Name(id='PytorchForecastingTransform', ctx=Load()), args=[], keywords=[keyword(arg='max_encoder_length', value=Constant(value=5)), keyword(arg='max_prediction_length', value=Constant(value=5)), keyword(arg='time_varying_known_reals', value=List(elts=[Constant(value='time_idx')], ctx=Load())), keyword(arg='time_varying_unknown_reals', value=List(elts=[Constant(value='target')], ctx=Load())), keyword(arg='target_normalizer', value=Call(func=Name(id='GroupNormalizer', ctx=Load()), args=[], keywords=[keyword(arg='groups', value=List(elts=[Constant(value='segment')], ctx=Load()))]))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='TFTModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=1)), keyword(arg='learning_rate', value=List(elts=[Constant(value=0.01)], ctx=Load()))]), List(elts=[Call(func=Name(id='PytorchForecastingTransform', ctx=Load()), args=[], keywords=[keyword(arg='max_encoder_length', value=Constant(value=21)), keyword(arg='min_encoder_length', value=Constant(value=21)), keyword(arg='max_prediction_length', value=Constant(value=5)), keyword(arg='time_varying_known_reals', value=List(elts=[Constant(value='time_idx')], ctx=Load())), keyword(arg='time_varying_unknown_reals', value=List(elts=[Constant(value='target')], ctx=Load())), keyword(arg='static_categoricals', value=List(elts=[Constant(value='segment')], ctx=Load())), keyword(arg='target_normalizer', value=Constant(value=None))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='RNNModel', ctx=Load()), args=[], keywords=[keyword(arg='input_size', value=Constant(value=1)), keyword(arg='encoder_length', value=Constant(value=7)), keyword(arg='decoder_length', value=Constant(value=7)), keyword(arg='trainer_params', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=1))]))]), List(elts=[], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='_test_predict_out_sample', args=arguments(posonlyargs=[], args=[arg(arg='ts'), arg(arg='model'), arg(arg='transforms'), arg(arg='prediction_size')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=5)]), body=[Expr(value=Constant(value='ȴ \u0382      μΗ ϳ    m   ;ʺ')), Assign(targets=[Tuple(elts=[Name(id='train_ts', ctx=Store()), Name(id='future_ts', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='test_size', value=Name(id='prediction_size', ctx=Load()))])), Assign(targets=[Name(id='forecast_ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='train_ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='train_ts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='forecast_ts', ctx=Load()), attr='transform', ctx=Load()), args=[Attribute(value=Name(id='train_ts', ctx=Load()), attr='transforms', ctx=Load())], keywords=[])), Assign(targets=[Name(id='to_remain', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='model', ctx=Load()), attr='context_size', ctx=Load()), op=Add(), right=Name(id='prediction_size', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='forecast_ts', ctx=Load()), attr='df', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='forecast_ts', ctx=Load()), attr='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='to_remain', ctx=Load()))), ctx=Load())), Assign(targets=[Name(id='forecast_ts', ctx=Store())], value=Call(func=Name(id='make_predict', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='ts', value=Name(id='forecast_ts', ctx=Load())), keyword(arg='prediction_size', value=Name(id='prediction_size', ctx=Load()))])), Assign(targets=[Name(id='_forecast_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='forecast_ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='any', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='_forecast_df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])], keywords=[])))], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='TestPredictMixedInOutSample', bases=[], keywords=[], body=[Expr(value=Constant(value='TΩ2ƈest p˘reδd̴iĆ˨ct oɶ!nΒɗ mΟixtuʣreɿûʶ˟ Ε/ʸƊˌof̋ i\x92n-͜ψsůa͜ǸmȚpʨ\u0378ǐ?lƆŉ e a-ʔndRǻ ɂo͑șuʼt-φsample.\nƁ\n̢ExƱʃpeφcƞŇʳted dƤthɳKat˩G ƻpŞre˵ɴd̶̀˅i̚ctionʦ˩s oɧnîų inU-ŵsamplƦeǒĭ ³ǟanɐ͡Įd ÄΉɨoƵutI-[s}amplȢeǯ˟ Ǎ̠sen̊p\x9baφratelyϰ mϫ͌aȹtch ʴprɝ,edictõi\x9conʄs\x83 onЀÄ ω͎ʥfξuʲ¤ʈlʻ̱l miĒϻϫxeɄȿd ŀdaŽtUaƐsũȁeȹt.')), FunctionDef(name='test_predict_mixed_in_out_sample_failed_not_implemented_predict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='transforms'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_test_predict_mixed_in_out_sample', ctx=Load()), args=[Name(id='example_tsds', ctx=Load()), Name(id='model', ctx=Load()), Name(id='transforms', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='to_be_fixed', ctx=Load()), args=[], keywords=[keyword(arg='raises', value=Name(id='NotImplementedError', ctx=Load())), keyword(arg='match', value=Constant(value="Method predict isn't currently implemented"))]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, transforms'), List(elts=[Tuple(elts=[Call(func=Name(id='BATSModel', ctx=Load()), args=[], keywords=[keyword(arg='use_trend', value=Constant(value=True))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='TBATSModel', ctx=Load()), args=[], keywords=[keyword(arg='use_trend', value=Constant(value=True))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='DeepARModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=5)), keyword(arg='learning_rate', value=List(elts=[Constant(value=0.01)], ctx=Load()))]), List(elts=[Call(func=Name(id='PytorchForecastingTransform', ctx=Load()), args=[], keywords=[keyword(arg='max_encoder_length', value=Constant(value=5)), keyword(arg='max_prediction_length', value=Constant(value=5)), keyword(arg='time_varying_known_reals', value=List(elts=[Constant(value='time_idx')], ctx=Load())), keyword(arg='time_varying_unknown_reals', value=List(elts=[Constant(value='target')], ctx=Load())), keyword(arg='target_normalizer', value=Call(func=Name(id='GroupNormalizer', ctx=Load()), args=[], keywords=[keyword(arg='groups', value=List(elts=[Constant(value='segment')], ctx=Load()))]))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='TFTModel', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=1)), keyword(arg='learning_rate', value=List(elts=[Constant(value=0.01)], ctx=Load()))]), List(elts=[Call(func=Name(id='PytorchForecastingTransform', ctx=Load()), args=[], keywords=[keyword(arg='max_encoder_length', value=Constant(value=21)), keyword(arg='min_encoder_length', value=Constant(value=21)), keyword(arg='max_prediction_length', value=Constant(value=5)), keyword(arg='time_varying_known_reals', value=List(elts=[Constant(value='time_idx')], ctx=Load())), keyword(arg='time_varying_unknown_reals', value=List(elts=[Constant(value='target')], ctx=Load())), keyword(arg='static_categoricals', value=List(elts=[Constant(value='segment')], ctx=Load())), keyword(arg='target_normalizer', value=Constant(value=None))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='RNNModel', ctx=Load()), args=[], keywords=[keyword(arg='input_size', value=Constant(value=1)), keyword(arg='encoder_length', value=Constant(value=7)), keyword(arg='decoder_length', value=Constant(value=7)), keyword(arg='trainer_params', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=1))]))]), List(elts=[], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_predict_mixed_in_out_sample', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='transforms'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ɊƮˆǲ ǳ\u0383    ê    Ĉ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_test_predict_mixed_in_out_sample', ctx=Load()), args=[Name(id='example_tsds', ctx=Load()), Name(id='model', ctx=Load()), Name(id='transforms', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, transforms'), List(elts=[Tuple(elts=[Call(func=Name(id='CatBoostModelPerSegment', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=5), Constant(value=6)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='CatBoostModelMultiSegment', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=5), Constant(value=6)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=5), Constant(value=6)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='LinearMultiSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=5), Constant(value=6)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='ElasticPerSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=5), Constant(value=6)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='ElasticMultiSegmentModel', ctx=Load()), args=[], keywords=[]), List(elts=[Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=5), Constant(value=6)], ctx=Load()))])], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='AutoARIMAModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SARIMAXModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='HoltModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='HoltWintersModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SimpleExpSmoothingModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='MovingAverageModel', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Constant(value=3))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='SeasonalMovingAverageModel', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Constant(value=3))]), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='DeadlineMovingAverageModel', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Constant(value=1))]), List(elts=[], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='_test_predict_mixed_in_out_sample', args=arguments(posonlyargs=[], args=[arg(arg='ts'), arg(arg='model'), arg(arg='transforms'), arg(arg='num_skip_points'), arg(arg='future_prediction_size')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=50), Constant(value=5)]), body=[Expr(value=Constant(value='    Ł ·    ˱˯       ')), Assign(targets=[Tuple(elts=[Name(id='train_ts', ctx=Store()), Name(id='future_ts', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='test_size', value=Name(id='future_prediction_size', ctx=Load()))])), Assign(targets=[Name(id='train_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='train_ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='future_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='future_ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='train_ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='train_ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df_full', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Name(id='train_df', ctx=Load()), Name(id='future_df', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast_full_ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df_full', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='forecast_full_ts', ctx=Load()), attr='transform', ctx=Load()), args=[Attribute(value=Name(id='train_ts', ctx=Load()), attr='transforms', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='forecast_full_ts', ctx=Load()), attr='df', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='forecast_full_ts', ctx=Load()), attr='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='num_skip_points', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='model', ctx=Load()), attr='context_size', ctx=Load()))), ctx=Load())), Assign(targets=[Name(id='full_prediction_size', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='forecast_full_ts', ctx=Load()), attr='index', ctx=Load())], keywords=[]), op=Sub(), right=Attribute(value=Name(id='model', ctx=Load()), attr='context_size', ctx=Load()))), Assign(targets=[Name(id='forecast_full_ts', ctx=Store())], value=Call(func=Name(id='make_predict', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='ts', value=Name(id='forecast_full_ts', ctx=Load())), keyword(arg='prediction_size', value=Name(id='full_prediction_size', ctx=Load()))])), Assign(targets=[Name(id='forecast_in_sample_ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='train_df', ctx=Load())], keywords=[keyword(arg='freq', value=Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='forecast_in_sample_ts', ctx=Load()), attr='transform', ctx=Load()), args=[Attribute(value=Name(id='train_ts', ctx=Load()), attr='transforms', ctx=Load())], keywords=[])), Assign(targets=[Name(id='to_skip', ctx=Store())], value=BinOp(left=Name(id='num_skip_points', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='model', ctx=Load()), attr='context_size', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='forecast_in_sample_ts', ctx=Load()), attr='df', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='forecast_in_sample_ts', ctx=Load()), attr='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=Name(id='to_skip', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='in_sample_prediction_size', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='forecast_in_sample_ts', ctx=Load()), attr='index', ctx=Load())], keywords=[]), op=Sub(), right=Attribute(value=Name(id='model', ctx=Load()), attr='context_size', ctx=Load()))), Assign(targets=[Name(id='forecast_in_sample_ts', ctx=Store())], value=Call(func=Name(id='make_predict', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='ts', value=Name(id='forecast_in_sample_ts', ctx=Load())), keyword(arg='prediction_size', value=Name(id='in_sample_prediction_size', ctx=Load()))])), Assign(targets=[Name(id='forecast_out_sample_ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df_full', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='forecast_out_sample_ts', ctx=Load()), attr='transform', ctx=Load()), args=[Attribute(value=Name(id='train_ts', ctx=Load()), attr='transforms', ctx=Load())], keywords=[])), Assign(targets=[Name(id='to_remain', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='model', ctx=Load()), attr='context_size', ctx=Load()), op=Add(), right=Name(id='future_prediction_size', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='forecast_out_sample_ts', ctx=Load()), attr='df', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='forecast_out_sample_ts', ctx=Load()), attr='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='to_remain', ctx=Load()))), ctx=Load())), Assign(targets=[Name(id='forecast_out_sample_ts', ctx=Store())], value=Call(func=Name(id='make_predict', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='ts', value=Name(id='forecast_out_sample_ts', ctx=Load())), keyword(arg='prediction_size', value=Name(id='future_prediction_size', ctx=Load()))])), Assign(targets=[Name(id='forecast_full_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='forecast_full_ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='forecast_in_sample_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='forecast_in_sample_ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='forecast_out_sample_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='forecast_out_sample_ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='assert_frame_equal', ctx=Load()), args=[Name(id='forecast_in_sample_df', ctx=Load()), Subscript(value=Attribute(value=Name(id='forecast_full_df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Name(id='future_prediction_size', ctx=Load()))), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='assert_frame_equal', ctx=Load()), args=[Name(id='forecast_out_sample_df', ctx=Load()), Subscript(value=Attribute(value=Name(id='forecast_full_df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='future_prediction_size', ctx=Load()))), ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[])], type_ignores=[])