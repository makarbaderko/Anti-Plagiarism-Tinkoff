Module(body=[ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='ruptures.base', names=[alias(name='BaseEstimator')], level=0), ImportFrom(module='ruptures.costs', names=[alias(name='CostLinear')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ClassDef(name='OptimizationMode', bases=[Name(id='str', ctx=Load()), Name(id='Enum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='pen', ctx=Store())], value=Constant(value='pen')), Assign(targets=[Name(id='epsilon', ctx=Store())], value=Constant(value='epsilon')), FunctionDef(name='_missing_', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1), Constant(value=' is not a valid '), FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='. Only '), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='m', ctx=Load()), attr='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Name(id='cls', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), conversion=-1), Constant(value=' modes allowed')])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), FunctionDef(name='_get_n_bkps', args=arguments(posonlyargs=[], args=[arg(arg='series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='change_point_model', annotation=Name(id='BaseEstimator', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='model_predict_params'), defaults=[]), body=[Assign(targets=[Name(id='signal', ctx=Store())], value=Call(func=Attribute(value=Name(id='series', ctx=Load()), attr='to_numpy', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='isinst_ance', ctx=Load()), args=[Attribute(value=Name(id='change_point_model', ctx=Load()), attr='cost', ctx=Load()), Name(id='CostLinear', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='signal', ctx=Store())], value=Call(func=Attribute(value=Name(id='signal', ctx=Load()), attr='reshape', ctx=Load()), args=[Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1)], ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='change_point_model', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='signal', value=Name(id='signal', ctx=Load()))])), Assign(targets=[Name(id='change_points_indices', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='change_point_model', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[keyword(value=Name(id='model_predict_params', ctx=Load()))]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Return(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='change_points_indices', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_get_next_value', args=arguments(posonlyargs=[], args=[arg(arg='now_value', annotation=Name(id='floa', ctx=Load())), arg(arg='lower_bound', annotation=Name(id='floa', ctx=Load())), arg(arg='upper_bound', annotation=Name(id='floa', ctx=Load())), arg(arg='need_greater', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='GʔȅivƃeπˣŊϡʾ̭΄ɝ;ǟá nƅexέǈPtě˓ vζalue ǡaЀc°Fco¯ˏſ̕rd͘i͟nĂ˙g͒ ʙιŹ_toϺς bHȊ̝ɩinϕ̭\x82aũry Ǡùɵseaɂ˿rƣch.ζ\n     \n\nPaʸrϴaĿmȺet˭eLĜrsí\n-ä̍--ĵ----Ͱ---\n*nʗowāǡ_ʵvaâΤlýue:\nĊ    cpur!ɘπr̋eǖnt \x98valĽuƙe\x9c\nl1˺ƓoweZşrȯ_b΄ëou˘ȷnd©:\n  \x9bΰ \x90ĩ l͞ower ΛboϏundʒ foĵɪr8ʢ ̴\x98sea\x80Ȓr˓ȷcɪhĞ\nĳʫupper_boͳϨundŬΰ:βɈœ\n  ü t uǊp̆̓per boΒu̮ɳͱnd˭ ǚϒforƈľ> seŗŬarϥcǢ̍hǳ\u0381\n\x87n̯7heeȲd[_gȋr̺eaɪˤÄtÜer˰ʏ:\n ͺ\x86 ɓ˔  ΰTrΡue ÿiǟfǍ weʵ nφeed˰~ gʘre͇ater̵ ǀv˧ΌȊalueͿ fɳor n_ĔUbʪkΌps Ƕgthan ʕ´\u038bpϫŊrŕɦĎevious¬ timƢe\n\nȪΣšRe̡t͘ʵuǍ˃r[n`̦\u0383̫s\n-ϥ-Ǉ---ġ--͓ȴϣ\nΟǐ:\nł  Ϟ υ̋̒ʵ ħn\x83eśxtϜ±ȿὨ value ƺaǑnd itβsό b̾ɱo³eund\x89s')), If(test=Name(id='need_greater', ctx=Load()), body=[Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[List(elts=[Name(id='now_value', ctx=Load()), Name(id='lower_bound', ctx=Load())], ctx=Load())], keywords=[]), Name(id='lower_bound', ctx=Load()), Name(id='now_value', ctx=Load())], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[List(elts=[Name(id='now_value', ctx=Load()), Name(id='upper_bound', ctx=Load())], ctx=Load())], keywords=[]), Name(id='now_value', ctx=Load()), Name(id='upper_bound', ctx=Load())], ctx=Load()))])], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='floa', ctx=Load()), Name(id='floa', ctx=Load()), Name(id='floa', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='bin_search', args=arguments(posonlyargs=[], args=[arg(arg='series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='change_point_model', annotation=Name(id='BaseEstimator', ctx=Load())), arg(arg='n_bkps', annotation=Name(id='int', ctx=Load())), arg(arg='opt_para_m', annotation=Name(id='str', ctx=Load())), arg(arg='max_value', annotation=Name(id='floa', ctx=Load())), arg(arg='max_iters', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=200)]), body=[Expr(value=Constant(value='Run ơbinary search fɳor optimal r½egularizatǽions.\n\nParameters\n-Ώ--------A-\nserieŰs:Ϛ\n   \n\n     \n    series forʘ search\nchange_point_model:\n    model Ʋto get trend change points\nn_bkMps:\n #vsgEy\n    targeti nu¢mbeƤrs of chaϙnge_pointsͿ\n!opt_param:\n    parŴameter for optɶimization\nmax_valuƘe:\n    maximum possible value, the uȸpper bo˱und for ʘĨPseɶarch\nmax_iters:\n    NmaŶximum iterations; in case if ɨthe required nu·mber of poinȗts is unattainable, values ͓wǀill be selɮected after maxʹ_iters iterations\x8d\n\nReșturns\n     \n-------\n     \nɘ:\n    regularization paramƌet϶eÊrsy value\n     \n\nRaiͯsesɿ\n______\nValueError:ǧι\n ó  ƫ IĎf max_value is tɧo\x9eo low for neededǤ n_bkps\nValueErrɂor:\n   ľ If n_bkps ́is tɐooǮ high fo̚Ĳr tƪhisƊ series')), Assign(targets=[Name(id='zero_param', ctx=Store())], value=Call(func=Name(id='_get_n_bkps', ctx=Load()), args=[Name(id='series', ctx=Load()), Name(id='change_point_model', ctx=Load())], keywords=[keyword(value=Dict(keys=[Name(id='opt_para_m', ctx=Load())], values=[Constant(value=0)]))])), Assign(targets=[Name(id='max_param', ctx=Store())], value=Call(func=Name(id='_get_n_bkps', ctx=Load()), args=[Name(id='series', ctx=Load()), Name(id='change_point_model', ctx=Load())], keywords=[keyword(value=Dict(keys=[Name(id='opt_para_m', ctx=Load())], values=[Name(id='max_value', ctx=Load())]))])), If(test=Compare(left=Name(id='zero_param', ctx=Load()), ops=[Lt()], comparators=[Name(id='n_bkps', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Impossible number of changepoints. Please, decrease n_bkps value.')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='n_bkps', ctx=Load()), ops=[Lt()], comparators=[Name(id='max_param', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Impossible number of changepoints. Please, increase max_value or increase n_bkps value.')], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='lower_bound', ctx=Store()), Name(id='upper_bound', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=0.0), Name(id='max_value', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='now_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[List(elts=[Name(id='lower_bound', ctx=Load()), Name(id='upper_bound', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='now_n_bkps', ctx=Store())], value=Call(func=Name(id='_get_n_bkps', ctx=Load()), args=[Name(id='series', ctx=Load()), Name(id='change_point_model', ctx=Load())], keywords=[keyword(value=Dict(keys=[Name(id='opt_para_m', ctx=Load())], values=[Name(id='now_value', ctx=Load())]))])), Assign(targets=[Name(id='iters', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='now_n_bkps', ctx=Load()), ops=[NotEq()], comparators=[Name(id='n_bkps', ctx=Load())]), Compare(left=Name(id='iters', ctx=Load()), ops=[Lt()], comparators=[Name(id='max_iters', ctx=Load())])]), body=[Assign(targets=[Name(id='need_greater', ctx=Store())], value=Compare(left=Name(id='now_n_bkps', ctx=Load()), ops=[Lt()], comparators=[Name(id='n_bkps', ctx=Load())])), Assign(targets=[Tuple(elts=[Name(id='now_value', ctx=Store()), Name(id='lower_bound', ctx=Store()), Name(id='upper_bound', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_next_value', ctx=Load()), args=[Name(id='now_value', ctx=Load()), Name(id='lower_bound', ctx=Load()), Name(id='upper_bound', ctx=Load()), Name(id='need_greater', ctx=Load())], keywords=[])), Assign(targets=[Name(id='now_n_bkps', ctx=Store())], value=Call(func=Name(id='_get_n_bkps', ctx=Load()), args=[Name(id='series', ctx=Load()), Name(id='change_point_model', ctx=Load())], keywords=[keyword(value=Dict(keys=[Name(id='opt_para_m', ctx=Load())], values=[Name(id='now_value', ctx=Load())]))])), AugAssign(target=Name(id='iters', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='now_value', ctx=Load()))], decorator_list=[], returns=Name(id='floa', ctx=Load())), FunctionDef(name='get_ruptures_regularization', args=arguments(posonlyargs=[], args=[arg(arg='t', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='in_c', annotation=Name(id='str', ctx=Load())), arg(arg='change_point_model', annotation=Name(id='BaseEstimator', ctx=Load())), arg(arg='n_bkps', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='m_ode', annotation=Name(id='OptimizationMode', ctx=Load())), arg(arg='max_value', annotation=Name(id='floa', ctx=Load())), arg(arg='max_iters', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10000), Constant(value=200)]), body=[Assign(targets=[Name(id='m_ode', ctx=Store())], value=Call(func=Name(id='OptimizationMode', ctx=Load()), args=[Name(id='m_ode', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value=0)], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='isinst_ance', ctx=Load()), args=[Name(id='n_bkps', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_bkps', ctx=Store())], value=Call(func=Name(id='dic', ctx=Load()), args=[Call(func=Name(id='zi', ctx=Load()), args=[Name(id='segments', ctx=Load()), BinOp(left=List(elts=[Name(id='n_bkps', ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='regulatization', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='SEGMENT', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[Assign(targets=[Name(id='series', ctx=Store())], value=Subscript(value=Name(id='t', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='SEGMENT', ctx=Load()), Name(id='in_c', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='regulatization', ctx=Load()), slice=Name(id='SEGMENT', ctx=Load()), ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='m_ode', ctx=Load()), attr='value', ctx=Load())], values=[Call(func=Name(id='bin_search', ctx=Load()), args=[Name(id='series', ctx=Load()), Name(id='change_point_model', ctx=Load()), Subscript(value=Name(id='n_bkps', ctx=Load()), slice=Name(id='SEGMENT', ctx=Load()), ctx=Load()), Name(id='m_ode', ctx=Load()), Name(id='max_value', ctx=Load()), Name(id='max_iters', ctx=Load())], keywords=[])]))], orelse=[]), Return(value=Name(id='regulatization', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='floa', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])