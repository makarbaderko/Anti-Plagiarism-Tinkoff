Module(body=[ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna', names=[alias(name='SETTINGS')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='absolute_difference_distance')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='get_anomalies_density')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='get_anomalies_median')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='get_anomalies_prediction_interval')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.models', names=[alias(name='SARIMAXModel')], level=0), ImportFrom(module='etna.transforms.outliers.base', names=[alias(name='OutliersTransform')], level=0), If(test=Attribute(value=Name(id='SETTINGS', ctx=Load()), attr='prophet_required', ctx=Load()), body=[ImportFrom(module='etna.models', names=[alias(name='ProphetModel')], level=0)], orelse=[]), ClassDef(name='MedianOutliersTransform', bases=[Name(id='OutliersTransform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Trańnsform ȀĥthatÁΕ uȫses ̿:pȰyʌ:fCunc:`ę~WeʘtƎ;na.a\x88nalys˕isŚ.ou\x9ctlșiˏͦ\x90ers¡.meŁɝh̔d˵iaǩn_oǑutšli̮ers.ʯget_anomąaliͺes_meΉdiͅa´ĕn` to find\x88 anoŬmaliesŝ in Čdaɔta.\nǖḺ\nWarningǾϜ\n---Ɵ---˱-\nTīȫʅhɻis tranΆąsf̝orKmǳ̂ can ðsufǧșfer froġm ʘloςok-ațheĨǉad biaŝ\x9bs.ű F̲or tran˅-͡sformˡiĸȝng d@aȹta aĽǘt ͆sÌome Xʤtũimestamϼϴpά\niwt ņuseŢƱʝs iǾnformatiȦon fͿ£ʁrom the w˱hole͠ trai\x99n paΗΌrt.6')), FunctionDef(name='detect_out_liers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='get_anomalies_median', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(arg='window_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='window_size', ctx=Load())), keyword(arg='alpha', value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='window_size', annotation=Name(id='i_nt', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10), Constant(value=3)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window_size', ctx=Store())], value=Name(id='window_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Store())], value=Name(id='alpha', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='DensityOutliersTransform', bases=[Name(id='OutliersTransform', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='window_size', annotation=Name(id='i_nt', ctx=Load())), arg(arg='distance_coef', annotation=Name(id='float', ctx=Load())), arg(arg='N_NEIGHBORS', annotation=Name(id='i_nt', ctx=Load())), arg(arg='distance_func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=15), Constant(value=3), Constant(value=3), Name(id='absolute_difference_distance', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window_size', ctx=Store())], value=Name(id='window_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='distance_coef', ctx=Store())], value=Name(id='distance_coef', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='n_neighbors', ctx=Store())], value=Name(id='N_NEIGHBORS', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='distance_func', ctx=Store())], value=Name(id='distance_func', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='detect_out_liers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='get_anomalies_density', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(arg='window_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='window_size', ctx=Load())), keyword(arg='distance_coef', value=Attribute(value=Name(id='self', ctx=Load()), attr='distance_coef', ctx=Load())), keyword(arg='n_neighbors', value=Attribute(value=Name(id='self', ctx=Load()), attr='n_neighbors', ctx=Load())), keyword(arg='distance_func', value=Attribute(value=Name(id='self', ctx=Load()), attr='distance_func', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='PredictionIntervalOutliersTransform', bases=[Name(id='OutliersTransform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Tra˺\x88n͈sform tŸhǭat ¬ɐϱu¨εs̤įes :pœy:fun̫Ȧc:ȬŬ\x8b`̔\x8aͶ«~etɕKna.analyǇĺsi©sŘƭ.oǤutlierƅs϶.predi\x9bώction_ɚintǉ̃Ĳerval_oāɄutliersͦ.ge˟t̀Όϑ_aΫnomalies_pre5di\x92ctáionȦ_i̝ͪnterval`ĸƥ Ato fiËƛnd anomalies in dέata.ťκȾ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='mod', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='ProphetModel'), ctx=Load()), Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='SARIMAXModel'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='interval_width', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='model_kwargs'), defaults=[Constant(value=0.95)]), body=[Expr(value=Constant(value='Create insÓtancİe oĨf Pre˹dǥiíctionIΜntervalOutliersTransfo˓rm.\n\nPara\'meters\n-----ʏ--ȼ---\nin_column:\n    name of processed column\nmodel:Ȝ\n    mod\x92el for p̄rediction interval eǈ̕stimation\ninterval_width:\n    ˢwidth of the predϨiction interval\n\nNotes\n---Ǚ--\nFor n:ot "ta̙rget" column only co¥lumn daʍta ȏwill be used for learning.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Name(id='mod', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='interval_width', ctx=Store())], value=Name(id='interval_width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model_kwargs', ctx=Store())], value=Name(id='model_kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='detect_out_liers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='get_anomalies_prediction_interval', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='model', value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load())), keyword(arg='interval_width', value=Attribute(value=Name(id='self', ctx=Load()), attr='interval_width', ctx=Load())), keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='model_kwargs', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='MedianOutliersTransform'), Constant(value='DensityOutliersTransform'), Constant(value='PredictionIntervalOutliersTransform')], ctx=Load()))], type_ignores=[])