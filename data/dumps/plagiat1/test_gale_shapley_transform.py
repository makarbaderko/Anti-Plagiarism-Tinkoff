Module(body=[ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='sklearn.ensemble', names=[alias(name='RandomForestRegressor')], level=0), ImportFrom(module='etna.analysis.feature_relevance', names=[alias(name='ModelRelevanceTable')], level=0), ImportFrom(module='etna.analysis.feature_relevance', names=[alias(name='StatisticsRelevanceTable')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='generate_ar_df')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='generate_periodic_df')], level=0), ImportFrom(module='etna.transforms.feature_selection', names=[alias(name='GaleShapleyFeatureSelectionTransform')], level=0), ImportFrom(module='etna.transforms.feature_selection.gale_shapley', names=[alias(name='BaseGaleShapley')], level=0), ImportFrom(module='etna.transforms.feature_selection.gale_shapley', names=[alias(name='FeatureGaleShapley')], level=0), ImportFrom(module='etna.transforms.feature_selection.gale_shapley', names=[alias(name='GaleShapleyMatcher')], level=0), ImportFrom(module='etna.transforms.feature_selection.gale_shapley', names=[alias(name='SegmentGaleShapley')], level=0), FunctionDef(name='ts_with_large_regressors_number', args=arguments(posonlyargs=[], args=[arg(arg='r')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='generate_periodic_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Constant(value=100)), keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='n_segments', value=Constant(value=3)), keyword(arg='period', value=Constant(value=7)), keyword(arg='scale', value=Constant(value=10))])), Assign(targets=[Name(id='exog_df', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='generate_periodic_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Constant(value=150)), keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='n_segments', value=Constant(value=3)), keyword(arg='period', value=Constant(value=7))]), attr='rename', ctx=Load()), args=[Dict(keys=[Constant(value='target')], values=[Constant(value='regressor_1')])], keywords=[keyword(arg='axis', value=Constant(value=1))])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='ran_ge', ctx=Load()), args=[Constant(value=1), Constant(value=4)], keywords=[]), body=[Assign(targets=[Name(id='tmp', ctx=Store())], value=Call(func=Name(id='generate_periodic_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Constant(value=150)), keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='n_segments', value=Constant(value=3)), keyword(arg='period', value=Constant(value=7))])), AugAssign(target=Subscript(value=Name(id='tmp', ctx=Load()), slice=Constant(value='target'), ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='uniform', ctx=Load()), args=[], keywords=[keyword(arg='low', value=BinOp(left=UnaryOp(op=USub(), operand=Name(id='i', ctx=Load())), op=Div(), right=Constant(value=5))), keyword(arg='high', value=BinOp(left=Name(id='i', ctx=Load()), op=Div(), right=Constant(value=5))), keyword(arg='size', value=Tuple(elts=[Constant(value=450)], ctx=Load()))])), Assign(targets=[Name(id='exog_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='exog_df', ctx=Load()), attr='merge', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tmp', ctx=Load()), attr='rename', ctx=Load()), args=[Dict(keys=[Constant(value='target')], values=[JoinedStr(values=[Constant(value='regressor_'), FormattedValue(value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), conversion=-1)])])], keywords=[keyword(arg='axis', value=Constant(value=1))])], keywords=[keyword(arg='on', value=List(elts=[Constant(value='timestamp'), Constant(value='segment')], ctx=Load()))]))], orelse=[]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='ran_ge', ctx=Load()), args=[Constant(value=4), Constant(value=8)], keywords=[]), body=[Assign(targets=[Name(id='tmp', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Constant(value=150)), keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='n_segments', value=Constant(value=3)), keyword(arg='ar_coef', value=List(elts=[Constant(value=1)], ctx=Load())), keyword(arg='random_seed', value=Name(id='i', ctx=Load()))])), Assign(targets=[Name(id='exog_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='exog_df', ctx=Load()), attr='merge', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tmp', ctx=Load()), attr='rename', ctx=Load()), args=[Dict(keys=[Constant(value='target')], values=[JoinedStr(values=[Constant(value='regressor_'), FormattedValue(value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), conversion=-1)])])], keywords=[keyword(arg='axis', value=Constant(value=1))])], keywords=[keyword(arg='on', value=List(elts=[Constant(value='timestamp'), Constant(value='segment')], ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='TS', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='D')), keyword(arg='df_exog', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='exog_df', ctx=Load())], keywords=[])), keyword(arg='known_future', value=Constant(value='all'))])), Return(value=Name(id='TS', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='TEST_SEGMENT_GET_NEXT_CANDIDATE', args=arguments(posonlyargs=[], args=[arg(arg='segment', annotation=Name(id='SegmentGaleShapley', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ̑ ΏˡŹ τʏq˹œ  ˀ    ')), Assert(test=Compare(left=Call(func=Attribute(value=Name(id='segment', ctx=Load()), attr='get_next_candidate', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='regressor_1')])), Expr(value=Call(func=Attribute(value=Name(id='segment', ctx=Load()), attr='update_tmp_match', ctx=Load()), args=[Constant(value='regressor_1')], keywords=[])), Assert(test=Compare(left=Call(func=Attribute(value=Name(id='segment', ctx=Load()), attr='get_next_candidate', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='regressor_2')]))], decorator_list=[]), FunctionDef(name='base_gale_shapley_player', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Υ Ϻ  ƻ  ʫϞǕʟƙ ËČɲ G  ơκ    ϊ  Ƣ     ʣ˸')), Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Name(id='BaseGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_1')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_1'), Constant(value='segment_3'), Constant(value='segment_2'), Constant(value='segment_4')], ctx=Load()))])), Return(value=Name(id='base', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Name(id='BaseGaleShapley', ctx=Load())), FunctionDef(name='feature', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='reg', ctx=Store())], value=Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_1')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_1'), Constant(value='segment_3'), Constant(value='segment_2'), Constant(value='segment_4')], ctx=Load()))])), Return(value=Name(id='reg', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Name(id='FeatureGaleShapley', ctx=Load())), FunctionDef(name='segment', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='segment', ctx=Store())], value=Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_1')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], ctx=Load()))])), Return(value=Name(id='segment', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Name(id='SegmentGaleShapley', ctx=Load())), FunctionDef(name='matcher', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\u0378ϛ  \x9eM ͫƅͨɖ   Ɠ\\      ó    ȝʓ Ŧ Z')), Assign(targets=[Name(id='segments', ctx=Store())], value=List(elts=[Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_1')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3')], ctx=Load()))]), Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_2')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_3'), Constant(value='regressor_2')], ctx=Load()))]), Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_3')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_1')], ctx=Load()))])], ctx=Load())), Assign(targets=[Name(id='features', ctx=Store())], value=List(elts=[Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_1')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_3'), Constant(value='segment_1'), Constant(value='segment_2')], ctx=Load()))]), Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_2')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_1')], ctx=Load()))]), Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_3')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], ctx=Load()))])], ctx=Load())), Assign(targets=[Name(id='gsh', ctx=Store())], value=Call(func=Name(id='GaleShapleyMatcher', ctx=Load()), args=[], keywords=[keyword(arg='segments', value=Name(id='segments', ctx=Load())), keyword(arg='features', value=Name(id='features', ctx=Load()))])), Return(value=Name(id='gsh', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Name(id='GaleShapleyMatcher', ctx=Load())), FunctionDef(name='relevance_matrix_big', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='matrix', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=6), Constant(value=7)], ctx=Load()), List(elts=[Constant(value=6), Constant(value=1), Constant(value=3), Constant(value=4), Constant(value=7), Constant(value=5), Constant(value=2)], ctx=Load()), List(elts=[Constant(value=1), Constant(value=5), Constant(value=4), Constant(value=3), Constant(value=2), Constant(value=7), Constant(value=6)], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='matrix', ctx=Load())], keywords=[keyword(arg='index', value=List(elts=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], ctx=Load())), keyword(arg='columns', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4'), Constant(value='regressor_5'), Constant(value='regressor_6'), Constant(value='regressor_7')], ctx=Load()))])), Return(value=Name(id='table', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='test_get_ranked_list', args=arguments(posonlyargs=[], args=[arg(arg='relevance_matrix', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='ascending', annotation=Name(id='bool', ctx=Load())), arg(arg='expected', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='GaleShapleyFeatureSelectionTransform', ctx=Load()), attr='_get_ranked_list', ctx=Load()), args=[], keywords=[keyword(arg='table', value=Name(id='relevance_matrix', ctx=Load())), keyword(arg='ascending', value=Name(id='ascending', ctx=Load()))])), For(target=Name(id='key', ctx=Store()), iter=Call(func=Attribute(value=Name(id='expected', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='result', ctx=Load())])), Assert(test=Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='expected', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='ascending,expected'), Tuple(elts=[Tuple(elts=[Constant(value=True), Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_4')], values=[List(elts=[Constant(value='regressor_1'), Constant(value='regressor_3'), Constant(value='regressor_2')], ctx=Load()), List(elts=[Constant(value='regressor_2'), Constant(value='regressor_1'), Constant(value='regressor_3')], ctx=Load()), List(elts=[Constant(value='regressor_3'), Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load()), List(elts=[Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_1')], ctx=Load())])], ctx=Load()), Tuple(elts=[Constant(value=False), Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_4')], values=[List(elts=[Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_1')], ctx=Load()), List(elts=[Constant(value='regressor_3'), Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load()), List(elts=[Constant(value='regressor_2'), Constant(value='regressor_1'), Constant(value='regressor_3')], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_3'), Constant(value='regressor_2')], ctx=Load())])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_get_ranked_list_f', args=arguments(posonlyargs=[], args=[arg(arg='relevance_matrix', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='ascending', annotation=Name(id='bool', ctx=Load())), arg(arg='expected', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ũ  ĺ    ȕ) İɱ  _ɋȠƼ ')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='GaleShapleyFeatureSelectionTransform', ctx=Load()), attr='_get_ranked_list', ctx=Load()), args=[], keywords=[keyword(arg='table', value=Attribute(value=Name(id='relevance_matrix', ctx=Load()), attr='T', ctx=Load())), keyword(arg='ascending', value=Name(id='ascending', ctx=Load()))])), For(target=Name(id='key', ctx=Store()), iter=Call(func=Attribute(value=Name(id='expected', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='result', ctx=Load())])), Assert(test=Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='expected', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='ascending,expected'), Tuple(elts=[Tuple(elts=[Constant(value=True), Dict(keys=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3')], values=[List(elts=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_4')], ctx=Load()), List(elts=[Constant(value='segment_2'), Constant(value='segment_4'), Constant(value='segment_1'), Constant(value='segment_3')], ctx=Load()), List(elts=[Constant(value='segment_3'), Constant(value='segment_1'), Constant(value='segment_4'), Constant(value='segment_2')], ctx=Load())])], ctx=Load()), Tuple(elts=[Constant(value=False), Dict(keys=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3')], values=[List(elts=[Constant(value='segment_4'), Constant(value='segment_3'), Constant(value='segment_2'), Constant(value='segment_1')], ctx=Load()), List(elts=[Constant(value='segment_3'), Constant(value='segment_1'), Constant(value='segment_4'), Constant(value='segment_2')], ctx=Load()), List(elts=[Constant(value='segment_2'), Constant(value='segment_4'), Constant(value='segment_1'), Constant(value='segment_3')], ctx=Load())])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_compute_gale_shapley_steps_number', args=arguments(posonlyargs=[], args=[arg(arg='top_k', annotation=Name(id='int', ctx=Load())), arg(arg='n_segments', annotation=Name(id='int', ctx=Load())), arg(arg='n_featuresBhu', annotation=Name(id='int', ctx=Load())), arg(arg='expected', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='GaleShapleyFeatureSelectionTransform', ctx=Load()), attr='_compute_gale_shapley_steps_number', ctx=Load()), args=[], keywords=[keyword(arg='top_k', value=Name(id='top_k', ctx=Load())), keyword(arg='n_segments', value=Name(id='n_segments', ctx=Load())), keyword(arg='n_features', value=Name(id='n_featuresBhu', ctx=Load()))])), Assert(test=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='top_k,n_segments,n_features,expected'), Tuple(elts=[Tuple(elts=[Constant(value=20), Constant(value=10), Constant(value=50), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=27), Constant(value=10), Constant(value=40), Constant(value=3)], ctx=Load()), Tuple(elts=[Constant(value=15), Constant(value=4), Constant(value=16), Constant(value=4)], ctx=Load()), Tuple(elts=[Constant(value=7), Constant(value=10), Constant(value=50), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value=30), Constant(value=5), Constant(value=20), Constant(value=1)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_gale_shapley_transform_update_ranking_list', args=arguments(posonlyargs=[], args=[arg(arg='ranked_features', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='features_to_drop', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='expected', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ȉ ϱ      \x9d     \x9d ')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='GaleShapleyFeatureSelectionTransform', ctx=Load()), attr='_update_ranking_list', ctx=Load()), args=[], keywords=[keyword(arg='segment_features_ranking', value=Name(id='ranked_features', ctx=Load())), keyword(arg='features_to_drop', value=Name(id='features_to_drop', ctx=Load()))])), For(target=Name(id='key', ctx=Store()), iter=Name(id='result', ctx=Load()), body=[Assert(test=Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='expected', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='ranked_features,features_to_drop,expected'), Tuple(elts=[Tuple(elts=[Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], values=[List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], ctx=Load()), List(elts=[Constant(value='regressor_3'), Constant(value='regressor_2'), Constant(value='regressor_1'), Constant(value='regressor_4')], ctx=Load()), List(elts=[Constant(value='regressor_4'), Constant(value='regressor_3'), Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())]), List(elts=[Constant(value='regressor_2'), Constant(value='regressor_3')], ctx=Load()), Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], values=[List(elts=[Constant(value='regressor_1'), Constant(value='regressor_4')], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_4')], ctx=Load()), List(elts=[Constant(value='regressor_4'), Constant(value='regressor_1')], ctx=Load())])], ctx=Load()), Tuple(elts=[Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], values=[List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], ctx=Load()), List(elts=[Constant(value='regressor_3'), Constant(value='regressor_2'), Constant(value='regressor_1'), Constant(value='regressor_4')], ctx=Load()), List(elts=[Constant(value='regressor_4'), Constant(value='regressor_3'), Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())]), List(elts=[Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_1'), Constant(value='regressor_4')], ctx=Load()), Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], values=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='relevance_matrix', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ɋ  ː Öͷ˯  %¤ ʒ \x94  ţĪ˵ Ϋ   ')), Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3')], values=[List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4)], ctx=Load()), List(elts=[Constant(value=4), Constant(value=1), Constant(value=5), Constant(value=2)], ctx=Load()), List(elts=[Constant(value=2), Constant(value=4), Constant(value=1), Constant(value=3)], ctx=Load())])], keywords=[])), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='index', ctx=Store())], value=List(elts=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_4')], ctx=Load())), Return(value=Name(id='table', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='test_feature_check_segment', args=arguments(posonlyargs=[], args=[arg(arg='feature', annotation=Name(id='FeatureGaleShapley', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ¬         ')), Assert(test=Call(func=Attribute(value=Name(id='feature', ctx=Load()), attr='check_segment', ctx=Load()), args=[Constant(value='segment_4')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='feature', ctx=Load()), attr='update_tmp_match', ctx=Load()), args=[Constant(value='segment_2')], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='feature', ctx=Load()), attr='check_segment', ctx=Load()), args=[Constant(value='segment_4')], keywords=[]))), Assert(test=Call(func=Attribute(value=Name(id='feature', ctx=Load()), attr='check_segment', ctx=Load()), args=[Constant(value='segment_1')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_gale_shapley_transform_gale_shapley_iteration', args=arguments(posonlyargs=[], args=[arg(arg='segment_featu', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='feature_segments_ranking', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='expected', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\u0382łȯ ϗ\x8dĂ ĘƵΠ¸   ģ    ùʟ Ƨ̤    ʡ  ĵɏ  ȩ ')), Expr(value=Call(func=Attribute(value=Name(id='GaleShapleyFeatureSelectionTransform', ctx=Load()), attr='_gale_shapley_iteration', ctx=Load()), args=[], keywords=[keyword(arg='segment_features_ranking', value=Name(id='segment_featu', ctx=Load())), keyword(arg='feature_segments_ranking', value=Name(id='feature_segments_ranking', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='segment_feature_ranking,feature_segments_ranking,expected'), Tuple(elts=[Tuple(elts=[Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_4')], values=[List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_3'), Constant(value='regressor_2'), Constant(value='regressor_4')], ctx=Load()), List(elts=[Constant(value='regressor_2'), Constant(value='regressor_4'), Constant(value='regressor_1'), Constant(value='regressor_3')], ctx=Load()), List(elts=[Constant(value='regressor_3'), Constant(value='regressor_1'), Constant(value='regressor_4'), Constant(value='regressor_2')], ctx=Load())]), Dict(keys=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], values=[List(elts=[Constant(value='segment_2'), Constant(value='segment_1'), Constant(value='segment_3'), Constant(value='segment_4')], ctx=Load()), List(elts=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_4')], ctx=Load()), List(elts=[Constant(value='segment_3'), Constant(value='segment_2'), Constant(value='segment_4'), Constant(value='segment_1')], ctx=Load()), List(elts=[Constant(value='segment_3'), Constant(value='segment_1'), Constant(value='segment_4'), Constant(value='segment_2')], ctx=Load())]), Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_4')], values=[Constant(value='regressor_2'), Constant(value='regressor_1'), Constant(value='regressor_4'), Constant(value='regressor_3')])], ctx=Load()), Tuple(elts=[Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_4')], values=[List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], ctx=Load())]), Dict(keys=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], values=[List(elts=[Constant(value='segment_2'), Constant(value='segment_1'), Constant(value='segment_3'), Constant(value='segment_4')], ctx=Load()), List(elts=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_4')], ctx=Load()), List(elts=[Constant(value='segment_3'), Constant(value='segment_2'), Constant(value='segment_4'), Constant(value='segment_1')], ctx=Load()), List(elts=[Constant(value='segment_3'), Constant(value='segment_1'), Constant(value='segment_4'), Constant(value='segment_2')], ctx=Load())]), Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_4')], values=[Constant(value='regressor_2'), Constant(value='regressor_1'), Constant(value='regressor_3'), Constant(value='regressor_4')])], ctx=Load()), Tuple(elts=[Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], values=[List(elts=[Constant(value='regressor_1'), Constant(value='regressor_5'), Constant(value='regressor_2'), Constant(value='regressor_4'), Constant(value='regressor_3')], ctx=Load()), List(elts=[Constant(value='regressor_5'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4'), Constant(value='regressor_1')], ctx=Load()), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4'), Constant(value='regressor_5')], ctx=Load())]), Dict(keys=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4'), Constant(value='regressor_5')], values=[List(elts=[Constant(value='segment_3'), Constant(value='segment_1'), Constant(value='segment_2')], ctx=Load()), List(elts=[Constant(value='segment_3'), Constant(value='segment_2'), Constant(value='segment_1')], ctx=Load()), List(elts=[Constant(value='segment_3'), Constant(value='segment_1'), Constant(value='segment_2')], ctx=Load()), List(elts=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], ctx=Load()), List(elts=[Constant(value='segment_1'), Constant(value='segment_3'), Constant(value='segment_2')], ctx=Load())]), Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], values=[Constant(value='regressor_5'), Constant(value='regressor_2'), Constant(value='regressor_1')])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_gale_shapley_matcher_match', args=arguments(posonlyargs=[], args=[arg(arg='matcher', annotation=Name(id='GaleShapleyMatcher', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='segment', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='matcher', ctx=Load()), attr='segments', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='feature', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='matcher', ctx=Load()), attr='features', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='segment', ctx=Load()), attr='tmp_match', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=Attribute(value=Name(id='segment', ctx=Load()), attr='is_available', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='feature', ctx=Load()), attr='tmp_match', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=Attribute(value=Name(id='feature', ctx=Load()), attr='is_available', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='matcher', ctx=Load()), attr='match', ctx=Load()), args=[], keywords=[keyword(arg='segment', value=Name(id='segment', ctx=Load())), keyword(arg='feature', value=Name(id='feature', ctx=Load()))])), Assert(test=Compare(left=Attribute(value=Name(id='segment', ctx=Load()), attr='tmp_match', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='feature', ctx=Load()), attr='name', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='segment', ctx=Load()), attr='tmp_match_rank', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])), Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='segment', ctx=Load()), attr='is_available', ctx=Load()))), Assert(test=Compare(left=Attribute(value=Name(id='feature', ctx=Load()), attr='tmp_match', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='segment', ctx=Load()), attr='name', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='feature', ctx=Load()), attr='tmp_match_rank', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])), Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='feature', ctx=Load()), attr='is_available', ctx=Load())))], decorator_list=[]), FunctionDef(name='test_gale_shapley_matcher_break_match', args=arguments(posonlyargs=[], args=[arg(arg='matcher', annotation=Name(id='GaleShapleyMatcher', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='©Ǥ˴ 6  ρ   ;  \x9a  ̞\x97 sΟ Ȃ ̲  ɽ')), Assign(targets=[Name(id='segment', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='matcher', ctx=Load()), attr='segments', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='feature', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='matcher', ctx=Load()), attr='features', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='segment', ctx=Load()), attr='tmp_match', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=Attribute(value=Name(id='segment', ctx=Load()), attr='is_available', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='feature', ctx=Load()), attr='tmp_match', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=Attribute(value=Name(id='feature', ctx=Load()), attr='is_available', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='matcher', ctx=Load()), attr='match', ctx=Load()), args=[], keywords=[keyword(arg='segment', value=Name(id='segment', ctx=Load())), keyword(arg='feature', value=Name(id='feature', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='matcher', ctx=Load()), attr='break_match', ctx=Load()), args=[], keywords=[keyword(arg='segment', value=Name(id='segment', ctx=Load())), keyword(arg='feature', value=Name(id='feature', ctx=Load()))])), Assert(test=Compare(left=Attribute(value=Name(id='segment', ctx=Load()), attr='tmp_match', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=Attribute(value=Name(id='segment', ctx=Load()), attr='is_available', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='feature', ctx=Load()), attr='tmp_match', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=Attribute(value=Name(id='feature', ctx=Load()), attr='is_available', ctx=Load()))], decorator_list=[]), FunctionDef(name='test_gale_shapley_result', args=arguments(posonlyargs=[], args=[arg(arg='segments', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='SegmentGaleShapley', ctx=Load()), ctx=Load())), arg(arg='features', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='FeatureGaleShapley', ctx=Load()), ctx=Load())), arg(arg='expected', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ')), Assign(targets=[Name(id='matcher', ctx=Store())], value=Call(func=Name(id='GaleShapleyMatcher', ctx=Load()), args=[], keywords=[keyword(arg='segments', value=Name(id='segments', ctx=Load())), keyword(arg='features', value=Name(id='features', ctx=Load()))])), Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Name(id='matcher', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='expected', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Name(id='matches', ctx=Load())])), Assert(test=Compare(left=Subscript(value=Name(id='matches', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='v', ctx=Load())]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='segments,features,expected'), Tuple(elts=[Tuple(elts=[List(elts=[Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_1')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], ctx=Load()))]), Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_2')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_3'), Constant(value='regressor_2'), Constant(value='regressor_4')], ctx=Load()))]), Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_3')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_2'), Constant(value='regressor_4'), Constant(value='regressor_1'), Constant(value='regressor_3')], ctx=Load()))]), Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_4')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_3'), Constant(value='regressor_1'), Constant(value='regressor_4'), Constant(value='regressor_2')], ctx=Load()))])], ctx=Load()), List(elts=[Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_1')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_2'), Constant(value='segment_1'), Constant(value='segment_3'), Constant(value='segment_4')], ctx=Load()))]), Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_2')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_4')], ctx=Load()))]), Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_3')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_3'), Constant(value='segment_2'), Constant(value='segment_4'), Constant(value='segment_1')], ctx=Load()))]), Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_4')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_3'), Constant(value='segment_1'), Constant(value='segment_4'), Constant(value='segment_2')], ctx=Load()))])], ctx=Load()), Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_4')], values=[Constant(value='regressor_2'), Constant(value='regressor_1'), Constant(value='regressor_4'), Constant(value='regressor_3')])], ctx=Load()), Tuple(elts=[List(elts=[Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_1')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], ctx=Load()))]), Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_2')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], ctx=Load()))]), Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_3')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], ctx=Load()))]), Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_4')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4')], ctx=Load()))])], ctx=Load()), List(elts=[Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_1')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_2'), Constant(value='segment_1'), Constant(value='segment_3'), Constant(value='segment_4')], ctx=Load()))]), Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_2')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_4')], ctx=Load()))]), Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_3')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_3'), Constant(value='segment_2'), Constant(value='segment_4'), Constant(value='segment_1')], ctx=Load()))]), Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_4')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_3'), Constant(value='segment_1'), Constant(value='segment_4'), Constant(value='segment_2')], ctx=Load()))])], ctx=Load()), Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3'), Constant(value='segment_4')], values=[Constant(value='regressor_2'), Constant(value='regressor_1'), Constant(value='regressor_3'), Constant(value='regressor_4')])], ctx=Load()), Tuple(elts=[List(elts=[Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_1')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_5'), Constant(value='regressor_2'), Constant(value='regressor_4'), Constant(value='regressor_3')], ctx=Load()))]), Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_2')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_5'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4'), Constant(value='regressor_1')], ctx=Load()))]), Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='segment_3')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4'), Constant(value='regressor_5')], ctx=Load()))])], ctx=Load()), List(elts=[Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_1')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_3'), Constant(value='segment_1'), Constant(value='segment_2')], ctx=Load()))]), Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_2')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_3'), Constant(value='segment_2'), Constant(value='segment_1')], ctx=Load()))]), Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_3')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_3'), Constant(value='segment_1'), Constant(value='segment_2')], ctx=Load()))]), Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_4')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], ctx=Load()))]), Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='regressor_5')), keyword(arg='ranked_candidates', value=List(elts=[Constant(value='segment_1'), Constant(value='segment_3'), Constant(value='segment_2')], ctx=Load()))])], ctx=Load()), Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], values=[Constant(value='regressor_5'), Constant(value='regressor_2'), Constant(value='regressor_1')])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_base_update_segment', args=arguments(posonlyargs=[], args=[arg(arg='base_gale_shapley_player', annotation=Name(id='BaseGaleShapley', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ɦ   ˫ Ͼ      ąʳ ')), Expr(value=Call(func=Attribute(value=Name(id='base_gale_shapley_player', ctx=Load()), attr='update_tmp_match', ctx=Load()), args=[Constant(value='segment_2')], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='base_gale_shapley_player', ctx=Load()), attr='tmp_match', ctx=Load()), ops=[Eq()], comparators=[Constant(value='segment_2')])), Assert(test=Compare(left=Attribute(value=Name(id='base_gale_shapley_player', ctx=Load()), attr='tmp_match_rank', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)]))], decorator_list=[]), FunctionDef(name='test_gale_shapley_transform_process_last_step', args=arguments(posonlyargs=[], args=[arg(arg='matches', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='n', annotation=Name(id='int', ctx=Load())), arg(arg='greater_is_better', annotation=Name(id='bool', ctx=Load())), arg(arg='expected', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='relevance_matrix_big', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ̀Ȉ     Δ \x93    ƐΨ ) >  ¸')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='GaleShapleyFeatureSelectionTransform', ctx=Load()), attr='_process_last_step', ctx=Load()), args=[], keywords=[keyword(arg='matches', value=Name(id='matches', ctx=Load())), keyword(arg='relevance_table', value=Name(id='relevance_matrix_big', ctx=Load())), keyword(arg='n', value=Name(id='n', ctx=Load())), keyword(arg='greater_is_better', value=Name(id='greater_is_better', ctx=Load()))])), Assert(test=Compare(left=Call(func=Name(id='s', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='s', ctx=Load()), args=[Name(id='expected', ctx=Load())], keywords=[])]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='matches,n,greater_is_better,expected'), Tuple(elts=[Tuple(elts=[Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], values=[Constant(value='regressor_4'), Constant(value='regressor_7'), Constant(value='regressor_5')]), Constant(value=2), Constant(value=False), List(elts=[Constant(value='regressor_5'), Constant(value='regressor_7')], ctx=Load())], ctx=Load()), Tuple(elts=[Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], values=[Constant(value='regressor_4'), Constant(value='regressor_7'), Constant(value='regressor_5')]), Constant(value=1), Constant(value=True), List(elts=[Constant(value='regressor_4')], ctx=Load())], ctx=Load()), Tuple(elts=[Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], values=[Constant(value='regressor_3'), Constant(value='regressor_2'), Constant(value='regressor_1')]), Constant(value=2), Constant(value=False), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2')], ctx=Load())], ctx=Load()), Tuple(elts=[Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2'), Constant(value='segment_3')], values=[Constant(value='regressor_3'), Constant(value='regressor_2'), Constant(value='regressor_1')]), Constant(value=3), Constant(value=False), List(elts=[Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='TEST_GALE_SHAPLEY_TRANSFORM_FIT', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_large_regressors_number', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='top_k', annotation=Name(id='int', ctx=Load())), arg(arg='use_rank', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='        ȫ ')), Assign(targets=[Name(id='df', ctx=Store())], value=Attribute(value=Name(id='ts_with_large_regressors_number', ctx=Load()), attr='df', ctx=Load())), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='GaleShapleyFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='relevance_table', value=Call(func=Name(id='StatisticsRelevanceTable', ctx=Load()), args=[], keywords=[])), keyword(arg='top_k', value=Name(id='top_k', ctx=Load())), keyword(arg='use_rank', value=Name(id='use_rank', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='use_rank'), Tuple(elts=[Constant(value=True), Constant(value=False)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='top_k'), Tuple(elts=[Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=6), Constant(value=7)], ctx=Load())], keywords=[])]), FunctionDef(name='test_gale_shapley_transform_fit_transform', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_large_regressors_number', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Attribute(value=Name(id='ts_with_large_regressors_number', ctx=Load()), attr='df', ctx=Load())), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='GaleShapleyFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='relevance_table', value=Call(func=Name(id='StatisticsRelevanceTable', ctx=Load()), args=[], keywords=[])), keyword(arg='top_k', value=Constant(value=5)), keyword(arg='use_rank', value=Constant(value=False))])), Assign(targets=[Name(id='transformed', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load()))])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='transformed', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Set(elts=[Constant(value='target'), Constant(value='regressor_1'), Constant(value='regressor_2'), Constant(value='regressor_3'), Constant(value='regressor_4'), Constant(value='regressor_5')])]))], decorator_list=[]), FunctionDef(name='test_gale_shapley_transform_fit_model_based', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_large_regressors_number', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='top_k', annotation=Name(id='int', ctx=Load())), arg(arg='use_rank', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Attribute(value=Name(id='ts_with_large_regressors_number', ctx=Load()), attr='df', ctx=Load())), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='GaleShapleyFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='relevance_table', value=Call(func=Name(id='ModelRelevanceTable', ctx=Load()), args=[], keywords=[])), keyword(arg='top_k', value=Name(id='top_k', ctx=Load())), keyword(arg='use_rank', value=Name(id='use_rank', ctx=Load())), keyword(arg='model', value=Call(func=Name(id='RandomForestRegressor', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='use_rank'), Tuple(elts=[Constant(value=True), Constant(value=False)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='top_k'), Tuple(elts=[Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=6), Constant(value=7)], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_transform_with_nans', args=arguments(posonlyargs=[], args=[arg(arg='regressor_exog_weekend')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Ι   ͭ  Λ      ê     ')), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='GaleShapleyFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='relevance_table', value=Call(func=Name(id='StatisticsRelevanceTable', ctx=Load()), args=[], keywords=[])), keyword(arg='top_k', value=Constant(value=5)), keyword(arg='use_rank', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='regressor_exog_weekend', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='transform', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='xfail', ctx=Load())]), FunctionDef(name='test_work_with_non_regressors', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ƞ ż  ˢ ɺ ļ    ')), Assign(targets=[Name(id='selec', ctx=Store())], value=Call(func=Name(id='GaleShapleyFeatureSelectionTransform', ctx=Load()), args=[], keywords=[keyword(arg='relevance_table', value=Call(func=Name(id='StatisticsRelevanceTable', ctx=Load()), args=[], keywords=[])), keyword(arg='top_k', value=Constant(value=3)), keyword(arg='use_rank', value=Constant(value=False)), keyword(arg='features_to_use', value=Constant(value='all'))])), Expr(value=Call(func=Attribute(value=Name(id='ts_with_exog', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='selec', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])