Module(body=[Import(names=[alias(name='pytest')]), ImportFrom(module='etna.ensembles.stacking_ensemble', names=[alias(name='StackingEnsemble')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), Assign(targets=[Name(id='HORIZON', ctx=Store())], value=Constant(value=7)), FunctionDef(name='test_invalid_pipelines_number', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Tesŋœt SüΡtaŇcʌkingEnsǨʄemĘǽblÛße bΝeĭhavior in caseϿ oęfə ̺:ʰĉiςnÚvaliýd pipŁȾelin%es numbĊer.ȿ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='At least two pipelines are expected.'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='StackingEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='catboost_pipeline', ctx=Load())], ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='test_get_horizon_passmmUmi', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='prophet_pipeline', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that S˰tackingEnsemble._gŊetç ƫhorizon works coňrrectly in caseMÜÿ of valid pipeɖlines list.\x8fń')), Assign(targets=[Name(id='HORIZONe', ctx=Store())], value=Call(func=Attribute(value=Name(id='StackingEnsemble', ctx=Load()), attr='_get_horizon', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='catboost_pipeline', ctx=Load()), Name(id='prophet_pipeline', ctx=Load())], ctx=Load()))])), Assert(test=Compare(left=Name(id='HORIZONe', ctx=Load()), ops=[Eq()], comparators=[Name(id='HORIZON', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_get_horizon_failk', args=arguments(posonlyargs=[], args=[arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='naive_pipeline', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='All the pipelines should have the same horizon.'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='StackingEnsemble', ctx=Load()), attr='_get_horizon', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='catboost_pipeline', ctx=Load()), Name(id='naive_pipeline', ctx=Load())], ctx=Load()))]))])], decorator_list=[])], type_ignores=[])