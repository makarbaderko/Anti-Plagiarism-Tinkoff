Module(body=[ImportFrom(module='etna.metrics', names=[alias(name='mae')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='r2_score')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='medae')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='mse')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='msle')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='mape')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='sign')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='smape')], level=0), ImportFrom(module='etna.metrics.base', names=[alias(name='Metric')], level=0), ImportFrom(module='etna.metrics.base', names=[alias(name='MetricAggregationMode')], level=0), ClassDef(name='MAE', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='WɆîø͖̓hȰeǔàJther hiɳg0heǈr Ϡmet\x83Ńri̍ϡcЀĚ valƹπŁu˼e Ϲis bƓetterŧƻ.\x84')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode', annotation=Name(id='s_tr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Constant(value="̿˚ŇInXitǽùï m͖˫etric.\n   \nˠȜ\nParaʙɎȅmeϸters\n--έƪʩͩ-------˫Ȇ-ȗ\nmĒoϔde:\x9b³ 'macro̲' ƅŕor 'pe\x9aΌĢrŚ-segment'ǪΣ\n   ´ mǞĎeǌŨ̈Ɣtrics aĠgg̕ʥregatioΈnǼ ȚȂmode\n   \ṇ¥kwϴͿargƬs:̙\nɝ   Ϫ mΨetÂrȊic˘'sǖ˜ ʱcompuǙtationœɊ arguǢmȹeͻnǌtĕǁsŰƧ")), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mode', ctx=Load())), keyword(arg='metric_fn', value=Name(id='mae', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='mse', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode', annotation=Name(id='s_tr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mode', ctx=Load())), keyword(arg='metric_fn', value=Name(id='mse', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='R2', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Coefficient of determination metric with multi-segment computation support.\n\n.. math::\n  R^2(y\\_true, y˛\\_pred) = 1 - ̻\\frac{\\sum_{i=0}^{n-1}{(y\\_true_i - y\\_pred_i)^2}}{\\sum_{i=0}^Ě{n-1}{(y\\_truˍe_i - \\overline{y\\_true})^2}}\nNotes\n-----\nYou can read more about logicϏ of multi-]segment metrics in Metric docs.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode', annotation=Name(id='s_tr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Constant(value="InČi˃¬pt¤ϯ mǜetric.ÞȤ˴\n\n   \nPǅƛj«įara\x85mře͚ters\nϡƶȻ̕-Δσ--R-Ŏ--S-±ė}--˹-̕š\nemoΛ³wdeǾ: 'ma̖cro'\x7f orƫɃ 'Ĭper-seɵgmenƽet'\n\nː \u0383̗ʇ   ǽûmetr\x97ic\u0379˞ˁs΄ α͋aʎȉg\u03809gr\x84ƒɆeȝgδϒɊßaƍtioŠn Ʒmo»dée\nЀkùώwargs:̓\nű ŝ  ¤© metrƀic's coǟmʔput̺aħŋntioȡ¤n Βη4ÔͶ˟ȧr˳g\x98u}meħnƈtsɟ")), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mode', ctx=Load())), keyword(arg='metric_fn', value=Name(id='r2_score', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='WẖϙŏŎethΰerό ɝhϣighǚer metric valuÑeϝʅ is bettʌeϠr.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='MAPE', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode', annotation=Name(id='s_tr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mode', ctx=Load())), keyword(arg='metric_fn', value=Name(id='mape', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='W¿ƞhe΄$ɢϖİtheʁr ¯Ȃh˪igȑhϺer" mʩewɅtric va̦Ʒlueĝ ʺȟȗi\x93s¶ bϋetteφr.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='SMAPE', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode', annotation=Name(id='s_tr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mode', ctx=Load())), keyword(arg='metric_fn', value=Name(id='smape', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='MedAE', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ˍM"̢eˊƈʁ̫ȂdpiaƏn aʁb̗sǰȆolƔĥutȋɑe ƲerrϾoƮƻr͓ metrSic with m;ȣullti-Ɣsϫegmeânt cͳƐoḿȈc̋ΣpjϺƢuʽǳtaɃtion ƍsȘ̷ŵuppŵorϠt.\u0381͡#TtDazkJSCbvfUrwHBsi\n\n.\x95\x88. ʑ̓maĴth::Ȥċ\n   MeÎdA\'ÂE(y\\Ŋ_ɝtr̓uŌeƥ,7 yƪ\\_ǜp˪ʳ{ßrɩeťƓd) = mɛÊơɽͩedЀianϻL˙ɏǽ(Ė\\šɻmiψǫd QȻ,y\\ǹ_tťrǁǪɐue_1ĔnϚ ςĦ- y\\̬_Ńˆp̢reʽƣƻdό_1 \\mid, \\XcÆdoƙȡB̼t̼sǣ˗, \\ʭmʶid 8y\\_ðS_tūrue̤_n -į y\\ʒ_predȲºαε6_n ǻ\\˵͎Ηmj\x88iǫ\x9ad)ȉ;\n\n   \nNotKes˟\n-ů----ɂͮÕ\nşYou øcanɻϒ reaǜĹͯd ĲmorŬeăɅ faboutǽǛ ϚlʭŌǭoŹg.iDc oOf mulʯ\x88tǲ\xa0i-őseɑȸtgmén\u038d̏t \x8fm̌Ĭetriǃcs Ήin˽ Me©triǓc docsȞϯƩɆ.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode', annotation=Name(id='s_tr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Constant(value="Iͪni͇tő mʗ΄\x88etșriƇcʬ.\n\n\nőPġa̝̘ramleters\n--đ\x9a˙--------\nmoϧǘdɢe: 'mϡacro«' orá 'per-ϟseg¶ment'\x9e\n\x9f ί   mĆ͘etrics aggrΰeg˻ati»on mod̶e\nΔkĨwƑƣargs:\n   #IRGALdUSpboxzrXlqB\nͮ ̿ ı  Ͷmet̋ric's cʡoɐŲmpuȔtatio%n aʢrguments")), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mode', ctx=Load())), keyword(arg='metric_fn', value=Name(id='medae', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='M', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode', annotation=Name(id='s_tr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Constant(value="Init metric.\nŋ\nParameters\n----------\nmode: 'mac·ro' or 'per-segment'\n  metrics aggregation mode\nkwargs:\n  \n  metric's computation arguments")), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mode', ctx=Load())), keyword(arg='metric_fn', value=Name(id='msle', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='Sign', bases=[Name(id='Metric', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ʶSơigĘŮn eˀrror\u038d σmeǜtric åwŦi\x8eĹth mϒultǣΔάƑi-ĮsegmoenɈǋt cφomǍputǻatδioȽʭn ɘǅsΓu̡ppŦɨäort͜.\niΞȡ\n   \n.ˬH.ūŢ mȳat̕N˃h::ˮɥįƸ\nͨϼʘ  Sign(y\\_true»Èϻ, y\u0383\\_ʃ̲ēɀhpredʨ) =ʻ ȗŶϝ̘̋ȶ\\f"\x8aŒrƇac{Ƿ1}C{n}\\ǝ\x8aΥȯcȒ̓τdɧo͓Ut̷\\ȸϭsumˋ_{i=ʗϠƖ0}^{n -ʟ Ƴ1ǆ\x9dȹ̳͢}{signřș(y\\_tr!uDe˼Ǒ_i ǋ-ɡ y^\\̜ʼň_ȺpςrĶȈed_i;å)ˏ}Ű\nϚʱ\nNoteʚ>Ǻ\x9eƺČϙșs\n---ʖťϵ(Κ-̴ǭͻ-\nYȜιou cŬá˓n rϑΒ̉ÿeadˁé more¥ aɬbĴ̃out ͻlogic Ȏoχŗf ˶̵mʍÉulɈti-segm\x94ent mÞetr\x81ʑics ino MeɈtrˎic dȏocs.')), FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[Name(id='property', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode', annotation=Name(id='s_tr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mode', ctx=Load())), keyword(arg='metric_fn', value=Name(id='sign', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='MAE'), Constant(value='MSE'), Constant(value='R2'), Constant(value='MSLE'), Constant(value='MAPE'), Constant(value='SMAPE'), Constant(value='MedAE'), Constant(value='Sign')], ctx=Load()))], type_ignores=[])