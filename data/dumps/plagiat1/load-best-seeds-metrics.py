Module(body=[Import(names=[alias(name='argparse')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='warnings')]), ImportFrom(module='collections', names=[alias(name='defaultdict')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='wandb')]), FunctionDef(name='parse_arguments', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pa_rser', ctx=Store())], value=Call(func=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentParser', ctx=Load()), args=[Constant(value='Download best seed metrics for each group from WandB.')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='pa_rser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='wandb_path')], keywords=[keyword(arg='help', value=Constant(value="Path to the project in format 'entity/project'."))])), Expr(value=Call(func=Attribute(value=Name(id='pa_rser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-f'), Constant(value='--filename')], keywords=[keyword(arg='help', value=Constant(value='Dump output to file.'))])), Expr(value=Call(func=Attribute(value=Name(id='pa_rser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-n'), Constant(value='--num-seeds')], keywords=[keyword(arg='help', value=Constant(value='Number of best seeds to compute statistics for.')), keyword(arg='type', value=Name(id='int', ctx=Load())), keyword(arg='default', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='pa_rser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--std')], keywords=[keyword(arg='help', value=Constant(value='Show std for each metric.')), keyword(arg='action', value=Constant(value='store_true'))])), Expr(value=Call(func=Attribute(value=Name(id='pa_rser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--selection-metric')], keywords=[keyword(arg='help', value=Constant(value='Metric to select best seed by.')), keyword(arg='required', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='pa_rser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--selection-maximize')], keywords=[keyword(arg='help', value=Constant(value='It true, maximize selection metric. Minimize for false value.')), keyword(arg='required', value=Constant(value=True)), keyword(arg='choices', value=List(elts=[Constant(value='true'), Constant(value='false')], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='pa_rser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--metric-regexp')], keywords=[keyword(arg='nargs', value=Constant(value='*')), keyword(arg='help', value=Constant(value='Regexp to filter metrics.'))])), Expr(value=Call(func=Attribute(value=Name(id='pa_rser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--percent')], keywords=[keyword(arg='help', value=Constant(value='Multiply metrics by 100.')), keyword(arg='action', value=Constant(value='store_true'))])), Expr(value=Call(func=Attribute(value=Name(id='pa_rser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--precision')], keywords=[keyword(arg='help', value=Constant(value='Number of decimal places.')), keyword(arg='type', value=Name(id='int', ctx=Load())), keyword(arg='default', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='pa_rser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--separator')], keywords=[keyword(arg='help', value=Constant(value='Fields separator.')), keyword(arg='default', value=Constant(value=' '))])), Expr(value=Call(func=Attribute(value=Name(id='pa_rser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--url')], keywords=[keyword(arg='help', value=Constant(value='WandB URL.')), keyword(arg='default', value=Constant(value='https://api.wandb.ai'))])), Return(value=Call(func=Attribute(value=Name(id='pa_rser', ctx=Load()), attr='parse_args', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='matches', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='regexps')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  § ǋ ȝ űϼ  ˆƃ      \xa0q   ȿF ɯȞ ʽĕ')), For(target=Name(id='regexp', ctx=Store()), iter=Name(id='regexps', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='regexp', ctx=Load()), Name(id='s', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='get_runs', args=arguments(posonlyargs=[], args=[arg(arg='API'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ĭ ̴')), Assign(targets=[Name(id='runs', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='API', ctx=Load()), attr='runs', ctx=Load()), args=[], keywords=[keyword(arg='path', value=Name(id='path', ctx=Load()))])], keywords=[])), Assign(targets=[Name(id='runs', ctx=Store())], value=ListComp(elt=Name(id='run', ctx=Load()), generators=[comprehension(target=Name(id='run', ctx=Store()), iter=Name(id='runs', ctx=Load()), ifs=[Attribute(value=Name(id='run', ctx=Load()), attr='group', ctx=Load())], is_async=0)])), Return(value=Name(id='runs', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_metrics', args=arguments(posonlyargs=[], args=[arg(arg='run'), arg(arg='metric_regexps')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\x92 ƶ Ȯɞ  ')), Assign(targets=[Name(id='metrics', ctx=Store())], value=Attribute(value=Name(id='run', ctx=Load()), attr='summary', ctx=Load())), If(test=Compare(left=Name(id='metric_regexps', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='metrics', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='metrics', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Call(func=Name(id='matches', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='metric_regexps', ctx=Load())], keywords=[])], is_async=0)]))], orelse=[]), Return(value=Name(id='metrics', ctx=Load()))], decorator_list=[]), FunctionDef(name='prepare__metric', args=arguments(posonlyargs=[], args=[arg(arg='metric'), arg(arg='percent'), arg(arg='precisio')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=2)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='metric', ctx=Load()), Name(id='s', ctx=Load())], keywords=[]), body=[Return(value=Name(id='metric', ctx=Load()))], orelse=[]), If(test=Name(id='percent', ctx=Load()), body=[Assign(targets=[Name(id='metric', ctx=Store())], value=BinOp(left=Name(id='metric', ctx=Load()), op=Mult(), right=Constant(value=100)))], orelse=[]), Assign(targets=[Name(id='fmt', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='{:.'), op=Add(), right=Call(func=Name(id='s', ctx=Load()), args=[Name(id='precisio', ctx=Load())], keywords=[])), op=Add(), right=Constant(value='f}'))), Return(value=Call(func=Attribute(value=Name(id='fmt', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='metric', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='order_metrics', args=arguments(posonlyargs=[], args=[arg(arg='metrics'), arg(arg='metric_regexps')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='       ˠ   ')), Assign(targets=[Name(id='metrics', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Name(id='metrics', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='metric_regexps', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='or_dered', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='regexp', ctx=Store()), iter=Name(id='metric_regexps', ctx=Load()), body=[For(target=Name(id='metric', ctx=Store()), iter=Name(id='metrics', ctx=Load()), body=[If(test=Compare(left=Name(id='metric', ctx=Load()), ops=[In()], comparators=[Name(id='or_dered', ctx=Load())]), body=[Continue()], orelse=[]), If(test=Call(func=Name(id='matches', ctx=Load()), args=[Name(id='metric', ctx=Load()), List(elts=[Name(id='regexp', ctx=Load())], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='or_dered', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='metric', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='metrics', ctx=Store())], value=Name(id='or_dered', ctx=Load()))], orelse=[]), Return(value=Name(id='metrics', ctx=Load()))], decorator_list=[]), FunctionDef(name='print_metrics', args=arguments(posonlyargs=[], args=[arg(arg='fp_'), arg(arg='metrics'), arg(arg='run_metrics'), arg(arg='separator'), arg(arg='percent'), arg(arg='precisio'), arg(arg='add_std')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=' '), Constant(value=False), Constant(value=2), Constant(value=False)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='separator', ctx=Load()), attr='join', ctx=Load()), args=[BinOp(left=List(elts=[Constant(value='group')], ctx=Load()), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Name(id='metrics', ctx=Load())], keywords=[]))], keywords=[])], keywords=[keyword(arg='file', value=Name(id='fp_', ctx=Load()))])), For(target=Name(id='run', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Name(id='run_metrics', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='toke_ns', ctx=Store())], value=List(elts=[Name(id='run', ctx=Load())], ctx=Load())), For(target=Name(id='name', ctx=Store()), iter=Name(id='metrics', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='mean', ctx=Store()), Name(id='st', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='run_metrics', ctx=Load()), slice=Name(id='run', ctx=Load()), ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load()), Tuple(elts=[Constant(value='N/A'), Constant(value='N/A')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='mean', ctx=Store())], value=Call(func=Name(id='prepare__metric', ctx=Load()), args=[Name(id='mean', ctx=Load())], keywords=[keyword(arg='percent', value=Name(id='percent', ctx=Load())), keyword(arg='precision', value=Name(id='precisio', ctx=Load()))])), Assign(targets=[Name(id='st', ctx=Store())], value=Call(func=Name(id='prepare__metric', ctx=Load()), args=[Name(id='st', ctx=Load())], keywords=[keyword(arg='percent', value=Name(id='percent', ctx=Load())), keyword(arg='precision', value=Name(id='precisio', ctx=Load()))])), If(test=Name(id='add_std', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='toke_ns', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} $\\pm$ {}'), attr='format', ctx=Load()), args=[Name(id='mean', ctx=Load()), Name(id='st', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='toke_ns', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean', ctx=Load())], keywords=[]))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='separator', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='toke_ns', ctx=Load())], keywords=[])], keywords=[keyword(arg='file', value=Name(id='fp_', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_', args=arguments(posonlyargs=[], args=[arg(arg='runs'), arg(arg='NUM_SEEDS'), arg(arg='metric_regexps'), arg(arg='selection_metric'), arg(arg='selection_maximize')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='selection_maximize', ctx=Load()), ops=[Eq()], comparators=[Constant(value='true')]), body=[Assign(targets=[Name(id='selection_maximize', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Name(id='selection_maximize', ctx=Load()), ops=[Eq()], comparators=[Constant(value='false')]), body=[Assign(targets=[Name(id='selection_maximize', ctx=Store())], value=Constant(value=False))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Name(id='selection_maximize', ctx=Load())], keywords=[]))])]), Assign(targets=[Name(id='by_g', ctx=Store())], value=Call(func=Name(id='defaultdict', ctx=Load()), args=[Name(id='list', ctx=Load())], keywords=[])), For(target=Name(id='run', ctx=Store()), iter=Name(id='runs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='by_g', ctx=Load()), slice=Attribute(value=Name(id='run', ctx=Load()), attr='group', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='run', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='metrics', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='group', ctx=Store()), Name(id='runs', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='by_g', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='runs', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='runs', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='run')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Attribute(value=Name(id='run', ctx=Load()), attr='summary', ctx=Load()), slice=Name(id='selection_metric', ctx=Load()), ctx=Load())))])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="Group {} doesn't have metric {}."), attr='format', ctx=Load()), args=[Name(id='group', ctx=Load()), Name(id='selection_metric', ctx=Load())], keywords=[])], keywords=[])), Continue()])], orelse=[], finalbody=[]), If(test=Name(id='selection_maximize', ctx=Load()), body=[Assign(targets=[Name(id='runs', ctx=Store())], value=Subscript(value=Name(id='runs', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='NUM_SEEDS', ctx=Load()))), ctx=Load()))], orelse=[Assign(targets=[Name(id='runs', ctx=Store())], value=Subscript(value=Name(id='runs', ctx=Load()), slice=Slice(upper=Name(id='NUM_SEEDS', ctx=Load())), ctx=Load()))]), Assign(targets=[Name(id='by_metric', ctx=Store())], value=Call(func=Name(id='defaultdict', ctx=Load()), args=[Name(id='list', ctx=Load())], keywords=[])), For(target=Name(id='run', ctx=Store()), iter=Name(id='runs', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='get_metrics', ctx=Load()), args=[Name(id='run', ctx=Load()), Name(id='metric_regexps', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='by_metric', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Subscript(value=Name(id='metrics', ctx=Load()), slice=Name(id='group', ctx=Load()), ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='values', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='by_metric', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='metrics', ctx=Load()), slice=Name(id='group', ctx=Load()), ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='std', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='metrics', ctx=Load()))], decorator_list=[]), FunctionDef(name='main', args=arguments(posonlyargs=[], args=[arg(arg='args')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ˼ϟ   ʸ ͂  ')), Assign(targets=[Tuple(elts=[Name(id='entity', ctx=Store()), Name(id='project', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='args', ctx=Load()), attr='wandb_path', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[])), Assign(targets=[Name(id='API', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='wandb', ctx=Load()), attr='apis', ctx=Load()), attr='public', ctx=Load()), attr='Api', ctx=Load()), args=[], keywords=[keyword(arg='overrides', value=Dict(keys=[Constant(value='base_url')], values=[Attribute(value=Name(id='args', ctx=Load()), attr='url', ctx=Load())]))])), Assign(targets=[Name(id='runs', ctx=Store())], value=Call(func=Name(id='get_runs', ctx=Load()), args=[Name(id='API', ctx=Load()), Call(func=Attribute(value=Constant(value='{}/{}'), attr='format', ctx=Load()), args=[Name(id='entity', ctx=Load()), Name(id='project', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='metrics', ctx=Store())], value=Call(func=Name(id='get_', ctx=Load()), args=[Name(id='runs', ctx=Load()), Attribute(value=Name(id='args', ctx=Load()), attr='num_seeds', ctx=Load()), Attribute(value=Name(id='args', ctx=Load()), attr='metric_regexp', ctx=Load()), Attribute(value=Name(id='args', ctx=Load()), attr='selection_metric', ctx=Load()), Attribute(value=Name(id='args', ctx=Load()), attr='selection_maximize', ctx=Load())], keywords=[])), Assign(targets=[Name(id='metrics_order', ctx=Store())], value=Call(func=Name(id='order_metrics', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Name(id='su', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='list', ctx=Load()), Call(func=Attribute(value=Name(id='metrics', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), List(elts=[], ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='metric_regexps', value=Attribute(value=Name(id='args', ctx=Load()), attr='metric_regexp', ctx=Load()))])), Assign(targets=[Name(id='p_rint_kwargs', ctx=Store())], value=Dict(keys=[Constant(value='separator'), Constant(value='percent'), Constant(value='precision'), Constant(value='add_std')], values=[Attribute(value=Name(id='args', ctx=Load()), attr='separator', ctx=Load()), Attribute(value=Name(id='args', ctx=Load()), attr='percent', ctx=Load()), Attribute(value=Name(id='args', ctx=Load()), attr='precision', ctx=Load()), Attribute(value=Name(id='args', ctx=Load()), attr='std', ctx=Load())])), If(test=Compare(left=Attribute(value=Name(id='args', ctx=Load()), attr='filename', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='args', ctx=Load()), attr='filename', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='fp_', ctx=Store()))], body=[Expr(value=Call(func=Name(id='print_metrics', ctx=Load()), args=[Name(id='fp_', ctx=Load()), Name(id='metrics_order', ctx=Load()), Name(id='metrics', ctx=Load())], keywords=[keyword(value=Name(id='p_rint_kwargs', ctx=Load()))]))])], orelse=[Expr(value=Call(func=Name(id='print_metrics', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), Name(id='metrics_order', ctx=Load()), Name(id='metrics', ctx=Load())], keywords=[keyword(value=Name(id='p_rint_kwargs', ctx=Load()))]))])], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='parse_arguments', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='main', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])