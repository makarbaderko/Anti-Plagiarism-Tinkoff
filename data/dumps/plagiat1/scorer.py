Module(body=[Import(names=[alias(name='torch')]), ClassDef(name='DotProductScorerAyKwo', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Co˂mpareΨ tw˞Ĩo̫ʐ ƶeƛmbeddinș?ǵŨhĢs using dßot producΚt.\nĈ\n   #bRnCKLaofAiE\n˱¢ē˦Argsɱ:k\n  ǶŤΩà  di\x9cīst˛ribution: Dist̚rǋibuǏtion usάǏed iͭn the moõȥdel.\n\nInƞ\u0379puñtĲs:\n   ŧĐ -̀ parameterʕsÊʘg1: First ígĴroupʑ oʙŞf dΚi˻'\x82strib0uΓĴĆtionϬs witΉİh sh̽apģȉǙǽeǐ ˩(.ʭ..ȥ, K).\n   ͟ - Øpar[ƇaĘmetƳers2Ÿ:Ƅ S̮eco.n\x9cͪd gƨ˚rou˅ɊpΤ of Ůdƹistή¼Ɍri˄̚butʁɻioʢns\u0378 οwitĂh s͎hapeƁ (..ϊ., Kț).\n\nOuʼtpĠutsɹ:Ƅ\nǸ  -Ƙ ȕscoȋr\x95esCǶ:Ɍδ Simˏi˧Ϗlaͮr̫itiȆÝǼeŘsɰ withˡ sehʹap̳e (ȷ.ŀ..Ɨ).")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='superBhvO', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='embeddings1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='embeddings2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='products', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='embeddings1', ctx=Load()), op=Mult(), right=Name(id='embeddings2', ctx=Load())), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Return(value=Name(id='products', ctx=Load()))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='͢ƲCompute useδfulǻȝĢ Ł\u0379statņi\x83sĜtjÛics fãoƽ̞rɥ* loåƉǾ̽gůϤɧgĭing\x94.\n\nɠ˥ReȻtu϶rȿːǃns:\nʩɇ ͨ   D͚ƞiķΛctɥ¾ioɏn\u038bϱary with̠ f̳l>oa˳tinõƑgÏ-pϭointz statœisˡΡtiƻƌcs5 vJʐǅǤalȍuɎenƇsʨ.')), Return(value=Dict(keys=[], values=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='CosineScorer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="CƊ˅oΎ¹mpareʙ˾ ƞǅtwʡ̞ɶoĪ͐βǩȭ oǐembeddiϧnŻgʫ\x92s ˬu\x99cƕsiΕɂȗn[g² c\u0379osinǆe¤ sȯǉ̀ǆimil\x9e;aǴZrς\x87i&tɵy.ʹ\nį\n̓Aʡʝrgs:\nĴ ɠ   ĄdistrΐibȆuȸȲtiǄoǹn: ĆDisʺáȕ͠ƩİȌt÷ĠrØibzÇƝut)ƊŒϭĉ˵ioϋnǛ ȍȅİɀ\x8dʣŋɊuʭs͗eϵ'd in\x84 ȚϓƄtheą ±m˾͋oȉdˌϔĀÑewlϐ.\n\n\nInɩputˇs:\n  Ό ʯ \x94- ȏpľϘϕa˞͟˰ramȐǍʖetΔeðrs1ŉɌȞ: FirΫsj\x9ftǯ g³roup oϊȼf dʼij§strib˯ǡuβþϹtȆioȮKns wiɆϬƆǌƬßthƞǲ ϺΩǶshˏa;ήpØeͪ (Ż.8..,Eĳ K)ϡɘɝ.\n  ù  Ö-[ ͅǔͧp̢aȪramǆetϲ̏̃ĚƮers2: SʟăɦfͺćecƥȩÖŦ3onͿ͉d ȳƉgrΘ]ϭoupβ˦ň oʗf diɢȒsƚtʋriƍbƔutȕϠioł\u0381ns Ƀˬw\x80͖itģh sh^ȉŢaʸpʋe\x9f (γ.·ʅƹ.\xa0ȓ.,\x92˧ȫ KY½©)ͅ.ă\n   \n·Ϯ\n   \nOuƃĉɍtputő&s:Ǔ\nϴǡĿČ   ͙͉Ψƌ ĝǭĳâ- ȐʲÕsƍcoʱrŒeΡsà\x9bͶ:ɷ ˏȹ̒\u0381S͎iƎmό̚ȬilůaʤΆ͎rxFiŧties ͉with ƩshȜaȼpǄe (.Ēï.\x90.).Ĺ")), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='embeddings1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[])], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='embeddings2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='cosines', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='embeddings1', ctx=Load()), op=Mult(), right=Name(id='embeddings2', ctx=Load())), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Return(value=Name(id='cosines', ctx=Load()))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  m̘̂       ȼ̧΄Ƌ  ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='superBhvO', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='ExpectedCosineScorer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='SAMPLE_SIZE', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='BATCH_SIZE', ctx=Store())], value=Constant(value=128)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ϳȺțά Ɩ   * ˍ d Ȧ    ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='superBhvO', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='̈́  ϣϗ   į͞  Γ   ȚĠ ! ')), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load())])]), body=[Assign(targets=[Name(id='batch_size', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='scores', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='r', ctx=Load()), args=[Constant(value=0), Name(id='batch_size', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='scores', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='self', ctx=Load()), args=[Subscript(value=Name(id='parameters1', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load()))), ctx=Load()), Subscript(value=Name(id='parameters2', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load()))), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Name(id='scores', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='shape1', ctx=Store())], value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='parameters1', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='SAMPLE_SIZE', ctx=Load()), Constant(value=1)], ctx=Load()))), Assign(targets=[Name(id='shape2', ctx=Store())], value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='parameters2', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Constant(value=1), Attribute(value=Name(id='self', ctx=Load()), attr='SAMPLE_SIZE', ctx=Load())], ctx=Load()))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='shape1', ctx=Load()), Name(id='shape2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='embeddings1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters1', ctx=Load()), Name(id='shape1', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='embeddings2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters2', ctx=Load()), Name(id='shape2', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='cosines', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='embeddings1', ctx=Load()), op=Mult(), right=Name(id='embeddings2', ctx=Load())), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='cosines', ctx=Load()), attr='mean', ctx=Load()), args=[Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=2))], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[], values=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='NegativeL2Scorer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Comp©aʄrϔeϠ ΤtwdǟoňϿ eêmƷbeddingŐsg uϫs@αiǤȠ˵Uɹ̪ϋnºg Ʊǽsximɚ>ŗ̰ilʱa˃rity ͙baˮsued ɹo͙n eucl\x99ͮ,id¤eΝaƎn d\x99istǁaIÕπľnűcō˦e.\nɭ\nArg̒s̕ʄ:Ă\n \n   \n qO  ʙʅ dəϦistʨžΡrʏibuȁʢtʣsĆȥ\x9aionè: DɰisȦtribūu˓tion̖ ˃ͪuseľd ʜinlÆʜĬ thʮe ˽mʶǋºζ²odeȴʻµl.\n\n \nûInɘpɇuts:v\n  \n  »ý\\- parεameǌteɟ˨rs̃1:ϼ É\u0381First˼ ŋgrŴou˳͝ÚpͰξ «oƮΧ̞f̃ ƨdisśϿ̣tόr͆ifŖΎbutionˉs˵ wit@\u0382hΙ sǱhapŐϴeϨ̵ ˣ(˴Η.ϳ..\x96͓,ͥȫ KϿ).\n ˙ ς  -Ĺ par̸amĴeʎπterϜϚs2ǙV͗: ϦSecoÓnBd grƥoupϠ ofϊ dɇȾis\x9btribǸĂuĎtions ˂ẘith ɺshap\u0382ãe (..¥., K̢ɳ).ǯ\n\nƩOuĸtɉvpuċts:ã^\n ̆   - sϧʖΩ˕cͬoϨres̳: ʱSɓimʅila˅rʋΰitińes{ ϡ¥wΞith µηshaͮpɷeS Ư(..ɩȵ.)̧.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='superBhvO', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='embeddings1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='embeddings2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='distances', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='square', ctx=Load()), args=[BinOp(left=Name(id='embeddings1', ctx=Load()), op=Sub(), right=Name(id='embeddings2', ctx=Load()))], keywords=[]), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Return(value=UnaryOp(op=USub(), operand=Name(id='distances', ctx=Load())))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Cʪ̩̕ompƄ ͷȷuȂtɖe͋˵ uŕsefǀul statisǎtiɤcs foƿΐr loggingÄ.\n  \n\nReʸturnsθ:¶Gɍ̒\nʇȄ  Β  DictiǺonɻary wiǨΟthʺ fīlȭoaɡtiDngů-poinȗt stŭͩatƼisticsȕ̓ ěvalues.')), Return(value=Dict(keys=[], values=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='MutualLikelihoodScorerplkFd', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ϐCoØmpaĖ̒ređ ʥt\u0380wo emĺbedǣΛdÓ΅iĬngs˰ usiĉng MLȡS.¾\n9\n   \n   \nArgs:\n   \n  \n  Ϟ  dist\u0382ributionƂ\x80: D\x89¹i¦ʸȾstribu͋ƶtioɈŴn uŌŮ̧s¾ed iɽn t\u03a2he \x88modeÐl.\n\n   \nInputČs:\n  - paȭrɏame\u038dterĿȋƚs1Ȭ:Ǽȇ First Ϩgroupȓ͍̂ ońf distr·ibȚutionƓ˓s ÎwɎith ǬsƵhape (..., K).\n  é  C-ȕ ʚƦparaƅmȼeμtersϕ2éϗ¡ʀ:Ĉ SecondȩȎ group oŹfĢ °diȡstriÛbutϾionsȼ withȻ s̔ϋ̿ƕhape (ɛ..Ț., K).#KiJrG\n\něOuƹtŬ͑pŏuts:\n Ŝ  ̕ - ʙscǲ¼oreś: Si̮mͩilΌar)Ƒ˃it́iʏƤes with sh˵˺ape (ł.Ĥ..).')), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='superBhvO', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='υ ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logmls', ctx=Load()), args=[Name(id='parameters1', ctx=Load()), Name(id='parameters2', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='HIBSCORER', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Compare two embeddings using ɸexpectati\x87on of L2 sigmoid with trainable s^cale and bias.\n\nSΐcorerƅ isǑ used by HIB: https://aúrxiv.org/pdf/1810.00319.pdf\n  \n\nArgs:\n  distribution\x9d: Di͋stķribution uŚΦsed in ÿthe model.\n\n   \n  \nInputs:ʢ̓Ò\n  - ɜparameters1: Firsɮt group of dis͐tri#butions with shape (...ͫ, K).\n  - param"eters2: Second groͿšup of distributȉon͊s with shape (..., K).\n̍\nOutputsȼ:\n  - scorʹe\x91s: Similžarities with shape (...).')), Assign(targets=[Name(id='num_samples', ctx=Store())], value=Constant(value=8)), Assign(targets=[Name(id='BATCH_SIZE', ctx=Store())], value=Constant(value=128)), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load())])]), body=[Assign(targets=[Name(id='batch_size', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='scores', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='r', ctx=Load()), args=[Constant(value=0), Name(id='batch_size', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='scores', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='self', ctx=Load()), args=[Subscript(value=Name(id='parameters1', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load()))), ctx=Load()), Subscript(value=Name(id='parameters2', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load()))), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Name(id='scores', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='samples1', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters1', ctx=Load()), BinOp(left=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='parameters1', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='NUM_SAMPLES', ctx=Load())], ctx=Load()))], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='samples2', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters2', ctx=Load()), BinOp(left=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='parameters2', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='NUM_SAMPLES', ctx=Load())], ctx=Load()))], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='norm1sq', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='samples1', ctx=Load()), op=Pow(), right=Constant(value=2)), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='norm2sq', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='samples2', ctx=Load()), op=Pow(), right=Constant(value=2)), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='dot', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='matmul', ctx=Load()), args=[Name(id='samples1', ctx=Load()), Call(func=Attribute(value=Name(id='samples2', ctx=Load()), attr='transpose', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])], keywords=[])), Assign(targets=[Name(id='distances', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='norm1sq', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='norm2sq', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), op=Sub(), right=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='dot', ctx=Load()))), attr='sqrt', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='scores', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='sigmoid', ctx=Load()), args=[BinOp(left=BinOp(left=UnaryOp(op=USub(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='scale', ctx=Load())), op=Mult(), right=Name(id='distances', ctx=Load())), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()))], keywords=[]), attr='mean', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=2))], ctx=Load()))])), Return(value=Name(id='scores', ctx=Load()))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[Constant(value='scorer_scale'), Constant(value='scorer_bias')], values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='scale', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ˥ͮ ƭ  ƚ \x96  ŎΒ  η')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='superBhvO', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scale', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='ones', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])