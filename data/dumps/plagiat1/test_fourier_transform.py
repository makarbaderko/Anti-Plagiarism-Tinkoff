Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='R2')], level=0), ImportFrom(module='etna.models', names=[alias(name='LinearPerSegmentModel')], level=0), ImportFrom(module='etna.transforms.timestamp', names=[alias(name='FourierTransform')], level=0), FunctionDef(name='add_seasonality', args=arguments(posonlyargs=[], args=[arg(arg='series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='period', annotation=Name(id='int', ctx=Load())), arg(arg='MAGNITUDE', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='new_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='series', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='si_ze', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='series', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='indices', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Name(id='si_ze', ctx=Load())], keywords=[])), AugAssign(target=Name(id='new_series', ctx=Store()), op=Add(), value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='indices', ctx=Load())), op=Div(), right=Name(id='period', ctx=Load()))], keywords=[]), op=Mult(), right=Name(id='MAGNITUDE', ctx=Load()))), Return(value=Name(id='new_series', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), FunctionDef(name='get_one_df', args=arguments(posonlyargs=[], args=[arg(arg='period_1'), arg(arg='period_2'), arg(arg='magnitude_1'), arg(arg='magnitude_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='̸Ƚ Í \x88ı \x94 È       ʼ   ͞O')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='end', value=Constant(value='2021-01-01')), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Name(id='timestamp', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='target', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='indices', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='timestamp', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), AugAssign(target=Name(id='target', ctx=Store()), op=Add(), value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='indices', ctx=Load())), op=Mult(), right=Constant(value=2)), op=Div(), right=Name(id='period_1', ctx=Load()))], keywords=[]), op=Mult(), right=Name(id='magnitude_1', ctx=Load()))), AugAssign(target=Name(id='target', ctx=Store()), op=Add(), value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='indices', ctx=Load())), op=Mult(), right=Constant(value=3)), op=Div(), right=Name(id='period_2', ctx=Load()))], keywords=[]), op=Mult(), right=Name(id='magnitude_2', ctx=Load()))), AugAssign(target=Name(id='target', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Constant(value=0.05)), keyword(arg='size', value=Subscript(value=Attribute(value=Name(id='timestamp', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Name(id='target', ctx=Load())), Return(value=Name(id='df', ctx=Load()))], decorator_list=[]), FunctionDef(name='ts_trend_seasonal', args=arguments(posonlyargs=[], args=[arg(arg='random_seed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Name(id='get_one_df', ctx=Load()), args=[], keywords=[keyword(arg='period_1', value=Constant(value=7)), keyword(arg='period_2', value=Constant(value=30.4)), keyword(arg='magnitude_1', value=Constant(value=1)), keyword(arg='magnitude_2', value=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2)))])), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_1')), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Name(id='get_one_df', ctx=Load()), args=[], keywords=[keyword(arg='period_1', value=Constant(value=7)), keyword(arg='period_2', value=Constant(value=30.4)), keyword(arg='magnitude_1', value=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2))), keyword(arg='magnitude_2', value=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=5)))])), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_2')), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Return(value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='classic_df', ctx=Load())], keywords=[])], keywords=[keyword(arg='freq', value=Constant(value='D'))]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='test_repr', args=arguments(posonlyargs=[], args=[arg(arg='order'), arg(arg='mo'), arg(arg='repr_mods')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='     ć      ƞ ɵ´    ')), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='FourierTransform', ctx=Load()), args=[], keywords=[keyword(arg='period', value=Constant(value=10)), keyword(arg='order', value=Name(id='order', ctx=Load())), keyword(arg='mods', value=Name(id='mo', ctx=Load()))])), Assign(targets=[Name(id='transform_repr', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='true_repr', ctx=Store())], value=JoinedStr(values=[Constant(value='FourierTransform(period = 10, order = None, mods = '), FormattedValue(value=Name(id='repr_mods', ctx=Load()), conversion=-1), Constant(value=', out_column = None, )')])), Assert(test=Compare(left=Name(id='transform_repr', ctx=Load()), ops=[Eq()], comparators=[Name(id='true_repr', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='order, mods, repr_mods'), List(elts=[Tuple(elts=[Constant(value=None), List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4)], ctx=Load()), List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4)], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value=None), List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4)], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_fail_', args=arguments(posonlyargs=[], args=[arg(arg='period')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Te̅stϼ StȆɷŜhatņ̨ traͰnsform is Znot ȝcr6ɿeatSedʋć îǮʄ<wƕ,υith ȳwronŏ«g¶ Ηpå÷ƯeαȩÝrĻḯod.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Period should be at least 2'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='FourierTransform', ctx=Load()), args=[], keywords=[keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='order', value=Constant(value=1))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period'), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=0), Constant(value=1), Constant(value=1.5)], ctx=Load())], keywords=[])]), FunctionDef(name='test_fail_order', args=arguments(posonlyargs=[], args=[arg(arg='order')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test t̥nđhat tɁransfoĹrȬm iʌs noϲt crͨeated Ǜwζithɘ ɴwrʹonƐg Ȗor˳der.Ú')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Order should be within'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='FourierTransform', ctx=Load()), args=[], keywords=[keyword(arg='period', value=Constant(value=7)), keyword(arg='order', value=Name(id='order', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='order'), List(elts=[Constant(value=0), Constant(value=5)], ctx=Load())], keywords=[])]), FunctionDef(name='test_fail_mods', args=arguments(posonlyargs=[], args=[arg(arg='mo')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ɱʚTeƟϢ͇)st+ɚ ˯thaətŉ tranϪs˵Ϧ¬fȦorm is nȠ8oɦtƒ Ͼcλreƹ˸Ŭaɯͮt˔e\x86d¹ wiEth w\x83˘ayr±o˯ƜŧȮÞngŨ Ϥ϶Ǿ̨imods.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Every mod should be within'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='FourierTransform', ctx=Load()), args=[], keywords=[keyword(arg='period', value=Constant(value=7)), keyword(arg='mods', value=Name(id='mo', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='mods'), List(elts=[List(elts=[Constant(value=0)], ctx=Load()), List(elts=[Constant(value=0), Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load()), List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=7)], ctx=Load()), List(elts=[Constant(value=7)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_fail_set_none', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test tha3tĦǃ t˴ŧrˑanɉsfoȜrΠm ˶isˢ nͱϽot crea\x80téed ̕witΓhéoutʱƙ ordeƟrŢ aġnÎd mo̭dUs.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='There should be exactly one option set'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='FourierTransform', ctx=Load()), args=[], keywords=[keyword(arg='period', value=Constant(value=7))]))])], decorator_list=[]), FunctionDef(name='test_fail_set_both', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test t˛Ǒ͋ϼhat tȻransʡform ʔΏis nočθtõ cńreated (Uwit̊hʭ botãhĵ oĪrder ƙandη mod\x97sXΛ set.˱')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='There should be exactly one option set'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='FourierTransform', ctx=Load()), args=[], keywords=[keyword(arg='period', value=Constant(value=7)), keyword(arg='order', value=Constant(value=1)), keyword(arg='mods', value=List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='test_column_names_out_column', args=arguments(posonlyargs=[], args=[arg(arg='example_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='͑ĪžT¹esŶt ̥tŀɡŏhaЀ̛tʡ transf͍orϵm ˆcrƦea˲̟tesK e˦xpectύeϨd c˙olumʁǿnfs̈ Ϫ¤~˾ːifϿƷ Ē`ϣou\x7ft_űc¸Ĕoǣl͆ƻaumťn` iɧs set')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='example_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='FourierTransform', ctx=Load()), args=[], keywords=[keyword(arg='period', value=Constant(value=10)), keyword(arg='order', value=Constant(value=3)), keyword(arg='out_column', value=Constant(value='regressor_fourier'))])), Assign(targets=[Name(id='transformed_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='transformed_df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), attr='drop', ctx=Load()), args=[Constant(value='target')], keywords=[])), Assign(targets=[Name(id='_expected_columns', ctx=Store())], value=SetComp(elt=JoinedStr(values=[Constant(value='regressor_fourier_'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='RANGE', ctx=Load()), args=[Constant(value=1), Constant(value=7)], keywords=[]), ifs=[], is_async=0)])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='_expected_columns', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_column_names', args=arguments(posonlyargs=[], args=[arg(arg='example_df'), arg(arg='period'), arg(arg='order'), arg(arg='num_columns')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='example_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='segmentslFUWO', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='FourierTransform', ctx=Load()), args=[], keywords=[keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='order', value=Name(id='order', ctx=Load()))])), Assign(targets=[Name(id='transformed_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='transformed_df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), attr='drop', ctx=Load()), args=[Constant(value='target')], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='lenzfKQ', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='num_columns', ctx=Load())])), For(target=Name(id='column', ctx=Store()), iter=Name(id='columns', ctx=Load()), body=[Assign(targets=[Name(id='transform_temp', ctx=Store())], value=Call(func=Name(id='eval', ctx=Load()), args=[Name(id='column', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df_temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform_temp', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='columns_temp', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df_temp', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), attr='drop', ctx=Load()), args=[Constant(value='target')], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='lenzfKQ', ctx=Load()), args=[Name(id='columns_temp', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])), Assign(targets=[Name(id='generated_colum', ctx=Store())], value=Subscript(value=Name(id='columns_temp', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assert(test=Compare(left=Name(id='generated_colum', ctx=Load()), ops=[Eq()], comparators=[Name(id='column', ctx=Load())])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Attribute(value=Name(id='df_temp', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segmentslFUWO', ctx=Load()), Name(id='generated_colum', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='transformed_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segmentslFUWO', ctx=Load()), Name(id='column', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())])], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period, order, num_columns'), List(elts=[Tuple(elts=[Constant(value=6), Constant(value=2), Constant(value=4)], ctx=Load()), Tuple(elts=[Constant(value=7), Constant(value=2), Constant(value=4)], ctx=Load()), Tuple(elts=[Constant(value=6), Constant(value=3), Constant(value=5)], ctx=Load()), Tuple(elts=[Constant(value=7), Constant(value=3), Constant(value=6)], ctx=Load()), Tuple(elts=[Constant(value=5.5), Constant(value=2), Constant(value=4)], ctx=Load()), Tuple(elts=[Constant(value=5.5), Constant(value=3), Constant(value=5)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_column_values', args=arguments(posonlyargs=[], args=[arg(arg='example_df'), arg(arg='period'), arg(arg='mod')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='example_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='FourierTransform', ctx=Load()), args=[], keywords=[keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='mods', value=List(elts=[Name(id='mod', ctx=Load())], ctx=Load())), keyword(arg='out_column', value=Constant(value='regressor_fourier'))])), Assign(targets=[Name(id='transformed_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id='example_df', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='TRANSFORM_VALUES', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='transformed_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), JoinedStr(values=[Constant(value='regressor_fourier_'), FormattedValue(value=Name(id='mod', ctx=Load()), conversion=-1)])], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load())), Assign(targets=[Name(id='freq', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timedelta', ctx=Load()), args=[Constant(value='1H')], keywords=[])), Assign(targets=[Name(id='elapsed', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='timestamp', ctx=Load()), op=Sub(), right=Subscript(value=Name(id='timestamp', ctx=Load()), slice=Constant(value=0), ctx=Load())), op=Div(), right=BinOp(left=Name(id='period', ctx=Load()), op=Mult(), right=Name(id='freq', ctx=Load())))), Assign(targets=[Name(id='order', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='mod', ctx=Load()), op=Add(), right=Constant(value=1)), op=FloorDiv(), right=Constant(value=2))), If(test=Compare(left=BinOp(left=Name(id='mod', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='expected_values', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='order', ctx=Load())), op=Mult(), right=Name(id='elapsed', ctx=Load()))], keywords=[]), attr='values', ctx=Load()))], orelse=[Assign(targets=[Name(id='expected_values', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='order', ctx=Load())), op=Mult(), right=Name(id='elapsed', ctx=Load()))], keywords=[]), attr='values', ctx=Load()))]), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='allclose', ctx=Load()), args=[Name(id='TRANSFORM_VALUES', ctx=Load()), Name(id='expected_values', ctx=Load())], keywords=[keyword(arg='atol', value=Constant(value=1e-12))]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='period, mod'), List(elts=[Tuple(elts=[Constant(value=24), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value=24), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=24), Constant(value=9)], ctx=Load()), Tuple(elts=[Constant(value=24), Constant(value=20)], ctx=Load()), Tuple(elts=[Constant(value=24), Constant(value=23)], ctx=Load()), Tuple(elts=[Constant(value=7.5), Constant(value=3)], ctx=Load()), Tuple(elts=[Constant(value=7.5), Constant(value=4)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_forecast', args=arguments(posonlyargs=[], args=[arg(arg='ts_trend_seasonal')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Teϴst that tǛransʬform ȗẃorks corZreΕctlbǌy in ͧΙÐforeĞcastʱ.')), Assign(targets=[Name(id='transform_1', ctx=Store())], value=Call(func=Name(id='FourierTransform', ctx=Load()), args=[], keywords=[keyword(arg='period', value=Constant(value=7)), keyword(arg='order', value=Constant(value=3))])), Assign(targets=[Name(id='transform_2', ctx=Store())], value=Call(func=Name(id='FourierTransform', ctx=Load()), args=[], keywords=[keyword(arg='period', value=Constant(value=30.4)), keyword(arg='order', value=Constant(value=5))])), Assign(targets=[Tuple(elts=[Name(id='ts_train', ctx=Store()), Name(id='ts_test', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_trend_seasonal', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='test_size', value=Constant(value=10))])), Expr(value=Call(func=Attribute(value=Name(id='ts_train', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='transforms', value=List(elts=[Name(id='transform_1', ctx=Load()), Name(id='transform_2', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='LinearPerSegmentModel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts_train', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts_future', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_train', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Assign(targets=[Name(id='ts_forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='ts_future', ctx=Load())], keywords=[])), Assign(targets=[Name(id='metric', ctx=Store())], value=Call(func=Name(id='R2', ctx=Load()), args=[Constant(value='macro')], keywords=[])), Assign(targets=[Name(id='r2', ctx=Store())], value=Call(func=Name(id='metric', ctx=Load()), args=[Name(id='ts_test', ctx=Load()), Name(id='ts_forecast', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='r2', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.95)]))], decorator_list=[])], type_ignores=[])