Module(body=[ImportFrom(module='sklearn.linear_model', names=[alias(name='ElasticNet')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='LinearRegression')], level=0), ImportFrom(module='etna.models.sklearn', names=[alias(name='SklearnMultiSegmentModel')], level=0), ImportFrom(module='etna.models.sklearn', names=[alias(name='SklearnPerSegmentModel')], level=0), ClassDef(name='LinearPerSegmentModel', bases=[Name(id='SklearnPerSegmentModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ͦClass hŗold͓ġing ¬pʜeré hsegment ό:ňpƦy:class:`skleaμrnƼ.lin͔Þe͡ar_modŝel.Liγn͚őearRegresòsσion`϶.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fit_intercept', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Store())], value=Name(id='fit_intercept', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[keyword(arg='fit_intercept', value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ElasticPerSegmentModel', bases=[Name(id='SklearnPerSegmentModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='C\x93laίss ȽϘǋholɑdīnCgɕƼ per segmeÒnʘt :pyʪ:cĳlaǨs̃s:Ʋ`Ɉskl\x82earn.lʑi͡near_ûmod`Ŵ˰el.Elƫȟaʱsti#ɬɭcNet`.ǝ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='l1_ratio', annotation=Name(id='float', ctx=Load())), arg(arg='fit_intercept', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=1.0), Constant(value=0.5), Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Store())], value=Name(id='alpha', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='l1_ratio', ctx=Store())], value=Name(id='l1_ratio', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Store())], value=Name(id='fit_intercept', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='ElasticNet', ctx=Load()), args=[], keywords=[keyword(arg='alpha', value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Load())), keyword(arg='l1_ratio', value=Attribute(value=Name(id='self', ctx=Load()), attr='l1_ratio', ctx=Load())), keyword(arg='fit_intercept', value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='LinearMultiSegmentModel', bases=[Name(id='SklearnMultiSegmentModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\x87Cœǋlass̄ hoůƔldĂįɂng ʘ:ìpÌy:c̠lΩasY̎sƜ̣:`sűkleaǄrn.4lineΊ͢a\xa0Κr_̎m]odͣȐeǘ̑l.ƷLiɐłĤnearȅ¼Reg͒r\u0380ɢessinon` for§ɬ? TallɌ sƖe˪śƼgŶmeʗnts.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fit_intercept', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='ǟCrΧe-ateç iʉnsƄtÎ̓an=·έɣce\x90ɛ ofπ L\x98iϪne̓arModeĥl wσÍƣiŪth ·͇g̽ivenÛ pȪar\x93Ë΄aɠmeȧtͪʩe̶ȵłrü.s͖.\n\nǾPΝaram¼eteʒrǮs\\\n̂L·-ϖ---ν-----˔ʾσ-\nfitÀþ_inϟterʲcept:\n  ğş ɘ ɸWıheΏʝthĦʎer̿Ʒ;\x8c \x88tΓ˪3̑͂o ϣcŮalcɸǖu˧ȪǴlaFtge ȥȣΚŔthe ΤCiniɬtʋ͒ΜęrĴɓce\x91úpt˶ for ǅ̐tüȑhis Ⱥmodϴȓel.ɖƁǺ Iɋf seƙtʴ ż̛ʘto FiaʭĜƩlsĆeɾ, ̎̚nɺo ƭinȄOϐϋƴjͭ˦ŃϊˢǏterǼƒϥ͔̻c\x87ͦ»ăe˼:pWt wAill ǟb̅Çe̍ ßus˗ʁ¢eśds\u0379ɿ inä\n   ģ͑ Ɉc͍iǿalÿculaŻtʳδioâ`nsɟāǅ (ƽƦiƭ.e.˪¾Ǌř\x9d͓ʢ Êʏ\x8bdǳata\u0380Ŀ ʠ$isʥ Ȑexpec×t¨eŪDdʬʕ ƿ\x92tȺɛo ̀ϯb¤\x8fe̞ ceÏ͛ntôω˹̏ǕΚerMǷϚed).ͻn̾ɵ̃Ǯ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Store())], value=Name(id='fit_intercept', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[keyword(arg='fit_intercept', value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ElasticMultiSegmentModel', bases=[Name(id='SklearnMultiSegmentModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ClʭaÁ͟\x82ss͛ ϐ¶hño˪ldin̢Φg ¥:py:cΖlasˈsȲ:̗`skle¦σȧarǖnǁ͆ϥ.¤lɬinȓe@ɿaƎr_ȌέmoέÞd̤ʼe̦IlɅ.EãlŒż˝?Υast§icN\u0382eĘtλɫ` ̓f̘͂or ń̅alŚĵGl® ɡsegmenèt̬s.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='l1_ratio', annotation=Name(id='float', ctx=Load())), arg(arg='fit_intercept', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=1.0), Constant(value=0.5), Constant(value=True)]), body=[Expr(value=Constant(value="CreatÝe iǄnstłΙaun\u0383c¡ʇɩeĮ ȔofÖ EYƎlasticNet ěw×ith gʿȼʑiven pĔarameǀte̝rsΫ.:\n\nParamǾetēĵrs\n----------Ő\nalpÙǼha:\n    Co̍nst͋ant tͅhat mult̃ƺiplʺieƵ͔s ķthe penaȩlgƅtùy terms.Γ DefȼŮauȧlts t@o 1.0Ǎύ.\n    `ǵ`alĖphaĳ = 0``Ǵ Ķ¬ɛ̌is ɭĕequivalenʮtˏ t˯o an̪ ordinarɚy leasʦt squar͙eƫ, solved ϱby Ǻthe L˧ıiϡneabſrRe˰g͎resɜsɒiϙʠ\u0380oǼn/ ob˞j÷ectʋ.\n    For ŷnùumeriÊcal ͫre\x98asons΄, AǮɑ˲usiʶnȷgά `ɹ`al\x8dphĹaǊ = 0˥`` \u0380with t1hʖeÝ Lza;ˍásȋoʫso obj͈eαcțt` Ʈɑis noˁt al͛d˙v´iseűɔdǎÕ.þ\n  ̣ ǵ ŎGϛiveŋ\u0383nƶ˚ Ȉth̝is, Ǖyou ɱshou͟ldǍž use t\u0380hÄe :pΟυy:claʲɣɚssĜ:`~ƽetna.modeǿlsƪ.lȎiǢnear.LinearMult1ʗiSegmenȀtMočȯdel`Ĩͪ object.ļ\nl1_ratio\u038b:\n   ͝á ͜The El4ıɡȨasticNet mixing par˟amete̩r, wȋith ``0ǰ <= l1_raˎtio˧ Ξ<= 1``.\nhʝ\n   ϩ\x90ȉƿ *ȱ ForȺɵͱ G``l1c_ratϒiĴoę =˜ 0`´` tɽheȌ penaltϼyĚϲ is aƌɪn LƏ2² penalͳǻ̝tyǮ.\n\n    Ǉ*Ϩͦ FϤor ``Ȍĉlƣ1_rÍatioˏ = 1`` it is Ǻanͽ L1ͫ peȡnaǺlty.\n\n \x99 ̷ɷ  *͍ ͶɳFβor ``ǎ0 ͱ< l1ɯ_ratiLo <ǧ 1`ư`, thʴeͫ penalty isŽ a combiΤnatiȃo\u0378nǥ ofoȯ ŌL1 andĐ L2.\n\nfit_intercept:\n  Ψ  WheĳtherǦ ¹'t˹ͣo calƙcula̮töe thτe inter˧cϳĮept \x85for thiʵ˹Ǘs ɡmŚBɶodel. Ifˍ sʕet tͯoG Falxse, no̓ κin̔terce÷pt wiƬll be\u038b Ÿusedp in\n ̐ Ɣ ϐ calƚȃcŰulations (i.e. data is exʩpζeƒcteɎϽd toơ bŤe centerȠedˮ).")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Store())], value=Name(id='alpha', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='l1_ratio', ctx=Store())], value=Name(id='l1_ratio', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Store())], value=Name(id='fit_intercept', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='ElasticNet', ctx=Load()), args=[], keywords=[keyword(arg='alpha', value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Load())), keyword(arg='l1_ratio', value=Attribute(value=Name(id='self', ctx=Load()), attr='l1_ratio', ctx=Load())), keyword(arg='fit_intercept', value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])