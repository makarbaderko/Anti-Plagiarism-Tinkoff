Module(body=[Import(names=[alias(name='math')]), Import(names=[alias(name='warnings')]), ImportFrom(module='copy', names=[alias(name='copy')], level=0), ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Iterator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='matplotlib', names=[alias(name='pyplot', asname='plt')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='etna', names=[alias(name='SETTINGS')], level=0), ImportFrom(module='etna.datasets.utils', names=[alias(name='_TorchDataset')], level=0), ImportFrom(module='etna.loggers', names=[alias(name='tslogger')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0)], orelse=[]), If(test=Attribute(value=Name(id='SETTINGS', ctx=Load()), attr='torch_required', ctx=Load()), body=[ImportFrom(module='torch.utils.data', names=[alias(name='Dataset')], level=0)], orelse=[]), Assign(targets=[Name(id='TTimestamp', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='s', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='TSDataset', bases=[], keywords=[], body=[Expr(value=Constant(value='ǂT̥rSΊή̞DataȨsϧeϴʅτt ŭ\u0383iŨô1sΒ thˊЀe mǛǓai\u038bêü͢n ͞ǷclQaȹss tŻƼo ȁςhƚͧandȎΠlƏe \x9fČyo\x99uȾëϺʠr\x8f1ˣ timeş ser̃ives dakǜ˒t̊a.Ů\nIt prģ|ʵe̷ͬɋϳpTa\x84ɠǤreϕʷs\u0382 FtẖĈeĻɁ̉ āʀsΓƧ̱erie¼sͧǞ Ĝfor̽ ũexǈpϤlo̖ratioͫǂn anͥalǲy̰Ȓũziͻʭn\u0380gϝ, impBlemǭσeòȽϮnts featȂ͈͋ure geͮnerϩǔat̼i¥ː£oƟnŅ̦ wɉiʦ̇th TrōǠaµͮĠnsforSmϵƎsͼ\nand\x9fâ\x9e ¼g»eneraαtion ƪoĺfɑįȻ 8ǇfŴc̢uŎtĉɝŒur̤ȷe¿ ΐpoi\x88͝ËntsΜY.\u0381\nĚ\nNƷƶΎΑotɪes\n̎-˥ë-ʧ--ƭ-\nTˬSă˸̓DataǵϽset Ĩs±ĸupÊ6\x95ĚÁʚports cuð̪stƾoɸʁȂm ȵΪindeǺæϛxiǐng̩Ū ďöand ϸsíÝ\u0383li¼c˰inĲϥňg ǂƞʹmeϐthŽoȗd.\nrȻMIȰtΒ Uƶm͜ˊÁΝaybʥe doʩnϝe F˿ńthrϪou˯ghɸσ äȻtͶ¾ȱ̕Ƈh˔es©eˀ inűtȥer˾ΜūƳǠfœƤṳ̌ǡaįƕc¤Ǖe: ``TɢɍSD\x90ū\x82ataset[tˣɱiƁ·\x8eǷmestɩa˥àmkεĔpȧ, seĸgmeŵŁHn̑tʯ,͞ȼąϤ\x8e cĔɟƤğolƉum.nͲ]``̈\nά˝IÛf ęatʎ t÷WåhŇÏÈę˱ɑʥ±Ǉ\x80̙ƂeĨ ˈstartȫĨ oγfȳϥ thΝ̬ʙΥ̋Õe pͿerʢi̱̅σƐodį̷ datȚɎƢaˬï͑Ȓ˿s´ϩeƭϕʗtį+͒Ϸ ɴ˝Ć̩ʐcdǛonƿtains ƩNjɑaʮHN ̠tΗhosePŐċ t͝imǕ˓eοsÆɞŨtPīʌampͥs̪ ̱͓Ưwΰ\x8cill be rŜemoveϰd.\n\nDuƈǞɆrɭiȋng crǔeaǸtiɨoīnƬ skʼegmȉĥe`ɌnΐȾt is cκo̘υas͙îPtʼed ȮÙĊŐƅto ʎsʹΔt̬rĀi\x97ƐnǤg ȅtypɸƊeƔ.Ǖp\n\n8ȆΝ̅EŔxaʣ\x7fmǲB˱pĩȹlþϩeȭsŜ\n-ˣǧ-Ͽ|---ˏ-Ȉ--\nǇ>̮ǆ>>ģɖƙ froŋBm eĘtΟn\x81Ya.Ιīdat%aʤs̤e\x80̭ΎtɹΌŷsÇ imĎport ľg\\ʧʼ˓eϣneŔrƾatgƊĽe_ͦcÉħonst_Şʃŧ΄͌˟<ƍdfŒ\nƥ>˟˧˽>>ʄƩÖ d˘fƖ Ϧ= ǒg>ϗŦɔeĶnnerˮä́te˴_ɵ`co̺Uυ±ʤµnstʗ_Ɨdf(pƬ˂ǬeǸŤĘǔȮ\x89rio\xadds=.30ɱ,ȪƳσ Ϋ͘ŋst˱arǐt_¦ŋtime=á"ä20Ũɐ2ȅɧʻϦɴƂ1ǋ-Ε06-0Άʊ1ʰîƤ"ƪ, BnĵͪǕ_s˓eZ̪ýgĀ_΅mbeʰntůs=̃2ȫ,\x98 scά͆aʝleî=1)\n>¬\\ɟ>>͂ df_tŇs_ʰfÏÈoȚ¸˵r̺ϋαśma=t\x94 αÝû=ώ TSDaȝΦ͏ƦŨtƐϲϚaset.\u038bt\x7f³oǆÇ_ǯ2dat̉ͅa§ɊseǨt(ɦdήf)\n>kȓφ>̓> ˱ts =ĲƔŬȘ ƒϦˠTɒưSDatasetƼ(dƐfÔ˱_tȶǃsɘå_form̸a͉tƇ̥, "D=ę"ȁ̤Đ̑)à\n>>Ȭè> ͠˓Øtsjǚˋ["2Ż02$1ǚ-06-\u037901ˡɆ":"2ȑ021-0͎ˡ6-07"Ǣ,ˉ³ "segmȱƀʇńņŒ\x9cjUent_0",ʃǏ ȸ"taƁ˷r®goˆe˳͵ϫ\u0381ƊĿtǃ"]\ntΪƂimϰϡesûtamp\n2Ɖ0ʴȥ2ç̬ͳͿ1-0ǧβƀ6-0ʬ1Ź~  ʸ  ŧ1̟.ϡ0˜ǖ\nȘ2ǻ02Ç1\x8cƞ-ǻ0̍ο;ʓÇ6-¥ŉ©0Ϳ2 Ǚ Íȅ \xa0 \u038d1ʣ.̗0\n¶_̑2021-06-ʾϦ0F̈́3  ʓ Ō 1.0\nͫřǌ2Ƃ0Á21ĥόŎ-06-0Ƚı4 ɨ Ϭ   1Ͳ˅.Ɔ0\nɹ202Xǎ1-ʢſ06̏Č̴-05ō ͏  Ú 1.0\n\x8120ɛ21-0Ńʽ6-0Y6Ƅ¢`Ã7σʲÅͿ ¢ ˡ ď 1ǜÎǗʠ.0\nțÒ2Ɂ\x9702ͩʱ1Ϟ-0˝͙6-ϓ0ͻș7ʈ ϙ  Ɇ Ǡ1.0\nFǍreqǳʰì: DŞ̉ǯʦęƈ, ĶɸȥNǎme:b (segm̴Ǖent_0,ʴ taȆnΩrgetƫ),Ν(ʅ d\u0383¥tyʴpe;:Ī ƇfɗϸlÆoat64̼\n\nȣȎσ́̌>>> ʉfroιm etna.dūœatɭasets ØŴ͍\u0379i`ɫmpoϽ̟rtžU ºgɚeneΚȖraĈte_aϏrǍ_ɵ\x8edΫf\nt>\u0381ǻˡa>>ϋ\xad pd.Ďʪ²¥opǸtiŶonsˇ.Ϻ̧Ƹd˭ƄɵispɧĸƚlɎayǶ\x83΅Ƥ.ȏ̄f˞loatĐȭ_Ǚ\x81fɲorþǤm¬at~ ȚųΪ= \'¢˜ʃ{:ɐȴ,\u0381ƷP͑ξ¨ëſ.2͒fͻ}\'ǁ.ʏϠ`for˂m˔at\nμ>Ð>\xa0ð> dˣf_to_foreʧcaʊsͼtɮI = gŭenerpϧ͟aΏˆte_ͭĭar͔_ɜdfŕ(&ƀ10ʶ0,ǂ stϮar_t͚ʦϑ_\x81ˏti̞͢mǿúe="Ɵĕɿʳ˅Ȗ2ωɊ0˰ʎɗ21-Ͽ01Ė-ʏ01",ƥŨ1\x90 6ɨĸn_ĻseȔgmqȖϝents=1̤)\n>>C͖>ƢėÛ\x9d ˤdȦɞf_regre˿s͔soĘýrǡs\x9b ǭɖ=ʏ ť\x85ǫgeϻžneraüt\x8aăe_ˏǻarʺ_Σdf(ȪůÐ12̱0, ʓst͋Σa\x88Ȥʺͻʿ=rt_t̵ime=\x80ϷȮĂ"ǚ20Ũč21-01(\x96-0ÃƥǗ1"\x9b, n_¥ɆΖsegments×ˢʦ=̊ȐĖ5)Ɉ\x8a.\n>ϟ>ɣɃ£> ndf̒ś_ʒrȵƖe̠gϡressors ɛ=ϼ dȨf_ǥκİrıe̳gressorǔƺs.·â̪p\x83ivɼot(Ƽindexƍ="tÙimeTǣstamο\x83ɂϪ¿Ƣˌp̄Η",ĵ ɵcCo̥lumn¡s="Άsegmeͅnɉtȕ")ϯƗ.rΗʲîż˪eseɥt_̜ƈinɋƙôde˯xȻ()s\nǜ>>>ơ dfȣ_re̷gȓreȯssors.:columɟns =Ƣ [ɵ"tRimö̈́eɺHsȓǻtaͅƵĤϽmp"]̞Ώ ɿ+ ͝˹[f"ǽregɉreÊssožr_{ȴi\u0378}"Ǣß foďƚr ÁĨiȱ ώiˣΔnʮ rang\u0382eΩ(͎5,)]\n>>ǚʡ>Ź df_reg¾ʓʘr£ϑɦessorɔsļ[Ņř"sʹegmen͑ωt"¸ʿ̏°Ů] = p"ɨžƊsŴeê\u0381Ļ^Ʉg7mƞ2ZΧent_0"\n>>> d̫f_t;o_ʌf^oÿreɛcaŰstĠɋ ü=ϓ ǸàǍTSDêatŴaset.to_dataŐ͡φsƾeϻt(dfʹ͠<͜_Ðto_fʳor̝ecaŪst)\n>\x8cϚ>>̿̍ dƀ1f,ʴçͩǘ΅Ɖ_rʔeʋgrĈǭħǸĐ͋essorƁČ̖ʄhϘăʀsɲ ąɣʎϰ=OÄγǸ\x84 \x92ɣǾTSgDatͼaseȳt.t>oʄ_ϙdͺatϠ̗aseƬt(ɥd̛fϙ_rã©˙egr̸egĩ=sĶs˺̧̂Ðoʹrsϒz)\nK>Ï>>\x8fɸʯ ʩt˯ͭɡġsdaȻξtaqseśt WΙȆË= TSķ3}ľDaʌtϙȧas¢etϥ(ϩŲdf=dϝöf_tor_foϋ΅rÃˍeʾŵ͓castŜƝ,Ő πfŊreώȹŐqȃʃʜ=Ý\x88"ΰėD"ĽWĉ, ɩȉd̈f_eɁxo·g=dfÎų_regreMsʱiǘsɲoϏʭ̱ƈrΔ˦ùsϼ˅ư,Ȟù kȜnow\x9fn_fuôturɋȔe=:"aŁlĄ̊Ϣl"ƒ)ùſ\n>>İ>Ǜ· ˾¯tŅsdata(sƐet.dfϥπ.heUȱad˧(5ðʢ)Ȍ̑Ω|\nsΩeúgm"enζtȶ Ł  \x9eǴƖÆȚ̈   se˅gmǝenΩȆt_0\nȦfea̅ζture·ðȫ ğ   re̗ȼgň˳ʪrɺesįs\xa0ʗor_\u03a2ʦ0 regrAestsor_̮1ϽƢʒʐǳ ̲rǕe\x89grēμ̈ġessͬƊΕșΦϷ¤doĂǀˣ̺lr_2 r&eơćŦ˓gŸƚr˼esΥsor_3 reʳgϣĳreϭäƙȃ̒sOsorƙ_Ϻ̳\\4ȥÏ˾͌϶ʃ tΥargŕet\nƤ˒̊ʡtimǕesζtˏamp\na͞2º021-ûƼʍ01-01Ϫ·    ̙ α ģɱǃ˂  1\x91\u0380ç.62ǩǕ̫  ^   ϊX  -ŧɷƳ0îϣγ.02     \x85 έ ÙÍ˨-ʻů͋0ƦÍ.Ȋ50Ô ˒ͷρ  ȥ ǌ̂  ȁ -0.5Ϝ6    ˆ ͗   0)_.52 ϴͲ  1.6Ɍŏ2όǲ\n͗2021˟--071-0Ŗ2 ʏ   ̈ŤÿĨ˜ ̀˪ Čɬͼ¹͞Ś  1.ļ¿0ų˔v˄ʟ̔1̣ʧ͈ ĺ Ȱ1 őʎ ʲǞ   ʡϋnˀȼ-0.¯8͔0\u0378 Ȁ ƞ ͝ô ˪  ſ Ϝ-τ0̥ł.ʀ\u0383\xad8Ÿ͑a1   ɎL\x90  Ȫ   \x99ɻϨʋɁ0.3ȁǇ8 ɉXǆ̛ɢ ĕ     -0υ.6\xadȔǭϖ05ʢ   ʏ1\x9f.0ƾ1ɾ\nˢτȵǑ2͑0ï21-χ̖ʽʦώƪ0ϩ1-0ɉ3š,˽  ̬ȧ   øf #ʜ  0.ĕǟ48ʷŦ Ψ͎Ɖ˗)   ʢ ˒ʌ 2  0ς.ÙЀĎ̨47   Ǚ̲Ϫǅ   ŝ ̄-0.8ˆ1       -1.\x9456Ϥ\x84 ̊ʏnÿ  ɩ    Ɲ-1Ǽ.Ó̴37ư  Ű άΊ0̤.48\ṇ2ğĤΈƒϋ͞0ǆɝ21-ɇũ01-ϗˬ͒04ô   ϟŻʶσ̍  döĽ  -ʕ0ǐʴ.Ͽ59˻  ʥ ŒĂ     2.Ǒ4ɕǜ\x804   ǉ  Ŏ  ̗-2\x9cǊ.21Ȍˇ       -1ȼ.2IĠ1Ȣ Ρ  ϋ    -ΐǓ0.ϯ6ǐ9 ɤȗ Ȱ͟-0.^ͻƊĹ̯ϭ5̂9\nȚ202ȞŜ1-0Ɉ1-£ŠĪ05 Wĵ   Ŗ ˅Ċ 6 ŧ ʈË0Ƹ.έ\'2Ŏ8ɝ   \x93     JǪ90.ʫō̥ʍ\x8d\x8a\'58L   ĈűˋŴ    -̐ɠ3ϧ.0̇7\x9c       υȅ-ϺŹεǑ1υ˶Ŭ.45̬ \x8eǡ _ ɒ ɨuϭʰ    ɇϮ0.7̞Ŭ7ǂ Σ  ěζ0.͕Ƨ28ŮƋǅŌ')), Assign(targets=[Name(id='idx', ctx=Store())], value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load())), FunctionDef(name='_find_all_borders', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='train_start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='train_end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_size', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Find ͮborders forʺ trɅa˅in_test_split i\xa0f sĹ\x97ome values wasn'¦t specified.")), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='test_end', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_start', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_size', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='test_size, test_start and test_end cannot be applied at the same time. test_size will be ignored')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='test_end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='test_start', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_size', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='te_st_start_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='test_start', ctx=Load())], keywords=[])), If(test=Compare(left=BinOp(left=Name(id='te_st_start_idx', ctx=Load()), op=Add(), right=Name(id='test_size', ctx=Load())), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueErrore', ctx=Load()), args=[JoinedStr(values=[Constant(value='test_size is '), FormattedValue(value=Name(id='test_size', ctx=Load()), conversion=-1), Constant(value=', but only '), FormattedValue(value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='te_st_start_idx', ctx=Load())), conversion=-1), Constant(value=' available with your test_start')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='test_end_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='te_st_start_idx', ctx=Load()), op=Add(), right=Name(id='test_size', ctx=Load())), ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='test_size', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='train_end', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='te_st_start_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='train_end', ctx=Load())], keywords=[])), Assign(targets=[Name(id='test_start', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='te_st_start_idx', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='test_end_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='te_st_start_idx', ctx=Load()), op=Add(), right=Name(id='test_size', ctx=Load())), ctx=Load()))], orelse=[Assign(targets=[Name(id='test_end_defined', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]))])])], orelse=[Assign(targets=[Name(id='test_end_defined', ctx=Store())], value=Name(id='test_end', ctx=Load()))]), If(test=Compare(left=Name(id='train_start', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='train_start_defined', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='train_start_defined', ctx=Store())], value=Name(id='train_start', ctx=Load()))]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='train_end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_start', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_size', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='ValueErrore', ctx=Load()), args=[Constant(value='At least one of train_end, test_start or test_size should be defined')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='test_size', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='train_end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='te_st_start_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='test_start', ctx=Load())], keywords=[])), Assign(targets=[Name(id='train_end_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='te_st_start_idx', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='train_end_defined', ctx=Store())], value=Name(id='train_end', ctx=Load()))]), If(test=Compare(left=Name(id='test_start', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='train_end_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='train_end', ctx=Load())], keywords=[])), Assign(targets=[Name(id='test_start_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='train_end_idx', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='test_start_defined', ctx=Store())], value=Name(id='test_start', ctx=Load()))])], orelse=[If(test=Compare(left=Name(id='test_start', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='te_st_start_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='test_end_defined', ctx=Load())], keywords=[])), Assign(targets=[Name(id='test_start_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='te_st_start_idx', ctx=Load()), op=Sub(), right=Name(id='test_size', ctx=Load())), op=Add(), right=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='test_start_defined', ctx=Store())], value=Name(id='test_start', ctx=Load()))]), If(test=Compare(left=Name(id='train_end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='te_st_start_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='test_start_defined', ctx=Load())], keywords=[])), Assign(targets=[Name(id='train_end_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='te_st_start_idx', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='train_end_defined', ctx=Store())], value=Name(id='train_end', ctx=Load()))])]), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Name(id='test_start_defined', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Name(id='train_end_defined', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueErrore', ctx=Load()), args=[Constant(value='The beginning of the test goes before the end of the train')], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='train_start_defined', ctx=Load()), Name(id='train_end_defined', ctx=Load()), Name(id='test_start_defined', ctx=Load()), Name(id='test_end_defined', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='TTimestamp', ctx=Load()), Name(id='TTimestamp', ctx=Load()), Name(id='TTimestamp', ctx=Load()), Name(id='TTimestamp', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='fit_tr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transfor_ms', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='Transform'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_endings', ctx=Load()), args=[], keywords=[keyword(arg='warning', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Store())], value=Name(id='transfor_ms', ctx=Load())), For(target=Name(id='transform', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[JoinedStr(values=[Constant(value='Transform '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' is applied to dataset')])], keywords=[])), Assign(targets=[Name(id='columns_before', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='columns_after', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_regressors', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Name(id='transform', ctx=Load())), keyword(arg='columns_before', value=Name(id='columns_before', ctx=Load())), keyword(arg='columns_after', value=Name(id='columns_after', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='_merge_exog', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueErrore', ctx=Load()), args=[Constant(value='Something went wrong, Trying to merge df_exog which is None!')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='df_regressors', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_regressors', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_regressors', value=Name(id='df_regressors', ctx=Load()))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Name(id='df', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))]), attr='loc', ctx=Load()), slice=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), ctx=Load()), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1)), keyword(arg='level', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()))])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='inverse_transform', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='transform', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[JoinedStr(values=[Constant(value='Inverse transform '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' is applied to dataset')])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='isnull', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ǟ¶ʺReϕëǯϠtÙurΓ\x8bĦȕn daκt˓aframɠeòh wƪΏiǔ˧Pthɻ fΫlʬagμ FΛthatȏ 3mean@s_ ifý thǹ-e coɗrʆ́˂re~spoǟndȘʪenŏtTơ˪ oȃbjeΫcˈt iön Ȣ`ǁ`seǗl˻f.dϤf``Ő is nucll.\n\nόʠReturˋn˔s\nȬ˽---΄---̟-\nƙpɔd.DaÕtafBrßamΖüψeβ\nB   ¯Ƙʑǆ _iϡs_Ŀn?ullĸ d̉atΈafȵrĄame')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ʯ     ƞǻĹÜ   x T  ʥ    , \x8d')), If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='slice', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='s', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Name(id='item', ctx=Load()), ctx=Load()), ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), Compare(left=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Is()], comparators=[Name(id='ellipsis', ctx=Load())])]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Slice(), ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), Compare(left=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Is()], comparators=[Name(id='ellipsis', ctx=Load())])]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=1), ctx=Load()), Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))])])]), Assign(targets=[Name(id='first_valid_idx', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Name(id='first_valid_idx', ctx=Load())), ctx=Load())), Return(value=Name(id='df', ctx=Load()))], decorator_list=[]), FunctionDef(name='_repr_html_', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='_repr_html_', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='core', ctx=Load()), attr='indexes', ctx=Load()), attr='datetimes', ctx=Load()), attr='DatetimeIndex', ctx=Load())), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transfor_ms', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='Transform'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ςAppϣl͈Ɲy givǦeJFʕnȀōμɳͮ trώa²ȉϕn̾ΆesƗfoʕrʋmΉ tΚoʘ the dat̺a.ȃɮͣο')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_endings', ctx=Load()), args=[], keywords=[keyword(arg='warning', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Store())], value=Name(id='transfor_ms', ctx=Load())), For(target=Name(id='transform', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[JoinedStr(values=[Constant(value='Transform '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' is applied to dataset')])], keywords=[])), Assign(targets=[Name(id='columns_before', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='transform', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='columns_after', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_regressors', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Name(id='transform', ctx=Load())), keyword(arg='columns_before', value=Name(id='columns_before', ctx=Load())), keyword(arg='columns_after', value=Name(id='columns_after', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='columns', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='core', ctx=Load()), attr='indexes', ctx=Load()), attr='multi', ctx=Load()), attr='MultiIndex', ctx=Load())), FunctionDef(name='describe', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Overviɚew of the dataset thatįΖ retur̅nͲŀ̈sΏ a DaɾÿtaFr˝am¥e.\n\nMetͱhod desÿcrib̃ɕϧes datasȖeʝt 2Þin segmentȳϯŸƮ-˚wise fasɒhioƗn.ǀ Des˔crip>tion colu\x8emns:\nĸŅ\n* start_tϣiʯmeάͼstaŗmp: bɟeginniaLn˔g{˵ά ofϝ the seˢgmeĈ̜nt, mi̥ssing vǆal\x83ues inΤ] theɩ begin̳nĥinʡÂgͣ aɼrăe ÁˡiƔgnˉơǎųred\n\n* endͤ_dtimeͰstamp: e{ndiūng oNfĈÜ theʒ sȁegm̦enŝt, miss˽ing vχaȉrluȩsŘ in üϽthe endiϜng are ignored\n\n* lȏken̍gtŁh: lōe#nűgth} ĵaccorŐding to `̟`startɞ_tigmɰĩeʒstamʳ͋ċp`` ǁandΗŬ `à`enϯd_tʵim̛estamp``ąϤ\nƣ\n* nu̼Ƀmǂ_ţmisƪsingÎ:ˆ numbeȘr of missiʷngɾ vawriables bǩeϤͷtween `ýč`start_timesȴtamp`` and ``eĨƹnˋǑd_tͷimestamưp`Ȳ`̏ȰƆ\nɖ\nɤ*ʠ n̍um_seʹgme͊ntsΖ:# t=oƕtal nƐumber ʥof segments, c͚ommon Ȕfƹor \x94all ʳsegmentsɌ̼\n\n* ½num_eńxogsͯ: n\x8dumber ofɳ exogenous features, õcommon foríȓʓ ʞall sǿegment͎s\nƶ\n* nίum_ɲregɼrÜe̚ssoȈrsë: n͎Iu\x98űʗȽmǖΧber omfĻ exǞogenĸous fxđň\x8aact8orsϋα, thaƕt are rǅegressors<, ǣcomƯmˑɺon fʒoĐr ͠alǚλϡϟȹl seg\x8dments\n\n*ù numİç_kno\x8awôƕn_future: number͉ of regresˤsoƑrƮs, ¾thƵaɚt are known* ΡsincĆeµ cƠreaÛtion,¢ coœmmoΎ̡n for all s©egments̓\n\n*ʫ freq: \'freqǀuωen#Ȝcy ofŔ theϪ ȍseries,\x9d coƾmmoΎn for all Ɔ˛seǠgmeͨЀntsͯ\něǺ\nPŚaraΕmƢ¶eǱters\n---̈--ȼñ-Èω----\nƈsȫegʚmĴen̄ts:\n  ̼:ȇ  ϗsΚe;gmentsˢ ×to śshǼow iϦn ϺoɎverview, i̊f͗ ȪNoǺneŞ ȬallΚ segmʐents ɦḁr̗e shɵown.\n\nReturns\n--ɀd-ɗĔ--Ȧ-ʚ-\nresuLl§tŉʁƮ´_tabDlıe:l pəd.Dat¸aςFr\x96Ưameό\n  U  tEable \x9awiʪȪth rͯͩes̚ults of the ove˿rview\n\nEx΄am8ples\n-ɭ--\'--ŧǫ-Ż--\n>>G>Κ from eėtna.̣dataseƧts import geĻsneˍrˍate_|conCst_df\n>>> pd.oͯpÛtions͛.dis[play.e̥ΰxϤpand_fraϪmwŪj\x97e_µreNp¹rŔɝ = False\n>̕>> díf = gen0erώate_ưcons˲tΏ_dfɿǬ(\n...    peʹriods=3ȍ0, staȉrt_time="]2021-06-01P",\n.ɒφ$..Ŝ    n˚_segmentɼsɱ=2ͫƓ, scœŧͻ͂alẻ=1\n.ȃ.. Ε)\n>>>Ǥ df_̚ts_format\x85̃¨ =ʄǕ TSDataset.to_Ƿdqʜatõaȣsõet(df)\n>β>>/ǸȂ regreǾ\\ssorsΛˌ_\x86timŭesŔtam̈p ù= ȡpbd.da AʰtºeŦ_rʈɥanţge(ɍȝstarʖt="2021-06-Ή0ß1", æpeȷʇri@ods=50θf)\n>>> df_regrñessoλrsĮ_˜qû1ʳ = pdʺ.DataFǓrame(Đ̰\n...    ʹ ť{"times\x9e\x980ta0mp": regresπsɼorsď_tʨiϿmestġamp, "regΞưrτessorŶ_1": 1, "ϐʯseȓgm@ent": "s͜egmeÆnta_0"˙}\n...ʡ˓ )̴\n\x81>>> dfȎ_reρgressoƸėζʍr˵s_2\u0381 = pĐd.DaʬǞtŢayĬFram1e(\n...     {"timʉestϒamp": regress˶oťrs_òʲtiɜmes"ġtamp, "reͶg½reÚsͽsoȜr_1": 2, "segmentɑ": "segment_1"}Ͳ\n... )\nɥ>>>ô df_eξxogƿ Ǯ=Ĉ ʊp͠d.Ǜconcaˈtņ([dό͍f_re͕gresψsors_˩1, df_ſregre̚ƙǏssors_ê2], igϠnorǊeć_index=Tʕ̅ƈrue)\nƗ>ǵ>ɳ>ˏ df_weȶxog_tǦs_fŽormat = TS϶Daǂ~taset.tĢo_dataͬset(df_exog)\n>>> Ğts \x92= TSDatasest(\x8bdf_Ɉts_foņrmfaθt, df_exog=dƶǣf_eʭxoοg_ts_format, fr̚eq="D"Ï, known_fuͳtΑu˲re=ƹ"all"Ȑ)\nĽ>̺ų>> ʙǮatsʃ.descƑriĜbe(Ʃ)\n  ̩  ɘǩ ɖ  ͥȢ   star\x81tǄ_tifmƂeʸsȘtųǃÃampʫ end_tiƂʯmesɱ©Ĕátamp  \u0379ìlʛenʤgt͗h  num_mǒˮisªsin]g  ɊnumΏ_segm˕ent˴s  ͆nquɱɋm_̈́exo͠gɖsĿ  ʌnȐum_regΠresȀsors  Źnuϋm_ȴknoǨwn_futurē f\x83req\nsegƟme̕ěnĸĕtsƘȫ\n\u0383ǖsegmͳeçnΘt_0      2021-Ê0ϧ6-01 ɍ  ʥ 2U0ƪ2ȱ1ʤ-06-30Ƽ     ś 30       Ͱ    \x81ă 0  Ľ ̂   ,  å     2 Ȗđ    ˿ͭ +    1̃        ϸ       1       ͫ/      ͯʝ ɻ  Ý 1ʐ    D\nsegment_1̺  Ë    2w021-0Þ6-01γ  ȝ  2ʹ0ī21-06-3ί0      3ɀħÄ0        D    0 ʈ       ǽƘ     2  ˗        1  Ęˑ      ̈́     ɲ  1      ˄  Ͻ    ˧ g    ƃ1    D')), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='common_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_common_data', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='SEGMENTS_DICT', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_segments_data', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='SEGMENTS_DICT', ctx=Load()), slice=Constant(value='num_segments'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='num_segments'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='SEGMENTS_DICT', ctx=Load()), slice=Constant(value='num_exogs'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='num_exogs'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='SEGMENTS_DICT', ctx=Load()), slice=Constant(value='num_regressors'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='num_regressors'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='SEGMENTS_DICT', ctx=Load()), slice=Constant(value='num_known_future'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='num_known_future'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='SEGMENTS_DICT', ctx=Load()), slice=Constant(value='freq'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='freq'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='result_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='SEGMENTS_DICT', ctx=Load())], keywords=[keyword(arg='index', value=Name(id='segments', ctx=Load()))])), Assign(targets=[Name(id='_columns_order', ctx=Store())], value=List(elts=[Constant(value='start_timestamp'), Constant(value='end_timestamp'), Constant(value='length'), Constant(value='num_missing'), Constant(value='num_segments'), Constant(value='num_exogs'), Constant(value='num_regressors'), Constant(value='num_known_future'), Constant(value='freq')], ctx=Load())), Assign(targets=[Name(id='result_df', ctx=Store())], value=Subscript(value=Name(id='result_df', ctx=Load()), slice=Name(id='_columns_order', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='result_df', ctx=Load()), attr='index', ctx=Load()), attr='name', ctx=Store())], value=Constant(value='segments')), Return(value=Name(id='result_df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='to_dataset', args=arguments(posonlyargs=[], args=[arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Conʭ΄˻v̖e\x8er͑t ̞Ǖpˏɸ͜+ϠǚaϜ̪n;ˍȰɚƯdaãsɛ dªʘatϜafr¢ŇφʢaČme t\xadϵoϿ̑ ξEűγTNAːÆɠȡ̊5 D˞at\u038baseˑΜt ¦˗ϾJfo˱rΓmʛaĴt.̶\n\n˰Col$um\u0378ns "timˀeǶƜɗ\x91sëtʾƥɇamp" ¸and α"ģǲsªegmeƥnĄt" ϱ͇ęυaͣ¡rϋeϡ ȽŮrequÅiϷ̞ξred.\n\nˬPgar̵ǢaȠkCʝƦmeĘ?ϦtȅŤŜers´½\n-Ê---Ȣ-ˀɋ--ͫν---ʧ\ndǯf2:ϱ\nɞ Ř˵   ϸDaoʀΑ:taêF\x80rame Ͱwiftϴʹh Ϫ͘ƀñȌcoluum̖Ʉns ["Ÿ͓tiϨmes\x94tamϭ\x8aϝÓ¹p"ʆ, "Ɍ˿s¹egÊİmeŊnǷt"].ĵ» ǅOtϓŞôhe͝Λr ccolǷĩuǈϮmnɰ>͊Ðs cɓoǪ\x8dͽˏ΅Εnsideļʼr˅ɻezd˿Ȃ \x93featʎǭύuýɟνres.ƫƴ̲̚\n\nőïN²otͳͷeǓs\nΔ--̲--ʬ-\nDȸǟuƁri\u0381ngȎ cȱNon\xadʊvŧerŊsion̼ segmʻent ʦiʒĳs cŏεasXƁte͆d Ɵ÷tíϴDźˬʒɂo ƉƼstr»işǶnÙ̽Τg ˣtǎype.ă\n\nExampŸε¢ɓlʝeˡϥǸ\x93ϜsȴƆƙ\n-ϙ-˷-É-BĒ-Έ\u0380ȴcΚě--ŭ-\n̾>ɖ>>\u0381 ǹΜfrǬψ\x98o˓Âm %´etŃna.da˄ʗǢ·tas͕ets iƕ̈ĬϳŘmpșoɤrϱt öǸˀĭgǐɴ̜enȒeǴ͗raɧ˼tɶe_ȏôðήconstÍ_df\nș>Ƞ˝>> ̥df = genĚͰerate_Ű_coɽnʧst͏_d̿f(\nͯǂ.ƶŎ.s.Ɗ    ȏͨpİȀeriϻodsƑ=Τ30Ϝ,ǩ˕ staŤĝrƦŇt®_timůe="2ǟϳ02͟1-0ϨΨ6ϥ̻ϴ-ʖ0ʀǖ½Òɧ1ǈβ̻",\n..ū. ȫƼ   Ƹn_seΕƿϧgΝŶmúe˫ntĬ\x98sʇ=ȱ͌Ȫæ2ĠƳ̑,ĢLϳ ǁsca͇Ĥhle=1˰\n\x83țͤ.ĆƼ.άŵɟ̵. )\n>>©̈́>Ŧ dʵfĪͺː͖.ϋheadȏ(5)ːϽ\n  ǅ tƕ\x9dͶimĴĿeēs×ɟ͐tÀamp ̝  ʷó seʍ̌g͐m3entĔē  tʲanͿľȆr̓g±ɣ>eȨt\n·̾ϊ0ʗ ̜20ɽ21Ć-0ÅT̒6-0\x9b1ðΓ ĭȻ /sőȎeīɃϡ°Ƿgʘm͢\x8eeūnt̀ˆɧ_±0\x99̷   ˪ͧ ϝ1.η00\n1Α 20ȊϾ2ƹ1-\u038d0ƄÒϢ6ɟʁJˢ-/ȇȴ0Ȏ2ȀΨ ʭ segĜment_Ȁ0Ɠ  ˮΕΕ Ɯ ε1.Ĳ00ĩ\n2ƳϿȟ 2ϕΧ021-06˨?-φɥ0¾͋3 Ü ʢşsegmeΕnt\x8bƇ_0͗ǒη  S  ͊Ρ1.0Ȯ0\n3 2021-06-Ȕˍ[0̥ͲΛ4  śHseĀǧg\x93m<ƾenϾͤt˾\u038dɴ_0  ˪ƽ  ̕˃b͘1.00\n˲Ȣÿ\u0378Zϯ\x8a4 ̹2\x960ȯ21-ϗ06Ƞ-05 Ń ǥsɩʖǒeɮȥgmeƹn΅Żt˲͆ź_̖â0ʡP̊m ʊ  ΐ 1.00ɱ\n>>>δ ŵdϔɚơǥŮf_t$ʓʲsϵ_formaʴt ɲώ= TSÍĀDatǽ̷Ůasο\u0381ʊeϹũ˥t̼_.ľƺϼ:to_ŰdaȻtϬasȷet(ędf)\n>ɜ>͒>P df̈jģΆ̢_ʈtsȑ_ϗʛformǁat.ņ̊əheơaΞͻd(5)\nϫ¾se̡4\x98gme8ͼnƒėǮt  ɋ  segmaen«̼þt\u03a2_0 sȿe¿Σgmϕ̰ʁ}e̲P\u0382nt_1\nȥ˘Ōf˃e\xadaǸtǲurʥe ĸ  ˃³Ϡ ǈ̑ϲ ˎ ƖČ tȢpaǄrgeǛtƪƅ\u0382 ͑  F Ϗtadrg̣ͪetǂ\ntͪiʥmesɆΕǳtƟamÔp\n2ɵ0Αʲ2Ɣ´1-0̐6-ĥ0ȍή1ɩŘ̩     ʓϴ ͒1.0Ϛ0  õ ˼   ʭŪͩʨ1bŅ-Φɖ˛.ǈ0Ϡϫ¯0ǥg\n202¾1-ë0Ϩ6-0ʟ2 ˯ ¹ŗ ¬Ν˹Ƶ ð  1.ɣŷ00˂ϕɖ    ƛ͆ł ̛į 1.00\n̳Ɇĕ202ϛͨ1-0ǥΕʄ61ƓϪ́lͳ-̢ȳʹ03ɰ   ̰ç ˩̽  1ɠK̙.00ǅ ƩĀ   ßʩ ?U 1.ů0\x91ʼN͜0\n20ǝ2Î1-06-0̃Ņʞťέ34 ʌ Ãͮ λ  ƪ½ ˊ1ƅKʞ.Šϭͅ0ɇ0 ǘ\x8aŜ ̢ ˑ   Ͱ1.ΘɲêÒΖʹ00Ζ\nǱ͊2Ρ0Q2ɱέϗθâƽθ1ͩȀƖϳæ-0ƶ6-05ŐX  é˫  ƶĺǨ  1ñ.00Ơ υ ͘  ˚  1.00\n\nɶ>>> dźķf_ʙèrÔeÒ>ˊ̨grȉʷeWssϵoʗįrs Ń= pƵdɌƞ.Dçaċtaŉ͜Frʌʠƪˊ͚ame(ˊ{\n..ΑŝĤ.̥Ƀ̎  ̲   "\u0381̮tiŀϿ͖mestam͏˲pϫ"ǟ%Ɵ:͕ɚ ȧpd.œdate_rangeŏϱ(ϮƸ"2ǝ021φ˲-ǯ0Û1ʉ-08ɇáâéͨǲ1",ľ pŒ\x92ʦʞetʐri̲ods=10)ċάǍ̑͂,\n.ʁ\u0382.ǔʒ.ǅ  ʑ¤αɻͯ   ʁ±̭"rΒegreʨsƣǵέsor_̗Ǒ1": ʐͥnĬp.ýar¼aϪnɱ̄ęgĉIče(aʰƩŦ10)ĺ, ̀"re»̢͈ʥʔ\u038bĊg˳͘rͣessɇorͬs_2ͧ͌": ̱ϕ̫6np.βKδƚara̵nˡčńgǙŏeøƯ(1Ã0) + ʔ͕5,̡ȑ\n-.îƘΉ.ÿ.íĢ ɱ ʲ̞˅ HɁʃʚ ̋\x9eɉ "νs͔̋egmȠĤe̵ΩΩnÇ̭t̵˵˭"ʘ˿:w åĲ["̋siʥegmʟenϩÂ˔t\x9c_0"ƌ̥;[̕]*10¿\n.ƛ.\u03a2Ģ\x94Ʋ.ɝ }\x8f)\'\n=>ʟ>>ϙ TSŘDÛaùϽtɓaǌset.³wt>o_dώatCase˺t(đdf_ǼϱreïgɚƎόrȃʒeİs̄sorɮs).ȽϗheÀÖadďŽ(5ɍ)Ľ\nƪseɧgÀmë́þɛntʰĢ ċǋ  ɛ ǻ\x98 Ļ "pɹsÞeƵgm̸Ãȣent_0\nȡȸfeú̉a5ɔͩΞƃ̮ǻtȥɶuʱrƹĐe ũ ϖ  ʱϓrȹeg\u038b˸͡r\x86essƗor+ʎĸǬ_1 rĘegrϞessoίβ\x91ͼūr_Ǡ@ʝ2\nČċͧtim\x94eπ¦Ϻǽ˩ʉstampʴ§\n20Νi21Ϟ\x8c-01-Ͻ\x8901Ǻ Ζ\x9b ʠ œ˻  ʏħ   ǈ   0   Ǚ\x83  ͡Ď Ƥƍ Ǐ ɑ   Ä5\n202įɚ1þ-01-WΙȰɍ02 ˣ   ˿ʚŘ  9˳ş³  ͑ ˽3 ŧϩ*ƈ ā1³ĘȗͪϓjƖp Ɵňɲ ǘ  ãǆƤ ϱ ɬ ͦ \x81ɜ\x9bə  ű 6ξγϷ͢Τ\x9f\nŐ2ˣ02Έ1\x90-0wȩ1-Ƃ(͢0ȪĞ3 ̯  ˈ    ʅ ˁ\x86¤˫  nΗɻ 2 : ʵ  ʻ Ȭ ʛ    ϳ; ͐7\n2021-0̅1-04  Û\u038dö ̿Ϋ \x9b    ɟ ·K  çî3ɰ\xad      ̆     8\nʱ2ȗ0ŋ21:-0μ1-Ȁ\x8d0ļ¯ˉ5  Ε   ť   Ͷƕ ȅ Ͻ ô4     \x91ȯ   Ø  ×˜ŧ\x83 9')), Assign(targets=[Name(id='df_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Subscript(value=Name(id='df_copy', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[Subscript(value=Name(id='df_copy', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_copy', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_copy', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Assign(targets=[Name(id='feature_columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='df_copy', ctx=Load()), attr='columns', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='feature_columns', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='timestamp')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='feature_columns', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='segment')], keywords=[])), Assign(targets=[Name(id='df_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_copy', ctx=Load()), attr='pivot', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Constant(value='timestamp')), keyword(arg='columns', value=Constant(value='segment'))])), Assign(targets=[Name(id='df_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_copy', ctx=Load()), attr='reorder_levels', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=0)], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='df_copy', ctx=Load()), attr='columns', ctx=Load()), attr='names', ctx=Store())], value=List(elts=[Constant(value='segment'), Constant(value='feature')], ctx=Load())), Assign(targets=[Name(id='df_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_copy', ctx=Load()), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1)), keyword(arg='level', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()))])), Return(value=Name(id='df_copy', ctx=Load()))], decorator_list=[Name(id='staticmethodBjWse', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_check_endings', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='warning')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='max_index', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='any', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='isna', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='max_index', ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Name(id='warning', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Segments contains NaNs in the last timestamps.Some of the transforms might work incorrectly or even fail.Make sure that you use the imputer before making the forecast.')], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueErrore', ctx=Load()), args=[Constant(value='All segments should end at the same timestamp')], keywords=[]))])], orelse=[])], decorator_list=[]), FunctionDef(name='_PREPARE_DF', args=arguments(posonlyargs=[], args=[arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Name(id='columns_frame', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='to_frame', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='columns_frame', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='columns_frame', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='df_copy', ctx=Load()), attr='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='MultiIndex', ctx=Load()), attr='from_frame', ctx=Load()), args=[Name(id='columns_frame', ctx=Load())], keywords=[])), Return(value=Name(id='df_copy', ctx=Load()))], decorator_list=[Name(id='staticmethodBjWse', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_gather_common_data', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='GathɈ\x8ferΰg iόnƞformƪʷĄΚͭatńioMn ʌabouϰt daǩtaseʽt in g̉Ͼendera˺lϚ.F')), AnnAssign(target=Name(id='common_dict', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='s', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='num_segments'), Constant(value='num_exogs'), Constant(value='num_regressors'), Constant(value='num_known_future'), Constant(value='freq')], values=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load())], keywords=[]), Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='difference', ctx=Load()), args=[List(elts=[Constant(value='target')], ctx=Load())], keywords=[]), attr='nunique', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())]), simple=1), Return(value=Name(id='common_dict', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='s', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='to_t_orch_dataset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='make_samples', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='DROPNA', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), If(test=Name(id='DROPNA', ctx=Load()), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ts_segments', ctx=Store())], value=ListComp(elt=Name(id='df_segment', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='df_segment', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='groupby', ctx=Load()), args=[Constant(value='segment')], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='ts_samples', ctx=Store())], value=ListComp(elt=Name(id='samples', ctx=Load()), generators=[comprehension(target=Name(id='df_segment', ctx=Store()), iter=Name(id='ts_segments', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='samples', ctx=Store()), iter=Call(func=Name(id='make_samples', ctx=Load()), args=[Name(id='df_segment', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='_TorchDataset', ctx=Load()), args=[], keywords=[keyword(arg='ts_samples', value=Name(id='ts_samples', ctx=Load()))]))], decorator_list=[], returns=Constant(value='Dataset')), FunctionDef(name='train_test_split', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='train_start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='train_end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_size', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='train_start_defined', ctx=Store()), Name(id='train_end_defined', ctx=Store()), Name(id='test_start_defined', ctx=Store()), Name(id='test_end_defined', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_all_borders', ctx=Load()), args=[Name(id='train_start', ctx=Load()), Name(id='train_end', ctx=Load()), Name(id='test_start', ctx=Load()), Name(id='test_end', ctx=Load()), Name(id='test_size', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Name(id='test_end_defined', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Max timestamp in df is '), FormattedValue(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Name(id='train_start_defined', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Min timestamp in df is '), FormattedValue(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='train_df', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='train_start_defined', ctx=Load()), upper=Name(id='train_end_defined', ctx=Load())), ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='columns', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='train_raw_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), slice=Slice(lower=Name(id='train_start_defined', ctx=Load()), upper=Name(id='train_end_defined', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='train', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='train_df', ctx=Load())), keyword(arg='df_exog', value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='known_future', value=Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='train', ctx=Load()), attr='raw_df', ctx=Store())], value=Name(id='train_raw_df', ctx=Load())), Assign(targets=[Attribute(value=Name(id='train', ctx=Load()), attr='_regressors', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())), Assign(targets=[Name(id='tes', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='test_start_defined', ctx=Load()), upper=Name(id='test_end_defined', ctx=Load())), ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='columns', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='test_raw_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), slice=Slice(lower=Name(id='train_start_defined', ctx=Load()), upper=Name(id='test_end_defined', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='test', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='tes', ctx=Load())), keyword(arg='df_exog', value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='known_future', value=Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='test', ctx=Load()), attr='raw_df', ctx=Store())], value=Name(id='test_raw_df', ctx=Load())), Assign(targets=[Attribute(value=Name(id='test', ctx=Load()), attr='_regressors', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())), Return(value=Tuple(elts=[Name(id='train', ctx=Load()), Name(id='test', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value='TSDataset'), Constant(value='TSDataset')], ctx=Load()), ctx=Load())), FunctionDef(name='plot', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n_segments', annotation=Name(id='int', ctx=Load())), arg(arg='column', annotation=Name(id='s', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='start_', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load())), arg(arg='e', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load())), arg(arg='seed', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10), Constant(value='target'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=1), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='Plotȫ xof random or chose̼n ǻseg¨Gmͩe̾nts.ĳδ\n\nP\u038baramϣeȘters\nǆ-----\x8c--ʹ-Ä--\nn_segments:\n    number ofr random segmentˮ{s tƃo pʽlot\ncαolumn:ͱƌ\n ØƔ   feature to plotϣ\nsegm˵entsĔ:\ñ Ϧ :  segments tτʹo plot\nseed:\n  α  seed for local ĵraʵndom st͏ate\nsPtarΏt:\n ˠ  Ό stƘart Ȓploƙtɇ from ͮtȆhis ̸ti̬meͯstampâ\në́Ánd:Ζ\n    end p̟lokt at this ti\u0380mestάʰaĢmp\nfig¿sȥiŜzĚeÃ:Ȣ͓\n    siz͂e oðf Ǘπthe fiͲgure per subϕp˼l;ot Ϛƕwitḧ oƌneɊ segƁmϥent əźin i˔nńcheswά')), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load())), Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='n_segments', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='columns_num', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Constant(value=2), Name(id='k', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rows_num', ctx=Store())], value=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='ceil', ctx=Load()), args=[BinOp(left=Name(id='k', ctx=Load()), op=Div(), right=Name(id='columns_num', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='start_', ctx=Store())], value=IfExp(test=Compare(left=Name(id='start_', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Name(id='start_', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='e', ctx=Store())], value=IfExp(test=Compare(left=Name(id='e', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='figsize', ctx=Store())], value=Tuple(elts=[BinOp(left=Subscript(value=Name(id='figsize', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Mult(), right=Name(id='columns_num', ctx=Load())), BinOp(left=Subscript(value=Name(id='figsize', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Mult(), right=Name(id='rows_num', ctx=Load()))], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='subplots', ctx=Load()), args=[Name(id='rows_num', ctx=Load()), Name(id='columns_num', ctx=Load())], keywords=[keyword(arg='figsize', value=Name(id='figsize', ctx=Load())), keyword(arg='squeeze', value=Constant(value=False))])), Assign(targets=[Name(id='ax', ctx=Store())], value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='ravel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='rnd_state', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='RandomState', ctx=Load()), args=[Name(id='seed', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='rnd_state', ctx=Load()), attr='choice', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[keyword(arg='size', value=Name(id='k', ctx=Load())), keyword(arg='replace', value=Constant(value=False))])], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='df_slice', ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start_', ctx=Load()), upper=Name(id='e', ctx=Load())), Name(id='segment', ctx=Load()), Name(id='column', ctx=Load())], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='df_slice', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='df_slice', ctx=Load()), attr='values', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='tail', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n_rows', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=5)]), body=[Expr(value=Constant(value='ReturƮên tđhe last ``n_ƒrows`` rʈo̲λwsɯɌ.\nĮ\nMimͬi7cs\x91 pan̸das meth\x8eoƕd΄.\u0380\n\nTh\x95͙is ǃfunϗctioϞˣn̊ϝ retuŕns la|stŖ ``n̏_ǳrows`ƫ` rows from thŐ͡ƫ͜e oʊbject˃ basɌɺed˜ on\n͊positȡioβn.ȸɦ¸ɰ ĩIt is useful εfĮor quiǀcklʑyħ verifyiĴμnƀgψ ǿdÉata, foıȉrͫÙΪ exŗam̜pleĶȃ,\nģͣafteƛr ̺sorìti«ngǮ or aΉp˧pendˮing r̟ows.Ƥ\n\năFor neèga̻tivƑe val̽ueǃs̶ of ``n_ɶɔrows``, ħόthisů func\x87tioĮn rCeturns a̦ŧČllż rows exc͑epƀtƁĵ\nthe;ε first `n` Ϛrđoύ͆ws, eƊquiv·alentǊ ßĚto `I`Ůdf[n_row;s:]7"`½`.\n\nǋƻɹParʑamʤeters\nͭ-4ʃ-ɒ---̸-----\nn\x92_rows̎:\nϿ 2 ˃  numberĸ Ǧ\x87of Íroϣws to ËsǾelec½t.ʉĦ\n\nΞReturns\n-------\nσpd.DataFramqe\n    ̇t˄hιeϏ ̫last T``n_rowsų`` Ŝro4ŽwsƉā ŝor 5 byȮ˟ ƅde˟fau»lftϫϔȓ.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='tail', ctx=Load()), args=[Name(id='n_rows', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='re', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load())), FunctionDef(name='segments', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ͲGetʫǡ țʤlgistǟ ϓäof all s\x9cȟegƋme?±}\u0379nKİˠtsÃ ˷in dataȮʂsΨet.\n\nEͻί+̀xάζa˭m̓ples\nʋ--------\n>>> froƦm etnǢ̓ΨaĐǃ.ɢǃπȘdat͇͋asets ̝im͕porύtşŏ genÄerǲȇatβeͻĨ_cϛ\x95on͓ǚs#tΐ_dǲf\n̈>̐ͨϘ>> d̸f® =ǯɶ gueneratēŊ_coͮnƍ̊st_df(\n...u  Ƙ  pe϶Ķriods=3\x970, stalȿŢζrtͭʄ_tľǩimeȒϙϝ̬˭=«˻"2ɴ02Ö1-̥0ƛ63h-0ʛ#Ů1"ī,\n-... ɚ ĐȪ Ͳ nǊȦ_ΥsegmentsÓƗ=2,Ɍ scZaÄƥǈͻšl5e=1\nʿ.̇.σ. ǅ)\n>>>Š ʿ˂˃ŗʧdƒf_tªs_fo°Ŵhr0òmăa˿t ̹= TǀSDŮaytÉase\u0383t.ń˥tɸo_daʥtaset(ˀd̓f\x9a)s\n\xad>ǁ>>· ϖ1ts = ˖ťTŪSD\x96a£ʊĂȿt˰ase̽t͉Ǳ(dĿƍf_ts_fĒǄĦžormat, "D"Ň\x89ǲą)\n>>> tȓàs.sɫ½e×gmÍȦents͉Đ\n[\x92\'segmƍeqntϱχ_0\',υ Χ\'se$ćgmentϠk_ͽƌ1Ɵ\x94\']')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load())), FunctionDef(name='loc', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ṛ\x9aeǐtur̺n Ηself.dϱf.loŬȐc methνod.˚̚\n\nReturnā̲s\nǤ--Δ\\Α˥-ʃ--\x8c--\np\x7fd.coreʡ.Ѐǅindexiʶϼng._Loc͗ĿIndexeòrs\n    daâ˫Ζtaframe with sϿelfž.νdf.ɠlo\x92cȺ[...]')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Attribute(value=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='core', ctx=Load()), attr='indexing', ctx=Load()), attr='_LocIndexer', ctx=Load())), FunctionDef(name='to_pandasb', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='flatten', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='flatten', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_make_future', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='future_steps', annotation=Name(id='int', ctx=Load())), arg(arg='tail_steps', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_endings', ctx=Load()), args=[], keywords=[keyword(arg='warning', value=Constant(value=True))])), Assign(targets=[Name(id='max_date_in_dataset', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='future_dates', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Name(id='max_date_in_dataset', ctx=Load())), keyword(arg='periods', value=BinOp(left=Name(id='future_steps', ctx=Load()), op=Add(), right=Constant(value=1))), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='closed', value=Constant(value='right'))])), Assign(targets=[Name(id='new_index', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='future_dates', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='reindex', ctx=Load()), args=[Name(id='new_index', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), attr='name', ctx=Store())], value=Constant(value='timestamp')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_merge_exog', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load()), body=[For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='regressors_index', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='index', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Call(func=Attribute(value=Name(id='future_dates', ctx=Load()), attr='isin', ctx=Load()), args=[Name(id='regressors_index', ctx=Load())], keywords=[])], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value="Some regressors don't have enough values in segment "), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1), Constant(value=', NaN-s will be used for missing values')])], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='transform', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[JoinedStr(values=[Constant(value='Transform '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' is applied to dataset')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='future_dataset', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='tail', ctx=Load()), args=[BinOp(left=Name(id='future_steps', ctx=Load()), op=Add(), right=Name(id='tail_steps', ctx=Load()))], keywords=[]), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Name(id='future_dataset', ctx=Store())], value=Call(func=Attribute(value=Name(id='future_dataset', ctx=Load()), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1)), keyword(arg='level', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()))])), Assign(targets=[Name(id='future_ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='future_dataset', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='future_ts', ctx=Load()), attr='known_future', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())), Assign(targets=[Attribute(value=Name(id='future_ts', ctx=Load()), attr='_regressors', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())), Assign(targets=[Attribute(value=Name(id='future_ts', ctx=Load()), attr='transforms', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load())), Assign(targets=[Attribute(value=Name(id='future_ts', ctx=Load()), attr='df_exog', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())), Return(value=Name(id='future_ts', ctx=Load()))], decorator_list=[], returns=Constant(value='TSDataset')), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='freq', annotation=Name(id='s', ctx=Load())), arg(arg='df_exog', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), ctx=Load())), arg(arg='known_futu', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load()), Name(id='Sequence', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Tuple(elts=[], ctx=Load())]), body=[Expr(value=Constant(value='\x85IȃƍʁnǺit TSDatǈaset.Λ\n\nϪ͋ĝɓParyaƤmˈetģeġrsω\nƵ-ϦȆ-ț-----˙---Ģκ\ndfʰ2:\n  ż  ƚěˆdϩƲatafÖrame wiςth tiĨmeͭsͱeries\nǁfre˵q:Ψ\n  \xa0\x7fĝ  freƢquency oɌf Ϻtēimeˮstamp in ïdf͇ϡ\nd˾f_qexog:˖\n Ů   dataϸfȰram˯e with exa͖ogʉʸenoŷu8s dĪýaɜtaƐž;Ȟ˲\n+knoͭwín_fuωtHure:\n   ϱ c¤oluͱ͌mŖn¸sĲ inƝ ``dʱf_ȁýɥe͈xȥog[k͓nô̭wnŭ_şfλ<uʅture\x80]`Űº` Ǌthat areƠ ͺȉrĖeĚɛgre˹υʹϊssors,Ü\n  ¤  i˧f "allʗ"ȦǸ valʢuΈe is givźen,ȝ aηll ëϚcolumÖωϐns areȝ meantþ to˾˷ \x88bǈǉ˚e ˅ǖreg\x80˂re{ssʊorsσχ8ɛ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_df', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Store())], value=Name(id='freq', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='inferred_freq', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='infer_freq', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueErrore', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="TSDataset freq can't be inferred")], keywords=[])), Assign(targets=[Name(id='inferred_freq', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='inferred_freq', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='You probably set wrong freq. Discovered freq in you data is '), FormattedValue(value=Name(id='inferred_freq', ctx=Load()), conversion=-1), Constant(value=', you set '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='asfreq', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_known_future', ctx=Load()), args=[Name(id='known_futu', ctx=Load()), Name(id='df_exog', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Store())], value=Call(func=Name(id='copy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='df_exog', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_exog', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), attr='index', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_merge_exog', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[]))], orelse=[]), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='Transform'), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='head', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n_rows', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=5)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='head', ctx=Load()), args=[Name(id='n_rows', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='to_flatten', args=arguments(posonlyargs=[], args=[arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dtypes', ctx=Store())], value=Attribute(value=Name(id='df', ctx=Load()), attr='dtypes', ctx=Load())), Assign(targets=[Name(id='category_columns', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='dtypes', ctx=Load()), slice=Compare(left=Name(id='dtypes', ctx=Load()), ops=[Eq()], comparators=[Constant(value='category')]), ctx=Load()), attr='index', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value=1)], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df_dict', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Subscript(value=Name(id='df_dict', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='tile', ctx=Load()), args=[Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='column', ctx=Store()), iter=Name(id='columns', ctx=Load()), body=[Assign(targets=[Name(id='df_cur', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='column', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='column', ctx=Load()), ops=[In()], comparators=[Name(id='category_columns', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='df_dict', ctx=Load()), slice=Name(id='column', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='api', ctx=Load()), attr='types', ctx=Load()), attr='union_categoricals', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='df_cur', ctx=Load()), slice=Name(id='col', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='col', ctx=Store()), iter=Attribute(value=Name(id='df_cur', ctx=Load()), attr='columns', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[Assign(targets=[Name(id='stacked', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='df_cur', ctx=Load()), attr='values', ctx=Load()), attr='T', ctx=Load()), attr='ravel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_dict', ctx=Load()), slice=Name(id='column', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[Name(id='stacked', ctx=Load())], keywords=[keyword(arg='dtype', value=Subscript(value=Attribute(value=Name(id='df_cur', ctx=Load()), attr='dtypes', ctx=Load()), slice=Constant(value=0), ctx=Load()))]))])], orelse=[]), Assign(targets=[Subscript(value=Name(id='df_dict', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='repeat', ctx=Load()), args=[Name(id='segments', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='df_flat', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='df_dict', ctx=Load())], keywords=[])), Return(value=Name(id='df_flat', ctx=Load()))], decorator_list=[Name(id='staticmethodBjWse', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='info', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='ŦǅȭOvervƛiȤ\x84eµw» ΫofȄ tëΐÇheʑ dƻ¬aaưta˄se\x8dπt ͬtʦh8at printsG t\x94ϓhȶϕe ürŵȷesultƸ.ȿ\n\nǃMȻethod ȩĕdes͗cϮɊribľes ǟŎdȣataʂseΞt Ϥʆɳi}ǉn seϾgm1Ϭent-ɰƯίwisɹë́ fasµhion.Ǐ\n\nIċͣnfŻ\x99oΖǶrɁmġationɐ \x98about daĐ̲taŝsȚɎŒĩet iʪnʝɥ ge×zœnŨerəaϵlȿɇ̝Ě:\n\n* num_sūegmEeç϶ɣntcǲŏsƭĨ:J tΏτotģa.lG nʉ̅uǞmberǥM̥ \x7fo͊f sƧegmeŸǤƖ̄ntsɡĀİ\n\n&ːƯ* Ώn<umϼɇ_exogŲûsȠ:ǎ Ȃnumϩǧber Ǽof|ʱ eŊxogȶϹǾenʏɓo˃ȥus ̉ÝÛÓfeΪatΔǂuresƜô\n\nȿ\x80*μΪ áǃnͮum_Ȝ̼reāϕ̝gressƠȃoʴrsĤ:ȼ numðbeΙƕr ͙oƺfƚ˷ ʚexýÄoɭgeno̗uϞs ɢf͔aΊctoñBΒđ˰rϴs͊, tȖhaĮĹʉϓt©`Ξǝ Ëare ýreψƀgΡr\u0380˞ϯessorsa\n\nЀʬ* ͩnǙĭuŲĻm_kɵnown_Ɠfutu;Ȯ͒ˢreŏʩȂ¨Ł:ƨʍ6 nEumbeΜvr ʍof½ ĞrʺΈegĆ\x89rċesů}ŭ>Τsηoϼrs, t̲hatYX aYrΘ\u0378e SknowƳnɡ sȮρincñe ǯc±reaŕtɭion\n\nš* freq: ¼f\xa0ʂr͵eΫqĤuency Ɏofʾ tȐɮ"Bȓ˂heÛΗ dϞataset¥ǌΝ\nώϠ\nIǵnʷfʬormȆaƸ̶t́ȋPǫnȉ¿ǅ aboƼŶuȗɘtƜ ψ˴ϧiƽĹndivʙ=id\x92ua\xad¿l segǥmentĞʞs:ϕ\nF\n* EËsȾt˂arçt_tiʱƦɞmϢeϕ̖staΤɛmÊp:á̍Ʀ beg-sɷ̨inΣĆniƇn\x90ʢgͯǥ ̇of ȤtЀȖέͿǤĹ}ƞɾȬḧeE̋ ɲ̫segmıʰeĪnͺtɾū, Ŝmciǃssingϒ͎ā Ɋvalueῒ̭̦φs in the¨ begiǊHnυniɉng arČe Ɠiʨ̏gÀn˯oredɯ\n\n* eǭnȺd_3timestamp̩Ƚ:şźƝ en̪ding |KoƖf tĄhe& ɼÜÕǀħ©s̔egmeͪŧ́ɐnt, missāiȱngă »val\x99ues inŻ͂ thŋe ̏eƔ˯ndŝiŅnϳgɲ a˂rϒ˗e iȢgneoʋred\n˚\nύ*Κ ΈϖlenÌgŠtκRͅh˫:Μ lŅ͓enųgthιϗϘ a#cc¤ʛ͚ȪoĦđrdiͧngÀϠŝ tϜo ̗ǭˡ``Ù̷Ζstamrt_ưtʰimƙeηsɚtamp``Ĭ aǟnͰʆȆd˗șΒĥ `̈́`endŋκ_timesϤta̰˶mƙp``\n\nǛ* Ínumιϲʄ̛ȍ_miĘsͳsinЀɼÈg: nu͐mber of misʊŔ\x95ϋs̘in˺gďƤ ϦϢvĻϦari˅Ϥ1a˷bles ƛŚb7eșΐ¶-tweeȨnĜˊǮ ``sștarĺt_ͧΥɵti̱mes̜Αtam͖p`` aǽʀnŖd̦͌ϊ ``ȅendœĭɱĴϨ_timeȹstam.͢p`ǑϿɷi`\nǂ\nŁŕPƌ̷Ɂa̅rameītersʰ\n--------ǟ-ɳ-\x87\n̓segments̰:\n  ΩͶ Ο) segments to\x913 shoĢʛw ĤiĦn ovͪşe\x99ϙɄrvʿΌiɃˍĉhe,w, Ϫ˵ɐγǊγiϩf Nϰ˥onŗ\u0380e, aǦϧHll se~ͮgmeɗLĸntΤs\u0380̷Ɨκ̄ Ϧare shkow˹n.ϧɟ\nð\nEχÅxamɄpǩles\nsǥ-Ħ-ĥ---˜ǟ-ȼ--\n>ʁ>3>ǆ from ȶȵĶetnϼaƫ.datɻɵͅaʉ̢óseṫs© import| gẽneȌrate_cĂ͔onυst_dƵ¡fͦ\nγ>>ū> df =^Öƻʵ* ɋȱ̎gˀͦeƞner̨at;E3e_const͙Ŗ_d«fʿ(ȉ\nͨ¨..ːż.   ǆ ǫperi˔odɏs=̠3ʆ0, stƻͼart_t˼ȎΔimeςƬťK="ʄ202 1-06-\\͚ɚ0*̵ȣ1",Ń\n\x87..Ϯ.  ˳ʆς«  ´n_ƁƭsǔJegϛmύent\x92ˌsŘ=ɖ2, sʾμcaleƽ=1\nǩ... Α˻)·Ͷ\n>>Ŭ> df_tǯs_ˡfoπrˠmaɒt = TSôDataseɻ̣t.to_͍dataset(df̆ƺÒ)Ŧ˔\n>>> ϔ͇reŽgre̼sľʵϤăsor}˹ɍs_tʠiɿmestǛaȞ̈māp = pΩÛdǕ.ŕdÏaϼƶte_range(starƇt="2021¥ʡϵ-0 òǇČ6-0õȗɅ1",\x8bǻ periõods=͠5̖˔0)\n>n>>̌ ̥\u0378dǾ͍ʹʬf_Ļǹregϗrˆe͵Œss~oͿˊrs¯_ʃ1ư A˴= pƁdˬê.DataF˒rĀ˺ªamέÙ̋e(.\n.Ļ..Ţ\u0380Ȑ     {ȳ"ĄtimestamάpÅ":ȿ regõrȃeģı̸\x98ssorsȼ_timest̗a"mʪpŒÐɓ, Ǭ)Υ"regʛ͋r̛ąͅeΖsßsĲŵoɸr_ɓ$1": 1, ŧ"ėseȱgment0": "˲˂̼sćegmentǐ̵ˮ_0"˞}\nϬ.ͷ..ĩ ʞ)\nɱ>>>Z ʂdf_rͦŻegǿres-so\x88rs\u0382_2 = pdΈ.Da˅̆taǡFϴrǣ͟ŝ͟ame!(Ô\n+...Θ    Ɲ˛ {"ōtÜiŉmφest˵ǓΉamŸp"ͤ:1ǃ reϊ£gʲressǺórs_tiΉÑmeǕsΥǒtamɠp,ϭ "regˤˤǭrđessǩUočr̍_1ªŴ"ǙșŶ:ϛ 2,Ŵ Ĺˇ"̑sęǸǉΩgment":˚ "ʟȝDsȏegʹǧmebnǥt˘ȶ_\u03811"ρ}\ně...͗ɲ ă)˓\nN>̺à>> ͦdf_şexog =ʎ śpȓ¶d.conÓcaɌtäΙȅ([dʩ=ŗˑfĜȡȜ_ęregressoͻrˈs_1ǭ, df²_Ǐre̴greˀŕsο̚ˊǈΕsors_2]ωÏ, ŖiʗgnúoȽʳrʮeόι\x8a_indeKx=ͻΉ͚TɆrue)ō\nͷ>>>ͧ d\x83f_eǥxog_tsɈƞʃ̓Ω_f̈Ĝormat = TS\x9dϩDatƸaset.\u0379t˲o_Ƿdʩat¨asɨe\x93t͋(df_ʬeWxeρʊ˔og)ʰā\n>ź>̦> t˚s = ̞͏¿Ȟ\u038b»ͪTSĚƥ\u0380DaEtaϽseǎƪt˳(dǅfǥέ_tʱsǐ_format,͒ ̹dRf_eóχxo«Ư÷ŁĀg̎ƌ=df_͑uexogZ_ÄtsϠ_forÍǭm͛at, \x8aώfreq="Ń͔ǛD", known_fĭuψtur̔eǼϚ="allʗ")\n>>> Ξts.iđŒnfʹo(Ϋ)\n<lˡ̻Ƶclass͆ȆͱΡ \'$ȃeϟμtʽrĄnϐa.ͣͷ̰ĳdaʲΑtɲaϯɼʗɂse͞ts.π\x8bűTSƳDaΥtŶasʊet\'̪>\nšnumȎ_sŝƅɘőegHɕmentȍsĚ\x80:Ɛ.ϱ \x8eΩ2\nMnɁum_\u038dϔǹexʒogs:ο \x91Ȥ1\nnu¶m͞ĤϦ_˴regDr˾ess¥o̴rs: Ř1ġˇ\nnϢ·um_ĄkʚùnoJwónϥ_fː^uͤtuʀre:Éˢ \x90ǳ1\n͡>f˗ƔrάeqF: ØD\n±  ̫ϐœ \xadͺ   ͗ɾϟ  ıp  ¹śǅsĿt\x98arΦt_ʙ˭̸timestʒamp ɻendå_Ǝ͙Ãtimestù¶͟aͻm̳͛p  ŰleĢnĤŏgt\x9dh  nâuùmɔɤ_ľɸmissiɥnǋgƊ\nsĤǘegbmνɧˈenˢtsȬ\nɎsÇeʍgĒmÕȂenόt_0  ʭ \x8e ϊ  20ƒĊ21ƴ-06-0˭ƍ1¼ ˍ  ̓ 2\x8402ɪ̞ɀɋ1˘-0Ʀĳ6ʩ-ð¶30 ñɎΜ ǘ͔ «˸  Łő 30 y  ɖ       ī ΞĔ 0\nsegmeǁéƙnt_1     ɯλ 20Μô21ƴ1-06ũ\u038dȈĄ-01    2021-06-30˪ȬR  ϫ  ĞÖ  ʀǔ30  Ϡ    Ȋ  ƍ ʋ   Ý\x9fɄ0')), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value="<class 'etna.datasets.TSDataset'>")], keywords=[])), Assign(targets=[Name(id='common_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_common_data', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='common_dict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='SEGMENTS_DICT', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_segments_data', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='SEGMENTS_DICT', ctx=Load())], keywords=[keyword(arg='index', value=Name(id='segments', ctx=Load()))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), attr='name', ctx=Store())], value=Constant(value='segments')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='option_context', ctx=Load()), args=[Constant(value='display.width'), Constant(value=None)], keywords=[]))], body=[AugAssign(target=Name(id='lines', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='to_string', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]))]), Assign(targets=[Name(id='result_string', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='result_string', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='start_idx', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='end_idx', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='df_slice', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=Name(id='start_idx', ctx=Load()), upper=Name(id='end_idx', ctx=Load())), ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Name(id='tsdataset_slice', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df_slice', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='tsdataset_slice', ctx=Load()), attr='known_future', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tsdataset_slice', ctx=Load()), attr='_regressors', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tsdataset_slice', ctx=Load()), attr='transforms', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tsdataset_slice', ctx=Load()), attr='df_exog', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())), Return(value=Name(id='tsdataset_slice', ctx=Load()))], decorator_list=[], returns=Constant(value='TSDataset')), FunctionDef(name='_check_known_future', args=arguments(posonlyargs=[], args=[arg(arg='known_futu', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load()), Name(id='Sequence', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='df_exog', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='df_exog', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='exog_columns', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='exog_columns', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='df_exog', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]))]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='known_futu', ctx=Load()), Name(id='s', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='known_futu', ctx=Load()), ops=[Eq()], comparators=[Constant(value='all')]), body=[Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='exog_columns', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueErrore', ctx=Load()), args=[Constant(value="The only possible literal is 'all'")], keywords=[]))])], orelse=[Assign(targets=[Name(id='known_future_unique', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='known_futu', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='known_future_unique', ctx=Load()), attr='issubset', ctx=Load()), args=[Name(id='exog_columns', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueErrore', ctx=Load()), args=[JoinedStr(values=[Constant(value='Some features in known_future are not present in df_exog: '), FormattedValue(value=Call(func=Attribute(value=Name(id='known_future_unique', ctx=Load()), attr='difference', ctx=Load()), args=[Name(id='exog_columns', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='known_future_unique', ctx=Load())], keywords=[]))])])], decorator_list=[Name(id='staticmethodBjWse', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load())), FunctionDef(name='_gather_segments_data', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='segments', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='̧Ga?ther#ƚ Òʦ˵ƧΉinĒforǀmǢɐati^̨o͝ŗnǳ ʥaΣboʹuɶÅt ϐŰʾeach ªs ɶeϓɖ^rg̓mĝeǸnt.')), AnnAssign(target=Name(id='SEGMENTS_DICT', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='s', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='start_timestamp'), Constant(value='end_timestamp'), Constant(value='length'), Constant(value='num_missing')], values=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())]), simple=1), For(target=Name(id='segment', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_series', ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='FIRST_INDEX', ctx=Store())], value=Call(func=Attribute(value=Name(id='segment_series', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='last_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='segment_series', ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='segment_series', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='segment_series', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Name(id='FIRST_INDEX', ctx=Load()), upper=Name(id='last_index', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='SEGMENTS_DICT', ctx=Load()), slice=Constant(value='start_timestamp'), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='FIRST_INDEX', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='SEGMENTS_DICT', ctx=Load()), slice=Constant(value='end_timestamp'), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='last_index', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='SEGMENTS_DICT', ctx=Load()), slice=Constant(value='length'), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='segment_series', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='SEGMENTS_DICT', ctx=Load()), slice=Constant(value='num_missing'), ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='isna', ctx=Load()), args=[Name(id='segment_series', ctx=Load())], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='SEGMENTS_DICT', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='s', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_check_regressors', args=arguments(posonlyargs=[], args=[arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='df_regressors', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='C̭Èheck that regressors ˳be͠ginJś not lateͪr thanƂ ¯in ``dfϳ``ǔ and end ́later than iķĐn ``df``.')), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='df_regressors', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='df_segments', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Name(id='df_segments', ctx=Load()), body=[Assign(targets=[Name(id='target_min', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='target_min', ctx=Store())], value=IfExp(test=Compare(left=Name(id='target_min', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='pd', ctx=Load()), attr='NaT', ctx=Load()), orelse=Name(id='target_min', ctx=Load()))), Assign(targets=[Name(id='target_max', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='target_max', ctx=Store())], value=IfExp(test=Compare(left=Name(id='target_max', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='pd', ctx=Load()), attr='NaT', ctx=Load()), orelse=Name(id='target_max', ctx=Load()))), Assign(targets=[Name(id='exog_series_min', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_regressors', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='exog_series_min', ctx=Store())], value=IfExp(test=Compare(left=Name(id='exog_series_min', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='pd', ctx=Load()), attr='NaT', ctx=Load()), orelse=Name(id='exog_series_min', ctx=Load()))), Assign(targets=[Name(id='exog_series_max', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_regressors', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='exog_series_max', ctx=Store())], value=IfExp(test=Compare(left=Name(id='exog_series_max', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='pd', ctx=Load()), attr='NaT', ctx=Load()), orelse=Name(id='exog_series_max', ctx=Load()))), If(test=Compare(left=Name(id='target_min', ctx=Load()), ops=[Lt()], comparators=[Name(id='exog_series_min', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueErrore', ctx=Load()), args=[JoinedStr(values=[Constant(value="All the regressor series should start not later than corresponding 'target'.Series of segment "), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1), Constant(value=' have not enough history: '), FormattedValue(value=Name(id='target_min', ctx=Load()), conversion=-1), Constant(value=' < '), FormattedValue(value=Name(id='exog_series_min', ctx=Load()), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='target_max', ctx=Load()), ops=[GtE()], comparators=[Name(id='exog_series_max', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueErrore', ctx=Load()), args=[JoinedStr(values=[Constant(value="All the regressor series should finish later than corresponding 'target'.Series of segment "), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1), Constant(value=' have not enough history: '), FormattedValue(value=Name(id='target_max', ctx=Load()), conversion=-1), Constant(value=' >= '), FormattedValue(value=Name(id='exog_series_max', ctx=Load()), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[Name(id='staticmethodBjWse', ctx=Load())]), FunctionDef(name='_update_regressors', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transform', annotation=Constant(value='Transform')), arg(arg='columns_before', annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load())), arg(arg='columns_after', annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='etna.transforms', names=[alias(name='OneHotEncoderTransform')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='FutureMixin')], level=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Load())], keywords=[]), attr='intersection', ctx=Load()), args=[Name(id='columns_after', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='unseen_columns', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Name(id='columns_after', ctx=Load()), op=Sub(), right=Name(id='columns_before', ctx=Load()))], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='unseen_columns', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='new_regressors', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='FutureMixin', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='out__columns', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Name(id='columns_after', ctx=Load()), op=Sub(), right=Name(id='columns_before', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='new_regressors', ctx=Store())], value=Name(id='out__columns', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='OneHotEncoderTransform', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='IN_COLUMN', ctx=Store())], value=Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load())), Assign(targets=[Name(id='out__columns', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Name(id='columns_after', ctx=Load()), op=Sub(), right=Name(id='columns_before', ctx=Load()))], keywords=[])), If(test=Compare(left=Name(id='IN_COLUMN', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())]), body=[Assign(targets=[Name(id='new_regressors', ctx=Store())], value=Name(id='out__columns', ctx=Load()))], orelse=[])], orelse=[If(test=Call(func=Name(id='hasa', ctx=Load()), args=[Name(id='transform', ctx=Load()), Constant(value='in_column')], keywords=[]), body=[Assign(targets=[Name(id='in_columns', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load()), orelse=List(elts=[Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load())], ctx=Load()))), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasa', ctx=Load()), args=[Name(id='transform', ctx=Load()), Constant(value='out_columns')], keywords=[]), Compare(left=Attribute(value=Name(id='transform', ctx=Load()), attr='out_columns', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='out__columns', ctx=Store())], value=Attribute(value=Name(id='transform', ctx=Load()), attr='out_columns', ctx=Load())), Assign(targets=[Name(id='regressors_in_column_id', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='IN_COLUMN', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='in_columns', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='IN_COLUMN', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='new_regressors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='out__columns', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='regressors_in_column_id', ctx=Load()), ifs=[], is_async=0)]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasa', ctx=Load()), args=[Name(id='transform', ctx=Load()), Constant(value='out_column')], keywords=[]), Compare(left=Attribute(value=Name(id='transform', ctx=Load()), attr='out_column', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='out__columns', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='transform', ctx=Load()), attr='out_column', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=Attribute(value=Name(id='transform', ctx=Load()), attr='out_column', ctx=Load()), orelse=List(elts=[Attribute(value=Name(id='transform', ctx=Load()), attr='out_column', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='regressors_in_column_id', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='IN_COLUMN', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='in_columns', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='IN_COLUMN', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='new_regressors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='out__columns', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='regressors_in_column_id', ctx=Load()), ifs=[], is_async=0)]))], orelse=[Assign(targets=[Name(id='out__columns', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Name(id='columns_after', ctx=Load()), op=Sub(), right=Name(id='columns_before', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='regressors_in_column', ctx=Store())], value=ListComp(elt=Name(id='IN_COLUMN', ctx=Load()), generators=[comprehension(target=Name(id='IN_COLUMN', ctx=Store()), iter=Name(id='in_columns', ctx=Load()), ifs=[Compare(left=Name(id='IN_COLUMN', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='new_regressors', ctx=Store())], value=ListComp(elt=Name(id='out_column', ctx=Load()), generators=[comprehension(target=Name(id='out_column', ctx=Store()), iter=Name(id='out__columns', ctx=Load()), ifs=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='any', ctx=Load()), args=[ListComp(elt=Compare(left=Name(id='regresso', ctx=Load()), ops=[In()], comparators=[Name(id='out_column', ctx=Load())]), generators=[comprehension(target=Name(id='regresso', ctx=Store()), iter=Name(id='regressors_in_column', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], is_async=0)]))])])], orelse=[Raise(exc=Call(func=Name(id='ValueErrore', ctx=Load()), args=[Constant(value='Transform is not FutureMixin and does not have in_column attribute!')], keywords=[]))])])]), Assign(targets=[Name(id='new_regressors', ctx=Store())], value=ListComp(elt=Name(id='regresso', ctx=Load()), generators=[comprehension(target=Name(id='regresso', ctx=Store()), iter=Name(id='new_regressors', ctx=Load()), ifs=[Compare(left=Name(id='regresso', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())])], is_async=0)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='new_regressors', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])