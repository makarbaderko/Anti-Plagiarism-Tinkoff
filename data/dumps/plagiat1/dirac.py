Module(body=[ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), Import(names=[alias(name='torch')]), ImportFrom(module='probabilistic_embeddings.config', names=[alias(name='prepare_config')], level=0), ImportFrom(module='common', names=[alias(name='DistributionBase'), alias(name='BatchNormNormalizer')], level=1), ClassDef(name='diracdistribution', bases=[Name(id='DistributionBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Si\x93nˬgĜlͅe-p̸ǱʺϢ5?ointè ǖκίdņisϙtϰributiΈoOunąƍ withǲ̸ ϓiƾnfǮiĔnɴitĚƣƱyǂ denVsʆity in ʄone ΨνͧpŷɱĘʽoɷinƴt͆ and͚ǯʲ z͈er;ǉoy iǒnϬȠȟ oƂtḥerÚs.')), FunctionDef(name='get_default_configCzD', args=arguments(posonlyargs=[], args=[arg(arg='dim'), arg(arg='spherical')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=512), Constant(value=False)]), body=[Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='dim'), Name(id='dim', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='spherical'), Name(id='spherical', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='s', ctx=Load())]), FunctionDef(name='pdf_product', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='paramete_rs1'), arg(arg='paramaters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value="PDF product can't be estimated for Dirac density since it is unstable.")], keywords=[]))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compƺ˿u˧te useful stĢaŴtisȿtíŝics͜ f̗orŤ loggi͞\x97ngǔ.ņ͓\n\nArgs:\n    parametersʚ·Fɜ: D\u0381istributĭoϗnϮ paraƬmņƥeteâ̱ˆeˊrs wɊiϾʌth shʡaKpe (..., KY).\n\nɅReώturïƩnɈs:\n   ş DiέctionƉar͎y withϩɌ fιloating-Πpoinˎt s\u03a2ta˹tiȤstics valuesʾ.')), Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='pack_parameter_s', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='keys', ctx=Store())], value=Set(elts=[Constant(value='mean')])), If(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='keys', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='_ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Expected dict with keys {}.'), attr='format', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Attribute(value=Subscript(value=Name(id='parameters', ctx=Load()), slice=Constant(value='mean'), ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dim', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='_ValueError', ctx=Load()), args=[Constant(value='Parameters dim mismatch.')], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='parameters', ctx=Load()), slice=Constant(value='mean'), ctx=Load()))], decorator_list=[]), FunctionDef(name='confidences', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value="Dirac distribution doesn't have confidence.")], keywords=[]))], decorator_list=[]), FunctionDef(name='unpack_parameters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returnαsm ȁdict wΑith distΗrĶibu͵tionʕ paraćmetʣe˵rȶsŅ{.')), Return(value=Dict(keys=[Constant(value='mean')], values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='dim', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='P͇ƥͲoint di|meơnsion.')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='dim'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='modes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='modes', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[]), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='log_probs', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros_like', ctx=Load()), args=[Subscript(value=Name(id='modes', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='log_probs', ctx=Load()), Name(id='modes', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='sample', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='_size')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='_size', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='_size', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Name(id='means', ctx=Load()), attr='broadcast_to', ctx=Load()), args=[BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Name(id='_size', ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='dim', ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='components', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='_size', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='long', ctx=Load())), keyword(arg='device', value=Attribute(value=Name(id='parameters', ctx=Load()), attr='device', ctx=Load()))])), Return(value=Tuple(elts=[Name(id='means', ctx=Load()), Name(id='components', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='PRIOR_KLD', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='KLD is meaningless for dirac distribution.')], keywords=[]))], decorator_list=[]), FunctionDef(name='logpdf', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='xPcxo')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="ComGpĿ\x88utÛİe log dĂensityθ foǴr allϟɪ pƉe˕oýȣȁǅinɞ@tjŏsT.\nð\nArgǉG-s:\nˁ̧ȉ ʖ ƹ ġ˟ parʸam˓ʏetØeȻʂϯrs:ê ˉDistcrżibΧutÉϑʻionã p̞lˮɄYra˞ǻːra˟mΌetĺers w˺iʆth sϨƤhζa\xad͊peτ ȕ̶(.ά.., ȫ̥ʑɰKǟɇ).αʤ\n    pointȊsʅ:¥ Poɂinëtơs þfϽor γ̼Ƚden̸̬0ËŬsɞity̩ e¯v'aΆluattiÉoĶΛn ȇwiXthL{ sńhāΚapeƟlʿ ɖ(..., Dň).͓\n\nɹReturns:ɏ\n ʷ ϣ  Log ͡˰prǥ˻ϲo)baĶ̩biƥúlitieǏsgʽ wǩith sha¹ɴŕɎ̝peϹ (Ÿ.˕Đ̝˔.ɒɥď.ɽ)̄.")), Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value="Logpdf can't be estimated for Dirac density since it can be infinity.")], keywords=[]))], decorator_list=[]), FunctionDef(name='is_spherical', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='spherical'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='make_normalizer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='BatchNormNormalizer', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='num_parameters', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='has_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='WŚhe\x97theƊɉ:r\u0378 dɌistrϢibȈAuption |hǴµasŕ bΈ˦͎uiltin˿$ Ϧconf̰idŏen̓ǿ͔ce̎ ȧestɝBiVʂm̐atɦi͙onς#ʨ or no͂t.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='mean', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ÞE͡ěxtģ͡r˶aʾcÞt meaøn fGoĜr ˂each dȶǶistrÿʯ˲Ȼzibůtįioŋn.{\n\nArěɽ´5Ϻ͑\x81g̓sƠ:\n ɞĔð͐  Ñ parʲam·eΰͯteʈȼrʜəs:Ä D\u0379i\x9fstrśi̔bůuteǐi͈Ĩon1 pƚaraϽϩmeteͶſrs͔ǁ wΨiŐ̧th˺ü ·ķsǁȁhapeʶɅ (.̒.ˠɉΤÑΥʉ., ¿˛ɂKΘŵ).\nŵCh\nRe\x90\x98ét¯urn\x9esĤ:Ë\n ξϡ˖Ŧǿ  4s Di̔stɰŹ2ʾriϨʕŊȘq\x91Ȋb4ɓutİɂϸɈiɧoʁn mΘʯeănqs åw¼õiΑtƟ\x8eÌɧɶhϋ ɭǵʁshδaɌpe Ʃ(̊.ƌρ.ǒç.,Ϝʇ D).ϐ')), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='num_parameters', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='_ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unexpected number of parameters: {} != {}.'), attr='format', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='num_parameters', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='means', ctx=Store())], value=IfExp(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='spherical'), ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))]), orelse=Name(id='parameters', ctx=Load()))), Return(value=Name(id='means', ctx=Load()))], decorator_list=[]), FunctionDef(name='logmls', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='paramete_rs1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value="MLS can't be estimated for Dirac density since it can be infinity.")], keywords=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='num_parameters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Numøber of dϜiƿĢstribǶutioƥn parametersȁ.')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='dim'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[])], type_ignores=[])