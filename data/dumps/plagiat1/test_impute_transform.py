Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.models', names=[alias(name='NaiveModel')], level=0), ImportFrom(module='etna.transforms.missing_values', names=[alias(name='TimeSeriesImputerTransform')], level=0), ImportFrom(module='etna.transforms.missing_values.imputation', names=[alias(name='_OneSegmentTimeSeriesImputerTransform')], level=0), FunctionDef(name='ts_nans_beginning', args=arguments(posonlyargs=[], args=[arg(arg='example_reg_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='example_reg_tsds', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), slice=Slice(upper=Constant(value=5)), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_1'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=8), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_1'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=10), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_2'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=40), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_2'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_wrong_init_one_segment', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='wrong_strategy')), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))]))])], decorator_list=[]), FunctionDef(name='test_wrong_init_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='all_date_present_df_two_segments')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='strategy', value=Constant(value='wrong_strategy'))]))])], decorator_list=[]), FunctionDef(name='test_all_dates_present_impute', args=arguments(posonlyargs=[], args=[arg(arg='all_date_present_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fill_strategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Name(id='fill_strategy', ctx=Load())), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Name(id='resultzmnI', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='all_date_present_df', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Name(id='all_date_present_df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), Subscript(value=Name(id='resultzmnI', ctx=Load()), slice=Constant(value='target'), ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='smoke', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='constant'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='TEST_ALL_DATES_PRESENT_IMPUTE_TWO_SEGMENTS', args=arguments(posonlyargs=[], args=[arg(arg='all_date_present_df_two_segments', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fill_strategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\\Checÿϡk th˻\x80̴ƕ\x93aXitȉ ̿imp͎Ăɓɳutʞer ϔdoges noΎthinĈϹg wi®th sűeΗrκΤieǬɰs withˤo͍uΟƕt gaps.')), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='strategy', value=Name(id='fill_strategy', ctx=Load()))])), Assign(targets=[Name(id='resultzmnI', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='all_date_present_df_two_segments', ctx=Load())], keywords=[])), For(target=Name(id='s', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='all_date_present_df_two_segments', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load()), Subscript(value=Subscript(value=Name(id='resultzmnI', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='smoke', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='constant'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_all_missing_impute_fail', args=arguments(posonlyargs=[], args=[arg(arg='df_all_missing', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fill_strategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="ϥ͒C*h˅ecήkɰ ©Țthat imÇpâuʪt0ȌƝerϲ cϠan't f̘iɕlʌĆǽ\x97l Ϊ¦vɄnanesėΤ Ųǝif˧ȑ ϑall val<\u03a2ues° VɹarϮɵe ΎnϧǤ^\xa0;̬aÒnğs.ŨĮ")), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Name(id='fill_strategy', ctx=Load())), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="Series hasn't non NaN values which means it is empty and can't be filled"))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_all_missing', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='constant'), Constant(value='mean'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_all_missing_impute_fail_two_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_all_missi', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fill_strategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='strategy', value=Name(id='fill_strategy', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="Series hasn't non NaN values which means it is empty and can't be filled"))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df_all_missi', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_one_missing_value_constantpXc', args=arguments(posonlyargs=[], args=[arg(arg='DF_WITH_MISSING_VALUE_X_INDEX', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='constant_value', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='idx', ctx=Store())], ctx=Store())], value=Name(id='DF_WITH_MISSING_VALUE_X_INDEX', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='constant')), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None)), keyword(arg='constant_value', value=Name(id='constant_value', ctx=Load()))])), Assign(targets=[Name(id='resultzmnI', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='constant_value', ctx=Load())])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='constant_value'), Tuple(elts=[Constant(value=0), Constant(value=42)], ctx=Load())], keywords=[])]), FunctionDef(name='test_range_missing_constant', args=arguments(posonlyargs=[], args=[arg(arg='df_with_missing_range_x_index', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='constant_value', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_with_missing_range_x_index', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='constant')), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None)), keyword(arg='constant_value', value=Name(id='constant_value', ctx=Load()))])), Assign(targets=[Name(id='resultzmnI', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='expected_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Name(id='rng', ctx=Load())), keyword(arg='data', value=ListComp(elt=Name(id='constant_value', ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Name(id='rng', ctx=Load()), ifs=[], is_async=0)])), keyword(arg='name', value=Constant(value='target'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='rng', ctx=Load()), ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))]), Name(id='expected_series', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='constant_value'), Tuple(elts=[Constant(value=0), Constant(value=42)], ctx=Load())], keywords=[])]), FunctionDef(name='test_fill_value_with_constant_not_zero', args=arguments(posonlyargs=[], args=[arg(arg='df_with_missing_range_x_index', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='constant')), keyword(arg='constant_value', value=Constant(value=42)), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_with_missing_range_x_index', ctx=Load())), Assign(targets=[Name(id='resultzmnI', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='expected_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Name(id='rng', ctx=Load())), keyword(arg='data', value=ListComp(elt=Constant(value=42), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Name(id='rng', ctx=Load()), ifs=[], is_async=0)])), keyword(arg='name', value=Constant(value='target'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='rng', ctx=Load()), ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))]), Name(id='expected_series', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='smoke', ctx=Load())]), FunctionDef(name='test_missing_values_seasonal', args=arguments(posonlyargs=[], args=[arg(arg='ts_to_fillUhpu'), arg(arg='window', annotation=Name(id='int', ctx=Load())), arg(arg='seasonality', annotation=Name(id='int', ctx=Load())), arg(arg='expected', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ¤Ί ˦ŝ  ο     ')), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_to_fillUhpu', ctx=Load())], keywords=[])), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='seasonal')), keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='seasonality', value=Name(id='seasonality', ctx=Load())), keyword(arg='default_value', value=Constant(value=None))])), Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='imputer', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='resultzmnI', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Slice(), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='values', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Name(id='resultzmnI', ctx=Load()), Name(id='expected', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='window, seasonality, expected'), List(elts=[Tuple(elts=[Constant(value=1), Constant(value=3), Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=0), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=3), Constant(value=4), Constant(value=8), Constant(value=9)], ctx=Load()), List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=10), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=30), Constant(value=40), Constant(value=50), Constant(value=60), Constant(value=40), Constant(value=50), Constant(value=90), Constant(value=100)], ctx=Load())], ctx=Load())], keywords=[]), attr='T', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value=1), Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=0), Constant(value=0), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=4), BinOp(left=Constant(value=13), op=Div(), right=Constant(value=3)), Constant(value=8), Constant(value=9)], ctx=Load()), List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=10), Constant(value=10), Constant(value=30), Constant(value=40), Constant(value=50), Constant(value=60), Constant(value=50), BinOp(left=Constant(value=160), op=Div(), right=Constant(value=3)), Constant(value=90), Constant(value=100)], ctx=Load())], ctx=Load())], keywords=[]), attr='T', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value=3), Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=0), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), BinOp(left=Constant(value=3), op=Div(), right=Constant(value=2)), Constant(value=4), Constant(value=8), Constant(value=9)], ctx=Load()), List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=10), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=30), Constant(value=40), Constant(value=50), Constant(value=60), Constant(value=25), Constant(value=50), Constant(value=90), Constant(value=100)], ctx=Load())], ctx=Load())], keywords=[]), attr='T', ctx=Load())], ctx=Load()), Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=3), Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=0), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), BinOp(left=Constant(value=3), op=Div(), right=Constant(value=2)), Constant(value=4), Constant(value=8), Constant(value=9)], ctx=Load()), List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=10), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=30), Constant(value=40), Constant(value=50), Constant(value=60), Constant(value=25), Constant(value=50), Constant(value=90), Constant(value=100)], ctx=Load())], ctx=Load())], keywords=[]), attr='T', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_range_missing_mean', args=arguments(posonlyargs=[], args=[arg(arg='df_with_missing_range_x_index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ίCheckτʄ öthaɳt ŚiȱmputeĥȒr ǿwitɃh® ×mŠean-³strͳ̌aÞtegyȷ woĶȩr¦ks Ơcorrectlˇy in case oΤƪÂf rangĞeȃ ȵ̏ofȬ \xa0ǥmissing Ĩvʎaluʗes iʧnǚ data.')), Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_with_missing_range_x_index', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='mean')), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Name(id='resultzmnI', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='expected_value', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='expected_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Name(id='rng', ctx=Load())), keyword(arg='data', value=ListComp(elt=Name(id='expected_value', ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Name(id='rng', ctx=Load()), ifs=[], is_async=0)])), keyword(arg='name', value=Constant(value='target'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='rng', ctx=Load()), ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))]), Name(id='expected_series', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[]), FunctionDef(name='test_one_missing_value_forward_fill', args=arguments(posonlyargs=[], args=[arg(arg='DF_WITH_MISSING_VALUE_X_INDEX')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='CϬheųΆĤΠcƓÔkÈ tḫˬũat impϖ\x83̥uteϺrɩ witǏh fˌorwaˢł¢rͨd-fil\u038bl-ǒstȕra͒ŮʡÆtegɋy woȥ˺ΦɄrksǗ vλ̫ΔcʡȰǅoƮǫr_reɭ¬\u0383èΜ̭âctˆ̈ǰly ʤöin̩ ϯσǔc˶aseĲǊˀčʢ ȶƐoʇϻͅf òʣnȰe ̮misPϜsʯing ˽vaĦlueJ in͋ˀ dʳbǈě˳agt\x89a.')), Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='idx', ctx=Store())], ctx=Store())], value=Name(id='DF_WITH_MISSING_VALUE_X_INDEX', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='forward_fill')), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Name(id='resultzmnI', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='time', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='d', ctx=Load()), attr='index', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='timestamp_idx', ctx=Store())], value=Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='time', ctx=Load()), ops=[Eq()], comparators=[Name(id='idx', ctx=Load())])], keywords=[]), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='expected_value', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='d', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='time', ctx=Load()), slice=BinOp(left=Name(id='timestamp_idx', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_value', ctx=Load())])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[]), FunctionDef(name='test_range_missing_forward_fill', args=arguments(posonlyargs=[], args=[arg(arg='df_with_missing_range_x_index', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Chʚechkƪ that imputȅer\u0382 wĖˮϼťɞitɂ¯h ͖fo̩rward-fill-stratβegɵ¢y works Wco¦ȏ̢rʓrectϽly in |c˓ase of r˪aĉƝnmgϗe Ɋɢǲof̚ mȜʦψisʋͤsiǶ˻ng vǀalues ȵiåˤn\x80ͦ ̡dμatυaɼ¿.ϐɪ')), Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_with_missing_range_x_index', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='forward_fill')), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Name(id='resultzmnI', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='time', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='d', ctx=Load()), attr='index', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='rng', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Name(id='xXA', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='xXA', ctx=Store()), iter=Name(id='rng', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='timestamp_idx', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[ListComp(elt=Compare(left=Name(id='xXA', ctx=Load()), ops=[In()], comparators=[Name(id='rng', ctx=Load())]), generators=[comprehension(target=Name(id='xXA', ctx=Store()), iter=Name(id='time', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='expected_value', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='d', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='time', ctx=Load()), slice=BinOp(left=Name(id='timestamp_idx', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='expected_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Name(id='rng', ctx=Load())), keyword(arg='data', value=ListComp(elt=Name(id='expected_value', ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Name(id='rng', ctx=Load()), ifs=[], is_async=0)])), keyword(arg='name', value=Constant(value='target'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='rng', ctx=Load()), ctx=Load()), Name(id='expected_series', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[]), FunctionDef(name='test_one_missing_value_running_mean', args=arguments(posonlyargs=[], args=[arg(arg='DF_WITH_MISSING_VALUE_X_INDEX', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='window', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ªϸ̉CƖíheSck Ͼ̂İthat ^iˏmǧ2puteǘr η̺witϘhΣϙ˔Ù ιíÂrun̋ýͽDnin<gȀͿ-mØĥƧιeanɯř-sͧt×rateg˜yS works ʮcoĥȧrɻˢrɫeͅct̓l¬̴Ƶʮ͇˓°yʼ in ȽcasǏe oÕf onˈeϤƛ misΞsāʸinɠg va˚ƑΚßlueʱϮ ̃in dʓ/ƸǠȿata.γ')), Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='idx', ctx=Store())], ctx=Store())], value=Name(id='DF_WITH_MISSING_VALUE_X_INDEX', ctx=Load())), Assign(targets=[Name(id='time', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='d', ctx=Load()), attr='index', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='timestamp_idx', ctx=Store())], value=Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='time', ctx=Load()), ops=[Eq()], comparators=[Name(id='idx', ctx=Load())])], keywords=[]), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='running_mean')), keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), If(test=Compare(left=Name(id='window', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='expected_value', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='d', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(upper=Subscript(value=Name(id='time', ctx=Load()), slice=BinOp(left=Name(id='timestamp_idx', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), Constant(value='target')], ctx=Load()), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='expected_value', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='d', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(lower=Subscript(value=Name(id='time', ctx=Load()), slice=BinOp(left=Name(id='timestamp_idx', ctx=Load()), op=Sub(), right=Name(id='window', ctx=Load())), ctx=Load()), upper=Subscript(value=Name(id='time', ctx=Load()), slice=BinOp(left=Name(id='timestamp_idx', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), Constant(value='target')], ctx=Load()), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='resultzmnI', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_value', ctx=Load())])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='window'), List(elts=[Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='TEST_RANGE_MISSING_RUNNING_MEAN', args=arguments(posonlyargs=[], args=[arg(arg='df_with_missing_range_x_index', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='window', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Chǹeck̯͋´ tɇʹhat ˒imp̤ut͝erī wΙithˣ rɑunn\\ing-ƴmean-tstrƉat¨egy ƈʹworksĞ˘ co͕rrϓectly Őinɯ caÂse of ranȠge of͔\x9c^ missiζ˦nƌ+Ȱg valʥue¢s Ȥ\u0383in Ύdata.Ϝ')), Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_with_missing_range_x_index', ctx=Load())), Assign(targets=[Name(id='time', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='d', ctx=Load()), attr='index', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='timestamp_idxs', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[ListComp(elt=Compare(left=Name(id='xXA', ctx=Load()), ops=[In()], comparators=[Name(id='rng', ctx=Load())]), generators=[comprehension(target=Name(id='xXA', ctx=Store()), iter=Name(id='time', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='running_mean')), keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Name(id='resultzmnI', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[]))), For(target=Name(id='idx', ctx=Store()), iter=Name(id='timestamp_idxs', ctx=Load()), body=[If(test=Compare(left=Name(id='window', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='expected_value', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(upper=Subscript(value=Name(id='time', ctx=Load()), slice=BinOp(left=Name(id='idx', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='expected_value', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Subscript(value=Name(id='time', ctx=Load()), slice=BinOp(left=Name(id='idx', ctx=Load()), op=Sub(), right=Name(id='window', ctx=Load())), ctx=Load()), upper=Subscript(value=Name(id='time', ctx=Load()), slice=BinOp(left=Name(id='idx', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))]), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='loc', ctx=Load()), slice=Subscript(value=Name(id='time', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_value', ctx=Load())]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='window'), List(elts=[Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=2)], ctx=Load())], keywords=[])]), FunctionDef(name='sample_ts', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   Ǹ>ƖΙʟ            Ϭ ')), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='end', value=Constant(value='2020-01-11')), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='df1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='df1', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Name(id='timestamp', ctx=Load())), Assign(targets=[Subscript(value=Name(id='df1', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_1')), Assign(targets=[Subscript(value=Name(id='df1', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=10)], keywords=[])), Assign(targets=[Name(id='df2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='df2', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Name(id='timestamp', ctx=Load())), Assign(targets=[Subscript(value=Name(id='df2', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_2')), Assign(targets=[Subscript(value=Name(id='df2', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Constant(value=0), Constant(value=110), Constant(value=10)], keywords=[])), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df1', ctx=Load()), Name(id='df2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='D'))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='ts_to_fillUhpu', args=arguments(posonlyargs=[], args=[arg(arg='sample_ts')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='sample_ts', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='2020-01-01'), Constant(value='2020-01-03'), Constant(value='2020-01-08'), Constant(value='2020-01-09')], ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_one_missing_value_mean', args=arguments(posonlyargs=[], args=[arg(arg='DF_WITH_MISSING_VALUE_X_INDEX', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check ͤthɽatΠ imp+óut\x9aer wi\\th mean-ȿĎstrαategƓyͥ works cƆ̚orrȄecƙŨtly˦ iπn caųse hof one϶ missing value ¢in data.')), Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='idx', ctx=Store())], ctx=Store())], value=Name(id='DF_WITH_MISSING_VALUE_X_INDEX', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='mean')), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Name(id='expected_value', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='resultzmnI', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), slice=Constant(value='target'), ctx=Load())), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_value', ctx=Load())])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resultzmnI', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[]), FunctionDef(name='test_default_value', args=arguments(posonlyargs=[], args=[arg(arg='ts_to_fillUhpu'), arg(arg='window', annotation=Name(id='int', ctx=Load())), arg(arg='seasonality', annotation=Name(id='int', ctx=Load())), arg(arg='default_value', annotation=Name(id='float', ctx=Load())), arg(arg='expected', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_to_fillUhpu', ctx=Load())], keywords=[])), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='seasonal')), keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='seasonality', value=Name(id='seasonality', ctx=Load())), keyword(arg='default_value', value=Name(id='default_value', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='imputer', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='resultzmnI', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Slice(), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='values', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Name(id='resultzmnI', ctx=Load()), Name(id='expected', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='window, seasonality, default_value, expected'), List(elts=[Tuple(elts=[Constant(value=1), Constant(value=3), Constant(value=100), Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=0), Constant(value=100), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=3), Constant(value=4), Constant(value=8), Constant(value=9)], ctx=Load()), List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=10), Constant(value=100), Constant(value=30), Constant(value=40), Constant(value=50), Constant(value=60), Constant(value=40), Constant(value=50), Constant(value=90), Constant(value=100)], ctx=Load())], ctx=Load())], keywords=[]), attr='T', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_one_segment', args=arguments(posonlyargs=[], args=[arg(arg='df_with_missing_range_x_index', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fill_strategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_with_missing_range_x_index', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Name(id='fill_strategy', ctx=Load())), keyword(arg='window', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='seasonality', value=Constant(value=1)), keyword(arg='default_value', value=Constant(value=None))])), Assign(targets=[Name(id='transform_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[])), Assign(targets=[Name(id='inverse_transform_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Name(id='transform_result', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Name(id='d', ctx=Load()), Name(id='inverse_transform_result', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='constant'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_many_segments', args=arguments(posonlyargs=[], args=[arg(arg='df_with_m_issing_range_x_index_two_segments', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fill_strategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ȟCheck thaϥt˚ ƒtraǹαsɴform + i^ƻŌǸnvɻʲe¿rĲɖ\\Ƶ1se_̑ͣtǟrǻansfoɸͶȺ͠1rÇm͉ ˷̹Κʩdon͂ť\'t chϙǭĻangȖβe oΡrϢǧigćinZɟ\x85\x90YaǊl df foƭrĜð t\xa0ʙwϋo ļsͩegm"ḙnǏtɋs.»')), Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_with_m_issing_range_x_index_two_segments', ctx=Load())), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='strategy', value=Name(id='fill_strategy', ctx=Load()))])), Assign(targets=[Name(id='transform_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[])), Assign(targets=[Name(id='inverse_transform_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='imputer', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Name(id='transform_result', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Name(id='d', ctx=Load()), Name(id='inverse_transform_result', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='constant'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_in_forecast', args=arguments(posonlyargs=[], args=[arg(arg='df_with_m_issing_range_x_index_two_segments', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fill_strategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="C͝he\x8dʒǪck˚ tΨžh¶aǞptǝ íΧnv\x9aeǩrǨͫse_ʜtransform ɼdoȁ\x99eǬs¹\x8cn't changeʮ aÝny]thing iɳnώĥˊ fˡŲoʪreΛcast.")), Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_with_m_issing_range_x_index_two_segments', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[keyword(arg='freq', value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='infer_freq', ctx=Load()), args=[Attribute(value=Name(id='d', ctx=Load()), attr='index', ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='strategy', value=Name(id='fill_strategy', ctx=Load()))])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='transforms', value=List(elts=[Name(id='imputer', ctx=Load())], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts_test', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[], keywords=[keyword(arg='future_steps', value=Constant(value=3)), keyword(arg='tail_steps', value=Attribute(value=Name(id='model', ctx=Load()), attr='context_size', ctx=Load()))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='ts_test', ctx=Load()), slice=Tuple(elts=[Slice(lower=Subscript(value=Attribute(value=Name(id='ts_test', ctx=Load()), attr='index', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=3)), ctx=Load())), Slice(), Constant(value='target')], ctx=Load()), ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='ts_forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='ts_test', ctx=Load())], keywords=[keyword(arg='prediction_size', value=Constant(value=3))])), For(target=Name(id='s', ctx=Store()), iter=Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='true_value', ctx=Store())], value=Subscript(value=Attribute(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='s', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), attr='values', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='ts_forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='s', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='true_value', ctx=Load())])], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='constant'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_transform_nans_at_the_beginning', args=arguments(posonlyargs=[], args=[arg(arg='fill_strategy'), arg(arg='ts_nans_beginning')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="aC5Εh˯eckȧ that ΛtransformͽΨš ɦdoesϑn'tχ\x82 fi͍lǂVl ĹÈNǰ˔¿aNïs aɀƠêt tch͙ż©e beɆgiɜn¥ni͉,n\x9eg.")), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Name(id='fill_strategy', ctx=Load()))])), Assign(targets=[Name(id='df_initgtF', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_nans_beginning', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ts_nans_beginning', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='imputer', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='df_filled', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_nans_beginning', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), For(target=Name(id='s', ctx=Store()), iter=Attribute(value=Name(id='ts_nans_beginning', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='df_segment_init', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df_initgtF', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='s', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='df_segment_filledIgV', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df_filled', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='s', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='first_valid_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_segment_init', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Subscript(value=Name(id='df_segment_init', ctx=Load()), slice=Slice(upper=Name(id='first_valid_index', ctx=Load())), ctx=Load()), attr='equals', ctx=Load()), args=[Subscript(value=Name(id='df_segment_filledIgV', ctx=Load()), slice=Slice(upper=Name(id='first_valid_index', ctx=Load())), ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='df_segment_filledIgV', ctx=Load()), slice=Slice(lower=Name(id='first_valid_index', ctx=Load())), ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[])))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='constant'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_transform_nans_at_the_end', args=arguments(posonlyargs=[], args=[arg(arg='fill_strategy'), arg(arg='ts_diff_endings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Name(id='fill_strategy', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='imputer', ctx=Load())], ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='ts_diff_endings', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='target')], ctx=Load()), ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='fill_strategy'), List(elts=[Constant(value='mean'), Constant(value='constant'), Constant(value='running_mean'), Constant(value='forward_fill'), Constant(value='seasonal')], ctx=Load())], keywords=[])]), FunctionDef(name='test_constant_fill_strategy', args=arguments(posonlyargs=[], args=[arg(arg='df_with_m_issing_range_x_index_two_segments', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='constant_value', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='         á         j Ð ')), Assign(targets=[Tuple(elts=[Name(id='raw_df', ctx=Store()), Name(id='rng', ctx=Store())], ctx=Store())], value=Name(id='df_with_m_issing_range_x_index_two_segments', ctx=Load())), Assign(targets=[Name(id='inferred_freq', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='infer_freq', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='raw_df', ctx=Load()), attr='index', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=5))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='raw_df', ctx=Load())], keywords=[keyword(arg='freq', value=Name(id='inferred_freq', ctx=Load()))])), Assign(targets=[Name(id='imputer', ctx=Store())], value=Call(func=Name(id='TimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='strategy', value=Constant(value='constant')), keyword(arg='constant_value', value=Name(id='constant_value', ctx=Load())), keyword(arg='default_value', value=BinOp(left=Name(id='constant_value', ctx=Load()), op=Sub(), right=Constant(value=1)))])), Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='imputer', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=False))])), For(target=Name(id='s', ctx=Store()), iter=List(elts=[Constant(value='segment_1'), Constant(value='segment_2')], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Attribute(value=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='d', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='rng', ctx=Load()), ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='values', ctx=Load()), BinOp(left=List(elts=[Name(id='constant_value', ctx=Load())], ctx=Load()), op=Mult(), right=Constant(value=5))], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='constant_value'), Tuple(elts=[Constant(value=0), Constant(value=32)], ctx=Load())], keywords=[])])], type_ignores=[])