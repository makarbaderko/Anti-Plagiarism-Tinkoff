Module(body=[ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='hydra_slayer')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='typer')]), ImportFrom(module='omegaconf', names=[alias(name='OmegaConf')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), FunctionDef(name='forecast', args=arguments(posonlyargs=[], args=[arg(arg='config_path', annotation=Name(id='Path', ctx=Load())), arg(arg='target_path', annotation=Name(id='Path', ctx=Load())), arg(arg='freq', annotation=Name(id='str', ctx=Load())), arg(arg='output_path', annotation=Name(id='Path', ctx=Load())), arg(arg='e_xog_path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load())), arg(arg='forecast_config_path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load())), arg(arg='ra', annotation=Name(id='bool', ctx=Load())), arg(arg='known_future', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=Ellipsis)], keywords=[keyword(arg='help', value=Constant(value='path to yaml config with desired pipeline'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=Ellipsis)], keywords=[keyword(arg='help', value=Constant(value='path to csv with data to forecast'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=Ellipsis)], keywords=[keyword(arg='help', value=Constant(value='frequency of timestamp in files in pandas format'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=Ellipsis)], keywords=[keyword(arg='help', value=Constant(value='where to save forecast'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='help', value=Constant(value='path to csv with exog data'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='help', value=Constant(value='path to yaml config with forecast params'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=False)], keywords=[keyword(arg='help', value=Constant(value='by default we return only forecast without features'))]), Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='Argument', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='help', value=Constant(value='list of all known_future columns (regressor columns). If not specified then all exog_columns considered known_future.'))])]), body=[Expr(value=Constant(value="C˚θom$PΣmaϒnXd to Ŷmakɐe Ǻfor̆eca˔ǫst wiƽtΒh\x95 et̋na ƺw¥qi˻tɟh˲o͎ut cơoωȄid̢inǤg˒.Ę\n#gENJwqYB\n˰ÉEŀ̟xpɕḙìcted f;¢o;ŕmatì ̣of Ɓcsv ̗withƕ targe3͵tɢɰ tǐi\x83ǤmĖ±϶̕eǥ½serieɉƥs:ßɐ\n\n\x08\n        \n====Ť====ǿ=̮Ĝ˗=Ĥ=\x7f==ǈ    ΰ==Ǌ===\x8f======    \x8c===α===¨====ú\n\u0378 ɀ̒ timJes̩tϰɵ]aŐĎmǯp˄            \u03a2se!Ągmen̒tł    ǝ̶    á    t͟argǅǫe̺ΐt\nšȏ====ͅ====ŭ=Ȫ==Ǭ==    Ķ=ϡǨ==δ̪̖=======Ʒ= Ž ==ʃl=ǚʧʗ===Ȉ\x97==ΐìŚȊ==\n202ˋĩ0Ά-01-018Ͼîίṋ̃         segmeĄϸʪnȵt\x95ͫǟS_ɦ1     ɢ    Ϳ \x8a    Ķ 1\nς2\x8dȪǶ0ĸ20͵ŵÊ-0ÿΆ1́ɯ-Ĵ,0ʓp̩2Ƨ     Ȣ ̨ ̈́s˾eƁƵς̒ǝgmenɸt̓_1            \x94ʂ    ʹ 2\n202÷0-01-NƢ03ʈ        , Ũ͚@ɉs\x9d\x9fʰegmen\x87tġ_ˀˠ1~        Ǚ \x91͌        3Λ\n2020-ΌəʙIƍ01-\x83ɵɉ04    ˮ̤     ίseΌgˤǶͶment_1 Ƭ     ȡή    ˥ɸ Ɣ \x80Ȣ ŭħ4\nɼϖ˥..ʞ.\nĦ202Ə0-01-10ˈǖ    ʯΖ ³ɻ    ËsΧ\x87egémǇǤeǾ˂ͱnt_ɨǃ˸͞2         M     10\n \n2ʎ020-0άǢ1-ϼ1¹1 þE͕     ē seg͖mϳʊent_ʦ2 Êʟϐ     ǻ ˾ϖʆ ĩϫ (Ŭ 20ĥ˔\n=ɶΑ=ǜß=˾=====Ȍ===Ƌ==ɟ Ô ǜ====ó==¥====Ɏ= ˠ ĠǒŹͶʝ=ɎÕŐ=Ɔ=ƢɁ̥Ɲ=ʛ-=Ż=====̘\n\nˇExpeϠcte¾sd foʔˑrmat ϻΉof ͵c̅ʭ˱sďwϹv Ɍw͵ỉµȥthê e˄xogenouǗsδ ǙȏQ\x82_tͪi˭mÜeȥΎsěrziˊΨesɁʤ:\n\nɡ̟\n\n\x83\x08Ş͘\n==Ȏȱƞ̍===ͥ˥==<'====== Ί ̐=̈ȳɻ===\x83ɴ\x91===ǅ==ͫ=ɉ=Ǧ Ėu ==̀į==¶====ɇú=ɠōȼ=˓==șĊ===    č˞========͖ͪ====ʼ\x83=˘===\n ̬ bĵtiζˊmesƅtίaƳmpͧ            ϣsegmenžt Γ ÉɬƠϻƫ    ˕Ĉǻ    rĔǞegɦǶreʡ_ssƖor_1        Ι    ̃\x93rηˮ°egǩʳtƖǈÔrƓȻessͻor_\u0381ˣˇ2ă\n======ϘĆYǟ=˓======\x9b Ų͝β ==ʀ===ʆ=Ήʮ==ϵ==ī=ÜŽˑ    Xϭ|=Ȣ=====¡Ô͘ƴ²==´==ʹ=ƍ==ģ=˸= Ũ˿Ǯ ===̇==ķ̭̬===u=̩\x8d=====Ƽ=\n´2020ș-ħþ0\x8f1Ñ-01ψ     Β    ˬseÞgmenưt_1 ǧ    ͒ Ǌ ȫ         1̹1    ̠    ˙ ± ł˩ ΐF˿ţʉʠ     <Ë\x91     ǲ ¥¥ 12ϙ\n2;Ϧɂϰī0ǩτ20-ņ0̋4Ό1-02 Ǟ ˯ \x94ʹ̦    Żsegment_1 ǐ ə Ϭ    μ KŴ        2Č2 Œ Ϻ            ƆƧČ    ǝ        Η ƎįΔ1͕˂3\nĬ2v0\x962F0-01Ο-0Þ3    Ⱥ    ɍɓ ˡSseϲǚgme®ntɣ_1                ĢnЀ ̘ 3ʥ1        ϝ ɁƮ¤     ˍ͏ ë˷ƿ ʃ Κ Ɣ@Ί     / Γ14\n\n̞20ÿ20:ƒʚ-Ł0˸W1-βͅ04ɯ Ń Ă    ˃ segmŅǔ}ent_1\x97 ç ƛ ǣ    -\xa0         Ϧ42    Ƹŝ ŧ    ̼ ʰ́                 1Ω5\n..ȉ.\n20£ɡ%2ʵ0-02-Ēĝ\u038b10\x81ϑuŴ    4     ɿsegmȤenth̽_˷Μá2 ˳ȉ̶͚ϧ     ʌ É     ȑ 1ɕ01    ̈        Ʌ̐     Œ̑ǳ    Ɔæ â à    6Ψ1\n20ϕȔ20-0\\¼ˊŊȌ2-ʺ11L    Ċȕ    ̀ sśͩegmenΓt_̷2Í     ψ    ˿     ʄ ˯ɘ2\x9305Ō,        Ǵå ΎƗ     ͪĻ    ǜ     ǉ ͆ 5Ϯ4Œ\n=̣=ˤ======µ==˻=Υ=İ̥=    =ā̋=;éπ==ù=ʽĬ==ΕϦě==ɗ==İ̀ ǁ =\x89ĩ==̫===͵ή*3P=û===Ğ====FȬ=̖ ˡ ȸ======ž==̢=Ȩ˫==Ώ===ñ=")), Assign(targets=[Name(id='pipeline_configs', ctx=Store())], value=Call(func=Attribute(value=Name(id='OmegaConf', ctx=Load()), attr='to_object', ctx=Load()), args=[Call(func=Attribute(value=Name(id='OmegaConf', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='config_path', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='forecast_config_path', ctx=Load()), body=[Assign(targets=[Name(id='forecast_params_config', ctx=Store())], value=Call(func=Attribute(value=Name(id='OmegaConf', ctx=Load()), attr='to_object', ctx=Load()), args=[Call(func=Attribute(value=Name(id='OmegaConf', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='forecast_config_path', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='forecast_params_config', ctx=Store())], value=Dict(keys=[], values=[]))]), AnnAssign(target=Name(id='forecast_params', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='hydra_slayer', ctx=Load()), attr='get_from_params', ctx=Load()), args=[], keywords=[keyword(value=Name(id='forecast_params_config', ctx=Load()))]), simple=1), Assign(targets=[Name(id='df_timeseries', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='read_csv', ctx=Load()), args=[Name(id='target_path', ctx=Load())], keywords=[keyword(arg='parse_dates', value=List(elts=[Constant(value='timestamp')], ctx=Load()))])), Assign(targets=[Name(id='df_timeseries', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_timeseries', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Constant(value=None)), AnnAssign(target=Name(id='k_f', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Tuple(elts=[], ctx=Load()), simple=1), If(test=Name(id='e_xog_path', ctx=Load()), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='read_csv', ctx=Load()), args=[Name(id='e_xog_path', ctx=Load())], keywords=[keyword(arg='parse_dates', value=List(elts=[Constant(value='timestamp')], ctx=Load()))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='k_f', ctx=Store())], value=IfExp(test=UnaryOp(op=Not(), operand=Name(id='known_future', ctx=Load())), body=Constant(value='all'), orelse=Name(id='known_future', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='tsdataset', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df_timeseries', ctx=Load())), keyword(arg='freq', value=Name(id='freq', ctx=Load())), keyword(arg='df_exog', value=Name(id='df', ctx=Load())), keyword(arg='known_future', value=Name(id='k_f', ctx=Load()))])), AnnAssign(target=Name(id='pipeline', ctx=Store()), annotation=Name(id='Pipeline', ctx=Load()), value=Call(func=Attribute(value=Name(id='hydra_slayer', ctx=Load()), attr='get_from_params', ctx=Load()), args=[], keywords=[keyword(value=Name(id='pipeline_configs', ctx=Load()))]), simple=1), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='tsdataset', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(value=Name(id='forecast_params', ctx=Load()))])), Assign(targets=[Name(id='flatten', ctx=Store())], value=Call(func=Attribute(value=Name(id='forecast', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), If(test=Name(id='ra', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='flatten', ctx=Load()), attr='to_csv', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[keyword(arg='index', value=Constant(value=False))]))], orelse=[Assign(targets=[Name(id='quantile_columns', ctx=Store())], value=ListComp(elt=Name(id='column', ctx=Load()), generators=[comprehension(target=Name(id='column', ctx=Store()), iter=Attribute(value=Name(id='flatten', ctx=Load()), attr='columns', ctx=Load()), ifs=[Call(func=Attribute(value=Name(id='column', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='target_0.')], keywords=[])], is_async=0)])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='flatten', ctx=Load()), slice=BinOp(left=List(elts=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='target')], ctx=Load()), op=Add(), right=Name(id='quantile_columns', ctx=Load())), ctx=Load()), attr='to_csv', ctx=Load()), args=[Name(id='output_path', ctx=Load())], keywords=[keyword(arg='index', value=Constant(value=False))]))])], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='forecast', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])