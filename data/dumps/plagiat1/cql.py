Module(body=[ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Dict'), alias(name='List'), alias(name='Optional'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='dataclasses', names=[alias(name='asdict'), alias(name='dataclass')], level=0), Import(names=[alias(name='os')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), Import(names=[alias(name='random')]), Import(names=[alias(name='uuid')]), Import(names=[alias(name='d4rl')]), Import(names=[alias(name='gym')]), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pyrallis')]), Import(names=[alias(name='torch')]), ImportFrom(module='torch.distributions', names=[alias(name='Normal'), alias(name='TanhTransform'), alias(name='TransformedDistribution')], level=0), Import(names=[alias(name='torch.nn', asname='nn')]), Import(names=[alias(name='torch.nn.functional', asname='F')]), Import(names=[alias(name='wandb')]), Assign(targets=[Name(id='TensorBatch', ctx=Store())], value=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load()), ctx=Load())), FunctionDef(name='eval_actor', args=arguments(posonlyargs=[], args=[arg(arg='env', annotation=Attribute(value=Name(id='gym', ctx=Load()), attr='Env', ctx=Load())), arg(arg='actor', annotation=Attribute(value=Name(id='nn', ctx=Load()), attr='Module', ctx=Load())), arg(arg='device', annotation=Name(id='str', ctx=Load())), arg(arg='n_episodes', annotation=Name(id='int', ctx=Load())), arg(arg='seed', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Ę̹   ͈ŉ  ɇ   ͊Βł')), Expr(value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='seed', ctx=Load()), args=[Name(id='seed', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='actor', ctx=Load()), attr='eval', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='episode_rewards', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_episodes', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='state', ctx=Store()), Name(id='done', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]), Constant(value=False)], ctx=Load())), Assign(targets=[Name(id='episode_reward', ctx=Store())], value=Constant(value=0.0)), While(test=UnaryOp(op=Not(), operand=Name(id='done', ctx=Load())), body=[Assign(targets=[Name(id='action', ctx=Store())], value=Call(func=Attribute(value=Name(id='actor', ctx=Load()), attr='act', ctx=Load()), args=[Name(id='state', ctx=Load()), Name(id='device', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='state', ctx=Store()), Name(id='reward', ctx=Store()), Name(id='done', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='step', ctx=Load()), args=[Name(id='action', ctx=Load())], keywords=[])), AugAssign(target=Name(id='episode_reward', ctx=Store()), op=Add(), value=Name(id='reward', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='episode_rewards', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='episode_reward', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='actor', ctx=Load()), attr='train', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='episode_rewards', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='no_grad', ctx=Load()), args=[], keywords=[])], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='soft_update', args=arguments(posonlyargs=[], args=[arg(arg='target', annotation=Attribute(value=Name(id='nn', ctx=Load()), attr='Module', ctx=Load())), arg(arg='source', annotation=Attribute(value=Name(id='nn', ctx=Load()), attr='Module', ctx=Load())), arg(arg='tau', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='target_param', ctx=Store()), Name(id='source_param', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='z', ctx=Load()), args=[Call(func=Attribute(value=Name(id='target', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='target_param', ctx=Load()), attr='data', ctx=Load()), attr='copy_', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='tau', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='target_param', ctx=Load()), attr='data', ctx=Load())), op=Add(), right=BinOp(left=Name(id='tau', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='source_param', ctx=Load()), attr='data', ctx=Load())))], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='compute_mean_std', args=arguments(posonlyargs=[], args=[arg(arg='states', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='eps', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mean', ctx=Store())], value=Call(func=Attribute(value=Name(id='states', ctx=Load()), attr='mean', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='std', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='states', ctx=Load()), attr='std', ctx=Load()), args=[Constant(value=0)], keywords=[]), op=Add(), right=Name(id='eps', ctx=Load()))), Return(value=Tuple(elts=[Name(id='mean', ctx=Load()), Name(id='std', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='normalize_states', args=arguments(posonlyargs=[], args=[arg(arg='states', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='mean', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='std', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ƌƅʕ ď̃  ɻƒ     Ɩ ή »͉ ɞ ͷ  ')), Return(value=BinOp(left=BinOp(left=Name(id='states', ctx=Load()), op=Sub(), right=Name(id='mean', ctx=Load())), op=Div(), right=Name(id='std', ctx=Load())))], decorator_list=[]), FunctionDef(name='wrap_env', args=arguments(posonlyargs=[], args=[arg(arg='env', annotation=Attribute(value=Name(id='gym', ctx=Load()), attr='Env', ctx=Load())), arg(arg='state_mean', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='st_ate_std', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='reward_scale', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0.0), Constant(value=1.0), Constant(value=1.0)]), body=[Expr(value=Constant(value=' ͜ďǦư  ˗')), FunctionDef(name='normal', args=arguments(posonlyargs=[], args=[arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Name(id='state', ctx=Load()), op=Sub(), right=Name(id='state_mean', ctx=Load())), op=Div(), right=Name(id='st_ate_std', ctx=Load())))], decorator_list=[]), FunctionDef(name='scale_reward', args=arguments(posonlyargs=[], args=[arg(arg='reward')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ǿ ')), Return(value=BinOp(left=Name(id='reward_scale', ctx=Load()), op=Mult(), right=Name(id='reward', ctx=Load())))], decorator_list=[]), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='gym', ctx=Load()), attr='wrappers', ctx=Load()), attr='TransformObservation', ctx=Load()), args=[Name(id='env', ctx=Load()), Name(id='normal', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='reward_scale', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1.0)]), body=[Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='gym', ctx=Load()), attr='wrappers', ctx=Load()), attr='TransformReward', ctx=Load()), args=[Name(id='env', ctx=Load()), Name(id='scale_reward', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='env', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='gym', ctx=Load()), attr='Env', ctx=Load())), ClassDef(name='ReplayBuffer', bases=[], keywords=[], body=[FunctionDef(name='add_transition', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ȼ   ŝ   8 ')), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[]), FunctionDef(name='load_d4rl_dataset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dY', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='       Õ͍ ƃǛm')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_size', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Trying to load data into non-empty replay buffer')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='n_transitions', ctx=Store())], value=Subscript(value=Attribute(value=Subscript(value=Name(id='dY', ctx=Load()), slice=Constant(value='observations'), ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='n_transitions', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer_size', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Replay buffer is smaller than the dataset you are trying to load!')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_states', ctx=Load()), slice=Slice(upper=Name(id='n_transitions', ctx=Load())), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_to_tensor', ctx=Load()), args=[Subscript(value=Name(id='dY', ctx=Load()), slice=Constant(value='observations'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_actions', ctx=Load()), slice=Slice(upper=Name(id='n_transitions', ctx=Load())), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_to_tensor', ctx=Load()), args=[Subscript(value=Name(id='dY', ctx=Load()), slice=Constant(value='actions'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rewards', ctx=Load()), slice=Slice(upper=Name(id='n_transitions', ctx=Load())), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_to_tensor', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='dY', ctx=Load()), slice=Constant(value='rewards'), ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None)], ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_next_states', ctx=Load()), slice=Slice(upper=Name(id='n_transitions', ctx=Load())), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_to_tensor', ctx=Load()), args=[Subscript(value=Name(id='dY', ctx=Load()), slice=Constant(value='next_observations'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dones', ctx=Load()), slice=Slice(upper=Name(id='n_transitions', ctx=Load())), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_to_tensor', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='dY', ctx=Load()), slice=Constant(value='terminals'), ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None)], ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_size', ctx=Store()), op=Add(), value=Name(id='n_transitions', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pointer', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_size', ctx=Load()), Name(id='n_transitions', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Dataset size: '), FormattedValue(value=Name(id='n_transitions', ctx=Load()), conversion=-1)])], keywords=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state_dim', annotation=Name(id='int', ctx=Load())), arg(arg='action_dim', annotation=Name(id='int', ctx=Load())), arg(arg='buffer_size', annotation=Name(id='int', ctx=Load())), arg(arg='device', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='cpu')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer_size', ctx=Store())], value=Name(id='buffer_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pointer', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_size', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_states', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='buffer_size', ctx=Load()), Name(id='state_dim', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='float32', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_actions', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='buffer_size', ctx=Load()), Name(id='action_dim', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='float32', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rewards', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='buffer_size', ctx=Load()), Constant(value=1)], ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='float32', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_next_states', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='buffer_size', ctx=Load()), Name(id='state_dim', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='float32', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_dones', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='buffer_size', ctx=Load()), Constant(value=1)], ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='float32', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_device', ctx=Store())], value=Name(id='device', ctx=Load()))], decorator_list=[]), FunctionDef(name='_to_tensor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dY', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='       ͦ  ')), Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='tensor', ctx=Load()), args=[Name(id='dY', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='float32', ctx=Load())), keyword(arg='device', value=Attribute(value=Name(id='self', ctx=Load()), attr='_device', ctx=Load()))]))], decorator_list=[], returns=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), FunctionDef(name='sample', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='batch_sizeAJ', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ¾ ɇ  ')), Assign(targets=[Name(id='indices', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='randint', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_size', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_pointer', ctx=Load())], keywords=[])], keywords=[keyword(arg='size', value=Name(id='batch_sizeAJ', ctx=Load()))])), Assign(targets=[Name(id='states', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_states', ctx=Load()), slice=Name(id='indices', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='actions', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_actions', ctx=Load()), slice=Name(id='indices', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='rewards', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rewards', ctx=Load()), slice=Name(id='indices', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='next_states', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_next_states', ctx=Load()), slice=Name(id='indices', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='dones', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dones', ctx=Load()), slice=Name(id='indices', ctx=Load()), ctx=Load())), Return(value=List(elts=[Name(id='states', ctx=Load()), Name(id='actions', ctx=Load()), Name(id='rewards', ctx=Load()), Name(id='next_states', ctx=Load()), Name(id='dones', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Name(id='TensorBatch', ctx=Load()))], decorator_list=[]), FunctionDef(name='set_seed', args=arguments(posonlyargs=[], args=[arg(arg='seed', annotation=Name(id='int', ctx=Load())), arg(arg='env', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='gym', ctx=Load()), attr='Env', ctx=Load()), ctx=Load())), arg(arg='deterministic_torch', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='  ǍɁ  Ń¹  ţǇ ¡ñ dɅ Ñ ë  ')), If(test=Compare(left=Name(id='env', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='seed', ctx=Load()), args=[Name(id='seed', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='env', ctx=Load()), attr='action_space', ctx=Load()), attr='seed', ctx=Load()), args=[Name(id='seed', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='PYTHONHASHSEED'), ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='seed', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='seed', ctx=Load()), args=[Name(id='seed', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='seed', ctx=Load()), args=[Name(id='seed', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='manual_seed', ctx=Load()), args=[Name(id='seed', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='use_deterministic_algorithms', ctx=Load()), args=[Name(id='deterministic_torch', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='wandb_init', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='dict', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='wandb', ctx=Load()), attr='init', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Name(id='config', ctx=Load())), keyword(arg='project', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='project'), ctx=Load())), keyword(arg='group', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='group'), ctx=Load())), keyword(arg='name', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='name'), ctx=Load())), keyword(arg='id', value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='uuid', ctx=Load()), attr='uuid4', ctx=Load()), args=[], keywords=[])], keywords=[]))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='wandb', ctx=Load()), attr='run', ctx=Load()), attr='save', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='init_module_weights', args=arguments(posonlyargs=[], args=[arg(arg='module', annotation=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())), arg(arg='orthogonal_init', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Ğƈ ̲á    ȁ ˆ    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='module', ctx=Load()), Attribute(value=Name(id='nn', ctx=Load()), attr='Linear', ctx=Load())], keywords=[]), body=[If(test=Name(id='orthogonal_init', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='nn', ctx=Load()), attr='init', ctx=Load()), attr='orthogonal_', ctx=Load()), args=[Attribute(value=Name(id='module', ctx=Load()), attr='weight', ctx=Load())], keywords=[keyword(arg='gain', value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Constant(value=2)], keywords=[]))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='nn', ctx=Load()), attr='init', ctx=Load()), attr='constant_', ctx=Load()), args=[Attribute(value=Name(id='module', ctx=Load()), attr='bias', ctx=Load()), Constant(value=0.0)], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='nn', ctx=Load()), attr='init', ctx=Load()), attr='xavier_uniform_', ctx=Load()), args=[Attribute(value=Name(id='module', ctx=Load()), attr='weight', ctx=Load())], keywords=[keyword(arg='gain', value=Constant(value=0.01))]))])], orelse=[])], decorator_list=[]), FunctionDef(name='return_reward_range', args=arguments(posonlyargs=[], args=[arg(arg='dataset'), arg(arg='max_episode_steps')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='returns', ctx=Store()), Name(id='lengths', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='ep_ret', ctx=Store()), Name(id='ep_', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=0.0), Constant(value=0)], ctx=Load())), For(target=Tuple(elts=[Name(id='r', ctx=Store()), Name(id='d', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='z', ctx=Load()), args=[Subscript(value=Name(id='dataset', ctx=Load()), slice=Constant(value='rewards'), ctx=Load()), Subscript(value=Name(id='dataset', ctx=Load()), slice=Constant(value='terminals'), ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='ep_ret', ctx=Store()), op=Add(), value=Call(func=Name(id='float', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[])), AugAssign(target=Name(id='ep_', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=Or(), values=[Name(id='d', ctx=Load()), Compare(left=Name(id='ep_', ctx=Load()), ops=[Eq()], comparators=[Name(id='max_episode_steps', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='returns', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ep_ret', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='lengths', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ep_', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='ep_ret', ctx=Store()), Name(id='ep_', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=0.0), Constant(value=0)], ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='lengths', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ep_', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='lengths', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='dataset', ctx=Load()), slice=Constant(value='rewards'), ctx=Load())], keywords=[])])), Return(value=Tuple(elts=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='returns', ctx=Load())], keywords=[]), Call(func=Name(id='max', ctx=Load()), args=[Name(id='returns', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[]), FunctionDef(name='modify_reward', args=arguments(posonlyargs=[], args=[arg(arg='dataset'), arg(arg='env_name'), arg(arg='max_episode_steps')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1000)]), body=[If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='s', ctx=Load()), ops=[In()], comparators=[Name(id='env_name', ctx=Load())]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Tuple(elts=[Constant(value='halfcheetah'), Constant(value='hopper'), Constant(value='walker2d')], ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='min_retgA', ctx=Store()), Name(id='max__ret', ctx=Store())], ctx=Store())], value=Call(func=Name(id='return_reward_range', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='max_episode_steps', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='dataset', ctx=Load()), slice=Constant(value='rewards'), ctx=Store()), op=Div(), value=BinOp(left=Name(id='max__ret', ctx=Load()), op=Sub(), right=Name(id='min_retgA', ctx=Load()))), AugAssign(target=Subscript(value=Name(id='dataset', ctx=Load()), slice=Constant(value='rewards'), ctx=Store()), op=Mult(), value=Name(id='max_episode_steps', ctx=Load()))], orelse=[If(test=Compare(left=Constant(value='antmaze'), ops=[In()], comparators=[Name(id='env_name', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='dataset', ctx=Load()), slice=Constant(value='rewards'), ctx=Store()), op=Sub(), value=Constant(value=1.0))], orelse=[])])], decorator_list=[]), FunctionDef(name='extend_an', args=arguments(posonlyargs=[], args=[arg(arg='tensor', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), arg(arg='dim', annotation=Name(id='int', ctx=Load())), arg(arg='repeat', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='      ')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='tensor', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[Name(id='dim', ctx=Load())], keywords=[]), attr='repeat_interleave', ctx=Load()), args=[Name(id='repeat', ctx=Load())], keywords=[keyword(arg='dim', value=Name(id='dim', ctx=Load()))]))], decorator_list=[], returns=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), ClassDef(name='TrainConfig', bases=[], keywords=[], body=[Expr(value=Constant(value='  Üʄ   ̢ ̬_ʷ  í<́ \x8c  \x96 i Ϟ& ')), AnnAssign(target=Name(id='device', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value='cuda'), simple=1), AnnAssign(target=Name(id='env', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value='halfcheetah-medium-expert-v2'), simple=1), AnnAssign(target=Name(id='seed', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=1), AnnAssign(target=Name(id='eval_freq', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='int', ctx=Load()), args=[Constant(value=5000.0)], keywords=[]), simple=1), AnnAssign(target=Name(id='n_episodes', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=10), simple=1), AnnAssign(target=Name(id='max_timesteps', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='int', ctx=Load()), args=[Constant(value=1000000.0)], keywords=[]), simple=1), AnnAssign(target=Name(id='checkpoints_path', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='load_model', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='buffer_size', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=2000000), simple=1), AnnAssign(target=Name(id='batch_sizeAJ', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=256), simple=1), AnnAssign(target=Name(id='discount', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Constant(value=0.99), simple=1), AnnAssign(target=Name(id='alpha_multiplier', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Constant(value=1.0), simple=1), AnnAssign(target=Name(id='use_automatic_entropy_tuning', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=True), simple=1), AnnAssign(target=Name(id='backup_entropy', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='policy_lr', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=3e-05), simple=1), AnnAssign(target=Name(id='qf_lr', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=0.0003), simple=1), AnnAssign(target=Name(id='soft_target_update_rate', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Constant(value=0.005), simple=1), AnnAssign(target=Name(id='BC_STEPS', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='int', ctx=Load()), args=[Constant(value=0)], keywords=[]), simple=1), AnnAssign(target=Name(id='target_update_per_iod', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=1), simple=1), AnnAssign(target=Name(id='cql_n_actions', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=10), simple=1), AnnAssign(target=Name(id='cql_importance_sample', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=True), simple=1), AnnAssign(target=Name(id='cql_lagrange', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='cql_target_action_gap', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=UnaryOp(op=USub(), operand=Constant(value=1.0)), simple=1), AnnAssign(target=Name(id='cql_temp', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Constant(value=1.0), simple=1), AnnAssign(target=Name(id='cql_min_q_weight', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Constant(value=10.0), simple=1), AnnAssign(target=Name(id='cql_max_target_backup', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='cql_clip_diff_min', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=UnaryOp(op=USub(), operand=Attribute(value=Name(id='np', ctx=Load()), attr='inf', ctx=Load())), simple=1), AnnAssign(target=Name(id='cql_clip_diff_maxSmPkr', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Attribute(value=Name(id='np', ctx=Load()), attr='inf', ctx=Load()), simple=1), AnnAssign(target=Name(id='orthogonal_init', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=True), simple=1), AnnAssign(target=Name(id='normalize', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=True), simple=1), AnnAssign(target=Name(id='normalize_reward', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='project', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value='CORL'), simple=1), AnnAssign(target=Name(id='group', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value='CQL-D4RL'), simple=1), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value='CQL'), simple=1), FunctionDef(name='__post_init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='env', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Subscript(value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='uuid', ctx=Load()), attr='uuid4', ctx=Load()), args=[], keywords=[])], keywords=[]), slice=Slice(upper=Constant(value=8)), ctx=Load()), conversion=-1)])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='checkpoints_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='checkpoints_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='checkpoints_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[Name(id='dataclass', ctx=Load())]), ClassDef(name='ReparameterizedTanhGaussian', bases=[Attribute(value=Name(id='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='     ')), FunctionDef(name='log_prob', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mean', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), arg(arg='log_std', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), arg(arg='sample', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ʎ   ̞Ɩ ˅  ȴ   ')), Assign(targets=[Name(id='log_std', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='clamp', ctx=Load()), args=[Name(id='log_std', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='log_std_min', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='log_std_max', ctx=Load())], keywords=[])), Assign(targets=[Name(id='std', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='log_std', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='no_tanh', ctx=Load()), body=[Assign(targets=[Name(id='action_distribution', ctx=Store())], value=Call(func=Name(id='Normal', ctx=Load()), args=[Name(id='mean', ctx=Load()), Name(id='std', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='action_distribution', ctx=Store())], value=Call(func=Name(id='TransformedDistribution', ctx=Load()), args=[Call(func=Name(id='Normal', ctx=Load()), args=[Name(id='mean', ctx=Load()), Name(id='std', ctx=Load())], keywords=[]), Call(func=Name(id='TanhTransform', ctx=Load()), args=[], keywords=[keyword(arg='cache_size', value=Constant(value=1))])], keywords=[]))]), Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='action_distribution', ctx=Load()), attr='log_prob', ctx=Load()), args=[Name(id='sample', ctx=Load())], keywords=[])], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))]))], decorator_list=[], returns=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='log_std_min', annotation=Name(id='float', ctx=Load())), arg(arg='log_std_ma_x', annotation=Name(id='float', ctx=Load())), arg(arg='no_tanh', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[UnaryOp(op=USub(), operand=Constant(value=20.0)), Constant(value=2.0), Constant(value=False)]), body=[Expr(value=Constant(value='  e    =  ų Ê  ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_std_min', ctx=Store())], value=Name(id='log_std_min', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_std_max', ctx=Store())], value=Name(id='log_std_ma_x', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='no_tanh', ctx=Store())], value=Name(id='no_tanh', ctx=Load()))], decorator_list=[]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mean', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), arg(arg='log_std', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), arg(arg='deterministic', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='log_std', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='clamp', ctx=Load()), args=[Name(id='log_std', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='log_std_min', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='log_std_max', ctx=Load())], keywords=[])), Assign(targets=[Name(id='std', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='log_std', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='no_tanh', ctx=Load()), body=[Assign(targets=[Name(id='action_distribution', ctx=Store())], value=Call(func=Name(id='Normal', ctx=Load()), args=[Name(id='mean', ctx=Load()), Name(id='std', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='action_distribution', ctx=Store())], value=Call(func=Name(id='TransformedDistribution', ctx=Load()), args=[Call(func=Name(id='Normal', ctx=Load()), args=[Name(id='mean', ctx=Load()), Name(id='std', ctx=Load())], keywords=[]), Call(func=Name(id='TanhTransform', ctx=Load()), args=[], keywords=[keyword(arg='cache_size', value=Constant(value=1))])], keywords=[]))]), If(test=Name(id='deterministic', ctx=Load()), body=[Assign(targets=[Name(id='action_sample', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='tanh', ctx=Load()), args=[Name(id='mean', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='action_sample', ctx=Store())], value=Call(func=Attribute(value=Name(id='action_distribution', ctx=Load()), attr='rsample', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='log_prob', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='action_distribution', ctx=Load()), attr='log_prob', ctx=Load()), args=[Name(id='action_sample', ctx=Load())], keywords=[])], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Return(value=Tuple(elts=[Name(id='action_sample', ctx=Load()), Name(id='log_prob', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load()), Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='TanhGaussianPolicy', bases=[Attribute(value=Name(id='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='  Ù  \\  ƃ ³   Ʈ\x98 ̉  ̉ Ɔ   ')), FunctionDef(name='log_prob', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='observations', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), arg(arg='actions', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ˽ ̔ ')), If(test=Compare(left=Attribute(value=Name(id='actions', ctx=Load()), attr='ndim', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)]), body=[Assign(targets=[Name(id='observations', ctx=Store())], value=Call(func=Name(id='extend_an', ctx=Load()), args=[Name(id='observations', ctx=Load()), Constant(value=1), Subscript(value=Attribute(value=Name(id='actions', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ba', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='base_network', ctx=Load()), args=[Name(id='observations', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='mean', ctx=Store()), Name(id='log_std', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='ba', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='action_dim', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='log_std', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='log_std_multiplier', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Name(id='log_std', ctx=Load())), op=Add(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='log_std_offset', ctx=Load()), args=[], keywords=[]))), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tanh_gaussian', ctx=Load()), attr='log_prob', ctx=Load()), args=[Name(id='mean', ctx=Load()), Name(id='log_std', ctx=Load()), Name(id='actions', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='observations', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), arg(arg='deterministic', annotation=Name(id='bool', ctx=Load())), arg(arg='repeat', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='Ŕ  ˼  ̑   ̣ ˼   ǟǵ')), If(test=Compare(left=Name(id='repeat', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='observations', ctx=Store())], value=Call(func=Name(id='extend_an', ctx=Load()), args=[Name(id='observations', ctx=Load()), Constant(value=1), Name(id='repeat', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ba', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='base_network', ctx=Load()), args=[Name(id='observations', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='mean', ctx=Store()), Name(id='log_std', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='ba', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='action_dim', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='log_std', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='log_std_multiplier', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Name(id='log_std', ctx=Load())), op=Add(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='log_std_offset', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Tuple(elts=[Name(id='actions', ctx=Store()), Name(id='log_probs', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='tanh_gaussian', ctx=Load()), args=[Name(id='mean', ctx=Load()), Name(id='log_std', ctx=Load()), Name(id='deterministic', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='max_action', ctx=Load()), op=Mult(), right=Name(id='actions', ctx=Load())), Name(id='log_probs', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load()), Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state_dim', annotation=Name(id='int', ctx=Load())), arg(arg='action_dim', annotation=Name(id='int', ctx=Load())), arg(arg='max_action', annotation=Name(id='float', ctx=Load())), arg(arg='log_std_multiplier', annotation=Name(id='float', ctx=Load())), arg(arg='log_std_offset', annotation=Name(id='float', ctx=Load())), arg(arg='orthogonal_init', annotation=Name(id='bool', ctx=Load())), arg(arg='no_tanh', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1.0), UnaryOp(op=USub(), operand=Constant(value=1.0)), Constant(value=False), Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='observation_dim', ctx=Store())], value=Name(id='state_dim', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='action_dim', ctx=Store())], value=Name(id='action_dim', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max_action', ctx=Store())], value=Name(id='max_action', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='orthogonal_init', ctx=Store())], value=Name(id='orthogonal_init', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='no_tanh', ctx=Store())], value=Name(id='no_tanh', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='base_network', ctx=Store())], value=Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Sequential', ctx=Load()), args=[Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Linear', ctx=Load()), args=[Name(id='state_dim', ctx=Load()), Constant(value=256)], keywords=[]), Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='ReLU', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Linear', ctx=Load()), args=[Constant(value=256), Constant(value=256)], keywords=[]), Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='ReLU', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Linear', ctx=Load()), args=[Constant(value=256), Constant(value=256)], keywords=[]), Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='ReLU', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Linear', ctx=Load()), args=[Constant(value=256), BinOp(left=Constant(value=2), op=Mult(), right=Name(id='action_dim', ctx=Load()))], keywords=[])], keywords=[])), If(test=Name(id='orthogonal_init', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='base_network', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='m')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='init_module_weights', ctx=Load()), args=[Name(id='m', ctx=Load()), Constant(value=True)], keywords=[]))], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='init_module_weights', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='base_network', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Constant(value=False)], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_std_multiplier', ctx=Store())], value=Call(func=Name(id='Scalar', ctx=Load()), args=[Name(id='log_std_multiplier', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_std_offset', ctx=Store())], value=Call(func=Name(id='Scalar', ctx=Load()), args=[Name(id='log_std_offset', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tanh_gaussian', ctx=Store())], value=Call(func=Name(id='ReparameterizedTanhGaussian', ctx=Load()), args=[], keywords=[keyword(arg='no_tanh', value=Name(id='no_tanh', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='actXeERt', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='device', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='cpu')]), body=[Expr(value=Constant(value='  [  ̌ ')), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='tensor', ctx=Load()), args=[Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='reshape', ctx=Load()), args=[Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])], keywords=[keyword(arg='device', value=Name(id='device', ctx=Load())), keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='float32', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='no_grad', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Tuple(elts=[Name(id='actions', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='self', ctx=Load()), args=[Name(id='state', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='training', ctx=Load()))], keywords=[]))]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='actions', ctx=Load()), attr='cpu', ctx=Load()), args=[], keywords=[]), attr='data', ctx=Load()), attr='numpy', ctx=Load()), args=[], keywords=[]), attr='flatten', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='no_grad', ctx=Load()), args=[], keywords=[])])], decorator_list=[]), ClassDef(name='Fully_ConnectedQFunction', bases=[Attribute(value=Name(id='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='          ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='observation_dim', annotation=Name(id='int', ctx=Load())), arg(arg='action_dim', annotation=Name(id='int', ctx=Load())), arg(arg='orthogonal_init', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value=' ȭ  Ǳ ȅ£  γɨͥ  Ŀǀ  Ǒʺ ̣')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='observation_dim', ctx=Store())], value=Name(id='observation_dim', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='action_dim', ctx=Store())], value=Name(id='action_dim', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='orthogonal_init', ctx=Store())], value=Name(id='orthogonal_init', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='network', ctx=Store())], value=Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Sequential', ctx=Load()), args=[Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Linear', ctx=Load()), args=[BinOp(left=Name(id='observation_dim', ctx=Load()), op=Add(), right=Name(id='action_dim', ctx=Load())), Constant(value=256)], keywords=[]), Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='ReLU', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Linear', ctx=Load()), args=[Constant(value=256), Constant(value=256)], keywords=[]), Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='ReLU', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Linear', ctx=Load()), args=[Constant(value=256), Constant(value=256)], keywords=[]), Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='ReLU', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Linear', ctx=Load()), args=[Constant(value=256), Constant(value=1)], keywords=[])], keywords=[])), If(test=Name(id='orthogonal_init', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='network', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='m')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='init_module_weights', ctx=Load()), args=[Name(id='m', ctx=Load()), Constant(value=True)], keywords=[]))], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='init_module_weights', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='network', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Constant(value=False)], keywords=[]))])], decorator_list=[]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='observations', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), arg(arg='actions', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='multiple_actions', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='batch_sizeAJ', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='observations', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='actions', ctx=Load()), attr='ndim', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)]), Compare(left=Attribute(value=Name(id='observations', ctx=Load()), attr='ndim', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])]), body=[Assign(targets=[Name(id='multiple_actions', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='observations', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='extend_an', ctx=Load()), args=[Name(id='observations', ctx=Load()), Constant(value=1), Subscript(value=Attribute(value=Name(id='actions', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Subscript(value=Attribute(value=Name(id='observations', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='actions', ctx=Store())], value=Call(func=Attribute(value=Name(id='actions', ctx=Load()), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Subscript(value=Attribute(value=Name(id='actions', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='input_tensor', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[List(elts=[Name(id='observations', ctx=Load()), Name(id='actions', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='q_values', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='squeeze', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='network', ctx=Load()), args=[Name(id='input_tensor', ctx=Load())], keywords=[])], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), If(test=Name(id='multiple_actions', ctx=Load()), body=[Assign(targets=[Name(id='q_values', ctx=Store())], value=Call(func=Attribute(value=Name(id='q_values', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='batch_sizeAJ', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], orelse=[]), Return(value=Name(id='q_values', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load()))], decorator_list=[]), ClassDef(name='Scalar', bases=[Attribute(value=Name(id='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='       m  Ά  ')), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='constant', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='nn', ctx=Load()), attr='Parameter', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='init_value', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='constant', ctx=Store())], value=Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='tensor', ctx=Load()), args=[Name(id='init_value', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='float32', ctx=Load()))])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ContinuousCQLP', bases=[], keywords=[], body=[Expr(value=Constant(value='   ')), FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='batch', annotation=Name(id='TensorBatch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ͖ƌ  ʩ    Ϝ  ')), Assign(targets=[Tuple(elts=[Name(id='observations', ctx=Store()), Name(id='actions', ctx=Store()), Name(id='rewards', ctx=Store()), Name(id='next_observations', ctx=Store()), Name(id='dones', ctx=Store())], ctx=Store())], value=Name(id='batch', ctx=Load())), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='total_it', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Tuple(elts=[Name(id='new_actions', ctx=Store()), Name(id='log_pi', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='actor', ctx=Load()), args=[Name(id='observations', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='alpha', ctx=Store()), Name(id='alpha_loss', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alpha_and_alpha_loss', ctx=Load()), args=[Name(id='observations', ctx=Load()), Name(id='log_pi', ctx=Load())], keywords=[])), Expr(value=Constant(value=' Policy loss ')), Assign(targets=[Name(id='policy_loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_policy_loss', ctx=Load()), args=[Name(id='observations', ctx=Load()), Name(id='actions', ctx=Load()), Name(id='new_actions', ctx=Load()), Name(id='alpha', ctx=Load()), Name(id='log_pi', ctx=Load())], keywords=[])), Assign(targets=[Name(id='log_dict', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='log_pi', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='log_pi', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='policy_loss', value=Call(func=Attribute(value=Name(id='policy_loss', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='alpha_loss', value=Call(func=Attribute(value=Name(id='alpha_loss', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='alpha', value=Call(func=Attribute(value=Name(id='alpha', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[]))])), Expr(value=Constant(value=' Q function loss ')), Assign(targets=[Tuple(elts=[Name(id='qf_loss', ctx=Store()), Name(id='alpha_prime', ctx=Store()), Name(id='alpha_prime_loss', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_q_loss', ctx=Load()), args=[Name(id='observations', ctx=Load()), Name(id='actions', ctx=Load()), Name(id='next_observations', ctx=Load()), Name(id='rewards', ctx=Load()), Name(id='dones', ctx=Load()), Name(id='alpha', ctx=Load()), Name(id='log_dict', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_automatic_entropy_tuning', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha_optimizer', ctx=Load()), attr='zero_grad', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='alpha_loss', ctx=Load()), attr='backward', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha_optimizer', ctx=Load()), attr='step', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='actor_optimizer', ctx=Load()), attr='zero_grad', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='policy_loss', ctx=Load()), attr='backward', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='actor_optimizer', ctx=Load()), attr='step', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='critic_1_optimizer', ctx=Load()), attr='zero_grad', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='critic_2_optimizer', ctx=Load()), attr='zero_grad', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='qf_loss', ctx=Load()), attr='backward', ctx=Load()), args=[], keywords=[keyword(arg='retain_graph', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='critic_1_optimizer', ctx=Load()), attr='step', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='critic_2_optimizer', ctx=Load()), attr='step', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='total_it', ctx=Load()), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='target_update_period', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update_target_network', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='soft_target_update_rate', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='log_dict', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_policy_loss', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='observations', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), arg(arg='actions', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), arg(arg='new_actions', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), arg(arg='alpha', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), arg(arg='log_pi', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='total_it', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='bc_steps', ctx=Load())]), body=[Assign(targets=[Name(id='log_probs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='actor', ctx=Load()), attr='log_prob', ctx=Load()), args=[Name(id='observations', ctx=Load()), Name(id='actions', ctx=Load())], keywords=[])), Assign(targets=[Name(id='policy_loss', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=BinOp(left=Name(id='alpha', ctx=Load()), op=Mult(), right=Name(id='log_pi', ctx=Load())), op=Sub(), right=Name(id='log_probs', ctx=Load())), attr='mean', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='q_new_actions', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='min', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='critic_1', ctx=Load()), args=[Name(id='observations', ctx=Load()), Name(id='new_actions', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='critic_2', ctx=Load()), args=[Name(id='observations', ctx=Load()), Name(id='new_actions', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='policy_loss', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=BinOp(left=Name(id='alpha', ctx=Load()), op=Mult(), right=Name(id='log_pi', ctx=Load())), op=Sub(), right=Name(id='q_new_actions', ctx=Load())), attr='mean', ctx=Load()), args=[], keywords=[]))]), Return(value=Name(id='policy_loss', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), FunctionDef(name='update_target_network', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='soft_target_update_rate', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='soft_update', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='target_critic_1', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='critic_1', ctx=Load()), Name(id='soft_target_update_rate', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='soft_update', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='target_critic_2', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='critic_2', ctx=Load()), Name(id='soft_target_update_rate', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_alpha_and_alpha_loss', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='observations', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), arg(arg='log_pi', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_automatic_entropy_tuning', ctx=Load()), body=[Assign(targets=[Name(id='alpha_loss', ctx=Store())], value=UnaryOp(op=USub(), operand=Call(func=Attribute(value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='log_alpha', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Call(func=Attribute(value=BinOp(left=Name(id='log_pi', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='target_entropy', ctx=Load())), attr='detach', ctx=Load()), args=[], keywords=[])), attr='mean', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='alpha', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='log_alpha', ctx=Load()), args=[], keywords=[]), attr='exp', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='alpha_multiplier', ctx=Load())))], orelse=[Assign(targets=[Name(id='alpha_loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='observations', ctx=Load()), attr='new_tensor', ctx=Load()), args=[Constant(value=0.0)], keywords=[])), Assign(targets=[Name(id='alpha', ctx=Store())], value=Call(func=Attribute(value=Name(id='observations', ctx=Load()), attr='new_tensor', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='alpha_multiplier', ctx=Load())], keywords=[]))]), Return(value=Tuple(elts=[Name(id='alpha', ctx=Load()), Name(id='alpha_loss', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_q_loss', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='observations'), arg(arg='actions'), arg(arg='next_observations'), arg(arg='rewards'), arg(arg='dones'), arg(arg='alpha'), arg(arg='log_dict')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Ƥ  ')), Assign(targets=[Name(id='q_1_predicted', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='critic_1', ctx=Load()), args=[Name(id='observations', ctx=Load()), Name(id='actions', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q2_predicted', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='critic_2', ctx=Load()), args=[Name(id='observations', ctx=Load()), Name(id='actions', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='cql_max_target_backup', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='new_next_actions', ctx=Store()), Name(id='next_log_pi', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='actor', ctx=Load()), args=[Name(id='next_observations', ctx=Load())], keywords=[keyword(arg='repeat', value=Attribute(value=Name(id='self', ctx=Load()), attr='cql_n_actions', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='target_q_values', ctx=Store()), Name(id='max_target_indices', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='max', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='min', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='target_critic_1', ctx=Load()), args=[Name(id='next_observations', ctx=Load()), Name(id='new_next_actions', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='target_critic_2', ctx=Load()), args=[Name(id='next_observations', ctx=Load()), Name(id='new_next_actions', ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='next_log_pi', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='gather', ctx=Load()), args=[Name(id='next_log_pi', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1)), Call(func=Attribute(value=Name(id='max_target_indices', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])], keywords=[]), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='new_next_actions', ctx=Store()), Name(id='next_log_pi', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='actor', ctx=Load()), args=[Name(id='next_observations', ctx=Load())], keywords=[])), Assign(targets=[Name(id='target_q_values', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='min', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='target_critic_1', ctx=Load()), args=[Name(id='next_observations', ctx=Load()), Name(id='new_next_actions', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='target_critic_2', ctx=Load()), args=[Name(id='next_observations', ctx=Load()), Name(id='new_next_actions', ctx=Load())], keywords=[])], keywords=[]))]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='backup_entropy', ctx=Load()), body=[Assign(targets=[Name(id='target_q_values', ctx=Store())], value=BinOp(left=Name(id='target_q_values', ctx=Load()), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Mult(), right=Name(id='next_log_pi', ctx=Load()))))], orelse=[]), Assign(targets=[Name(id='target_q_values', ctx=Store())], value=Call(func=Attribute(value=Name(id='target_q_values', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='td_target', ctx=Store())], value=BinOp(left=Name(id='rewards', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Constant(value=1.0), op=Sub(), right=Name(id='dones', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='discount', ctx=Load())), op=Mult(), right=Name(id='target_q_values', ctx=Load())))), Assign(targets=[Name(id='td_target', ctx=Store())], value=Call(func=Attribute(value=Name(id='td_target', ctx=Load()), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='qf1_loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='F', ctx=Load()), attr='mse_loss', ctx=Load()), args=[Name(id='q_1_predicted', ctx=Load()), Call(func=Attribute(value=Name(id='td_target', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='qf2_loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='F', ctx=Load()), attr='mse_loss', ctx=Load()), args=[Name(id='q2_predicted', ctx=Load()), Call(func=Attribute(value=Name(id='td_target', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='batch_sizeAJ', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='actions', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='action_dim', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='actions', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='cql_random_actions', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='actions', ctx=Load()), attr='new_empty', ctx=Load()), args=[Tuple(elts=[Name(id='batch_sizeAJ', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cql_n_actions', ctx=Load()), Name(id='action_dim', ctx=Load())], ctx=Load())], keywords=[keyword(arg='requires_grad', value=Constant(value=False))]), attr='uniform_', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='cql_current_actions', ctx=Store()), Name(id='cql_current_log_p_is', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='actor', ctx=Load()), args=[Name(id='observations', ctx=Load())], keywords=[keyword(arg='repeat', value=Attribute(value=Name(id='self', ctx=Load()), attr='cql_n_actions', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='cql_next_actions', ctx=Store()), Name(id='cql_next_log_pis', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='actor', ctx=Load()), args=[Name(id='next_observations', ctx=Load())], keywords=[keyword(arg='repeat', value=Attribute(value=Name(id='self', ctx=Load()), attr='cql_n_actions', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='cql_current_actions', ctx=Store()), Name(id='cql_current_log_p_is', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cql_current_actions', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='cql_current_log_p_is', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[])], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='cql_next_actions', ctx=Store()), Name(id='cql_next_log_pis', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cql_next_actions', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='cql_next_log_pis', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[])], ctx=Load())), Assign(targets=[Name(id='cql_q1_rand', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='critic_1', ctx=Load()), args=[Name(id='observations', ctx=Load()), Name(id='cql_random_actions', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cql_q2_rand', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='critic_2', ctx=Load()), args=[Name(id='observations', ctx=Load()), Name(id='cql_random_actions', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cql_q1_current_actions', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='critic_1', ctx=Load()), args=[Name(id='observations', ctx=Load()), Name(id='cql_current_actions', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cql_q2_current_actions', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='critic_2', ctx=Load()), args=[Name(id='observations', ctx=Load()), Name(id='cql_current_actions', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cql_q1_next_actions', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='critic_1', ctx=Load()), args=[Name(id='observations', ctx=Load()), Name(id='cql_next_actions', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cql_q2_next_actionsTeeus', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='critic_2', ctx=Load()), args=[Name(id='observations', ctx=Load()), Name(id='cql_next_actions', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cql_cat_q1', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[List(elts=[Name(id='cql_q1_rand', ctx=Load()), Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[Name(id='q_1_predicted', ctx=Load()), Constant(value=1)], keywords=[]), Name(id='cql_q1_next_actions', ctx=Load()), Name(id='cql_q1_current_actions', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])), Assign(targets=[Name(id='cql_cat_q2', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[List(elts=[Name(id='cql_q2_rand', ctx=Load()), Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[Name(id='q2_predicted', ctx=Load()), Constant(value=1)], keywords=[]), Name(id='cql_q2_next_actionsTeeus', ctx=Load()), Name(id='cql_q2_current_actions', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])), Assign(targets=[Name(id='cql_std_q1', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='std', ctx=Load()), args=[Name(id='cql_cat_q1', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])), Assign(targets=[Name(id='cql_std_q2', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='std', ctx=Load()), args=[Name(id='cql_cat_q2', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='cql_importance_sample', ctx=Load()), body=[Assign(targets=[Name(id='random_de_nsity', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Constant(value=0.5), op=Pow(), right=Name(id='action_dim', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='cql_cat_q1', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[List(elts=[BinOp(left=Name(id='cql_q1_rand', ctx=Load()), op=Sub(), right=Name(id='random_de_nsity', ctx=Load())), BinOp(left=Name(id='cql_q1_next_actions', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='cql_next_log_pis', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[])), BinOp(left=Name(id='cql_q1_current_actions', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='cql_current_log_p_is', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[]))], ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])), Assign(targets=[Name(id='cql_cat_q2', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[List(elts=[BinOp(left=Name(id='cql_q2_rand', ctx=Load()), op=Sub(), right=Name(id='random_de_nsity', ctx=Load())), BinOp(left=Name(id='cql_q2_next_actionsTeeus', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='cql_next_log_pis', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[])), BinOp(left=Name(id='cql_q2_current_actions', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='cql_current_log_p_is', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[]))], ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))]))], orelse=[]), Assign(targets=[Name(id='cql_qf1_ood', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[BinOp(left=Name(id='cql_cat_q1', ctx=Load()), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cql_temp', ctx=Load()))], keywords=[keyword(arg='dim', value=Constant(value=1))]), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cql_temp', ctx=Load()))), Assign(targets=[Name(id='cql_qf2_ood', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[BinOp(left=Name(id='cql_cat_q2', ctx=Load()), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cql_temp', ctx=Load()))], keywords=[keyword(arg='dim', value=Constant(value=1))]), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cql_temp', ctx=Load()))), Expr(value=Constant(value='Subtract the log likelihood of data')), Assign(targets=[Name(id='cql_qf1_diff', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='clamp', ctx=Load()), args=[BinOp(left=Name(id='cql_qf1_ood', ctx=Load()), op=Sub(), right=Name(id='q_1_predicted', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='cql_clip_diff_min', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cql_clip_diff_max', ctx=Load())], keywords=[]), attr='mean', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='cql_qf2_diff', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='clamp', ctx=Load()), args=[BinOp(left=Name(id='cql_qf2_ood', ctx=Load()), op=Sub(), right=Name(id='q2_predicted', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='cql_clip_diff_min', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cql_clip_diff_max', ctx=Load())], keywords=[]), attr='mean', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='cql_lagrange', ctx=Load()), body=[Assign(targets=[Name(id='alpha_prime', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='clamp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='exp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='log_alpha_prime', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='min', value=Constant(value=0.0)), keyword(arg='max', value=Constant(value=1000000.0))])), Assign(targets=[Name(id='cql_min_qf1_loss', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='alpha_prime', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cql_min_q_weight', ctx=Load())), op=Mult(), right=BinOp(left=Name(id='cql_qf1_diff', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cql_target_action_gap', ctx=Load())))), Assign(targets=[Name(id='cql_min_qf2_loss', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='alpha_prime', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cql_min_q_weight', ctx=Load())), op=Mult(), right=BinOp(left=Name(id='cql_qf2_diff', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cql_target_action_gap', ctx=Load())))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha_prime_optimizer', ctx=Load()), attr='zero_grad', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='alpha_prime_loss', ctx=Store())], value=BinOp(left=BinOp(left=UnaryOp(op=USub(), operand=Name(id='cql_min_qf1_loss', ctx=Load())), op=Sub(), right=Name(id='cql_min_qf2_loss', ctx=Load())), op=Mult(), right=Constant(value=0.5))), Expr(value=Call(func=Attribute(value=Name(id='alpha_prime_loss', ctx=Load()), attr='backward', ctx=Load()), args=[], keywords=[keyword(arg='retain_graph', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha_prime_optimizer', ctx=Load()), attr='step', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='cql_min_qf1_loss', ctx=Store())], value=BinOp(left=Name(id='cql_qf1_diff', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cql_min_q_weight', ctx=Load()))), Assign(targets=[Name(id='cql_min_qf2_loss', ctx=Store())], value=BinOp(left=Name(id='cql_qf2_diff', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cql_min_q_weight', ctx=Load()))), Assign(targets=[Name(id='alpha_prime_loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='observations', ctx=Load()), attr='new_tensor', ctx=Load()), args=[Constant(value=0.0)], keywords=[])), Assign(targets=[Name(id='alpha_prime', ctx=Store())], value=Call(func=Attribute(value=Name(id='observations', ctx=Load()), attr='new_tensor', ctx=Load()), args=[Constant(value=0.0)], keywords=[]))]), Assign(targets=[Name(id='qf_loss', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='qf1_loss', ctx=Load()), op=Add(), right=Name(id='qf2_loss', ctx=Load())), op=Add(), right=Name(id='cql_min_qf1_loss', ctx=Load())), op=Add(), right=Name(id='cql_min_qf2_loss', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='log_dict', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='qf1_loss', value=Call(func=Attribute(value=Name(id='qf1_loss', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='qf2_loss', value=Call(func=Attribute(value=Name(id='qf2_loss', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='alpha', value=Call(func=Attribute(value=Name(id='alpha', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='average_qf1', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='q_1_predicted', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='average_qf2', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='q2_predicted', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='average_target_q', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='target_q_values', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[]))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log_dict', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='cql_std_q1', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cql_std_q1', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='cql_std_q2', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cql_std_q2', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='cql_q1_rand', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cql_q1_rand', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='cql_q2_rand', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cql_q2_rand', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='cql_min_qf1_loss', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cql_min_qf1_loss', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='cql_min_qf2_loss', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cql_min_qf2_loss', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='cql_qf1_diff', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cql_qf1_diff', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='cql_qf2_diff', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cql_qf2_diff', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='cql_q1_current_actions', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cql_q1_current_actions', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='cql_q2_current_actions', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cql_q2_current_actions', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='cql_q1_next_actions', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cql_q1_next_actions', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='cql_q2_next_actions', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cql_q2_next_actionsTeeus', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='alpha_prime_loss', value=Call(func=Attribute(value=Name(id='alpha_prime_loss', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[])), keyword(arg='alpha_prime', value=Call(func=Attribute(value=Name(id='alpha_prime', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[]))])], keywords=[])), Return(value=Tuple(elts=[Name(id='qf_loss', ctx=Load()), Name(id='alpha_prime', ctx=Load()), Name(id='alpha_prime_loss', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='load_state_dictr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state_dictbZXeF', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='actor', ctx=Load()), attr='load_state_dict', ctx=Load()), args=[], keywords=[keyword(arg='state_dict', value=Subscript(value=Name(id='state_dictbZXeF', ctx=Load()), slice=Constant(value='actor'), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='critic_1', ctx=Load()), attr='load_state_dict', ctx=Load()), args=[], keywords=[keyword(arg='state_dict', value=Subscript(value=Name(id='state_dictbZXeF', ctx=Load()), slice=Constant(value='critic1'), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='critic_2', ctx=Load()), attr='load_state_dict', ctx=Load()), args=[], keywords=[keyword(arg='state_dict', value=Subscript(value=Name(id='state_dictbZXeF', ctx=Load()), slice=Constant(value='critic2'), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='target_critic_1', ctx=Load()), attr='load_state_dict', ctx=Load()), args=[], keywords=[keyword(arg='state_dict', value=Subscript(value=Name(id='state_dictbZXeF', ctx=Load()), slice=Constant(value='critic1_target'), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='target_critic_2', ctx=Load()), attr='load_state_dict', ctx=Load()), args=[], keywords=[keyword(arg='state_dict', value=Subscript(value=Name(id='state_dictbZXeF', ctx=Load()), slice=Constant(value='critic2_target'), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='critic_1_optimizer', ctx=Load()), attr='load_state_dict', ctx=Load()), args=[], keywords=[keyword(arg='state_dict', value=Subscript(value=Name(id='state_dictbZXeF', ctx=Load()), slice=Constant(value='critic_1_optimizer'), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='critic_2_optimizer', ctx=Load()), attr='load_state_dict', ctx=Load()), args=[], keywords=[keyword(arg='state_dict', value=Subscript(value=Name(id='state_dictbZXeF', ctx=Load()), slice=Constant(value='critic_2_optimizer'), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='actor_optimizer', ctx=Load()), attr='load_state_dict', ctx=Load()), args=[], keywords=[keyword(arg='state_dict', value=Subscript(value=Name(id='state_dictbZXeF', ctx=Load()), slice=Constant(value='actor_optim'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_alpha', ctx=Store())], value=Subscript(value=Name(id='state_dictbZXeF', ctx=Load()), slice=Constant(value='sac_log_alpha'), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha_optimizer', ctx=Load()), attr='load_state_dict', ctx=Load()), args=[], keywords=[keyword(arg='state_dict', value=Subscript(value=Name(id='state_dictbZXeF', ctx=Load()), slice=Constant(value='sac_log_alpha_optim'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_alpha_prime', ctx=Store())], value=Subscript(value=Name(id='state_dictbZXeF', ctx=Load()), slice=Constant(value='cql_log_alpha'), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha_prime_optimizer', ctx=Load()), attr='load_state_dict', ctx=Load()), args=[], keywords=[keyword(arg='state_dict', value=Subscript(value=Name(id='state_dictbZXeF', ctx=Load()), slice=Constant(value='cql_log_alpha_optim'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='total_it', ctx=Store())], value=Subscript(value=Name(id='state_dictbZXeF', ctx=Load()), slice=Constant(value='total_it'), ctx=Load()))], decorator_list=[]), FunctionDef(name='state_dictbZXeF', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Ɂ Ħ  V')), Return(value=Dict(keys=[Constant(value='actor'), Constant(value='critic1'), Constant(value='critic2'), Constant(value='critic1_target'), Constant(value='critic2_target'), Constant(value='critic_1_optimizer'), Constant(value='critic_2_optimizer'), Constant(value='actor_optim'), Constant(value='sac_log_alpha'), Constant(value='sac_log_alpha_optim'), Constant(value='cql_log_alpha'), Constant(value='cql_log_alpha_optim'), Constant(value='total_it')], values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='actor', ctx=Load()), attr='state_dict', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='critic_1', ctx=Load()), attr='state_dict', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='critic_2', ctx=Load()), attr='state_dict', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='target_critic_1', ctx=Load()), attr='state_dict', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='target_critic_2', ctx=Load()), attr='state_dict', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='critic_1_optimizer', ctx=Load()), attr='state_dict', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='critic_2_optimizer', ctx=Load()), attr='state_dict', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='actor_optimizer', ctx=Load()), attr='state_dict', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='log_alpha', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha_optimizer', ctx=Load()), attr='state_dict', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='log_alpha_prime', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha_prime_optimizer', ctx=Load()), attr='state_dict', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='total_it', ctx=Load())]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='critic_1'), arg(arg='critic_1_optimizer'), arg(arg='critic_2'), arg(arg='critic_2_optimizer'), arg(arg='actor'), arg(arg='actor_optimizer'), arg(arg='target_entropy', annotation=Name(id='float', ctx=Load())), arg(arg='discount', annotation=Name(id='float', ctx=Load())), arg(arg='alpha_multiplier', annotation=Name(id='float', ctx=Load())), arg(arg='use_automatic_entropy_tuning', annotation=Name(id='bool', ctx=Load())), arg(arg='backup_entropy', annotation=Name(id='bool', ctx=Load())), arg(arg='policy_lr', annotation=Name(id='bool', ctx=Load())), arg(arg='qf_lr', annotation=Name(id='bool', ctx=Load())), arg(arg='soft_target_update_rate', annotation=Name(id='float', ctx=Load())), arg(arg='BC_STEPS'), arg(arg='target_update_per_iod', annotation=Name(id='int', ctx=Load())), arg(arg='cql_n_actions', annotation=Name(id='int', ctx=Load())), arg(arg='cql_importance_sample', annotation=Name(id='bool', ctx=Load())), arg(arg='cql_lagrange', annotation=Name(id='bool', ctx=Load())), arg(arg='cql_target_action_gap', annotation=Name(id='float', ctx=Load())), arg(arg='cql_temp', annotation=Name(id='float', ctx=Load())), arg(arg='cql_min_q_weight', annotation=Name(id='float', ctx=Load())), arg(arg='cql_max_target_backup', annotation=Name(id='bool', ctx=Load())), arg(arg='cql_clip_diff_min', annotation=Name(id='float', ctx=Load())), arg(arg='cql_clip_diff_maxSmPkr', annotation=Name(id='float', ctx=Load())), arg(arg='device', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0.99), Constant(value=1.0), Constant(value=True), Constant(value=False), Constant(value=0.0003), Constant(value=0.0003), Constant(value=0.005), Constant(value=100000), Constant(value=1), Constant(value=10), Constant(value=True), Constant(value=False), UnaryOp(op=USub(), operand=Constant(value=1.0)), Constant(value=1.0), Constant(value=5.0), Constant(value=False), UnaryOp(op=USub(), operand=Attribute(value=Name(id='np', ctx=Load()), attr='inf', ctx=Load())), Attribute(value=Name(id='np', ctx=Load()), attr='inf', ctx=Load()), Constant(value='cpu')]), body=[Expr(value=Constant(value='  Ş  Ϲ   « ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='discount', ctx=Store())], value=Name(id='discount', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='target_entropy', ctx=Store())], value=Name(id='target_entropy', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alpha_multiplier', ctx=Store())], value=Name(id='alpha_multiplier', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_automatic_entropy_tuning', ctx=Store())], value=Name(id='use_automatic_entropy_tuning', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='backup_entropy', ctx=Store())], value=Name(id='backup_entropy', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='policy_lr', ctx=Store())], value=Name(id='policy_lr', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='qf_lr', ctx=Store())], value=Name(id='qf_lr', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='soft_target_update_rate', ctx=Store())], value=Name(id='soft_target_update_rate', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bc_steps', ctx=Store())], value=Name(id='BC_STEPS', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='target_update_period', ctx=Store())], value=Name(id='target_update_per_iod', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cql_n_actions', ctx=Store())], value=Name(id='cql_n_actions', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cql_importance_sample', ctx=Store())], value=Name(id='cql_importance_sample', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cql_lagrange', ctx=Store())], value=Name(id='cql_lagrange', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cql_target_action_gap', ctx=Store())], value=Name(id='cql_target_action_gap', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cql_temp', ctx=Store())], value=Name(id='cql_temp', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cql_min_q_weight', ctx=Store())], value=Name(id='cql_min_q_weight', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cql_max_target_backup', ctx=Store())], value=Name(id='cql_max_target_backup', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cql_clip_diff_min', ctx=Store())], value=Name(id='cql_clip_diff_min', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cql_clip_diff_max', ctx=Store())], value=Name(id='cql_clip_diff_maxSmPkr', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_device', ctx=Store())], value=Name(id='device', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='total_it', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='critic_1', ctx=Store())], value=Name(id='critic_1', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='critic_2', ctx=Store())], value=Name(id='critic_2', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='target_critic_1', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='critic_1', ctx=Load())], keywords=[]), attr='to', ctx=Load()), args=[Name(id='device', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='target_critic_2', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='critic_2', ctx=Load())], keywords=[]), attr='to', ctx=Load()), args=[Name(id='device', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='actor', ctx=Store())], value=Name(id='actor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='actor_optimizer', ctx=Store())], value=Name(id='actor_optimizer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='critic_1_optimizer', ctx=Store())], value=Name(id='critic_1_optimizer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='critic_2_optimizer', ctx=Store())], value=Name(id='critic_2_optimizer', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_automatic_entropy_tuning', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_alpha', ctx=Store())], value=Call(func=Name(id='Scalar', ctx=Load()), args=[Constant(value=0.0)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alpha_optimizer', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='optim', ctx=Load()), attr='Adam', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_alpha', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='lr', value=Attribute(value=Name(id='self', ctx=Load()), attr='policy_lr', ctx=Load()))]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_alpha', ctx=Store())], value=Constant(value=None))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_alpha_prime', ctx=Store())], value=Call(func=Name(id='Scalar', ctx=Load()), args=[Constant(value=1.0)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alpha_prime_optimizer', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='optim', ctx=Load()), attr='Adam', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_alpha_prime', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='lr', value=Attribute(value=Name(id='self', ctx=Load()), attr='qf_lr', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='total_it', ctx=Store())], value=Constant(value=0))], decorator_list=[])], decorator_list=[]), FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='TrainConfig', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Attribute(value=Name(id='gym', ctx=Load()), attr='make', ctx=Load()), args=[Attribute(value=Name(id='config', ctx=Load()), attr='env', ctx=Load())], keywords=[])), Assign(targets=[Name(id='state_dim', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='env', ctx=Load()), attr='observation_space', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='action_dim', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='env', ctx=Load()), attr='action_space', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Attribute(value=Name(id='d4rl', ctx=Load()), attr='qlearning_dataset', ctx=Load()), args=[Name(id='env', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='config', ctx=Load()), attr='normalize_reward', ctx=Load()), body=[Expr(value=Call(func=Name(id='modify_reward', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='env', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='config', ctx=Load()), attr='normalize', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='state_mean', ctx=Store()), Name(id='st_ate_std', ctx=Store())], ctx=Store())], value=Call(func=Name(id='compute_mean_std', ctx=Load()), args=[Subscript(value=Name(id='dataset', ctx=Load()), slice=Constant(value='observations'), ctx=Load())], keywords=[keyword(arg='eps', value=Constant(value=0.001))]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='state_mean', ctx=Store()), Name(id='st_ate_std', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()))]), Assign(targets=[Subscript(value=Name(id='dataset', ctx=Load()), slice=Constant(value='observations'), ctx=Store())], value=Call(func=Name(id='normalize_states', ctx=Load()), args=[Subscript(value=Name(id='dataset', ctx=Load()), slice=Constant(value='observations'), ctx=Load()), Name(id='state_mean', ctx=Load()), Name(id='st_ate_std', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='dataset', ctx=Load()), slice=Constant(value='next_observations'), ctx=Store())], value=Call(func=Name(id='normalize_states', ctx=Load()), args=[Subscript(value=Name(id='dataset', ctx=Load()), slice=Constant(value='next_observations'), ctx=Load()), Name(id='state_mean', ctx=Load()), Name(id='st_ate_std', ctx=Load())], keywords=[])), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Name(id='wrap_env', ctx=Load()), args=[Name(id='env', ctx=Load())], keywords=[keyword(arg='state_mean', value=Name(id='state_mean', ctx=Load())), keyword(arg='state_std', value=Name(id='st_ate_std', ctx=Load()))])), Assign(targets=[Name(id='replay_buffer', ctx=Store())], value=Call(func=Name(id='ReplayBuffer', ctx=Load()), args=[Name(id='state_dim', ctx=Load()), Name(id='action_dim', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='buffer_size', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='device', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='replay_buffer', ctx=Load()), attr='load_d4rl_dataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[])), Assign(targets=[Name(id='max_action', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='env', ctx=Load()), attr='action_space', ctx=Load()), attr='high', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='config', ctx=Load()), attr='checkpoints_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Checkpoints path: '), FormattedValue(value=Attribute(value=Name(id='config', ctx=Load()), attr='checkpoints_path', ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Attribute(value=Name(id='config', ctx=Load()), attr='checkpoints_path', ctx=Load())], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='config', ctx=Load()), attr='checkpoints_path', ctx=Load()), Constant(value='config.yaml')], keywords=[]), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pyrallis', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='config', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='seed', ctx=Store())], value=Attribute(value=Name(id='config', ctx=Load()), attr='seed', ctx=Load())), Expr(value=Call(func=Name(id='set_seed', ctx=Load()), args=[Name(id='seed', ctx=Load()), Name(id='env', ctx=Load())], keywords=[])), Assign(targets=[Name(id='critic_1', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='Fully_ConnectedQFunction', ctx=Load()), args=[Name(id='state_dim', ctx=Load()), Name(id='action_dim', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='orthogonal_init', ctx=Load())], keywords=[]), attr='to', ctx=Load()), args=[Attribute(value=Name(id='config', ctx=Load()), attr='device', ctx=Load())], keywords=[])), Assign(targets=[Name(id='critic_2', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='Fully_ConnectedQFunction', ctx=Load()), args=[Name(id='state_dim', ctx=Load()), Name(id='action_dim', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='orthogonal_init', ctx=Load())], keywords=[]), attr='to', ctx=Load()), args=[Attribute(value=Name(id='config', ctx=Load()), attr='device', ctx=Load())], keywords=[])), Assign(targets=[Name(id='critic_1_optimizer', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='optim', ctx=Load()), attr='Adam', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='critic_1', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[])], keywords=[]), Attribute(value=Name(id='config', ctx=Load()), attr='qf_lr', ctx=Load())], keywords=[])), Assign(targets=[Name(id='critic_2_optimizer', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='optim', ctx=Load()), attr='Adam', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='critic_2', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[])], keywords=[]), Attribute(value=Name(id='config', ctx=Load()), attr='qf_lr', ctx=Load())], keywords=[])), Assign(targets=[Name(id='actor', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='TanhGaussianPolicy', ctx=Load()), args=[Name(id='state_dim', ctx=Load()), Name(id='action_dim', ctx=Load()), Name(id='max_action', ctx=Load())], keywords=[keyword(arg='orthogonal_init', value=Attribute(value=Name(id='config', ctx=Load()), attr='orthogonal_init', ctx=Load()))]), attr='to', ctx=Load()), args=[Attribute(value=Name(id='config', ctx=Load()), attr='device', ctx=Load())], keywords=[])), Assign(targets=[Name(id='actor_optimizer', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='optim', ctx=Load()), attr='Adam', ctx=Load()), args=[Call(func=Attribute(value=Name(id='actor', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='config', ctx=Load()), attr='policy_lr', ctx=Load())], keywords=[])), Assign(targets=[Name(id='KWARGS', ctx=Store())], value=Dict(keys=[Constant(value='critic_1'), Constant(value='critic_2'), Constant(value='critic_1_optimizer'), Constant(value='critic_2_optimizer'), Constant(value='actor'), Constant(value='actor_optimizer'), Constant(value='discount'), Constant(value='soft_target_update_rate'), Constant(value='device'), Constant(value='target_entropy'), Constant(value='alpha_multiplier'), Constant(value='use_automatic_entropy_tuning'), Constant(value='backup_entropy'), Constant(value='policy_lr'), Constant(value='qf_lr'), Constant(value='bc_steps'), Constant(value='target_update_period'), Constant(value='cql_n_actions'), Constant(value='cql_importance_sample'), Constant(value='cql_lagrange'), Constant(value='cql_target_action_gap'), Constant(value='cql_temp'), Constant(value='cql_min_q_weight'), Constant(value='cql_max_target_backup'), Constant(value='cql_clip_diff_min'), Constant(value='cql_clip_diff_max')], values=[Name(id='critic_1', ctx=Load()), Name(id='critic_2', ctx=Load()), Name(id='critic_1_optimizer', ctx=Load()), Name(id='critic_2_optimizer', ctx=Load()), Name(id='actor', ctx=Load()), Name(id='actor_optimizer', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='discount', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='soft_target_update_rate', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='device', ctx=Load()), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='prod', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='env', ctx=Load()), attr='action_space', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), Attribute(value=Name(id='config', ctx=Load()), attr='alpha_multiplier', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='use_automatic_entropy_tuning', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='backup_entropy', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='policy_lr', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='qf_lr', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='bc_steps', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='target_update_period', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='cql_n_actions', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='cql_importance_sample', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='cql_lagrange', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='cql_target_action_gap', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='cql_temp', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='cql_min_q_weight', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='cql_max_target_backup', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='cql_clip_diff_min', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='cql_clip_diff_max', ctx=Load())])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='---------------------------------------')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Training CQL, Env: '), FormattedValue(value=Attribute(value=Name(id='config', ctx=Load()), attr='env', ctx=Load()), conversion=-1), Constant(value=', Seed: '), FormattedValue(value=Name(id='seed', ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='---------------------------------------')], keywords=[])), Assign(targets=[Name(id='trainer', ctx=Store())], value=Call(func=Name(id='ContinuousCQLP', ctx=Load()), args=[], keywords=[keyword(value=Name(id='KWARGS', ctx=Load()))])), If(test=Compare(left=Attribute(value=Name(id='config', ctx=Load()), attr='load_model', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='policy_filewmJ', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='config', ctx=Load()), attr='load_model', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='trainer', ctx=Load()), attr='load_state_dict', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='policy_filewmJ', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='actor', ctx=Store())], value=Attribute(value=Name(id='trainer', ctx=Load()), attr='actor', ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='wandb_init', ctx=Load()), args=[Call(func=Name(id='asdict', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='evaluations', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='t', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='config', ctx=Load()), attr='max_timesteps', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='batch', ctx=Store())], value=Call(func=Attribute(value=Name(id='replay_buffer', ctx=Load()), attr='sample', ctx=Load()), args=[Attribute(value=Name(id='config', ctx=Load()), attr='batch_size', ctx=Load())], keywords=[])), Assign(targets=[Name(id='batch', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='to', ctx=Load()), args=[Attribute(value=Name(id='config', ctx=Load()), attr='device', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Name(id='batch', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='log_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='trainer', ctx=Load()), attr='train', ctx=Load()), args=[Name(id='batch', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='wandb', ctx=Load()), attr='log', ctx=Load()), args=[Name(id='log_dict', ctx=Load())], keywords=[keyword(arg='step', value=Attribute(value=Name(id='trainer', ctx=Load()), attr='total_it', ctx=Load()))])), If(test=Compare(left=BinOp(left=BinOp(left=Name(id='t', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mod(), right=Attribute(value=Name(id='config', ctx=Load()), attr='eval_freq', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Time steps: '), FormattedValue(value=BinOp(left=Name(id='t', ctx=Load()), op=Add(), right=Constant(value=1)), conversion=-1)])], keywords=[])), Assign(targets=[Name(id='eval_scores', ctx=Store())], value=Call(func=Name(id='eval_actor', ctx=Load()), args=[Name(id='env', ctx=Load()), Name(id='actor', ctx=Load())], keywords=[keyword(arg='device', value=Attribute(value=Name(id='config', ctx=Load()), attr='device', ctx=Load())), keyword(arg='n_episodes', value=Attribute(value=Name(id='config', ctx=Load()), attr='n_episodes', ctx=Load())), keyword(arg='seed', value=Attribute(value=Name(id='config', ctx=Load()), attr='seed', ctx=Load()))])), Assign(targets=[Name(id='eval_score', ctx=Store())], value=Call(func=Attribute(value=Name(id='eval_scores', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='normalized_eva_l_score', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='get_normalized_score', ctx=Load()), args=[Name(id='eval_score', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=100.0))), Expr(value=Call(func=Attribute(value=Name(id='evaluations', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='normalized_eva_l_score', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='---------------------------------------')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Evaluation over '), FormattedValue(value=Attribute(value=Name(id='config', ctx=Load()), attr='n_episodes', ctx=Load()), conversion=-1), Constant(value=' episodes: '), FormattedValue(value=Name(id='eval_score', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' , D4RL score: '), FormattedValue(value=Name(id='normalized_eva_l_score', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='---------------------------------------')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='save', ctx=Load()), args=[Call(func=Attribute(value=Name(id='trainer', ctx=Load()), attr='state_dict', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='config', ctx=Load()), attr='checkpoints_path', ctx=Load()), JoinedStr(values=[Constant(value='checkpoint_'), FormattedValue(value=Name(id='t', ctx=Load()), conversion=-1), Constant(value='.pt')])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='wandb', ctx=Load()), attr='log', ctx=Load()), args=[Dict(keys=[Constant(value='d4rl_normalized_score')], values=[Name(id='normalized_eva_l_score', ctx=Load())])], keywords=[keyword(arg='step', value=Attribute(value=Name(id='trainer', ctx=Load()), attr='total_it', ctx=Load()))]))], orelse=[])], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='pyrallis', ctx=Load()), attr='wrap', ctx=Load()), args=[], keywords=[])]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='train', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])