Module(body=[ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='numpy', asname='np')]), Assign(targets=[Name(id='ArrayLike', ctx=Store())], value=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='mape', args=arguments(posonlyargs=[], args=[arg(arg='y_true', annotation=Name(id='ArrayLike', ctx=Load())), arg(arg='y_pred', annotation=Name(id='ArrayLike', ctx=Load())), arg(arg='eps', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1e-15)]), body=[Expr(value=Constant(value='MeanǮ absɎ\u0383ơ̤oǠlutºȫϺeʃɯ pe͆ɿrʐcentĭage erƉro͘©r.ƽ\n\nʋɧ`Wȃikipedia entrǹy onʼ J\x95th̻eϓ ˩MeaƴϨnb abğʰɋsolȓuteϛ pƓe¡rceǹ̯tage eΛˉrrΉʁ̹oȑr\nŘ<˛ʚhttĀps://be\x91Λn°ϰÅ.wiάǹkipiàǙ͋ed/iïQa.ĹʛƠorg/wi\xadki˂/Mean_abΦsolut͈e_p̷úer̸\x98ɛcent˼aǒgeʻ_ler̯ɞror>j`_Ŀˑ\n\n,Pƶaramºǔe\'ter\u0382ϔs\n-Ʀɶ-̀͵--------\n̴y_˅ƛtrŵœÆue:\n ƭ  å aȡϡƝrrĲay-liϰke ̬o¡f shƼapÒe (n˰_sampƧīŋlƈeɀs,\x85)̤ or (nĢkφ_samplͮes,ɠɒ n_ͳoŪutǗϦp˂ωuĀṯ˯ȋs)Δϵ\n\n  Į ϧ ŌGrounͬɞdĹˬf ŐtruthČ ʨū(cor͊ǽr\x96ϠĭĜeȌctw) targ\u0381Ǹͳet üvalʖķu̎es.\n\nϝy_prŷedŵđ:ŪφƖ\n  ²\x91  aîrraΓy-ĴǳƅliɄͨkeι ʎW̡of shǝ¹aȩpe ÓƊ(Ǥ̴n¡_Ĭêsam\u0383ǜples,)͵ Øor (nΩ_samplͳesÙ,÷ n_ou˾Ɛtépuɡ̩ts)Ƈ͎\nň×\xa0ĵ²\n  )ĵ  Estű˝imaPtedæ tɨarȂ\x8dgʩÎet˾ ̻÷̑Ƚ̄valŜu͡\x81es.\n\nő˘ɍeˎps: ĲϦΛfloǲa͏̡t=H1e²-15\nɑ  Ɏ  ̗MŨΙȆ̆AP«E i¦s unÑ6dŨefiˈśneǞ_ǤȞd̰͠ fɿ*or Ϙ``Qυy_true[i]ȵ=Ë=0`` ˇ̅fϿor ȷaʎ\x83nǺˇyΟΪ ``i`˫`ɥ6ϫ,ʨ ǻso aÇlˤl ʍzɩ͵eK\x93rˍoǳsʯ ``yÒ_Πt\x86rńue̘ȧȲ[ʲi]``ϐ̸ aŴre\nwȳ ̬ ō  ½c˫lƜipǸpȒed ϧȐtoç `́`8ž\x8d̚max(ʻŰeps, Ɇab%s(y_Ďα"true)ň˫̶ʧ͈)``ù.η\n\nˠR͏eÐtuƆrnsç\n----ϕ-ϩ--Ɠ\nflo6aȧºt\n   ĥ A nΜo[ƛʏ˿ϔnȺ-neϒʙgaGti϶ʉve fɖɈɁl̬o\x8fʑatingΨƀ Έʶċʛp®oǢint valuǪe (tθhe best val˸ue is 0.0)́.éŒ')), Assign(targets=[Tuple(elts=[Name(id='y_true_array', ctx=Store()), Name(id='y_pred_array', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='y_true', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='y_pred', ctx=Load())], keywords=[])], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='y_true_array', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='y_pred_array', ctx=Load()), attr='shape', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueErr', ctx=Load()), args=[Constant(value='Shapes of the labels must be the same')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='y_true_array', ctx=Store())], value=Call(func=Attribute(value=Name(id='y_true_array', ctx=Load()), attr='clip', ctx=Load()), args=[Name(id='eps', ctx=Load())], keywords=[])), Return(value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y_true_array', ctx=Load()), op=Sub(), right=Name(id='y_pred_array', ctx=Load())), op=Div(), right=Name(id='y_true_array', ctx=Load()))], keywords=[])], keywords=[]), op=Mult(), right=Constant(value=100)))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='smape', args=arguments(posonlyargs=[], args=[arg(arg='y_true', annotation=Name(id='ArrayLike', ctx=Load())), arg(arg='y_pred', annotation=Name(id='ArrayLike', ctx=Load())), arg(arg='eps', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1e-15)]), body=[Assign(targets=[Tuple(elts=[Name(id='y_true_array', ctx=Store()), Name(id='y_pred_array', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='y_true', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='y_pred', ctx=Load())], keywords=[])], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='y_true_array', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='y_pred_array', ctx=Load()), attr='shape', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueErr', ctx=Load()), args=[Constant(value='Shapes of the labels must be the same')], keywords=[]))], orelse=[]), Return(value=BinOp(left=Constant(value=100), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[BinOp(left=Name(id='y_pred_array', ctx=Load()), op=Sub(), right=Name(id='y_true_array', ctx=Load()))], keywords=[])), op=Div(), right=Call(func=Attribute(value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='y_true_array', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='y_pred_array', ctx=Load())], keywords=[])), attr='clip', ctx=Load()), args=[Name(id='eps', ctx=Load())], keywords=[]))], keywords=[])))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='sign', args=arguments(posonlyargs=[], args=[arg(arg='y_true', annotation=Name(id='ArrayLike', ctx=Load())), arg(arg='y_pred', annotation=Name(id='ArrayLike', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='y_true_array', ctx=Store()), Name(id='y_pred_array', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='y_true', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='y_pred', ctx=Load())], keywords=[])], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='y_true_array', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='y_pred_array', ctx=Load()), attr='shape', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueErr', ctx=Load()), args=[Constant(value='Shapes of the labels must be the same')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sign', ctx=Load()), args=[BinOp(left=Name(id='y_true_array', ctx=Load()), op=Sub(), right=Name(id='y_pred_array', ctx=Load()))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])