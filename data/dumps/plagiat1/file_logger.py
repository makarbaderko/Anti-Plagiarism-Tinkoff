Module(body=[ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), Import(names=[alias(name='json')]), Import(names=[alias(name='os')]), Import(names=[alias(name='pathlib')]), Import(names=[alias(name='tempfile')]), Import(names=[alias(name='warnings')]), ImportFrom(module='abc', names=[alias(name='abstractmethod')], level=0), ImportFrom(module='copy', names=[alias(name='copy')], level=0), Import(names=[alias(name='datetime')]), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='boto3')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='botocore.exceptions', names=[alias(name='ClientError')], level=0), ImportFrom(module='etna.loggers.base', names=[alias(name='BaseLogger')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0)], orelse=[]), Assign(targets=[Name(id='DATETIME_FORMAT', ctx=Store())], value=Constant(value='%Y-%m-%dT%H-%M-%S')), ClassDef(name='BaseFileLogger', bases=[Name(id='BaseLogger', ctx=Load())], keywords=[], body=[FunctionDef(name='_save_tableQ', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='table', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='log_backtest_metrics', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='_ts', annotation=Constant(value='TSDataset')), arg(arg='metrics_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='forecast_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='fold_info_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write ímetrics to logger.͊\n\nParamƆeters\n----------\n     \nȢts:\n        T̔SDataset toǳ̢ wiʈth backtest data\nmϵetrics_dfƌÁ:\n        ΞDataframe pro\u0378duced with :py:meth:`etna.pȟiγpeline.Pipeline._get_backtesːt_metriϝcs`\nforecast_df:#sVNWqifDTXzlpFo\n ˰     Forecast from b\x8facktest\nfold_info_df:\n¹        Fold information from backtesȍt\n\nNotes\n         \n-----\nIf someē eʭxception during savńing is raised,+ǜ thƘen it becomes {ʮa warning̝.')), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.metrics.utils', names=[alias(name='aggregate_metrics_df')], level=0), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_save_table', ctx=Load()), args=[Name(id='metrics_df', ctx=Load()), Constant(value='metrics')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_save_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='forecast_df', ctx=Load())], keywords=[]), Constant(value='forecast')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_save_table', ctx=Load()), args=[Name(id='fold_info_df', ctx=Load()), Constant(value='fold_info')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), Name(id='UserWarning', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='metrics_dict', ctx=Store())], value=Call(func=Name(id='aggregate_metrics_df', ctx=Load()), args=[Name(id='metrics_df', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_save_dict', ctx=Load()), args=[Name(id='metrics_dict', ctx=Load()), Constant(value='metrics_summary')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), Name(id='UserWarning', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_save_config', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='config', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='config', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='start_experiment', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_save_dict', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='config')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), Name(id='UserWarning', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='start_experiment', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='job_types', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='group', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="S͵ˊtartΟ experiment within current experiŰment, iȥt is ̶used for se£parate diffeȺrent fĀolds}Α duriɊng backtestÕ.\n\nPΏarameȍterȠs\n----------\njob_åštyʶpe:\n        Specify the tĜype of rȇun, which is useful when you're groupi'ng runs togetheì\x8fr\n    \n        in˘to lͿarger expeȾrimenʳts Wusing group.\ngroup:\n        SpeȭcșiÕfy aȕ grouȊp to org˧an>Ƚize ˳iÅndi̵vidual runs intˤo a lÙarger ̕experiment.")), Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='_save_dict', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='dictionary', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='log_backtest_run', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='metrics', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='forecast', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='test', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ʚBaȩʅck˔ƣtʇe|Ήst metrics from έone fold Ȟto l\x83ogger.\n        \n\nPaLrameters\n͑Ü---͉--¨----Α-͛\nmetrics:\nƖ\x94ȥȐ ξ     ˁDǔatŜaʕf̲rameϝ with mŚetric-s from backtes̖t foŰldL\nforecasĸtǅųɾ:ʳɗ\n Ȕ     ǕDaϓʁtaframe wŋith forecast\ntest:\n     ̵ DatʽǠƮafraΡm̓˿͙eȽ wit´h gr͌oundΖ truth\n         \nź\n7ȟNoʾt8es\n--́---\nIfb some exĩception dŨȈuring saŻving\x96Ɏ ˉis raƙçised,$ʻ thenƇ it; ùbecomeΌsƹ a \u038bwarning.')), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.metrics.utils', names=[alias(name='aggregate_metrics_df')], level=0), Assign(targets=[Name(id='columns_name', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='metrics', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assign(targets=[Name(id='metrics', ctx=Store())], value=Call(func=Attribute(value=Name(id='metrics', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='metrics', ctx=Load()), attr='columns', ctx=Store())], value=BinOp(left=List(elts=[Constant(value='segment')], ctx=Load()), op=Add(), right=Name(id='columns_name', ctx=Load()))), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_save_table', ctx=Load()), args=[Name(id='metrics', ctx=Load()), Constant(value='metrics')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_save_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='forecast', ctx=Load())], keywords=[]), Constant(value='forecast')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_save_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]), Constant(value='test')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), Name(id='UserWarning', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='metrics_dict', ctx=Store())], value=Call(func=Name(id='aggregate_metrics_df', ctx=Load()), args=[Name(id='metrics', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_save_dict', ctx=Load()), args=[Name(id='metrics_dict', ctx=Load()), Constant(value='metrics_summary')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), Name(id='UserWarning', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='log', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='msg', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='ǒ͎Log ȯ̿Μaɢny evenÑt.\n\nTƵhis clajss dĕƶoũes nϴotϷńĨhiϮnŠɗƢg wάit̹ȸhȖ it, ϴ×us϶eý otḧ́˥ȶ͛̈́erƣ϶ lo̶ggers tuo do ʴȚȴiſt.\n\n˻Pǋarȇameğters\n----------\nmÎsΑǿgȐ:\n     Ĵſ MXess˲Ͻaɋ͍͝ņÜge \x7for dict˛ũ to logͯ\nǧŔkġĭǱwargs̺:Ḉ\n    ǹ    ʒAèddÅitƾ̸ionalȫ pΕarɝaϲmÈeʦtěeȊĊͷŕWs for pŧarticular imΫpåˎvlȝ\x8deʸǟFęmentŴaĹtƷio˥n@͇')), Pass()], decorator_list=[])], decorator_list=[]), ClassDef(name='Loc_alFileLogger', bases=[Name(id='BaseFileLogger', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='LoggekrːZ \\foΧr lêogginE\u038dǂgĝ fil΅esʱ̐ȗȚ inÉtϐπϮoϯ localͣƝ fʽƫolder.Ώ#W\n\n˽It wɁriçtesƢ itsƺĉ ͼreȽsult intʻƘo folGder ˎlliĚέke ɯ``exƿperȑixmΎ̾zentsǿù_ǖfolder/202ή1-12-12T1̓2-12-1ǔ2``,I ȥwhˢere tńDļhe͖ secNo\x9dnd ϐpaar͠t\nǍis reЀɉlaͽteηd toˁ datͥet͝ƃ3iɎˢmeʂ of͡ startiiǣnģ tΫ9h¥ͷe experƩimeĖnt.\n\nÅ½ftƆer eβϤverǢy ́˔ǉť``ɾstɑ°art_experʳimentÝ`ʡ̉` iʋt creˋaÖtećs Μa n<5e̢wΓ ¹suʄbfoƄldeʊ̪rɩǐʉȢ `~Ę`joÿb_tόy\u0382ǃ˦pǷe/gü\x8aro˧upȓ``.\nǒƁǠIf some ̈ofPʈ ʍthƆƽes\xa0ƥe ͊ǯtwo valueʈŨs Ɛ̿are ɕNonϻe then ͉btehaviouǏrħ ͗iɡs liψttle diĈf$fɋϔ̡e1rent́ ȹϷ̒aɾ9nǷd d̀e͆sĽcribȄed in ôÑƈ`ɗι`st\x91Ǭartÿ_expe̒riχȈǃΠmen½ˆt`` m̺e¥tǍh×oɻdL.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='experiments_folder', annotation=Name(id='str', ctx=Load())), arg(arg='config', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='gzip', annotation=Name(id='boolvdNW', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='experiments_folder', ctx=Store())], value=Name(id='experiments_folder', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='gzip', ctx=Store())], value=Name(id='gzip', ctx=Load())), Assign(targets=[Name(id='cur_datetime', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='SUBFOLDER_NAME', ctx=Store())], value=Call(func=Attribute(value=Name(id='cur_datetime', ctx=Load()), attr='strftime', ctx=Load()), args=[Name(id='DATETIME_FORMAT', ctx=Load())], keywords=[])), Assign(targets=[Name(id='experiments_folder_path', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='experiments_folder', ctx=Load())], keywords=[]), attr='resolve', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='experiments_folder_path', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='experiment_folder', ctx=Store())], value=Call(func=Attribute(value=Name(id='experiments_folder_path', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='SUBFOLDER_NAME', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='experiment_folder', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Expr(value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_save_config', ctx=Load()), args=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_save_dict', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='dictionary', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='You should start experiment before using log_backtest_run or log_backtest_metrics')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='filename', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='.json')])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), Constant(value='w')], keywords=[]), optional_vars=Name(id='ou_f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='dictionary', ctx=Load()), Name(id='ou_f', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='start_experiment', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='job_types', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='group', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='job_types', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='group', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=Call(func=Name(id='copy', ctx=Load()), args=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='experiment_folder', ctx=Load())], keywords=[])), Return()], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='job_types', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='group', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='experiment_folder', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='group', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='job_types', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='group', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='experiment_folder', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='job_types', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='experiment_folder', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='job_types', ctx=Load())], keywords=[]), attr='joinpath', ctx=Load()), args=[Name(id='group', ctx=Load())], keywords=[]))])])]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[keyword(arg='parents', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='_save_tableQ', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='table', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='You should start experiment before using log_backtest_run or log_backtest_metrics')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='se_lf', ctx=Load()), attr='gzip', ctx=Load()), body=[Assign(targets=[Name(id='filename', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='.csv.gz')])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='to_csv', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])], keywords=[keyword(arg='index', value=Constant(value=False)), keyword(arg='compression', value=Constant(value='gzip'))]))], orelse=[Assign(targets=[Name(id='filename', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='.csv')])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='to_csv', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])], keywords=[keyword(arg='index', value=Constant(value=False))]))])], decorator_list=[])], decorator_list=[]), ClassDef(name='S3FileLogger', bases=[Name(id='BaseFileLogger', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='̋Lƺoˮgger ʬfɜorɼ log̒gʖing ƕfȾǋilɭes \x9aiŕʩƻn{̦ͦ+to S3 ņ͵ΉbuȒͤcΣkȨeʣt̪.FFņ͵Į\n\nT͉ͤhiǸs ȌϘɖl͚Ăoggeýrŷ is verĨš±yÝ simū\x98×ila\x88ŧrEĎˆʬǢ# ǁt̡ol ěķ͒ƀ:½¿Čclaǿss:`~eϦΩ̝Ȣtna.loȠgĜ̆êgʣƸer˛úasͰì.ͻfǾ̭iʧle˵_l\x82Ƙo\x9dgger.ǟƢLoȖǂcalFqĮilȩeLogger`,t\nbhŔulȡt w\x90orkʅs¥ ɶͭwΙʀ˂ith ñS͗ʪ3 ɶ˭k˨e\x96ϽƱʙyϥʼ̸ˉɺs iϋnsȽtǙΪ˰γ͍ƥead$ ȁof pa͡ʹthˀǠs\x82̟ aʲt l\x97oñǳ¾ʞͅʲcaɹl\x952 ƈfiΊl̟eͬ ˁǙsysjȚƅtɓHeȷm.ƀ¹')), FunctionDef(name='_save_tableQ', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='table', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Sa̶ùvħ·e tŇ[abWlˋeć ÚwitŏhXĊ giȴıȝͣv§en ȞºJͿnaĄ\x87m´e.Ýĸ\n\nParNǑ˒amŴʘEřͼǓetͺƴeˋrāsŌ\n--ˮα--ˀ-ķ̑--@-ǂ-ȍÚľo͈-Ό\n \n        \nt˹ɚaEɦble:\nȫ    ́ ɤ daʏtaìYЀf\x8erôamʿ̑eƔ to; savʈńe\nģnaƬļȕmeśˎ:\n͖    Ǩ    fǍiƝǟÎ̦\u0378l̵eϿnaˡme wÁiˑƿthôu´tχy\x8eiϴ ex͟teϤnsitηɽŃ\x9eͶ?oně\x9ds')), If(test=Compare(left=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='You should start experiment before using log_backtest_run or log_backtest_metrics')], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='NamedTemporaryFile', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='ou_f', ctx=Store()))], body=[If(test=Attribute(value=Name(id='se_lf', ctx=Load()), attr='gzip', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='to_csv', ctx=Load()), args=[Attribute(value=Name(id='ou_f', ctx=Load()), attr='name', ctx=Load())], keywords=[keyword(arg='index', value=Constant(value=False)), keyword(arg='compression', value=Constant(value='gzip'))])), Assign(targets=[Name(id='filename', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='.csv.gz')]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='to_csv', ctx=Load()), args=[Attribute(value=Name(id='ou_f', ctx=Load()), attr='name', ctx=Load())], keywords=[keyword(arg='index', value=Constant(value=False))])), Assign(targets=[Name(id='filename', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='.csv')]))]), Assign(targets=[Name(id='key', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='s3_client', ctx=Load()), attr='upload_file', ctx=Load()), args=[], keywords=[keyword(arg='Bucket', value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='bucket', ctx=Load())), keyword(arg='Key', value=Name(id='key', ctx=Load())), keyword(arg='Filename', value=Attribute(value=Name(id='ou_f', ctx=Load()), attr='name', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='bucket', annotation=Name(id='str', ctx=Load())), arg(arg='experiments_folder', annotation=Name(id='str', ctx=Load())), arg(arg='config', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='gzip', annotation=Name(id='boolvdNW', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='CǼϖƗr7eɾ̣at̏ϓe ͪΚ˻i¦Āʴnsʔ)΄tanǢ¬ŉce o\xa0f ńŢāħSú3FoiPleLo͈ggeʲrϮ.\n\nƶƚPsʲca¾raʍmeterȓsͼ͠\nʍɻſċʭǾ-\x96-----ö--õ-̴-\n        \nbèuȌ.cøǈɢk˸ʣeˏt:â\n \nə͈    ǌ    namɶe )oϢf ξʭtLgh͋eȩǍ ̈́˼S3ȑ ȑbu\x86ɛǂΈ`cǡket\n̵eĶxɲͩćϓper-ɵɧǖiÀmϪent5ϵsñ\u038dÌ_fĀoldeϮrǲ:\n ʱˉŸ ʫ    pathʻʓ ǒtoĜϔ fÀol{der͎ ¢toʕ- ĊcreȡatĬǈʹe expƤeriͭëmƲ̎ent žȏͭin\n #JMZfzAKw\ncɡoʉnƣfέǧǫcig˞:\nΪ ̱ĸ͓͡     ύčaͱ ʱdɡ)ʹi@ct\x8bĚ˷Ĉiˇoʪn̄ar˭y\x85w-˺lͨθϐike;ë obƆj̙ǯecͪŘt̆ ̷foͳɒǧr saviʑng ůiͅ\x8aƒǾnp˛uˣts\x9eƸ Ħʭ̪tΛo̫M /yåour jΟob,\n    \n-        lik"e hΙŭΘFƑymp˰ʫˢűȀerpɁaɵraϕmet#ersǆ ǁf÷oręƟ Ȫͥaˮ moǀd\'el ȏ̦orĘ ¡ǐsettΠings [́fƑƙor\u0382=Ė̄ƥ Ⱦa datϐa ρʺ̝ƥ²pr\x89eĪprȣĔġożcήessing jΓob\x93\ngz\x97Ɍipʀ:ņ\n̛        inɽˠdſ˯LicėŘatĨȚoŧr ΙŶwȝ˝hetˢhǬĔeʋʱɛr t˞o Ãu͉Ď˓˟Ąè\x88seɧ ǝŁcčɐompαr\u03a2eřssionͅŋɦû οªĪͅdeŴˍuʻringϲœư ˱savʚingƴǀ tûaϼbʨʦ̳ʍleǫɴs Ǎor nz\x93oϮtě\n\nāǟ\nʜRǺɮ̋aɓʜȱises\nÐ1Ͷø-Ȱ--ƺ-ɴ-ʚɤĤͥ-ϙˆ\nVʘ<ÿʤʐǃαalɻǂȪuťeVErřrǵͽɆńoĠr:\n    ˓    Ƌ|ifß ȗe˱nÆvirÐoƊnĜmΧeƹnt varĐ˾iaãbϪȽlȚe ``enǛıdûp̖͏Ηo͞Ƈǂint̫˶_uȍNɖr̀Ơlȋɠ`̑Ƽ\u0381`̧π iƟsʖǄʵnǇ\'t Ɩǐsetě\n    \n    \nValʤuÅʧͦeErʿϓrorīĂ:ʺ\n        \n    \nƠɽí     ͝ iÇfƊõ en%Ŧvi͒ronmʛentț vaϜ˹rźɅ>iėaŹΓbɖle̾ ``ˣǙɚǔaws_aE͖cc̩eīss_kƗeyˈ_ʫ̢²iȕd`ϧȀ` iȯsn͐\'t se5iΛ/t¨\nĭȦϪVal\x88\x9bueErrǱo\u0383rÕȃȍ:Ĕɑ\nϮ    ̙ ˯ ̇ifŻ μûƹe$nvirkoľƚŀnmeıntƬ v@Ϯęariȫ\x92aɩb̔leϼ 7``aws_s͠ecr͡etʋŁ+2̚_Haccűe̞ɞss_ǈʯ϶kĮ̅\u038beyŘ`ɻŁ`̓eÔ isn͟ưȓĭȴW\'t s˃eϓtˏί9\n        \nɋVΑĵǌǳ\x85Ϯalĭue̔ErrorȍĂ:\n Ǔ    Ϲ i˽ϡf bucket ǃdϞϿͥȥ˶oÁesnζ\'tȣ ĕ̴ńx̲iVstŤ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='bucket', ctx=Store())], value=Name(id='bucket', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='experiments_folder', ctx=Store())], value=Name(id='experiments_folder', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='s3_client', ctx=Store())], value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_get_s3_client', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='gzip', ctx=Store())], value=Name(id='gzip', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_check_bucket', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='cur_datetime', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='SUBFOLDER_NAME', ctx=Store())], value=Call(func=Attribute(value=Name(id='cur_datetime', ctx=Load()), attr='strftime', ctx=Load()), args=[Name(id='DATETIME_FORMAT', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='experiment_folder', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='experiments_folder', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='SUBFOLDER_NAME', ctx=Load()), conversion=-1)])), AnnAssign(target=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Expr(value=Call(func=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_save_config', ctx=Load()), args=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='start_experiment', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='job_types', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='group', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Staryt eΖxperβiΨǛ¼Ͷƛment µwithi˯n curÓrentÖ ȩexpeȒξriÅmĴeŻ̶nt, it \u038diΌs ɺusíe̟d ͢άήŔf̏oÚ¯r Ϋse̛paΛra¬te difςf:eːren˺ət fƶol=ds ȕduringĺ̚ ˖b\x91aτckýteƂ͝st̹ʝ.\nĉ͕\nʹAʙȡs ɉɺaÅ ĳr\x8fe͐s̀ultZ,͠ ͠``ưśelf.expΠeriȰ4mĠ>ΨenɎ(t_foő\u03a2ldÇeΖÚrɣ`` Ȼk˴eyˡ iȋs ̚\xad=Ūexśtendeðpd͡ wȃi̿t͆h ``jobˌ_typeɍ/ggroupŕ`ſ`.ȉ^\n\nï*ȳǴ ɛ͌If ``j͋ob_tˉyp;ʧe@`` or ``»groupƄ́`` ǁiƟsnɷ\'ēΏt ˑset\x98 t̴XhƦϜen\x82 käeɼ\x9a͉y˄ ʋiȁsȧƛ exètendedQ y͉wÆɟith \x87onenh\x88ȷſ v͒alueƷ.\n\n        \n\n*² όIēĀf nϠoìne ˲of Ì``jυɍob*_typȊeɓƧ`Ĕʡʖʃó` ďanͱd "`Μ`gΉǝrou˖p``\x93 isC Ɯ̌ǯset tåhen ``self.¢expǒʒerimƜʶenȵt_foldeŎr\x93``\x91 Ŭisɍ notˣ exɁtendΒed.\n̔\nParɣc˰ameťĆeƻrΊs\n----ë-ČΝ%ɭ-ͤŪɰ---\x85n-\n˕jobȌʖ£_iͶtʄɂƨyɝØ͋peů:ț\n ŻŌǞ    ˒ ʐ˄SpeλcŵǄifyƗ· tĹźhe ħϒtype ʦof .rȡun,ŏ\u0379˂̜ whi>chǺ \x98isǾ usefŒuųl\x83ˋ whenǲ you͘ƍ\'ŉreĕ gǸroupiĕngˣ ǫrunsΈϣ? togʢe^ther\n        inʵtoȭğ lƶωarg͑erī eÓĚ˱xperimˤeōntʥsϨ u·sŻǠiǻ^Ǿng ̸͊gɯrʺobuΌpąͤ.\ngĲϤrou5p:\nˮƾ}E    Ɂ    ͤSpƣecifΗyʳ a gÅΞroup ɮto̚Ƈͬ orgϱɽ\x84anizπWe indiviÖωdĶuaŢlΚ rɐ¾άÁunsʗˠ inʹtʸʗăˊȥϥqo a̅ɬ Ƹla?͠rgƃer exĵperi̍meǃnt˨.ǳ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='job_types', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='group', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=Call(func=Name(id='copy', ctx=Load()), args=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='experiment_folder', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='job_types', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='experiment_folder', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='group', ctx=Load()), conversion=-1)]))], orelse=[If(test=Compare(left=Name(id='group', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='experiment_folder', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='job_types', ctx=Load()), conversion=-1)]))], orelse=[Assign(targets=[Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='experiment_folder', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='job_types', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='group', ctx=Load()), conversion=-1)]))])])])], decorator_list=[]), FunctionDef(name='_save_dict', args=arguments(posonlyargs=[], args=[arg(arg='se_lf'), arg(arg='dictionary', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='You should start experiment before using log_backtest_run or log_backtest_metrics')], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='NamedTemporaryFile', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Constant(value='w+'))]), optional_vars=Name(id='ou_f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='dictionary', ctx=Load()), Name(id='ou_f', ctx=Load())], keywords=[])), Assign(targets=[Name(id='filename', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='.json')])), Expr(value=Call(func=Attribute(value=Name(id='ou_f', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='key', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='_current_experiment_folder', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='s3_client', ctx=Load()), attr='upload_file', ctx=Load()), args=[], keywords=[keyword(arg='Bucket', value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='bucket', ctx=Load())), keyword(arg='Key', value=Name(id='key', ctx=Load())), keyword(arg='Filename', value=Attribute(value=Name(id='ou_f', ctx=Load()), attr='name', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='_check_bucket', args=arguments(posonlyargs=[], args=[arg(arg='se_lf')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ǳ    ̋')), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='s3_client', ctx=Load()), attr='head_bucket', ctx=Load()), args=[], keywords=[keyword(arg='Bucket', value=Attribute(value=Name(id='se_lf', ctx=Load()), attr='bucket', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ClientError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Error occurred during checking bucket: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_get_s3_client', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='endpoint_url', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='endpoint_url')], keywords=[])), If(test=Compare(left=Name(id='endpoint_url', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[Constant(value='Environment variable `endpoint_url` should be specified for using this class')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='aws_access_key_idJ', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='aws_access_key_id')], keywords=[])), If(test=Compare(left=Name(id='aws_access_key_idJ', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[Constant(value='Environment variable `aws_access_key_id` should be specified for using this class')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='aws_secret_access_key', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='aws_secret_access_key')], keywords=[])), If(test=Compare(left=Name(id='aws_secret_access_key', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[Constant(value='Environment variable `aws_secret_access_key` should be specified for using this class')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s3_client', ctx=Store())], value=Call(func=Attribute(value=Name(id='boto3', ctx=Load()), attr='client', ctx=Load()), args=[Constant(value='s3')], keywords=[keyword(arg='endpoint_url', value=Name(id='endpoint_url', ctx=Load())), keyword(arg='aws_access_key_id', value=Name(id='aws_access_key_idJ', ctx=Load())), keyword(arg='aws_secret_access_key', value=Name(id='aws_secret_access_key', ctx=Load()))])), Return(value=Name(id='s3_client', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[])], type_ignores=[])