Module(body=[ImportFrom(module='unittest.mock', names=[alias(name='MagicMock')], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='etna.transforms', names=[alias(name='StandardScalerTransform')], level=0), Import(names=[alias(name='torch')]), ImportFrom(module='torch', names=[alias(name='nn')], level=0), ImportFrom(module='etna.datasets.tsdataset', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='MAE')], level=0), ImportFrom(module='etna.models.nn', names=[alias(name='MLPModel')], level=0), ImportFrom(module='etna.models.nn.mlp', names=[alias(name='MLPNet')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='FourierTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='LagTransform')], level=0), Import(names=[alias(name='pytest')]), FunctionDef(name='test_mlp_model_run_weekly_overfit_with_scaler', args=arguments(posonlyargs=[], args=[arg(arg='ts_dataset_weekly_function_with_horizon'), arg(arg='h')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='ts_train', ctx=Store()), Name(id='ts_test', ctx=Store())], ctx=Store())], value=Call(func=Name(id='ts_dataset_weekly_function_with_horizon', ctx=Load()), args=[Name(id='h', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lagC', ctx=Store())], value=Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='h', ctx=Load()), BinOp(left=Name(id='h', ctx=Load()), op=Add(), right=Constant(value=4))], keywords=[])], keywords=[]))])), Assign(targets=[Name(id='fourier', ctx=Store())], value=Call(func=Name(id='FourierTransform', ctx=Load()), args=[], keywords=[keyword(arg='period', value=Constant(value=7)), keyword(arg='order', value=Constant(value=3))])), Assign(targets=[Name(id='std', ctx=Store())], value=Call(func=Name(id='StandardScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))])), Expr(value=Call(func=Attribute(value=Name(id='ts_train', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='std', ctx=Load()), Name(id='lagC', ctx=Load()), Name(id='fourier', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='decoder_length', ctx=Store())], value=Constant(value=14)), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='MLPModel', ctx=Load()), args=[], keywords=[keyword(arg='input_size', value=Constant(value=10)), keyword(arg='hidden_size', value=List(elts=[Constant(value=10), Constant(value=10), Constant(value=10), Constant(value=10), Constant(value=10)], ctx=Load())), keyword(arg='lr', value=Constant(value=0.1)), keyword(arg='decoder_length', value=Name(id='decoder_length', ctx=Load())), keyword(arg='trainer_params', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='max_epochs', value=Constant(value=100))]))])), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_train', ctx=Load()), attr='make_future', ctx=Load()), args=[Name(id='h', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts_train', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future', ctx=Load())], keywords=[keyword(arg='prediction_size', value=Name(id='h', ctx=Load()))])), Assign(targets=[Name(id='mae', ctx=Store())], value=Call(func=Name(id='MAE', ctx=Load()), args=[Constant(value='macro')], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='mae', ctx=Load()), args=[Name(id='ts_test', ctx=Load()), Name(id='future', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=0.05)]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='horizon'), List(elts=[Constant(value=8), Constant(value=13), Constant(value=15)], ctx=Load())], keywords=[])]), FunctionDef(name='test_mlp_make_samples', args=arguments(posonlyargs=[], args=[arg(arg='simple_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mlp_module', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='df', ctx=Store()), Name(id='df_exog', ctx=Store())], ctx=Store())], value=Name(id='simple_df', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='encoder_length', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='decoder_length', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='ts_samples', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='MLPNet', ctx=Load()), attr='make_samples', ctx=Load()), args=[Name(id='mlp_module', ctx=Load())], keywords=[keyword(arg='df', value=Subscript(value=Name(id='df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='df', ctx=Load()), attr='segment', ctx=Load()), ops=[Eq()], comparators=[Constant(value='1')]), ctx=Load())), keyword(arg='encoder_length', value=Name(id='encoder_length', ctx=Load())), keyword(arg='decoder_length', value=Name(id='decoder_length', ctx=Load()))])], keywords=[])), Assign(targets=[Name(id='first_sample', ctx=Store())], value=Subscript(value=Name(id='ts_samples', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='secon_d_sample', ctx=Store())], value=Subscript(value=Name(id='ts_samples', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='la_st_sample', ctx=Store())], value=Subscript(value=Name(id='ts_samples', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='expected', ctx=Store())], value=Dict(keys=[Constant(value='decoder_real'), Constant(value='decoder_target'), Constant(value='segment')], values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Constant(value=58.0), Constant(value=0)], ctx=Load()), List(elts=[Constant(value=59.0), Constant(value=0)], ctx=Load()), List(elts=[Constant(value=60.0), Constant(value=0)], ctx=Load()), List(elts=[Constant(value=61.0), Constant(value=0)], ctx=Load()), List(elts=[Constant(value=62.0), Constant(value=0)], ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Constant(value=27.0)], ctx=Load()), List(elts=[Constant(value=28.0)], ctx=Load()), List(elts=[Constant(value=29.0)], ctx=Load()), List(elts=[Constant(value=30.0)], ctx=Load()), List(elts=[Constant(value=31.0)], ctx=Load())], ctx=Load())], keywords=[]), Constant(value='1')])), Assert(test=Compare(left=Subscript(value=Name(id='first_sample', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='1')])), Assert(test=Compare(left=Attribute(value=Subscript(value=Name(id='first_sample', ctx=Load()), slice=Constant(value='decoder_real'), ctx=Load()), attr='shape', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Name(id='decoder_length', ctx=Load()), Constant(value=2)], ctx=Load())])), Assert(test=Compare(left=Attribute(value=Subscript(value=Name(id='first_sample', ctx=Load()), slice=Constant(value='decoder_target'), ctx=Load()), attr='shape', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Name(id='decoder_length', ctx=Load()), Constant(value=1)], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ts_samples', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=7)])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='la_st_sample', ctx=Load()), slice=Constant(value='decoder_target'), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='expected', ctx=Load()), slice=Constant(value='decoder_target'), ctx=Load())])], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='la_st_sample', ctx=Load()), slice=Constant(value='decoder_real'), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='expected', ctx=Load()), slice=Constant(value='decoder_real'), ctx=Load())])], keywords=[])), Assert(test=Compare(left=Subscript(value=Name(id='la_st_sample', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='expected', ctx=Load()), slice=Constant(value='segment'), ctx=Load())])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_equal', ctx=Load()), args=[Subscript(value=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=List(elts=[Constant(value='target')], ctx=Load()), ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(upper=Name(id='decoder_length', ctx=Load())), ctx=Load()), Subscript(value=Name(id='first_sample', ctx=Load()), slice=Constant(value='decoder_target'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_equal', ctx=Load()), args=[Subscript(value=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=List(elts=[Constant(value='target')], ctx=Load()), ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=Name(id='decoder_length', ctx=Load()), upper=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='decoder_length', ctx=Load()))), ctx=Load()), Subscript(value=Name(id='secon_d_sample', ctx=Load()), slice=Constant(value='decoder_target'), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_mlp_step', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ǕŦ   ɥ B  Ǣ  ʍo ʑ   Ɔ   ˀƣ   ')), Assign(targets=[Name(id='batch', ctx=Store())], value=Dict(keys=[Constant(value='decoder_real'), Constant(value='decoder_target'), Constant(value='segment')], values=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load()), args=[List(elts=[List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load()), List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load()), List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load()), args=[List(elts=[List(elts=[Constant(value=1)], ctx=Load()), List(elts=[Constant(value=2)], ctx=Load()), List(elts=[Constant(value=3)], ctx=Load())], ctx=Load())], keywords=[]), Constant(value='A')])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='MLPNet', ctx=Load()), args=[], keywords=[keyword(arg='input_size', value=Constant(value=3)), keyword(arg='hidden_size', value=List(elts=[Constant(value=1)], ctx=Load())), keyword(arg='lr', value=Constant(value=0.01)), keyword(arg='loss', value=Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='MSELoss', ctx=Load()), args=[], keywords=[])), keyword(arg='optimizer_params', value=Constant(value=None))])), Assign(targets=[Tuple(elts=[Name(id='loss', ctx=Store()), Name(id='decoder_target', ctx=Store()), Name(id='output', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='step', ctx=Load()), args=[Name(id='batch', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='loss', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='decoder_target', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())])), Assert(test=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='decoder_target', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='decoder_target'), ctx=Load())])], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='output', ctx=Load()), attr='shape', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='Size', ctx=Load()), args=[List(elts=[Constant(value=3), Constant(value=1)], ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='test_mlp_layers', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='MLPNet', ctx=Load()), args=[], keywords=[keyword(arg='input_size', value=Constant(value=3)), keyword(arg='hidden_size', value=List(elts=[Constant(value=10)], ctx=Load())), keyword(arg='lr', value=Constant(value=0.01)), keyword(arg='loss', value=Constant(value=None)), keyword(arg='optimizer_params', value=Constant(value=None))])), Assign(targets=[Name(id='model_', ctx=Store())], value=Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Sequential', ctx=Load()), args=[Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Linear', ctx=Load()), args=[], keywords=[keyword(arg='in_features', value=Constant(value=3)), keyword(arg='out_features', value=Constant(value=10))]), Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='ReLU', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Linear', ctx=Load()), args=[], keywords=[keyword(arg='in_features', value=Constant(value=10)), keyword(arg='out_features', value=Constant(value=1))])], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='model_', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='model', ctx=Load()), attr='mlp', ctx=Load())], keywords=[])]))], decorator_list=[])], type_ignores=[])