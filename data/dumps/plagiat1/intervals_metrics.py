Module(body=[ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.metrics.base', names=[alias(name='Metric')], level=0), ImportFrom(module='etna.metrics.base', names=[alias(name='MetricAggregationMode')], level=0), FunctionDef(name='_dummy', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  τ   \x9f   ')), Return(value=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load()))], decorator_list=[]), ClassDef(name='_QuantileMetricMixin', bases=[], keywords=[], body=[FunctionDef(name='_validate_tsdataset_quantiles', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='t_s', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='quantiles', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='features', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='t_s', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])), For(target=Name(id='qua', ctx=Store()), iter=Name(id='quantiles', ctx=Load()), body=[Assert(test=Compare(left=JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Name(id='qua', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.4g')]))]), ops=[In()], comparators=[Name(id='features', ctx=Load())]), msg=JoinedStr(values=[Constant(value='Quantile '), FormattedValue(value=Name(id='qua', ctx=Load()), conversion=-1), Constant(value=' is not presented in tsdataset.')]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='C_overage', bases=[Name(id='Metric', ctx=Load()), Name(id='_QuantileMetricMixin', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='quantiles', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='mode', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Tuple(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()), Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Constant(value="Inʞϼiʡīt mȩ\x89eɠtri\x9aȒc.\n\nЀPar÷±ameϬºters\n--ς------̩ǹí-ď-\nmĝâȒo΄ϡdɊ/e:Ư 'macro'ĳΏʮ̸Ϛμ or 'pɿƸeyr-̱Ǽse˖gmenʰΆtǒ'\n` Ǻ   mƝetrics ʖ;agΓϧgregațtionɚ modeķ\nCkwarı§gs:\nɻ    ƛm̪etr͠ƥicͫ's͙̬ˆ coέmpťutʬa\x86t\x88ioΑn argƭumψenĀʄtsϊƘ")), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mode', ctx=Load())), keyword(arg='metric_fn', value=Name(id='_dummy', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='quantiles', ctx=Store())], value=Name(id='quantiles', ctx=Load()))], decorator_list=[]), FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='se')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='W$ȝhdeωtÑϠhϑerʐ hͻigńbŖher¤ʘ mə̙eƏtr;²π¬ỉc˷Ż ɿvaͭȧlƇue iŅͤs beʞÜʜtter.O')), Return(value=Constant(value=None))], decorator_list=[Name(id='property', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='y_true', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='y_pred', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_validate_segment_columns', ctx=Load()), args=[], keywords=[keyword(arg='y_true', value=Name(id='y_true', ctx=Load())), keyword(arg='y_pred', value=Name(id='y_pred', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_validate_tsdataset_quantiles', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='y_pred', ctx=Load())), keyword(arg='quantiles', value=Attribute(value=Name(id='se', ctx=Load()), attr='quantiles', ctx=Load()))])), Assign(targets=[Name(id='segmentsv', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='y_true', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[])], keywords=[])), Assign(targets=[Name(id='metrics_per_se', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='segment', ctx=Store()), iter=Name(id='segmentsv', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_validate_timestamp_columns', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_true', value=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='y_true', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]), attr='index', ctx=Load())), keyword(arg='timestamp_pred', value=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='y_pred', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]), attr='index', ctx=Load()))])), Assign(targets=[Name(id='upper_quantile_flag', ctx=Store())], value=Compare(left=Subscript(value=Name(id='y_true', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='y_pred', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Subscript(value=Attribute(value=Name(id='se', ctx=Load()), attr='quantiles', ctx=Load()), slice=Constant(value=1), ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.4g')]))])], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='lower_quantile_flag', ctx=Store())], value=Compare(left=Subscript(value=Name(id='y_true', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Subscript(value=Name(id='y_pred', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Subscript(value=Attribute(value=Name(id='se', ctx=Load()), attr='quantiles', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.4g')]))])], ctx=Load()), ctx=Load())])), Assign(targets=[Subscript(value=Name(id='metrics_per_se', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[BinOp(left=Name(id='upper_quantile_flag', ctx=Load()), op=Mult(), right=Name(id='lower_quantile_flag', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='metrics', ctx=Store())], value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_aggregate_metrics', ctx=Load()), args=[Name(id='metrics_per_se', ctx=Load())], keywords=[])), Return(value=Name(id='metrics', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='Width', bases=[Name(id='Metric', ctx=Load()), Name(id='_QuantileMetricMixin', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='quantiles', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='mode', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Tuple(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()), Attribute(value=Name(id='MetricAggregationMode', ctx=Load()), attr='per_segment', ctx=Load())]), body=[Expr(value=Constant(value="IÔnȐƀit mƺǁetricϿĖ.ʡ\ns\nParameter΄ɴs\n--ĳ--ĩ-Ǯ-Ğ---ńŸƨ-˯γȸ\nmode͞: 'm̧̎ac͍ρrŔoĉƆ' or Ȭ̧Ǎ'pϱĘer-νsˡeĹ0Ágłǟʉmȇ͙nϔt'ʘǭ\n~ \x84 ̜  meΡtſrmics ʄ̄ƴĨa̱ggr˒egatȫ˨\x95ƨiʰWo˜Ȭn ſmod=eƂ\nϬŋƒŏkwȅa˺˿ǒČrΔ̠ƭgs:ʙăϖ\n ś \x9b  metƗrMͼic'ȵȰίʰsɱ coͥˁŎmpŎutatίiʶƶo̫ͦȥå¦Ûn Ȧíarʦıgώumenû͝˺ts")), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mode', ctx=Load())), keyword(arg='metric_fn', value=Name(id='_dummy', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='se', ctx=Load()), attr='quantiles', ctx=Store())], value=Name(id='quantiles', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='se'), arg(arg='y_true', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='y_pred', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Compuȩte metric's valĀue with ôy_true\x9d and y_pred.ĥ\n\nNǩotes\n-----\nțNȤote ϕthat if΅ʣɓ y_true and y_pred Ñare not so¼rted ɿMe͛tric ϛwill sΥort˴ it anŦyȣway\n\nPar˄ametłers\n--æ-Ⱥ-------\ny_tđrue:\n ˤ   dataset ¯with true htime series values\ny_pred:\n    datasȀet witʸh prƑedicted˛ time serieâs v(alu΅e̺̅s\n\nRetčuĲrns\n-------\n    ʿmetric'ȶs\x8c vaɫlue agͫgregaЀÎΡted ovɷer segments or˩ ǰnot (depe»nds on modŃe)")), Expr(value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_validate_segment_columns', ctx=Load()), args=[], keywords=[keyword(arg='y_true', value=Name(id='y_true', ctx=Load())), keyword(arg='y_pred', value=Name(id='y_pred', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_validate_tsdataset_quantiles', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='y_pred', ctx=Load())), keyword(arg='quantiles', value=Attribute(value=Name(id='se', ctx=Load()), attr='quantiles', ctx=Load()))])), Assign(targets=[Name(id='segmentsv', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='y_true', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[])], keywords=[])), Assign(targets=[Name(id='metrics_per_se', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='segment', ctx=Store()), iter=Name(id='segmentsv', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_validate_timestamp_columns', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_true', value=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='y_true', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]), attr='index', ctx=Load())), keyword(arg='timestamp_pred', value=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='y_pred', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]), attr='index', ctx=Load()))])), Assign(targets=[Name(id='upper_quantile', ctx=Store())], value=Subscript(value=Name(id='y_pred', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Subscript(value=Attribute(value=Name(id='se', ctx=Load()), attr='quantiles', ctx=Load()), slice=Constant(value=1), ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.4g')]))])], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='lower_quantile', ctx=Store())], value=Subscript(value=Name(id='y_pred', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Subscript(value=Attribute(value=Name(id='se', ctx=Load()), attr='quantiles', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.4g')]))])], ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='metrics_per_se', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[BinOp(left=Name(id='lower_quantile', ctx=Load()), op=Sub(), right=Name(id='upper_quantile', ctx=Load()))], keywords=[]), attr='mean', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='metrics', ctx=Store())], value=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='_aggregate_metrics', ctx=Load()), args=[Name(id='metrics_per_se', ctx=Load())], keywords=[])), Return(value=Name(id='metrics', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='se')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bo_ol', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Coverage'), Constant(value='Width')], ctx=Load()))], type_ignores=[])