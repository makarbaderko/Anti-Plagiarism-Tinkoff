Module(body=[ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='datetime', names=[alias(name='datetime')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), Import(names=[alias(name='warnings')]), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='statsmodels.tsa.holtwinters', names=[alias(name='ExponentialSmoothing')], level=0), ImportFrom(module='statsmodels.tsa.holtwinters.results', names=[alias(name='HoltWintersResultsWrapper')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='BaseAdapter')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='NonPredictionIntervalContextIgnorantAbstractModel')], level=0), ImportFrom(module='etna.models.mixins', names=[alias(name='NonPredictionIntervalContextIgnorantModelMixin')], level=0), ImportFrom(module='etna.models.mixins', names=[alias(name='PerSegmentModelMixin')], level=0), ClassDef(name='_HoltWintersAdapter', bases=[Name(id='BaseAdapter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="̴C΄̥l·ass fžoȵrɅ hoɌ\u0383lʈdingŔƴÊ «HolȎt-WɎiǋ\x8fnƖÊtƤΖeŞrs' ŹeΪx̼pone\u038bƁnt͒iʃ̞ò̑alT ȥσsmέoothing moġdelɚ.\n\nNoteƔƜưsʧ\n--ƙ--ǀ-\nWe; uʸ.sȥǘħϖʆɨe :py:cȒ͎˿lassŻsʤ:`ɫǤɳstatsȕmoʛdV\u038dxelsƳ.tsa.ʐhƿoltĿwěȫȬ¦ȿ=interʝʠ\u03a2ǏǝˌË¯˽sƍ.ˎęEȼxʏpon#en͔tiaϊlSG˟moothĔinεgÐʁ` mod̹ȘϘel fro͡m \x92staĨts˫moŬȼderl̨¦́Ŗ\x84\u0383ȢϡŤs ʭpa\x92Ίc΄òkagɐ˽Ẹ̑Ƒe.0ǻ")), FunctionDef(name='get_model', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Load()))], decorator_list=[], returns=Name(id='HoltWintersResultsWrapper', ctx=Load())), FunctionDef(name='_check_dfYV', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='columns', ctx=Store())], value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load())), Assign(targets=[Name(id='columns_not_used', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='se', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[]), attr='difference', ctx=Load()), args=[Set(elts=[Constant(value='target'), Constant(value='timestamp')])], keywords=[])), If(test=Name(id='columns_not_used', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[], keywords=[keyword(arg='message', value=JoinedStr(values=[Constant(value='This model does not work with exogenous features and regressors.\n '), FormattedValue(value=Name(id='columns_not_used', ctx=Load()), conversion=-1), Constant(value=' will be dropped')]))]))], orelse=[])], decorator_list=[]), FunctionDef(name='predict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='This model is not fitted! Fit the model before calling predict method!')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_df', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])), keyword(arg='end', value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='y_pred', ctx=Store())], value=Attribute(value=Name(id='forecast', ctx=Load()), attr='values', ctx=Load())), Return(value=Name(id='y_pred', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='damped_trend', annotation=Name(id='bool', ctx=Load())), arg(arg='seasonal', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='seasonal_periods', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='initialization_method', annotation=Name(id='str', ctx=Load())), arg(arg='initial_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='initial_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='initial_seasonal', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='use_boxcox', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='str', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='bounds', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='DATES', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='datetime', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='freq', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='missing', annotation=Name(id='str', ctx=Load())), arg(arg='smoothing_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='smoothing_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='smoothing_seasonal', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='damping_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='fit_kwargs'), defaults=[Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value='estimated'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value='none'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='I͊nit\x89ʂ Holt-Wȩȴi̊nȟter˙Źs\' modelʰ wiʄƾ\u0381ͼt˓h gĢivϢen ƎpɁaʅrams.«.\nı\n͜PͯarQameɾte@Ϧşrɠƌsʀ\n\x9e-----Ϩ-ɫ--\x81Ǎ--\ntrend:\nč   ǈȝ Type ͞of´ ʬtre\u038bȗÚȤ˺>nϞDdoYȄûŽ comɉp¦ˡonent. ϭOnˬe of:ŀ\n\njɍõ ͅ   ɺ*͌ǃ ĭ\'\u03a2addŷϑ\'Ú\n\nˁ   g ͫ* \'ň͇ɑčmul̚Ô\'\nˠ\nI ø ̝  *ț \'addiŪΊtive\'\n\n ͘   *¿ %\'multXi\x94WȫpϹlicatiΖve\'\n\n ʺ ώɹͻ ɴ *ʓ NɌ\x8boʖne\n\nd,ampeȥdŒ_trȃenȏdŚϿ:ͅʇ\n ̛ǔĄ͌ʴ   S̊˼uȓhʇƳould thɇe tǮreŢΦn˩Ύ˫dë͢ cǻomΒőponent Ăẗ\x8bRbeϏˈ dampŲɾZUed.\nseas͎onaȡl:\nχ  ʪ Ŝ TȽype oƚf ŷ̑ǵǈsΫǤeaϯs¯on˸aǅlÊŽ\' Ƽ̩coȀʣmpƍͺo\x81n3ʪen}μϝt. :Oneƒü oǮȯfǧ\x93:\nĻ;\nŁ γ  Ȭ ˃ɽ*ʀʝ Ɲ\'ɣaǈdɜd\'\nϪ\n    *Ϙ \'²ȧȨġmul\x7f\'\n\n  Ǧ  * \'ëa˓ɒ}êdȇΧȶȽdʓit,žive\u0382˦\'\n~\n ĝ   * \'mT̫ultiplϜic»atÒǊŋive\'\n\n  ¶Ȥ Ϲ *ɴτ ʃ̾τǹNone͚\n\nsΊeǐaˣsͣona˂\x99l_pˢer̽iodΌγsƕ:\nʷ  ˘Ɖ  ThŨe ^numǁbe̔r of ĉperiods ȋn̕\x8e ŨaJ Pȁɧcomp΅ȌXĂlʿeȲtȦe sħeĜϻƗaÍŌs̈́˛onalϚ cŶ¯ycĦ¼l̝e˷, ŝe.ʾg., 4 ʁfor\n   Ͷ quâaʹrtȈeƃrly Ʉ͓daȡĴta or ɴϏ7 fʵɄorŔ Ɇdaǜìǂlʎy İώdatÍa Ɉ§Ͻw̨ith a weekϕľy cymcɚlǟe.Ȗ\ninitǎializĈation˰\u0378_methʾΗodpúÃ͞:\nâ ʗ Ǌ  ƅ˵MϮethod Ffǥ"orá 6iǙnitialize ˉthe ɬrüecurǻNʦsǑʗionsƑʸź.Φ ȸOnŬe ofυʻ:\n\n   ˫ϻ νħ*ό\x87 ňNone*ȆNΨ\ng\n    * \'eƔs¿̝tiõͱmated\'\n\n̻τǑΠ   &Ȳ * \'ɐheur͛ďistic\'\n\nlɿ ͎ʋ   *Ȉ ό\'legacy-rheurisƐɈ¹ũtĬic͘ɑ\'\n7ϴ\u03a2Ϲëƭǔ\n ƹ̫ Ȯ6  ˉ*Ϭ Ϧɾʻ\'ʊknowϕϩ˫n\'\xad\n\n H ʺ ƅͫǍƲ̚ NƉ϶one dżΧefaults˜ ̿t\x81o\x88 Ƶtheʝ phƜrȵe-0\x83.ƪǬ12Ɩ beIϪ&ȋ͍havȢioŘ͚r whƍeƵre iʄnƷitƷʯiaɗlɋ vóĎal͇ueľs\n   ̪̞ aŞre passed as parƝǒT¤t Ŵoăf ȝγ̓m̕``ɰfit``. If anyύY of ΪtheĒ otPh̡er valSϩuesˌ areǲ\nŭ   ɊǑ pasªsed=, tĪhenǵ.Ő thȧe i\x9fniŬtiŰóͧaÖl ʬvalu͞αʣeŮ\xa0˖óϟs mɮƪusϦƖt also Σb\x80eʈ ͙seΧtŦ Rwhen cons̍ątrȭuctin\u038bg\n  ʊɄ͇ʭ  Ώthʻe Ξmodel. ĩĆIf \'ǩĘ¯ʐ;nπown\u0381\' iniƩtμialήizÄatͤi͔onē is usedČ,̺ t±hen̩ʞͻ̑ʗ ``Einitiώalʯǟʵ_Żleveęlŏ``\nʃ   ¯ muϤ̮̊st ñˀbåe *passe̲d, ȁas όwƊell Ͱas̮³ ``iŋnit˹έ2ʶţi¡alϦ_tƌreƤnd``͚ a͑Ϯnûd ``initǼiaôl_±seaso(µnȨal`Ǧ` iϰãfɊ\n@ ˯  ǝ ʦayψpϹĲpli˓̆cƘa̢5ÿbo¢l¾eh\x83ˌ̮. Def¦ault isϝ \'estimatͣed\'.͈ "Āˑlegaƃcy-heuƒrțisticĶĘƻ"ϓ uȇseϓs t̂he sBȿÇ̸aƥḿe\n ͫ×  ̐ vaʹlueʗs t͝hɁǷatɬ we¸re Ƹuĺʥse˔dΩ in çs\x90tΛatsmoǵN̤ĹłĆdelµ˟s\u0380 0.11 and earlΖΥieȢr.̌\ni*niti³aŵϤl_l̋eve»ĩ˝l\x88:ȕ\n  ®  ThƃƥeťN ˗ŐiϤnit͆iϾal¿Å lev!řeȻl comƢǌponenlt͞.\x8dǕ ReqƜu̜ired \x83̪if ɀesBtimastξ͚ioυnǓ met¾\x91hGɌĲ²oɟd iťɊǍs "knȬoɂƭͫϣwǄˡǨΒn͖"Ũ.Ŵ\n   ψ΄ɭ ƕǞIf sxet [uĚɏʐ\x8fɢsing eithŁÂǡeʿƝrŏ ɽį̄"estiǁmasΖtϣȱeτdų" orɓĜ ̊"hϭeȾŔuŕʒri˰sȻtic"S½ thȦǿiπɉs, ɰvºʖa̓lueƮƣ\u0378 iʮs\x8cɺ usƩΚedÓ̅.\n¨\x91\x8e    \x90T˟Βhis aǹˤ͚llow˪ɳóĚɬǢ̂ɩ\x85˷s onǇªe or Ãm˦oƥʶre of th/e initiǷϽaϺlΔ Ŵʏ˻Òval\u0378uΜ̚eοs̕ tʧoΠ Ȩ\u03a2ƄÞbǷeŰ set\\ˏ )whi\u038ble\nȞö ƿ Ű˴.  ϰdeferriȟŌŲɎnΏg to vthżōeǒ BhϞ˙̯euristicʚȯ fφȁΈor ŏthƋers ĝoƎr̥ eϹsti\x90matiɛ×ǯng ətʐhłe ϡun̡̺ʹ˨set\n   ǽ \x85äpǥaramǏzłetersϴ.ʍ\n̝ǥinĎiǏŏtiaΩĴl_trśen\x84ʿw͝Πͫd:\n   VΡ The ÊinitiŘ͜ɫŦaǲl tŚˇreŗ˪nĵd coŹmp\x86oÞȈnent. Requiϛr˨edȲĮɊ˸ ͂ĦifǿλÄ eȉãs\u03a2üt̞iÅmόation Ím˚ͯethŰ͈o\u0379Ğčd iɛĔs̩ώ ǝƵ"\x81known".o\n͔   ͺ If se\x95ǵtɆ usʖing eόitÍġhǁer %"estˊimĂated" or ɵ"hjeu®risƷtic"˥ʁ thɉǂυisƷx πvͬalϤue isƄ uƩ<seȞd.\nŦ5 Ū˨f  ̠Ĉ ÜΐΆThψiī\x95s ǣ\u03a2aŲlƊɶʏlows$ one̶ oǮær moǖƛrʈe Ȇofʴ øthe iniͼtiȡa̝l ʥvalu̱ešϙ tσ̼ƌoȠ | be Ǵset whȃĭ\x8ble͚\n ˕   dιefer®ĄœriΘΘnǠgƏǖǑ to ƶthes heuϗrisȵtri˄ȋc ɃfƄor µoȪ\u038bthɠŜeǟ˘rs oͨʺɃ˒r ͇ͦeÀǢstimatăiȄngϵ thẻ unΎseĔ}ǜt\n ɲ   paʹraʞmeteϤrs.\n¦initiȸaʒlå_s̮νǝſe͐a#σsonalÀΛʨ:ʻ\n ̫   The inΡitŹǠióĠalÈ sβFeaʑsonal componeʹúǌn\x88tɎ. ɾAn VϪȉarray ˩oȭf lengtʫh "˙`seĒasonŖaClȱ`\n  η\u0378  oſr l͔eΔnƈgth ``İsea̋sonʍaĺl - 1`` (Ǩ˞i͉d\x8bn w2hichˬ cíase thĸe laWǗɇsŲt ˘initi°al ʆv\x8dalue\n    ¸ƫisɘ σcoɏmputed ˇ͖to\x8fë mƂιʀake stheǔ͕ aΈ$vʯerage eNwffͧecɎtØʬ zίero)͙. Oʳ$ϵnǪly ʂu̍s˨edǥ if\n   ˩ iϰniƘ̮ĄĠ©ϲątiāǩal˽ization isǬȝǙ \'ˈknowǷn\'. Reġ̄ȏ\x81quΉŗir͆ϠedƗǳŋ ϼif˅ϒ estɷɶΛiǚĽmƺatϠØŻion methǐʙod iȱȇs "known"͞.å\n ϛ Ŕ  ĉʍĴ̄Iɦf ɶϝset ̩ņuưsŔĈing NeitĽŉher@ "eȠ\x92stimaȯtΌed" orΛ ǃ̀"Ơheʱu˛ψrĢiƀstiǷŋTņc" thçis vfaĤl͐ueƝ is ̮used.\nƋ  ǔ  This alɼlows onξeδ or moǏrōe ǁoƳf ͷthσ̄ċeǃ i˺nitɎiaĄɰl˦ vɂaϟlɋΤ˧ĚȔuđesd t÷o be seʗt¡ IwhÈɢileŞ\n  ©  dŠeˢϢferɪrinÍgå t\x9co the heurǑiǅΥ̖stiö̪cϐŎ fÎ͔orƋƧ očthÉers Òor estȞim atäǍi\xadnȟg ž̄the ünͤset\n   å ̕Ƅˆp΅a̱ȫramȞeteÓŰrˤ͖s.\nƮuˌ6sɅe_boxcox: {Tręue\u0380, HĿFąlͣs\x9fe̩̐, \'log\', ̨ůfloÇ˓at\x90}Ýc, optiìoĲnʲaɰμl\n Ŋ˲ ̘Ʊ  SƑhoŲuʈƀlɮdƒ áthe Boxʊ-CáȏǲxϤ traŵ\x9ensfȂorm b͛e͑ applied ͠to Ȕtεh§e datŋaʶ fƀirs·t? ΗOne oͱf:ȰŶǨ\n\n Ɉ   *ω\x7f ̍Trueͫ\nʭ\n    ʠ* FaálseϜɴĠ\x92͜ǲ\n\u0380\nŀ    * \'lΑϘo˨2g\':͓ Ƣ8aξå̍p\x99pløɊʓǗ̯y ωlog\n³Ċɾ\nŗ    * fǤlo½aɮt: ʌlβamΕbdaʿ v\x84al˟u˗ƔɊ̻e\n\nϴb͙oŻujnds̮Ö:̪\n  ̖  AȀnȓ d̂§iέcǵtiȣοǼon˂ɗ̄agͮry ˽cȬoƩntƓaining bou\xadʙnˌȘdχǚγs fo˒r˙ Ŝtʽhe̡ɼû parașämeȐĮȝŚ@¿ter®ϱsÆƻ inô th\x94eûš Ŧ˽żmĩodel,\n   ͥ excludęing the iniͦtƵʣiæ¶Ώalˍ vaǬlues ϟif̺ ɮestig͆mƅateŷd.ȹ The keys\x90ϴ ofϦϏʠ tǉhǜͼe dɓīiʋctionaB͔r̴y̔\n̯    a@re ˑ̇tǻhe vaƦ͔riVaʙbl̸e ʺnǽaïme̬s̋Ǘ,ζ e.gɧ., ĈűsmŇoʗɪotĸhḯng_le²vŦ=eǕl ʵo͡rͻ ÁiɅ\x8enitǟ½Ƣial_ȀsloApȃe".\nŕ    TȐhǍe̴ initȦialȀȹl seʊasŻ\x8eonΪal vaƇǌriables areɀ ċlaΞͥbelǙeǬdŠ Ϝǂiɓnitial_seaŕµźsoùnalÙǌ.<j>\n ǫȘ   \xad\u0379fƸͶor j=ϑȨ0,..\x8dʙ.,m-Ϋƶ1 $wAɛhūfere ̷˺m is ʈthe nuʐ\xadşmber oθf pǗeriƯǟŅod či͆nʼȋā aϪ ɺɯfullJ ʕǎsĲeasonĭ.\nÛ  Β  U˓se Nʙ-one ϔ\x96Ůt̠o ʹindnicaÝtē ͈̋a \x87n̩onö\xa0-bindinǻɟg c1ħoʔnsˣtȎraint, e.Υ͘dƶg., b(0ϡ, NoneȜ)\n˗ əlʥ 0ªʎ ̓ ơcoΛǵnstr̷ains a Δp˟aramɲeter tĆo\x92 bĂeʡ nʏƌʆon-ŲϘnegĪative.\ndȐa˃teÐ͎sæ{:M\n    An ɓarraƝy-đlikϴe oϵbjeɐʇcȵt ʢoΝfΦ ˒ǵdatȉĊetimΧȝe ƏĹoŝbje\xadcts. IΖĚf˄ͽĆȷ a Pand϶asĤ ĞoÁbÃjeȬßc̒t is gêiven\n H|   foϝr đeǊ˱ǭϫndɊľłǜƟϞ̟ǅogĨ, Ϩit is a˯ssuňǕme=dǎ\u0380 to haveĊȩǖ ǽa ėDǓateIndex.ŉ\nfreqǏǄ:\n    ThǗ4e f\x9ereqȞueɒnc¹yʯ ofe,̱α ͅtBhe Ŧtime-ŒŇseriès. AƑΑȡ ÑPˮaΊndaƿʍs owĊff̺sēΫǑʳeΣt or\x7f̆ 9\'BƳļ\',Ȁ \'D\', \'W\'ź,ö\n    ̯\'M\',Οʮ͞ Ǐ\'AǮ\', oεr \'ŻQ\'ɢ. ThisϚɱ is ľȿo@p!tionχal ifþŴ datʡƶesĊ are givé˂n.\nm·ɔissȗing\x96:\n ɮ đ ϝ Avaiòlab9Ĉleǜɾ o˜ȴpǝtiƣoΖmns Ɋ˥ȠaȘrźe \'noń˸e\', ǁ\'dropå\', and \'raise̲\'. IÂf \'nǜỏne\',ϔ noǃ Ñnan\n ǿǥ ĺ  ΎcheŒ͚cϷǩʓiƟɛng ̝iƲs ĠdonŢe¸à. ƩIf \'ʥľdrEop\', ʢÓaýn>yǾ ȵ̜ȵobŮsΖʠerǷvƎa̵tžǭ\u0378ionsL ňθwitǘϝh nȦans ̒ar{e ŏdǩrƛoǷȹ͔pʥpeˏdα.ɾǈ\n  Ʋ ˢ §If \'ruǔaiͿse\'Å, aˍ͑ƴn eȮ˪Ǚrrɥo̮r is raisedͣ. DeťƂŪͮρfautǈljt̼ is \'noϕne\'.\nsmoothiNòn4g_ɢlevel:\nȐ    The͚ a˵lƁphaċϠɘ value o͍f the simplƪƽϽeų ex̭ǥàpBonenǺ̉͗tivaðl sσϻƪmƷootƮhτJÆʯiȺng·,*͊ ¼Ìif tĿ\u0382¹Ęhe vaǡl!uηǀ/ʾĶeŉŬ;ͯ\n Ö   is se˫t tşŞhÉʠen thʥȈ©isǡ̤ ˵valuŊɘe wȀill ®Ûbķe useɏ6d as tshe vɩalʧ̨uaˬe.̾>\nsmoΞoʝthúBiƴκħnǌg_trjen͆d:\nϴ Ǻ ɍƬ  ΏTheɜ bɡe\'taͱ 4ǇvaȮl&»Ɔue ŇǀoţfǘǠω the~˜ \x84HɮˠolÄtΎƴ\'s )tʄrená̡d me;ŋthưod,ιϓν ifŎ :γt˅ƀh̫ce Nͣ˜va\u0378lϑuǙe cis\nͺ   ϒ set then̶ ͔this value Šwill >be uʙ͈seȻd aį̛s ϟthe vaǽ͛ɯ=lɱue.ʯ\nsmŇoothinλ¬̚\x92g_ǻseaÖsŒoʹnaî͊l:ϖ\nμ\x9bʕśŭ Ǉſ̔  \x8bï Thϕe gam\x85˘ma valŜŁȠuͧe ofˀͿ the holŘ\x91t wɤŐiŗntΛ erʚγs sȟɑeaʜǻsîoƖˋnɀal mǀet¹hȇǡɍodĺ, ɹΟif thĭȽe vΦaƥl̓mĬuĒeł̨\nû  Ś ľBƔƀ ̲^is ǂ˦?ûǨǵȘ\x94sƾϋeſt͟ ňȾtϐ\x8dhenæ \x80this ÄvȔalue ˖̃wilÞlñΊ ̺ʾb˕e u-Ʋ̛sed as Ϥştϗh͏ưe¶ val̓ʎ̞uơeζýɴ.Ȭ\ndaɱmȸpiΊıȼǳǣǣnǹg_trľe˯ndʙ:\n    ThƸeŎ phi ˖vΰʻŎϷalue\xa0Ż ̦ˑƚofϻ tϺhe d?amp˄Ĭàɇeâɖųę˯ƣd̂ǆ Φmeȼt΄hƩͥod,ͨ ʋńψi̓f ̨PtǦhe ľvaČlŬuɮ́eħ́ iήƏŒs\n  ̀  ϥset tÚhen thi¾sŽαΤ vʺɁ¥aluɍe Ϯnwʊill beÆ ʲuseΆßd aĎs˒ th˛e vaļ͌͗ue.\nfitȔ_kwargsʬ:\nͭ   ϣ ƱļAdditionalðǓ LparaHͯme\x8eteϦșrЀͷws f͵orɾʇ cal͞Ƨling͖Ǻ :ȩp̽y:mʦeȼt̝\x9cǕh:`sƵtatsɔǤmoɢV\x9e̕dels.tsʭ̍aʨ.holŠtwišn˓te0͡rʃ̉s.ÞɹExpΘon̲ŃϣentiaƻŬlļ϶Smoot\x88;h+˹ming.fi˕tĎ\u038d̫`.˱Ĕȡ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='trend', ctx=Store())], value=Name(id='trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='damped_trend', ctx=Store())], value=Name(id='damped_trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonal', ctx=Store())], value=Name(id='seasonal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonal_periods', ctx=Store())], value=Name(id='seasonal_periods', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='initialization_method', ctx=Store())], value=Name(id='initialization_method', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='initial_level', ctx=Store())], value=Name(id='initial_level', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='initial_trend', ctx=Store())], value=Name(id='initial_trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='initial_seasonal', ctx=Store())], value=Name(id='initial_seasonal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_boxcox', ctx=Store())], value=Name(id='use_boxcox', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bounds', ctx=Store())], value=Name(id='bounds', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dates', ctx=Store())], value=Name(id='DATES', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Store())], value=Name(id='freq', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='missing', ctx=Store())], value=Name(id='missing', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='smoothing_level', ctx=Store())], value=Name(id='smoothing_level', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='smoothing_trend', ctx=Store())], value=Name(id='smoothing_trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='smoothing_seasonal', ctx=Store())], value=Name(id='smoothing_seasonal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='damping_trend', ctx=Store())], value=Name(id='damping_trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_kwargs', ctx=Store())], value=Name(id='fit_kwargs', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ExponentialSmoothing', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='HoltWintersResultsWrapper', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='regressors', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Fͦit HoEƫlŶ̝ǟtūɫ-WğintǳeìrsΣȇƲ'ͬȋ &m̅oϟưdЀelʡ\x8b.\n˅F\nPʙĸɶâarăΉamȝǢćeter̚kŮsƒ\n---ġǌ---Ϻ\x84-ĦΓ¬χ--ΒǢέ-#\nɹǧìdpΕf\u0378:ή͂Ϸ\n    dƽhFše̼a\x8etureǴs ďɊata˓Żfrϝame\nregreçs9soɳrʘs:ʖƤ\ná  Āɻɤ ̜[ List ξoÆÛ¦f¤ Ŀɩtheȝ\x88Q c˕Ϳoluˣmƾǖns ͙°wiϑtΪh ʁˌrΖĉŋÔegr\x96esȒƧ>sorHŉsĶ(Êiî˥gnĮ̾Ɏo̅ȝrɠĬed źi˟nŠÁ tϻhiʀ̣ϧs ǚͤmo˃dΪeŃ̿l)ʾ\nˆRáȸʥetuϷrnƐs\nɝ-ɫÙƄ---ʧƿ˶---Ȳ\nşϷȸθγ:̃\n9  ȼ̿Ƿ Ͼ θFitteʧd m\x90ʂodΐel¨ɻ")), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_df', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='targets', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='targets', ctx=Load()), attr='index', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Store())], value=Call(func=Name(id='ExponentialSmoothing', ctx=Load()), args=[], keywords=[keyword(arg='endog', value=Name(id='targets', ctx=Load())), keyword(arg='trend', value=Attribute(value=Name(id='self', ctx=Load()), attr='trend', ctx=Load())), keyword(arg='damped_trend', value=Attribute(value=Name(id='self', ctx=Load()), attr='damped_trend', ctx=Load())), keyword(arg='seasonal', value=Attribute(value=Name(id='self', ctx=Load()), attr='seasonal', ctx=Load())), keyword(arg='seasonal_periods', value=Attribute(value=Name(id='self', ctx=Load()), attr='seasonal_periods', ctx=Load())), keyword(arg='initialization_method', value=Attribute(value=Name(id='self', ctx=Load()), attr='initialization_method', ctx=Load())), keyword(arg='initial_level', value=Attribute(value=Name(id='self', ctx=Load()), attr='initial_level', ctx=Load())), keyword(arg='initial_trend', value=Attribute(value=Name(id='self', ctx=Load()), attr='initial_trend', ctx=Load())), keyword(arg='initial_seasonal', value=Attribute(value=Name(id='self', ctx=Load()), attr='initial_seasonal', ctx=Load())), keyword(arg='use_boxcox', value=Attribute(value=Name(id='self', ctx=Load()), attr='use_boxcox', ctx=Load())), keyword(arg='bounds', value=Attribute(value=Name(id='self', ctx=Load()), attr='bounds', ctx=Load())), keyword(arg='dates', value=Attribute(value=Name(id='self', ctx=Load()), attr='dates', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='missing', value=Attribute(value=Name(id='self', ctx=Load()), attr='missing', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='smoothing_level', value=Attribute(value=Name(id='self', ctx=Load()), attr='smoothing_level', ctx=Load())), keyword(arg='smoothing_trend', value=Attribute(value=Name(id='self', ctx=Load()), attr='smoothing_trend', ctx=Load())), keyword(arg='smoothing_seasonal', value=Attribute(value=Name(id='self', ctx=Load()), attr='smoothing_seasonal', ctx=Load())), keyword(arg='damping_trend', value=Attribute(value=Name(id='self', ctx=Load()), attr='damping_trend', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_kwargs', ctx=Load()))])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='_HoltWintersAdapter'))], decorator_list=[]), ClassDef(name='holtwintersmodel', bases=[Name(id='PerSegmentModelMixin', ctx=Load()), Name(id='NonPredictionIntervalContextIgnorantModelMixin', ctx=Load()), Name(id='NonPredictionIntervalContextIgnorantAbstractModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="HoϰÃlgƣĺˍ~t-ȿWiȸƒnĂterσs'Ø ɤeȳtna˃ modʫeǔlΓ.\n\nåNoṫes͏\n-¥----ο̶Ť\nWûϡeȞ͠ɾÉ ňǕuseͭ :ĝ̴py:Ļclaɘ˂Ŏϝ;ss¼:`̐staȀtsÈBǷmodels.tˍìĬsa.hoέltwi͟ˊήnt˟ers.̕EÈxpoň\u0382ŧential˗ůSɬm|ġoɂǦothiΡng` ̠mώodel from stƈat̍smodels pacΤkage.Ͻ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='damped_trend', annotation=Name(id='bool', ctx=Load())), arg(arg='seasonal', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='seasonal_periods', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='initialization_method', annotation=Name(id='str', ctx=Load())), arg(arg='initial_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='initial_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='initial_seasonal', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='use_boxcox', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='str', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='bounds', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='DATES', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='datetime', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='freq', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='missing', annotation=Name(id='str', ctx=Load())), arg(arg='smoothing_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='smoothing_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='smoothing_seasonal', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='damping_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='fit_kwargs'), defaults=[Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value='estimated'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value='none'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='InitáÜȖ HoŒlǈt-ϾΏųWiŞntϒe§rǱs\'\x9eȮ Ɠ˂ťƬmodĊeǨlƳ ̧ϟwϤith0 ΝЀ\x9dgiveJnϴ pɠarams.ŕ\nȄå\nPɻɿŇarΔaómet͢ers\n--"--¼˵--ȓ----\nȁÏtrend:ʹ\nͳ    Type ʬof ˸ȅtr_ienȔd comɃαłpone˅ƋnΆt.ǒ OneŞ of:\nˍ\n÷  ϗ  *γ(Ň \'add(ǥ\'\n\nɥ    * \'ȷmul\'ć\n\n    * Öͳ\'ad͙ditiveŶ\x9eµ\'ĉ\n˥\n    * \'m̡ŇͳulΎt·"ipǠlicatÖiVvɯe\'\nƘ\nƃɻ Ÿͽ   * NɮonϪe\n\ndǋamped_trend:a\n u   Shouldˍή th̅ʛe trend cνÕom˪pʃonɳent båe daǙmped̶.Ǣ\ńί͡s˓eaϔsoΙnal:\n   ȳ Typ̜eζ of seĢasĥPonal componeυnt.ϡ ̌°On̴ưe of˔:\n\n̳ʦ  ƬÍ  * \'addǉ\'ʇ\n\n    * \'mul\'\n\n  Ȫˏ ʒ * \'̥̳lȲaȒdditive\'\nĕ\n    Þˋ* \'muȫ4ltíplicativ4Ȃe\'Ɩ\n\n   Ϭƶˈ * ϳNoǊneūµ\n\nseaȾson̷al_periodsM:\nΟuǄ »ƥź  ɖ Tχhe numbǅ_erĳΊ ofƢÜ periodİs in˕ Ǻa c¦omplĘ\x98etƒe Àseasonʟal cycîle, e.g.Ș,ˮæ 4 for͗\nθ  Ă  ͍q6uarteĔńrlͷy̪ ȇdataú orλɿ 7 ͼąforȚ daily˧ȗ d\x93a·ta͡ witˎh aƚ weekly ϙcyǉc.ǖĖρblǙeŇ.\niİnitΩiͳalŋizȊatiɜʊoͥn_͊ťmeɦthodƊ:\n    MeɠthoŶȣdĦ forϋ iɵniϚtialize the̷ \x99recursƀiºonÓs. O̚nże of:\n\n  Ο  ̀* ƧNoɏnƴe\n\n    r*Ϗˉąj å\'ÏesɎtim͑at\x8d·ed\'\n\nʛ   ǻ * Ḁ̌\'heuristƪǒic\'\nŁ\n  ÿ  * \'ǜΡ̀legacy-\u0383ϲhe͔uristiȽc\'\n\n Σ   * \'HknŮ¥Λownø\'\n\nͣ̚    Noɓneț ˫defauϢµ̗lɣts φtϥo the prĿΪλυe-0.$12 behɽa©vŃ̟ɖÑƆ̧jʔŐić¢orȲ ʎ͑where initialƖ ßơvalȋues\n˳   ͵ aǈˬ͖re ǐpaȲƌssed  °̾asƤ part of `ɡ`fit``ǸȺR.Σ Ifƴș any of ©Īthe otheɉr vǧaluǸes ôare\n  ν  Úp\u03a2aˀssƞed,φ thenȎ ɏtiheƤˀˁ˭ʜƧ initial 4vůalˁues mŠust aŘlso ηbe seήĕtfϠ when coɷn\x94strěuc\u038btŋing\n͢Ǝ   ɗ tǞ¶he moɆadeęl̞. ŠIf Š\'k͎nƄʯo\x86wn\' iniêtial+izati̳̔on iǪʜϖ²Ǎs ̃used, Ͻthen ``initial_l͖evel``\n    musȽt ǎŪ͔ŝbe pasľưsed, asǘ wf7ell °as ź``initiaǋ̫l_trűenądϣ`Î` anCƙd´ ˱`Ș`initýial\x9fƃ_seasʘȖoÐnĐǤϵĝal``\x89 if\n    aʸpāpʦlǖicablͰeϭŜ. Defaultº is æύ\'e{stim˰ateǝd\'šǬʂϷ\x8fʦƢ. ŭ"lʇegacy-ːĻheuŜriˉstic" usesε the sameȻţɒ\n Â ͥ Ϸǽ Ϧvaǅɺlue5sː ̀that wefƦrϰeƤ us˒ʝĪʈed in sϻǓtaΈtϐsmodχelÝsr ħ0Σ.11Ā andū ˾eϺarlĢiǀer.\n\x7finȈiȎtiɠal_level:\nη>Ě  Ǭ Μ \x7fThep inǴiΚĵntialϨĈΝƖź$ ϟˈle˭[vel coĠcmponent. Reql̙uǴsir!́eΟd ΆifȚ ͠estiηmation meǈthod is "kno̝Žwn"ƾã.Ǌ\nȻȰ    If̍ ʚȴs\u0383et usiǴng eeitheʜr \u0382"ͻɽeĚstiȚmĀated" ˽oťήʪlǴr >"»heuristi\x80c" this vȑcʕˉϸŬalue iˎs˥ uˈsÍeˇdě.ěː\n  Ƅ  T͉h´3is allowωs oąn̓eôʎÑ or more ΛoʴϢfϝϴ ȸthζeƒ iɟnitial val͎ues tsoí bϬe set whĜtilǴe͓\n  ǔ ſ defeɀrriɂng to Ѐ¸ǝtŉhǿe ˍheȋeurɼ̵isticǗ fϫor oêȡt˽hers oƻMr estimatingûϸ the uɝnset\n ´   pa²raəmeˍteÇrsΞΨ.\ninitia͒lÂ_°ɥtrenÍπůd:\n    Thȇȑe iť;n͇φ*ʣitiͮalʻ ʬĿt\x87Ɲrevŷnd¿ ǯcʃomponent. R>ƜƦĚeqƕΐuiɀred if estima͜tjĸϲiŝoğnGÖ ƊmetNhod is "ЀþkǧnƁown".\n    I˩f ͣȕseˣt u×s̝inɮg ɓ͆eơither "ĞΎ̈estimɍated" or ϦČȁʷ"heϵu\x82®ristĎic" thhis vƀaluì§Ϋe is useḍ.\n    ɕTʠ˃hiͺOsĸÿ allɒows/ oȼneņ Ëor m˜orϡe ņoϜfƆ ϋʩtťhe̒ iĵnitial ȜvȪƚƀ̶alɩϋues to be seɉt ǠwʟÛhileόώ\n    defeΐrr|ing ĲtKȓo \u0380ɱ͒th&Ȳe heuĥrisæȼtic f_˳ƛo͊ςΫrË otherO̓͆͝s or e̎sˬstimatingſŉ̱ tØÅhe ͬ˹unsβͼetÚŘ\n  ˮ  pďaŒrameterρs.\ninitial_sĆeasonal:ȝϼ\n ̽   Theϒ initˎ͂Via\x96l sŪeMasoɤnal comɊƽponϨeˀnʒt. ĲAn arrɸaǵyŹ ɷořfşùęȰÍĐ ̥ʁ˄lengthX `seXasoŕnalɺ`\nØ ̅ƣ   oΌr ʭƊlengtƵhȕĸ\x7f ``s̅easonal - 1`ǟ` ϙ(ˋ͈iČϻn whic̷h ʽ͠case the ®̺͢last ϩǒinƉi)tiaΒVlƼϤ valͮue\nɃ Á   iss coǧ\x8bǬˊmpu ted to͐ makȓ¥e tϬhe avǏerag˱e Ϻeffeåcäˁđt zeʻro). OnlçyϚÉ used i͕fˌ\n Ɯ  ļ˱ initialƶ8iȝzaˤtion Ňis ƆΜ\'knowªn̥\'. Required ifˑ͋ estimƟation mΕ͙»ethoΛd jis "5̓known".\n ˾   I0Ǖf set- uĲsiɌƱng eitǇheƁr "eϣstɏi\x81mateXd" o^˽r "heu˱rʉ\x9eψ\x88ŚiɝǓsȏhtiŒc"ġ̷ thɬis vaȧlueƷtø iŏ˨s uǕsed.ϒ\nē    This ϔ\xa0γɍallʚɬow\x9bʇs äon\u0379e ţ̾o͎ƞrƜ ʳmVoreǞʂŞ of thȶe inϺ͓ŶiÚti\u0382al va\x9bƔlues ʌt˂Ɇ˕ǀo bϡe sͨet ɚwâǵhǚilaŋe\n ʷ×ǌ Y  deĨfȳeǖǃrr˓inˇͿ\x91gďÝ tωo the hehuriustϯic fϸor oth̿ersŐ or \u03a2estiƵmatHbingǧ+̆ ġthe͊͞ ʔǒuSnsetɟ\nĽ    p˱aråmeters.\nuƧse_bîΰo͉\\xcʮȉox: {ʈTǺrue, F̙alse, \'log\', fl\u0378͎ăoat}Nˡ, oȸɢptionaŷ1l\n ˋ ť Ȅ SʙhoHulǄd ̒ʝthe Box-ķεC˘ox transfƹormɴ bȱe ΜaRppĞEʷlied 8to ̉ϻ˙tΈ¬he data \x99first?Φ Onìe ɿof:\n\nə  ȈΔ ǖŏ * Truɀ͍e\n\n    *bŃ ήĬFaʠlUseξΦ\n\n ˨Ƙ   *̭ \'lȽĠoήľg\'Ċɪ:z\x89 apply͵ loʹ°g\n\nŵ   ͔ͧ * flÔoat:rȇ˲ la͙mbda ùvalyue\nͩ\nbounδds:˹Ϟ\n  Ȯ  An dȉictioͳ͇ʯĭnary con\x7fta\x8cining[ Ɗbounʺdąs ŋfoȬͿr thϦeˁ pŝaŮɞΕǆramêeters iąn the mȐodeƍl,\n  Ĳ  eōxc\x84Ƴ\x8flΧuŉdinɹg thɉe initțiŭa¹l vâŶ͏Ξ̳aƜlues if esŒtimateƔd. Ṱh̷e̻ kʵeyÐs ofɟˎ th̀e Ͷdictionaryƍ\n   Ȥ ʈare the͓͛ vaƤrɎʏiΚpa˾bleɵ\\ şɀnamͭϪes, Ýe.g.Ɍ,Č s˹moothinüg_leͿžϽvŕƾe͎l or init2˔ăƱial_slɽope.ǋ\n    ɽThe initial seasonal variableËsͦ arϱΝe× labeȊleΌd iniΎtia˦lŉ_seǝȂǏason7alĚ.</̀jƽ>Áϧ\n    ufʼor jɴ=̎0,..˻.ƒ,À˶m-1 whφeˍϾre m "is} the nuΘ̟mbeΧrĽ oǯf perȏioϧ̷dȏ əȭiďn ͪŲǧʥΊa fullˠ seasoɂÈnƔ.\nű    Usȩeŧϭ Noneĩ to ϧ˂ʘinͳȦd͟ȿʍicate ϳa non-binding constƓ͚raint, e.Ɉg.,ŀ (0ˢ\u0379,WŹ ̀Nonͱe)\n    conɠstrain˅s a ǭparȒͿametϤĕer to şRȲbe ƞnδonæ˭-̟nʈegaΈtive.\nͩǬdgateʟs:Ͽ\n    AĀn ©ŵaȥrʠray-li̠kȪ͏eͰʏ϶ Εobje\x96̇ct of dateøtiműɉeɇ objɗeΞcts˥Ϭ. I7ǝ̷ɼfͶ\x99 a Pand΅asθ ob˪ÚjectĎ isxɚ Ķ̚giɡ\x8bven\n Ϩ  ʢ for endoϏg, it is a¿sİsumǨιed toˏ ̾haÊvͯµe a϶ȧ DɗatÄeIndƖex.͓ɷ͠ɰ\nfĲreq:ʲ\n    Th\x8ee Įɩf̚rĞeqǐueʟƟɂnЀƧcyŊ ϳĒo̧f the timeͬ-seri|es.ňä >ŒA Pan̸das offsetŁ\x8b orţ \'ýB\', 2ɿȺ\'ŢD˵\'ªτĻŚ, \'Wķ\',}\n\x90 ơ \\ ƴ \'ĖȟM\', Ƞ\'Aɭ\'ρ, oƴr \'ϵQΤ\'. Thiȕs̮ <is ƈopż̲ti7onˊalɝ if da~tesϾ ƺare givejn.ê͍\nmissϩin\x95g:\n  ǝ  Avaȅilč̺abϼle optioȆnƊs are \'șnoʺϭne\', ±\'ΎdƩr̈́Öǅoñp\', anɒdř \'raisϋe\'.ǧ If˷Ŋ \'no˃ne˥\'˹,ʆ néoƬg̫ nþan\n ǝ̸   cheľͫc͙king Ίi¹s done. If ͍ɼ\'Adroțp\'˜, an\u0380y obser˝vΩ\u03a2a*ŤtHğ͎ιƤÓions wit͕h naƏns\'ʬȬ aȽrµe drop͚¥p˼Δedƴ.\n  ʌ f If \'raiΓse\',Ȋˉǈ aƴn eé̳rrorǫ iN͗s ûȑ\u038dȽοȌϽraöiƅsedΦ.ϙ DefauČΕlț˯ iɈis͂ \'͎noΤnĬe¦\'.\nsmǍoothiɊn\x95gȴų_lejvǒ̍eôl:\n  ̱  Tɬʣhe 2aϛlάophǎè Ƹ va<lǀue of t»Ŭhɵe siĹmplĘe ī˗exponewntΝiâal ɇsś]moéothinˇg,ǥȀ if Ş%th[ʆe value\nÃ    is Ķ\u038bǁ˛sMet th͝eȇn̙͵˒ ͨt<hͅisŉ́ űvaƻlu0e \x9b0wi»ll\u0381 b˪e̲̞Ǉ usxþedŕˉ as ʟthʤ͙e value.\nsmÀoothǐing_Ύtrend˃:\n   ̚ Thˁe beĨta Ż̖ʿv͙aluqe ǌof< ȃǉϰthe ΎHoltĘ\'sĚŹ t̪ʈȈr\u0382̭enīdϙͽɆ methodµȨ, ťifP theϾĽ value iɘs\n    set\x81 th.ΰen̗ tʘhis vΊalueɯ wilǼl be εʓu1sedé όȵaφƉs \u0379th϶̯e value.\nϛκôsmooǲtċŗhing_ɫƯ˻̺seasºœ̐oϔÞ\'Ɉnal:Ě\n   Ƅ TÍˋhe gǁamɲmƠ͒a vtalue ofe thνΓ̂e Áhīolυt w2iƋ̰ntɢers ~seϣason\x91ˎPƏˬal meȶ˩thodĢ,õ if the valuiͺe\n   ͌ϕ is˃ seǲʇt> t¥heʳn tɄhi\'s Îvɳalue wilɫʹl be useάd as th1áÓe vȋa\u0383lue.\nda˰ˋmpɗʱinʧgaʪ_tɄrenˠd:\n  Ǎ  TŴh̢eϣȭ pǒhi vaǐluˋe of tǻh˭e daŗmpΩed m\x9fethÉɇodŹ,ϴ ziǐfȈ tσheĆ vĉalue ¥is\n   ƈ sǠeǟtl Ͷˑth˽̾en thϸis v̓ȕaluȑeˏ \u038dwiĮěǹll be usɟeʪδdÖͱʊȶ as theϩ valueÍ.ı̓\nfiʬt_kwaªrgęs:\n͋ͳ    ħƶAdο˝diʶtɣīonaǯȕϞl pΓċţara\u0380met̍er̈Ɨs fowr calling :py:meth:`͛ˍstatsmodelƧɵsÑ.ȡtsa.h\x9folȤt\x89wƴinteƒrsǞʗ.ͶEãxph<§Əonïential|Smo̖ϫot΅hžΔîi3ng.fit`.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='trend', ctx=Store())], value=Name(id='trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='damped_trend', ctx=Store())], value=Name(id='damped_trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonal', ctx=Store())], value=Name(id='seasonal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonal_periods', ctx=Store())], value=Name(id='seasonal_periods', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='initialization_method', ctx=Store())], value=Name(id='initialization_method', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='initial_level', ctx=Store())], value=Name(id='initial_level', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='initial_trend', ctx=Store())], value=Name(id='initial_trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='initial_seasonal', ctx=Store())], value=Name(id='initial_seasonal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_boxcox', ctx=Store())], value=Name(id='use_boxcox', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bounds', ctx=Store())], value=Name(id='bounds', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dates', ctx=Store())], value=Name(id='DATES', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Store())], value=Name(id='freq', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='missing', ctx=Store())], value=Name(id='missing', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='smoothing_level', ctx=Store())], value=Name(id='smoothing_level', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='smoothing_trend', ctx=Store())], value=Name(id='smoothing_trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='smoothing_seasonal', ctx=Store())], value=Name(id='smoothing_seasonal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='damping_trend', ctx=Store())], value=Name(id='damping_trend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_kwargs', ctx=Store())], value=Name(id='fit_kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='base_model', value=Call(func=Name(id='_HoltWintersAdapter', ctx=Load()), args=[], keywords=[keyword(arg='trend', value=Attribute(value=Name(id='self', ctx=Load()), attr='trend', ctx=Load())), keyword(arg='damped_trend', value=Attribute(value=Name(id='self', ctx=Load()), attr='damped_trend', ctx=Load())), keyword(arg='seasonal', value=Attribute(value=Name(id='self', ctx=Load()), attr='seasonal', ctx=Load())), keyword(arg='seasonal_periods', value=Attribute(value=Name(id='self', ctx=Load()), attr='seasonal_periods', ctx=Load())), keyword(arg='initialization_method', value=Attribute(value=Name(id='self', ctx=Load()), attr='initialization_method', ctx=Load())), keyword(arg='initial_level', value=Attribute(value=Name(id='self', ctx=Load()), attr='initial_level', ctx=Load())), keyword(arg='initial_trend', value=Attribute(value=Name(id='self', ctx=Load()), attr='initial_trend', ctx=Load())), keyword(arg='initial_seasonal', value=Attribute(value=Name(id='self', ctx=Load()), attr='initial_seasonal', ctx=Load())), keyword(arg='use_boxcox', value=Attribute(value=Name(id='self', ctx=Load()), attr='use_boxcox', ctx=Load())), keyword(arg='bounds', value=Attribute(value=Name(id='self', ctx=Load()), attr='bounds', ctx=Load())), keyword(arg='dates', value=Attribute(value=Name(id='self', ctx=Load()), attr='dates', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='missing', value=Attribute(value=Name(id='self', ctx=Load()), attr='missing', ctx=Load())), keyword(arg='smoothing_level', value=Attribute(value=Name(id='self', ctx=Load()), attr='smoothing_level', ctx=Load())), keyword(arg='smoothing_trend', value=Attribute(value=Name(id='self', ctx=Load()), attr='smoothing_trend', ctx=Load())), keyword(arg='smoothing_seasonal', value=Attribute(value=Name(id='self', ctx=Load()), attr='smoothing_seasonal', ctx=Load())), keyword(arg='damping_trend', value=Attribute(value=Name(id='self', ctx=Load()), attr='damping_trend', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='HoltModel', bases=[Name(id='holtwintersmodel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Holt etna model.\n\nRestriΉcted version of HoltWinters model.\n\nNotes\nȔ-----\nWe uÐse :py:claǉss:`statđsÏmodels.tsa.holtwinters.ExponentialSmoothing` model\x9c from statsmodșels ·package.\nThey implŦement :py:class:`statsmodels.tsa.holtwinters.Holt` model\nas a restricted version of :py:class:`~stat̕smodels.ʌtsa.holtwinters.Exponent[ialSmoothing` model.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exponential', annotation=Name(id='bool', ctx=Load())), arg(arg='damped_trend', annotation=Name(id='bool', ctx=Load())), arg(arg='initialization_method', annotation=Name(id='str', ctx=Load())), arg(arg='initial_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='initial_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='smoothing_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='smoothing_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='damping_trend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='fit_kwargs'), defaults=[Constant(value=False), Constant(value=False), Constant(value='estimated'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='trend', ctx=Store())], value=IfExp(test=Name(id='exponential', ctx=Load()), body=Constant(value='mul'), orelse=Constant(value='add'))), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='trend', value=Name(id='trend', ctx=Load())), keyword(arg='damped_trend', value=Name(id='damped_trend', ctx=Load())), keyword(arg='initialization_method', value=Name(id='initialization_method', ctx=Load())), keyword(arg='initial_level', value=Name(id='initial_level', ctx=Load())), keyword(arg='initial_trend', value=Name(id='initial_trend', ctx=Load())), keyword(arg='smoothing_level', value=Name(id='smoothing_level', ctx=Load())), keyword(arg='smoothing_trend', value=Name(id='smoothing_trend', ctx=Load())), keyword(arg='damping_trend', value=Name(id='damping_trend', ctx=Load())), keyword(value=Name(id='fit_kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='SimpleExpSmoothingModel', bases=[Name(id='holtwintersmodel', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='initialization_method', annotation=Name(id='str', ctx=Load())), arg(arg='initial_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='smoothing_level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='fit_kwargs'), defaults=[Constant(value='estimated'), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='initialization_method', value=Name(id='initialization_method', ctx=Load())), keyword(arg='initial_level', value=Name(id='initial_level', ctx=Load())), keyword(arg='smoothing_level', value=Name(id='smoothing_level', ctx=Load())), keyword(value=Name(id='fit_kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])