Module(body=[Import(names=[alias(name='os')]), ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), Import(names=[alias(name='torch')]), ImportFrom(module='catalyst', names=[alias(name='dl')], level=0), ImportFrom(module='catalyst.loggers.tensorboard', names=[alias(name='TensorboardLogger')], level=0), ImportFrom(module='git', names=[alias(name='Repo'), alias(name='InvalidGitRepositoryError')], level=0), ImportFrom(module='criterion', names=[alias(name='Criterion'), alias(name='CriterionCallback')], level=1), ImportFrom(module='config', names=[alias(name='prepare_config'), alias(name='update_config'), alias(name='as_flat_config'), alias(name='ConfigError')], level=1), ImportFrom(module='_workarounds', names=[alias(name='AfterForkWandbLogger', asname='WandbLogger')], level=1), ImportFrom(module='dataset', names=[alias(name='DatasetCollection')], level=1), ImportFrom(module='initializer', names=[alias(name='Initializer')], level=1), ImportFrom(module='metrics', names=[alias(name='Metrics')], level=1), ImportFrom(module='model', names=[alias(name='Model')], level=1), ImportFrom(module='torch', names=[alias(name='get_base_module')], level=1), ImportFrom(module='trainer', names=[alias(name='Trainer')], level=1), FunctionDef(name='parse_logger', args=arguments(posonlyargs=[], args=[arg(arg='logger')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='logger', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='logger', ctx=Store())], value=Constant(value='tensorboard'))], orelse=[]), Assign(targets=[Name(id='project', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='experiment', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='group', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='tokens', ctx=Store())], value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':')], keywords=[])), Assign(targets=[Name(id='logger_type', ctx=Store())], value=Subscript(value=Name(id='tokens', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='logger_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='tensorboard')]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Bad tensorboard spec: {}.'), attr='format', ctx=Load()), args=[Name(id='logger', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='logger_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='wandb')]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]), body=[Assign(targets=[Tuple(elts=[Name(id='logger_type', ctx=Store()), Name(id='project', ctx=Store()), Name(id='experiment', ctx=Store())], ctx=Store())], value=Name(id='tokens', ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=4)]), body=[Assign(targets=[Tuple(elts=[Name(id='logger_type', ctx=Store()), Name(id='project', ctx=Store()), Name(id='experiment', ctx=Store()), Name(id='group', ctx=Store())], ctx=Store())], value=Name(id='tokens', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Bad wandb spec: {}'), attr='format', ctx=Load()), args=[Name(id='logger', ctx=Load())], keywords=[])], keywords=[]))])])], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Bad logger spec: {}.'), attr='format', ctx=Load()), args=[Name(id='logger', ctx=Load())], keywords=[])], keywords=[]))])]), Return(value=Tuple(elts=[Name(id='logger_type', ctx=Load()), Name(id='project', ctx=Load()), Name(id='experiment', ctx=Load()), Name(id='group', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='get_git_commit', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='repo', ctx=Store())], value=Call(func=Name(id='Repo', ctx=Load()), args=[], keywords=[keyword(arg='search_parent_directories', value=Constant(value=True))])), Return(value=Attribute(value=Attribute(value=Attribute(value=Name(id='repo', ctx=Load()), attr='head', ctx=Load()), attr='object', ctx=Load()), attr='hexsha', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='InvalidGitRepositoryError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[]), ClassDef(name='Runner', bases=[Attribute(value=Name(id='dl', ctx=Load()), attr='IRunner', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ϾCƍotnfiɿguĒrablͭe runʺPnʋer̸ Ȭcla|sƎ̜s˞ ͆fΆǫr̙ 2tłraȽʲƺiǏºɢniǇǟnĝƥg ȸaΕȕndφ ŭe\x8cvɛΏ¬ͽ\x87aluaÜtiɳon.ʡ\n˕ƛƨ\nʈArgͭļsɠ:ɞͧ\n\u0378è    ʼjʊɍroqŹot: TrȦ͋ʿai̶nƑingȳ ̕ƃfεoĩld΅ǜe\x95Ȭ͞r (Βche˫ckpoƞinĐtsŻ, ǯǆȜl̞ogs, ŤÐe"Ϩtc.)ƙ.̔\n    daʋʈta_ro¿͖ϩoǫ̦Ƚt\x86:ξˇǻ \u0380DaŽtasíϣe4ǹŃt root fÕoldwerͦ.ʆ\n ľ ʝ  config:ĺΐ ÓϻRήuȣnȇƘnlπer \x89ΛĖɗÓcoÕn̂Ɩˋfαig dǝƘiáctioŞnaƲrǉ̣yúKƅ Ġȳorȣʨ No¹ʝMÎȇrț̹ne ǚȱto ̢use defš\x81aǘuͬŅltβ.Åƒ\n    ±ȜloǈgʝgeƱr: I˶LoggeƟžɑrʧ tɢͯo ̩ʵȔʹuǩϴs˾ɸϤRe ("ɇtLΩɶensorb¤oŦŵ\u038baǩrd·" ž\u0382or "wa\x81nd̚φb:˚<˸ãĂȥpǆIrÿͯoject-unam1e>ϙȃ")S.\n  ʲā ƷΌ Ɏiníti,alːǆ_Ɋ˃kcÑhef΄c̽ãkpoiQunϙt˝:ϵ PēǸđatȃh toʢƃ ϋίcŲ.hecƺƳš̿ÔkȃȬ˸pƍoi˽ͼ̮nt1 to rβeŉsǉϴumϞǔe +tϲʸraʢAȐinȠiģngΆʢϨ.r\nʉ ˠ   nÑoϜ_ʨǔɀωsǔtrɒ̫ic\u0380tͼ_iɞͰnitϴ:ə ˲%Skipň che̾ȥcŸkpo^,int ϐmi͖sΆmatchϯƄÖʲ ģƻȿe:rrords.5ǕȘ\n ΰ  ʘʊ f\xa0\x92ʅϫ\u0379{̭ļ\x97Ç̨rΕ°ϢȎomϵ_sΨtćage: ϬS̿tart¾ɑǆ ƲtraŞinǙˠiǆng fǌ̛ɓʒrom̷ ̭spǀ˅;eƎc9ified\x8eȪ ėʔTstage indĬ˖ļΗex̀.')), Assign(targets=[Name(id='STAGE_TRAIN', ctx=Store())], value=Constant(value='train')), Assign(targets=[Name(id='STAGE_', ctx=Store())], value=Constant(value='test')), FunctionDef(name='stages', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_stage', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load())]), body=[Return(value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load())], ctx=Load()))], orelse=[]), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_stage', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TRAIN', ctx=Load())])), Assign(targets=[Name(id='keys', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TRAIN', ctx=Load()), op=Add(), right=Constant(value='-')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[BoolOp(op=Or(), values=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_base_config', ctx=Load()), slice=Constant(value='stages'), ctx=Load()), List(elts=[Dict(keys=[], values=[])], ctx=Load())])], keywords=[])], keywords=[]), ifs=[], is_async=0)])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_from_stage', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_from_stage', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="Can't start from stage {}. Total number of stages is {}."), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_from_stage', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='keys', ctx=Store())], value=Subscript(value=Name(id='keys', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='self', ctx=Load()), attr='_from_stage', ctx=Load())), ctx=Load()))], orelse=[]), Return(value=Name(id='keys', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='get_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ȼ  § ')), Assign(targets=[Name(id='tr', ctx=Store())], value=Compare(left=Name(id='sta', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load())])), Assign(targets=[Name(id='st', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='stages', ctx=Load())], keywords=[]), attr='index', ctx=Load()), args=[Name(id='sta', ctx=Load())], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='Model', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_datasets', ctx=Load()), attr='num_train_classes', ctx=Load())], keywords=[keyword(arg='priors', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_datasets', ctx=Load()), attr='train_priors', ctx=Load())), keyword(arg='amp_classifier', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='amp_head'), ctx=Load())), keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='model_params'), ctx=Load()))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Total model parameters:'), Attribute(value=Name(id='model', ctx=Load()), attr='num_parameters', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='tr', ctx=Load()), Compare(left=Name(id='st', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Assign(targets=[Name(id='initializer', ctx=Store())], value=Call(func=Name(id='Initializer', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initializer_params'), ctx=Load()))])), Expr(value=Call(func=Name(id='initializer', ctx=Load()), args=[Name(id='model', ctx=Load())], keywords=[keyword(arg='train_loader', value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_loaders', ctx=Load()), args=[Name(id='sta', ctx=Load())], keywords=[]), slice=Constant(value='train'), ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='checkpoint_path', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_checkpoint', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='tr', ctx=Load()), Compare(left=Name(id='st', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='stage_resume'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='stage_resume'), ctx=Load()), ops=[NotIn()], comparators=[Set(elts=[Constant(value='best'), Constant(value='last')])]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unexpected resume type: {}.'), attr='format', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='stage_resume'), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='checkpoint_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_root', ctx=Load()), Constant(value='checkpoints'), BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='stage_resume'), ctx=Load()), op=Add(), right=Constant(value='.pth'))], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='checkpoint_path', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='FileNotFoundError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="Can't find checkpoint {}."), attr='format', ctx=Load()), args=[Name(id='checkpoint_path', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='checkpoint_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Load'), Name(id='checkpoint_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='checkpoint', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='checkpoint_path', ctx=Load())], keywords=[keyword(arg='map_location', value=Constant(value='cpu'))]), slice=Constant(value='model_model_state_dict'), ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='tr', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='resume_prefixes'), ctx=Load())]), body=[Assign(targets=[Name(id='new_checkpoint', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='pre_fix', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='resume_prefixes'), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='pre_fix', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Constant(value='Empty resume prefix.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='parameters', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='checkpoint', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='pre_fix', ctx=Load())], keywords=[])], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Name(id='parameters', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknown prefix {}.'), attr='format', ctx=Load()), args=[Name(id='pre_fix', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='new_checkpoint', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='checkpoint', ctx=Store())], value=Name(id='new_checkpoint', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='missing', ctx=Store()), Name(id='unexpected', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='load_state_dict', ctx=Load()), args=[Name(id='checkpoint', ctx=Load())], keywords=[keyword(arg='strict', value=Constant(value=False))])), If(test=Name(id='unexpected', ctx=Load()), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unexpected state dict keys: {}.'), attr='format', ctx=Load()), args=[Name(id='unexpected', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='load_state_dict', ctx=Load()), args=[Name(id='checkpoint', ctx=Load())], keywords=[keyword(arg='strict', value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_no_strict_init', ctx=Load())))]))])], orelse=[]), Return(value=Dict(keys=[Constant(value='model'), Constant(value='embedder'), Constant(value='scorer')], values=[Name(id='model', ctx=Load()), Attribute(value=Name(id='model', ctx=Load()), attr='embedder', ctx=Load()), Attribute(value=Name(id='model', ctx=Load()), attr='scorer', ctx=Load())]))], decorator_list=[]), FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_stage', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TRAIN', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_loader_suffix', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ƥɴ ʛ  ȹ9   ')), Return(value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='loader_key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='train')]), body=Constant(value=''), orelse=BinOp(left=Constant(value='_'), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='loader_key', ctx=Load()))))], decorator_list=[]), FunctionDef(name='get_loggers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ')), Assign(targets=[Tuple(elts=[Name(id='logger_type', ctx=Store()), Name(id='project', ctx=Store()), Name(id='experiment', ctx=Store()), Name(id='group', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_logger', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_logger', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='logger_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='tensorboard')]), body=[Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Name(id='TensorboardLogger', ctx=Load()), args=[], keywords=[keyword(arg='logdir', value=Attribute(value=Name(id='self', ctx=Load()), attr='_root', ctx=Load())), keyword(arg='use_logdir_postfix', value=Constant(value=True))]))], orelse=[If(test=Compare(left=Name(id='logger_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='wandb')]), body=[Assign(targets=[Name(id='kwargs', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Compare(left=Name(id='group', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='group'), ctx=Store())], value=Name(id='group', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Name(id='WandbLogger', ctx=Load()), args=[], keywords=[keyword(arg='project', value=Name(id='project', ctx=Load())), keyword(arg='name', value=Name(id='experiment', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='init', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_wandb_id', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='logger', ctx=Load()), attr='run', ctx=Load()), attr='id', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='logger', ctx=Load()), attr='run', ctx=Load()), attr='config', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Name(id='as_flat_config', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_base_config', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='logger', ctx=Load()), attr='run', ctx=Load()), attr='config', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Constant(value='git_commit')], values=[Call(func=Name(id='get_git_commit', ctx=Load()), args=[], keywords=[])])], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknown logger: {}.'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_logger', ctx=Load())], keywords=[])], keywords=[]))])]), Assign(targets=[Name(id='loggers', ctx=Store())], value=Dict(keys=[Constant(value='_console'), Constant(value='_csv'), Constant(value='main')], values=[Call(func=Attribute(value=Name(id='dl', ctx=Load()), attr='ConsoleLogger', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='dl', ctx=Load()), attr='CSVLogger', ctx=Load()), args=[], keywords=[keyword(arg='logdir', value=Attribute(value=Name(id='self', ctx=Load()), attr='_root', ctx=Load())), keyword(arg='use_logdir_postfix', value=Constant(value=True))]), Name(id='logger', ctx=Load())])), Return(value=Name(id='loggers', ctx=Load()))], decorator_list=[]), FunctionDef(name='init_stage', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='IniĈtialƂizʎƩe coǌnƚǇòfigǵ ΚͫŞand bas͝ɱÌϹeǺ\x8dǎ ąϱ;sʷÐtɧruθϷ̮ɛȨct̹u̱Mȃre\x7f\x82όs ƚˬƩforƹ tķheŃ ɭǂɷstͤaĽ2ͱ̯ge.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_stage', ctx=Store())], value=IfExp(test=Compare(left=Name(id='sta', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load())]), body=Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TRAIN', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_stage_config', ctx=Load()), args=[Name(id='sta', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_datasets', ctx=Store())], value=Call(func=Name(id='DatasetCollection', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data_root', ctx=Load())], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='dataset_params'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Store())], value=Call(func=Name(id='Metrics', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_datasets', ctx=Load()), attr='num_train_classes', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_datasets', ctx=Load()), attr='openset', ctx=Load())], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='metrics_params'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_loaders', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='get_engine', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Φ    ō \x8d ǻ   å  Ȧ ï   ǥ ř® ¾ ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='cuda', ctx=Load()), attr='is_available', ctx=Load()), args=[], keywords=[])), body=[Return(value=Call(func=Attribute(value=Name(id='dl', ctx=Load()), attr='DeviceEngine', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_base_config', ctx=Load()), slice=Constant(value='fp16'), ctx=Load()), body=[Assign(targets=[Name(id='engine_cls', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='cuda', ctx=Load()), attr='device_count', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=Attribute(value=Name(id='dl', ctx=Load()), attr='DataParallelAMPEngine', ctx=Load()), orelse=Attribute(value=Name(id='dl', ctx=Load()), attr='AMPEngine', ctx=Load()))), Return(value=Call(func=Name(id='engine_cls', ctx=Load()), args=[], keywords=[keyword(arg='scaler_kwargs', value=Dict(keys=[Constant(value='init_scale'), Constant(value='growth_interval')], values=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_base_config', ctx=Load()), slice=Constant(value='initial_grad_scale'), ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_base_config', ctx=Load()), slice=Constant(value='grad_scale_growth_interval'), ctx=Load())]))]))], orelse=[Assign(targets=[Name(id='engine_cls', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='cuda', ctx=Load()), attr='device_count', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=Attribute(value=Name(id='dl', ctx=Load()), attr='DataParallelEngine', ctx=Load()), orelse=Attribute(value=Name(id='dl', ctx=Load()), attr='DeviceEngine', ctx=Load()))), Return(value=Call(func=Name(id='engine_cls', ctx=Load()), args=[], keywords=[]))])])], decorator_list=[]), FunctionDef(name='datasets', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_datasets', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='get_scheduler', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sta'), arg(arg='optimizer')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ̨X   ')), If(test=Compare(left=Name(id='sta', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_trainer', ctx=Load()), args=[], keywords=[]), attr='get_scheduler', ctx=Load()), args=[Name(id='optimizer', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='handle_batch', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='batch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Ȩ   ')), Assign(targets=[Tuple(elts=[Name(id='images', ctx=Store()), Name(id='labels', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='batch', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='qualityRbZIH', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='batch', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=2)]), body=Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value=2), ctx=Load()), orelse=Constant(value=None))), Assign(targets=[Name(id='batch', ctx=Store())], value=Dict(keys=[Constant(value='labels')], values=[Name(id='labels', ctx=Load())])), If(test=Compare(left=Name(id='qualityRbZIH', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='quality'), ctx=Store())], value=Name(id='qualityRbZIH', ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='images', ctx=Load()), Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='images'), ctx=Store())], value=Name(id='images', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='batch', ctx=Store()), Name(id='metrics', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_classification_batch', ctx=Load()), args=[Name(id='batch', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='images1'), ctx=Store()), Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='images2'), ctx=Store())], ctx=Store())], value=Name(id='images', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='batch', ctx=Store()), Name(id='metrics', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_verification_batch', ctx=Load()), args=[Name(id='batch', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='suffix', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_loader_suffix', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='batch', ctx=Store())], value=DictComp(key=BinOp(left=Name(id='k', ctx=Load()), op=Add(), right=Name(id='suffix', ctx=Load())), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='batch', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='batch_metrics', ctx=Load()), attr='update', ctx=Load()), args=[DictComp(key=BinOp(left=Name(id='k', ctx=Load()), op=Add(), right=Name(id='suffix', ctx=Load())), value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[]), orelse=Name(id='v', ctx=Load())), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='metrics', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_trainer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='đ¸  Ϫ Ř   }  ®   ')), Return(value=Call(func=Name(id='Trainer', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='trainer_params'), ctx=Load()))]))], decorator_list=[]), FunctionDef(name='get_loaders', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_datasets', ctx=Load()), attr='get_loaders', ctx=Load()), args=[], keywords=[keyword(arg='train', value=Compare(left=Name(id='sta', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load())]))]))], decorator_list=[]), FunctionDef(name='on_epoch_start', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='runner')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='͜    -    ςǓ   sÁ ˇ ƽ ̠ŦΌ Ĉðʙr')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='on_epoch_start', ctx=Load()), args=[Name(id='runner', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_metrics', ctx=Load()), slice=Constant(value='_epoch_'), ctx=Load()), slice=Constant(value='model_hash'), ctx=Store())], value=Call(func=Name(id='sumzoC', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), slice=Constant(value='model'), ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='on_epoch_end', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='runner')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   "  ĥɏ Ǵ     9ʙ ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='stage_key', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load())]), body=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_metrics', ctx=Load()), slice=Constant(value='_epoch_'), ctx=Load()), slice=Constant(value='stage'), ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stage_key', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='-')], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='on_epoch_end', ctx=Load()), args=[Name(id='runner', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='r'), arg(arg='data_root')], kwonlyargs=[arg(arg='config'), arg(arg='logger'), arg(arg='initial_checkpoint'), arg(arg='no_strict_init'), arg(arg='from_stage')], kw_defaults=[None, Constant(value='tensorboard'), Constant(value=None), Constant(value=False), Constant(value=None)], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_base_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_root', ctx=Store())], value=Name(id='r', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data_root', ctx=Store())], value=Name(id='data_root', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_logger', ctx=Store())], value=Name(id='logger', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_checkpoint', ctx=Store())], value=Name(id='initial_checkpoint', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_no_strict_init', ctx=Store())], value=Name(id='no_strict_init', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_from_stage', ctx=Store())], value=Name(id='from_stage', ctx=Load())), For(target=Name(id='stage_config', ctx=Store()), iter=BoolOp(op=Or(), values=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_base_config', ctx=Load()), slice=Constant(value='stages'), ctx=Load()), List(elts=[], ctx=Load())]), body=[For(target=Name(id='key', ctx=Store()), iter=List(elts=[Constant(value='stages'), Constant(value='fp16'), Constant(value='initial_grad_scale'), Constant(value='num_hopt_trials'), Constant(value='hopt_backend')], ctx=Load()), body=[Assert(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_base_config', ctx=Load())])), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='stage_config', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="Can't overwrite {} in a stage"), attr='format', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='get_stage_config', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ʀ Ŋͥôþ ʫ}     Ō̱  õ  ΛɃ àȗ    Δ  ')), Assign(targets=[Name(id='stages', ctx=Store())], value=BoolOp(op=Or(), values=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_base_config', ctx=Load()), slice=Constant(value='stages'), ctx=Load()), List(elts=[Dict(keys=[], values=[])], ctx=Load())])), If(test=Compare(left=Name(id='sta', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load())]), body=[Assign(targets=[Name(id='stage_id', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='stages', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)))], orelse=[Assign(targets=[Name(id='stage_id', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='sta', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='-')], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='stage_config', ctx=Store())], value=Subscript(value=Name(id='stages', ctx=Load()), slice=Name(id='stage_id', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='update_config', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_base_config', ctx=Load()), Name(id='stage_config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='stages')], keywords=[])), Return(value=Name(id='config', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_criterion', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='                   ')), If(test=Compare(left=Name(id='sta', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Name(id='Criterion', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='criterion_params'), ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_handle_verification_batch', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='batch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='         Ƞ \x94         ')), Assign(targets=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='embeddings1'), ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), slice=Constant(value='embedder'), ctx=Load()), args=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='images1'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='embeddings2'), ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), slice=Constant(value='embedder'), ctx=Load()), args=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='images2'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='scores'), ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), slice=Constant(value='scorer'), ctx=Load()), args=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='embeddings1'), ctx=Load()), Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='embeddings2'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='get_base_module', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), slice=Constant(value='model'), ctx=Load())], keywords=[])), If(test=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='distribution', ctx=Load()), attr='has_confidences', ctx=Load()), body=[Assign(targets=[Name(id='confidences1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='distribution', ctx=Load()), attr='confidences', ctx=Load()), args=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='embeddings1'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='confidences2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='distribution', ctx=Load()), attr='confidences', ctx=Load()), args=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='embeddings2'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='confidences'), ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='confidences1', ctx=Load()), Name(id='confidences2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='metrics', ctx=Store())], value=Dict(keys=[], values=[])), Return(value=Tuple(elts=[Name(id='batch', ctx=Load()), Name(id='metrics', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_handle_classification_batch', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='batch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='is_train', ctx=Store())], value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='loader_key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='train')])), Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), slice=Constant(value='model'), ctx=Load()), args=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='images'), ctx=Load()), IfExp(test=Name(id='is_train', ctx=Load()), body=Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='labels'), ctx=Load()), orelse=Constant(value=None))], keywords=[])), Assign(targets=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='embeddings'), ctx=Store())], value=Subscript(value=Name(id='results', ctx=Load()), slice=Constant(value='distributions'), ctx=Load())), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='get_base_module', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), slice=Constant(value='model'), ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='model', ctx=Load()), attr='classification', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='logits'), ctx=Store())], value=Subscript(value=Name(id='results', ctx=Load()), slice=Constant(value='logits'), ctx=Load())), If(test=Attribute(value=Name(id='model', ctx=Load()), attr='has_final_weights', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='final_weights'), ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='get_final_weights', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Name(id='is_train', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='loader', ctx=Load()), attr='dataset', ctx=Load()), attr='openset', ctx=Load()))]), body=[Assign(targets=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='target_embeddings'), ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='get_target_embeddings', ctx=Load()), args=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='labels'), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='model', ctx=Load()), attr='has_final_bias', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='final_bias'), ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='get_final_bias', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='model', ctx=Load()), attr='has_final_variance', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='final_variance'), ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='get_final_variance', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='distribution', ctx=Load()), attr='has_confidences', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='confidences'), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='distribution', ctx=Load()), attr='confidences', ctx=Load()), args=[Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='embeddings'), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='metrics', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Name(id='is_train', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='no_grad', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='metrics', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='statistics', ctx=Load()), args=[Name(id='results', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='metrics', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='infnans'), BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='embeddings'), ctx=Load()), attr='isfinite', ctx=Load()), args=[], keywords=[]), attr='float', ctx=Load()), args=[], keywords=[]), attr='mean', ctx=Load()), args=[], keywords=[]))], ctx=Load())], ctx=Load())], keywords=[])], keywords=[]))])], orelse=[]), Return(value=Tuple(elts=[Name(id='batch', ctx=Load()), Name(id='metrics', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='on_stage_start', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='runner')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   ƀ ̘˚Ĳ ȑ  µ ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='init_stage', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='stage_key', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='on_stage_start', ctx=Load()), args=[Name(id='runner', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_stage_len', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Á̄ Ù  ļĐʓ  ʁư͂     "')), If(test=Compare(left=Name(id='sta', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_trainer', ctx=Load()), args=[], keywords=[]), attr='get_num_epochs', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='evaluate', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_stage', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_metrics', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_optimizer', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sta'), arg(arg='model')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ι̾    έƇΚ ')), If(test=Compare(left=Name(id='sta', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_trainer', ctx=Load()), args=[], keywords=[]), attr='get_optimizer', ctx=Load()), args=[Subscript(value=Name(id='model', ctx=Load()), slice=Constant(value='model'), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='dataset_params'), arg(arg='model_params'), arg(arg='initializer_params'), arg(arg='criterion_params'), arg(arg='trainer_params'), arg(arg='metrics_params'), arg(arg='stages'), arg(arg='stage_re'), arg(arg='resume_prefixes'), arg(arg='fp16UG'), arg(arg='amp_'), arg(arg='initial_grad_scale'), arg(arg='grad_scale_growth_interval'), arg(arg='seed'), arg(arg='num_evaluation_seeds'), arg(arg='num_hopt_trials'), arg(arg='hopt_backend'), arg(arg='hopt_params')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value='best'), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=65536.0), Constant(value=2000), Constant(value=42), Constant(value=10), Constant(value=50), Constant(value='wandb-bayes'), Constant(value=None)]), body=[Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='dataset_params'), Name(id='dataset_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='model_params'), Name(id='model_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='initializer_params'), Name(id='initializer_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='criterion_params'), Name(id='criterion_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='trainer_params'), Name(id='trainer_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='metrics_params'), Name(id='metrics_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='stages'), Name(id='stages', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='stage_resume'), Name(id='stage_re', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='resume_prefixes'), Name(id='resume_prefixes', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='fp16'), Name(id='fp16UG', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='amp_head'), Name(id='amp_', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='initial_grad_scale'), Name(id='initial_grad_scale', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='grad_scale_growth_interval'), Name(id='grad_scale_growth_interval', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='seed'), Name(id='seed', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='num_evaluation_seeds'), Name(id='num_evaluation_seeds', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='num_hopt_trials'), Name(id='num_hopt_trials', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='hopt_backend'), Name(id='hopt_backend', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='hopt_params'), Name(id='hopt_params', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='seed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='seed'), ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_callbacks', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='callbacks', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Subscript(value=Name(id='callbacks', ctx=Load()), slice=Constant(value='verbose'), ctx=Store())], value=Call(func=Attribute(value=Name(id='dl', ctx=Load()), attr='TqdmCallback', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='get_base_module', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), slice=Constant(value='model'), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='sta', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load())]), body=[Assign(targets=[Name(id='criterion', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_criterion', ctx=Load()), args=[Name(id='sta', ctx=Load())], keywords=[])), Assign(targets=[Name(id='criterion_inputsnSBP', ctx=Store())], value=Dict(keys=[Constant(value='embeddings')], values=[Constant(value='embeddings')])), Assign(targets=[Name(id='criterion_outputs', ctx=Store())], value=Dict(keys=[Constant(value='labels')], values=[Constant(value='labels')])), If(test=Attribute(value=Name(id='model', ctx=Load()), attr='classification', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='criterion_inputsnSBP', ctx=Load()), slice=Constant(value='logits'), ctx=Store())], value=Constant(value='logits')), If(test=Attribute(value=Name(id='model', ctx=Load()), attr='has_final_weights', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='criterion_outputs', ctx=Load()), slice=Constant(value='final_weights'), ctx=Store())], value=Constant(value='final_weights')), Assign(targets=[Subscript(value=Name(id='criterion_outputs', ctx=Load()), slice=Constant(value='target_embeddings'), ctx=Store())], value=Constant(value='target_embeddings'))], orelse=[]), If(test=Attribute(value=Name(id='model', ctx=Load()), attr='has_final_bias', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='criterion_outputs', ctx=Load()), slice=Constant(value='final_bias'), ctx=Store())], value=Constant(value='final_bias'))], orelse=[]), If(test=Attribute(value=Name(id='model', ctx=Load()), attr='has_final_variance', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='criterion_outputs', ctx=Load()), slice=Constant(value='final_variance'), ctx=Store())], value=Constant(value='final_variance'))], orelse=[])], orelse=[]), Assign(targets=[Subscript(value=Name(id='callbacks', ctx=Load()), slice=Constant(value='criterion'), ctx=Store())], value=Call(func=Attribute(value=Name(id='dl', ctx=Load()), attr='ControlFlowCallback', ctx=Load()), args=[Call(func=Name(id='CriterionCallback', ctx=Load()), args=[], keywords=[keyword(arg='amp', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='amp_head'), ctx=Load())), keyword(arg='input_key', value=Name(id='criterion_inputsnSBP', ctx=Load())), keyword(arg='target_key', value=Name(id='criterion_outputs', ctx=Load())), keyword(arg='metric_key', value=Constant(value='loss'))])], keywords=[keyword(arg='loaders', value=Constant(value='train'))])), Expr(value=Call(func=Attribute(value=Name(id='callbacks', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_trainer', ctx=Load()), args=[], keywords=[]), attr='get_callbacks', ctx=Load()), args=[], keywords=[keyword(arg='checkpoints_path', value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_root', ctx=Load()), Constant(value='checkpoints')], keywords=[])), keyword(arg='loss_key', value=Constant(value='loss'))])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='datasets', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_datasets', ctx=Load()), attr='get_datasets', ctx=Load()), args=[], keywords=[keyword(arg='train', value=Compare(left=Name(id='sta', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='STAGE_TEST', ctx=Load())])), keyword(arg='transform', value=Constant(value=False))])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='dataset', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='datasets', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='suffix', ctx=Store())], value=IfExp(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='train')]), body=BinOp(left=Constant(value='_'), op=Add(), right=Name(id='name', ctx=Load())), orelse=Constant(value=''))), If(test=Attribute(value=Name(id='dataset', ctx=Load()), attr='classification', ctx=Load()), body=[Assign(targets=[Name(id='dataset_callbacks', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), attr='get_classification_callbacks', ctx=Load()), args=[], keywords=[keyword(arg='train', value=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='train')])), keyword(arg='labels_key', value=BinOp(left=Constant(value='labels'), op=Add(), right=Name(id='suffix', ctx=Load()))), keyword(arg='embeddings_key', value=BinOp(left=Constant(value='embeddings'), op=Add(), right=Name(id='suffix', ctx=Load()))), keyword(arg='target_embeddings_key', value=IfExp(test=Attribute(value=Name(id='model', ctx=Load()), attr='classification', ctx=Load()), body=BinOp(left=Constant(value='target_embeddings'), op=Add(), right=Name(id='suffix', ctx=Load())), orelse=Constant(value=None))), keyword(arg='logits_key', value=IfExp(test=Attribute(value=Name(id='model', ctx=Load()), attr='classification', ctx=Load()), body=BinOp(left=Constant(value='logits'), op=Add(), right=Name(id='suffix', ctx=Load())), orelse=Constant(value=None))), keyword(arg='confidences_key', value=IfExp(test=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='distribution', ctx=Load()), attr='has_confidences', ctx=Load()), body=BinOp(left=Constant(value='confidences'), op=Add(), right=Name(id='suffix', ctx=Load())), orelse=Constant(value=None))), keyword(arg='quality_key', value=IfExp(test=Attribute(value=Name(id='dataset', ctx=Load()), attr='has_quality', ctx=Load()), body=BinOp(left=Constant(value='quality'), op=Add(), right=Name(id='suffix', ctx=Load())), orelse=Constant(value=None)))]))], orelse=[Assign(targets=[Name(id='kwargs', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='distribution', ctx=Load()), attr='has_confidences', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='confidences_key'), ctx=Store())], value=BinOp(left=Constant(value='confidences'), op=Add(), right=Name(id='suffix', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='dataset_callbacks', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), attr='get_verification_callbacks', ctx=Load()), args=[], keywords=[keyword(arg='train', value=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='train')])), keyword(arg='labels_key', value=BinOp(left=Constant(value='labels'), op=Add(), right=Name(id='suffix', ctx=Load()))), keyword(arg='scores_key', value=BinOp(left=Constant(value='scores'), op=Add(), right=Name(id='suffix', ctx=Load()))), keyword(value=Name(id='kwargs', ctx=Load()))]))]), For(target=Tuple(elts=[Name(id='callback_name', ctx=Store()), Name(id='callback', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='dataset_callbacks', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='callbacks', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Name(id='callback_name', ctx=Load())), ctx=Store())], value=Call(func=Attribute(value=Name(id='dl', ctx=Load()), attr='ControlFlowCallback', ctx=Load()), args=[Name(id='callback', ctx=Load())], keywords=[keyword(arg='loaders', value=Name(id='name', ctx=Load()))]))], orelse=[])], orelse=[]), Return(value=Name(id='callbacks', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])