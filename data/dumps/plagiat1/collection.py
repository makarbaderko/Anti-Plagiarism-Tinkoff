Module(body=[Import(names=[alias(name='os')]), ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), Import(names=[alias(name='torch')]), ImportFrom(module='torchvision', names=[alias(name='transforms')], level=0), ImportFrom(module='config', names=[alias(name='prepare_config'), alias(name='ConfigError')], level=2), ImportFrom(module='cars196', names=[alias(name='Cars196SplitClassesDataset')], level=1), ImportFrom(module='cifar', names=[alias(name='CIFAR10Dataset'), alias(name='CIFAR100Dataset')], level=1), ImportFrom(module='cub200', names=[alias(name='CUB200SplitClassesDataset')], level=1), ImportFrom(module='sop', names=[alias(name='SOPDataset')], level=1), ImportFrom(module='imagenette', names=[alias(name='ImagenetteDataset')], level=1), ImportFrom(module='stanforddogs', names=[alias(name='StanfordDogsDataset')], level=1), ImportFrom(module='flower102', names=[alias(name='Flower102Dataset')], level=1), ImportFrom(module='imagenet', names=[alias(name='ImageNetDataset')], level=1), ImportFrom(module='imagenetlt', names=[alias(name='ImageNetLTDataset')], level=1), ImportFrom(module='transform', names=[alias(name='split_crossval_classes'), alias(name='split_crossval_elements')], level=1), ImportFrom(module='debug', names=[alias(name='DebugDataset')], level=1), ImportFrom(module='lfw', names=[alias(name='LFWDataset'), alias(name='CrossLFWTestset')], level=1), ImportFrom(module='mnist', names=[alias(name='MnistDataset'), alias(name='MnistSplitClassesDataset')], level=1), ImportFrom(module='svhn', names=[alias(name='SVHNDataset')], level=1), ImportFrom(module='mxnet', names=[alias(name='CASIA_TESTS'), alias(name='MS1MV2_TESTS'), alias(name='MS1MV3_TESTS')], level=1), ImportFrom(module='mxnet', names=[alias(name='MXNetTrainset'), alias(name='MXNetValset'), alias(name='SerializedDataset')], level=1), ImportFrom(module='inshop', names=[alias(name='InShopClothesDataset')], level=1), ImportFrom(module='sampler', names=[alias(name='ShuffledClassBalancedBatchSampler'), alias(name='SameClassMixupCollator')], level=1), ImportFrom(module='transform', names=[alias(name='ImageTransform'), alias(name='ImageTestTransform'), alias(name='ImageAugmenter')], level=1), ImportFrom(module='transform', names=[alias(name='TransformDataset'), alias(name='RepeatDataset'), alias(name='PreloadDataset'), alias(name='SamplePairsDataset')], level=1), ImportFrom(module='transform', names=[alias(name='LossyDataset'), alias(name='MergedDataset'), alias(name='ClassMergedDataset')], level=1), ImportFrom(module='dummy', names=[alias(name='EmptyDataset')], level=1), FunctionDef(name='discard_key', args=arguments(posonlyargs=[], args=[arg(arg='mapping'), arg(arg='kR')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  Ȃ   ʨ ̶́  ')), Assign(targets=[Name(id='mapping', ctx=Store())], value=Call(func=Attribute(value=Name(id='mapping', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Delete(targets=[Subscript(value=Name(id='mapping', ctx=Load()), slice=Name(id='kR', ctx=Load()), ctx=Del())]), Return(value=Name(id='mapping', ctx=Load()))], decorator_list=[]), ClassDef(name='Dataset_Collection', bases=[], keywords=[], body=[Expr(value=Constant(value='ʅDΐataɘse͔Κtϥ\x94 _selector ̂a̾Ϸnd con̗str\x8b\xa0̍ủ͓UǚϊƻĪɶ\x9actor.\xa0')), Assign(targets=[Name(id='DEVSETSWGyqk', ctx=Store())], value=Dict(keys=[Constant(value='casia-openset'), Constant(value='ms1mv2-openset'), Constant(value='ms1mv3-openset'), Constant(value='lfw-openset'), Constant(value='clfw-openset'), Constant(value='lfw-joined-openset'), Constant(value='cub200-openset'), Constant(value='cars196-openset'), Constant(value='cub200-interleave-openset'), Constant(value='cars196-interleave-openset'), Constant(value='sop-openset'), Constant(value='inshop-openset'), Constant(value='mnist-openset'), Constant(value='imagenette'), Constant(value='tinyimagenet'), Constant(value='imagenet'), Constant(value='stanforddogs'), Constant(value='flower102'), Constant(value='imagenetlt'), Constant(value='cifar10'), Constant(value='cifar100'), Constant(value='mnist'), Constant(value='svhn'), Constant(value='serialized-openset'), Constant(value='debug-openset')], values=[Name(id='MXNetTrainset', ctx=Load()), Name(id='MXNetTrainset', ctx=Load()), Name(id='MXNetTrainset', ctx=Load()), Name(id='LFWDataset', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='EmptyDataset', ctx=Load()), args=[], keywords=[keyword(arg='classification', value=Constant(value=True)), keyword(arg='openset', value=Constant(value=True))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='EmptyDataset', ctx=Load()), args=[], keywords=[keyword(arg='classification', value=Constant(value=True)), keyword(arg='openset', value=Constant(value=True))])), Name(id='CUB200SplitClassesDataset', ctx=Load()), Name(id='Cars196SplitClassesDataset', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='CUB200SplitClassesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='interleave', value=Constant(value=True))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='Cars196SplitClassesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='interleave', value=Constant(value=True))])), Name(id='SOPDataset', ctx=Load()), Name(id='InShopClothesDataset', ctx=Load()), Name(id='MnistSplitClassesDataset', ctx=Load()), Name(id='ImagenetteDataset', ctx=Load()), Name(id='ImagenetteDataset', ctx=Load()), Name(id='ImageNetDataset', ctx=Load()), Name(id='StanfordDogsDataset', ctx=Load()), Name(id='Flower102Dataset', ctx=Load()), Name(id='ImageNetLTDataset', ctx=Load()), Name(id='CIFAR10Dataset', ctx=Load()), Name(id='CIFAR100Dataset', ctx=Load()), Name(id='MnistDataset', ctx=Load()), Name(id='SVHNDataset', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Call(func=Attribute(value=Name(id='SerializedDataset', ctx=Load()), attr='from_folder', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[]), slice=Constant(value='train'), ctx=Load())), Name(id='DebugDataset', ctx=Load())])), Assign(targets=[Name(id='VALSETS', ctx=Store())], value=Dict(keys=[Constant(value='flower102'), Constant(value='imagenetlt')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='Flower102Dataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='annotation_key', value=Constant(value='valid'))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='ImageNetLTDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='mode', value=Constant(value='val'))]))])), Assign(targets=[Name(id='testsetsP', ctx=Store())], value=Dict(keys=[Constant(value='casia-openset'), Constant(value='ms1mv2-openset'), Constant(value='ms1mv3-openset'), Constant(value='lfw-openset'), Constant(value='clfw-openset'), Constant(value='lfw-joined-openset'), Constant(value='cub200-openset'), Constant(value='cars196-openset'), Constant(value='cub200-interleave-openset'), Constant(value='cars196-interleave-openset'), Constant(value='sop-openset'), Constant(value='inshop-openset'), Constant(value='mnist-openset'), Constant(value='imagenette'), Constant(value='tinyimagenet'), Constant(value='imagenet'), Constant(value='stanforddogs'), Constant(value='flower102'), Constant(value='imagenetlt'), Constant(value='cifar10'), Constant(value='cifar100'), Constant(value='mnist'), Constant(value='svhn'), Constant(value='serialized-openset'), Constant(value='debug-openset')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='OrderedDict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Name(id='name', ctx=Load()), Call(func=Name(id='MXNetValset', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='.bin'))], keywords=[])], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Name(id='CASIA_TESTS', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='OrderedDict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Name(id='name', ctx=Load()), Call(func=Name(id='MXNetValset', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='.bin'))], keywords=[])], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Name(id='MS1MV2_TESTS', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='OrderedDict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Name(id='name', ctx=Load()), Call(func=Name(id='MXNetValset', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='.bin'))], keywords=[])], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Name(id='MS1MV3_TESTS', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='LFWDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False)), keyword(arg='classification', value=Constant(value=False))])), Name(id='CrossLFWTestset', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='ClassMergedDataset', ctx=Load()), args=[Call(func=Name(id='LFWDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[]), Call(func=Name(id='LFWDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='CUB200SplitClassesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='Cars196SplitClassesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='CUB200SplitClassesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False)), keyword(arg='interleave', value=Constant(value=True))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='Cars196SplitClassesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False)), keyword(arg='interleave', value=Constant(value=True))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='SOPDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='InShopClothesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='MnistSplitClassesDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='ImagenetteDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='ImagenetteDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='ImageNetDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='StanfordDogsDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='Flower102Dataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='annotation_key', value=Constant(value='tstid'))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Dict(keys=[Constant(value='imagenetlt-overall'), Constant(value='imagenetlt-many-shot'), Constant(value='imagenetlt-medium-shot'), Constant(value='imagenetlt-few-shot')], values=[Call(func=Name(id='ImageNetLTDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='mode', value=Constant(value='test')), keyword(arg='test_setup', value=Constant(value='overall'))]), Call(func=Name(id='ImageNetLTDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='mode', value=Constant(value='test')), keyword(arg='test_setup', value=Constant(value='many-shot'))]), Call(func=Name(id='ImageNetLTDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='mode', value=Constant(value='test')), keyword(arg='test_setup', value=Constant(value='medium-shot'))]), Call(func=Name(id='ImageNetLTDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='mode', value=Constant(value='test')), keyword(arg='test_setup', value=Constant(value='few-shot'))])])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='CIFAR10Dataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='CIFAR100Dataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='MnistDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='SVHNDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='split', value=Constant(value='test'))])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='discard_key', ctx=Load()), args=[Call(func=Attribute(value=Name(id='SerializedDataset', ctx=Load()), attr='from_folder', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[]), Constant(value='train')], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='root')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='DebugDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))]))])), Assign(targets=[Name(id='MIXUP', ctx=Store())], value=Dict(keys=[Constant(value='same_class')], values=[Name(id='SameClassMixupCollator', ctx=Load())])), FunctionDef(name='validation_fold', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_fold'), ctx=Load()))], decorator_list=[Name(id='PROPERTY', ctx=Load())]), FunctionDef(name='get_valsets', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transform')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='¹GetƮ v̗ali±da©×tΨʜion datasets. ȺReturns NoneǛ ifō anot available.')), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_fold'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='VALSETS', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Constant(value="`validation_fold` is not None. Cannot perform validation split,because this dataset has author's validation split.")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='DEVSETS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data_root', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='dataset', ctx=Load()), attr='openset', ctx=Load()), body=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Subscript(value=Call(func=Name(id='split_crossval_classes', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='i', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_fold'), ctx=Load())), keyword(arg='k', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_validation_folds'), ctx=Load())), keyword(arg='interleave', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_split_interleave'), ctx=Load()))]), slice=Constant(value=1), ctx=Load()))], orelse=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Subscript(value=Call(func=Name(id='split_crossval_elements', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='i', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_fold'), ctx=Load())), keyword(arg='k', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_validation_folds'), ctx=Load())), keyword(arg='interleave', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_split_interleave'), ctx=Load()))]), slice=Constant(value=1), ctx=Load()))])], orelse=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='VALSETS', ctx=Load())]), body=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='VALSETS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data_root', ctx=Load())], keywords=[]))], orelse=[Return(value=Dict(keys=[], values=[]))])]), Assign(targets=[Name(id='base_valsets', ctx=Store())], value=Dict(keys=[Constant(value='valid')], values=[Name(id='dataset', ctx=Load())])), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='add_lossy_valsets'), ctx=Load()), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='dataset', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='base_valsets', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Attribute(value=Name(id='dataset', ctx=Load()), attr='classification', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='base_valsets', ctx=Load()), slice=BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='-lossy')), ctx=Store())], value=Call(func=Name(id='LossyDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='lossy_params'), ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='valsets', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='dataset', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='base_valsets', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Name(id='transform', ctx=Load()), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='Compose', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='ToTensor', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_image_test_transform', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_image_transform', ctx=Load())], ctx=Load())], keywords=[])), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='preload'), ctx=Load()), body=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='PreloadDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='image_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='image_size', ctx=Load())), keyword(arg='num_workers', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_workers'), ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='TransformDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='transform', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='valsets', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='dataset', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='dataset', ctx=Load()), attr='classification', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='add_verification_valsets'), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='valsets', ctx=Load()), slice=BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='-pairs')), ctx=Store())], value=Call(func=Name(id='SamplePairsDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='valsets', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='name'), arg(arg='validation_fold'), arg(arg='num_validation_folds'), arg(arg='validation_split_interleav'), arg(arg='transform_params'), arg(arg='transform_test_params'), arg(arg='augmenter_params'), arg(arg='mixup_type'), arg(arg='batch_size'), arg(arg='samples_per_class'), arg(arg='uniform_sampling'), arg(arg='num_workers'), arg(arg='num_valid_workers'), arg(arg='persistent_workers'), arg(arg='shuffle_train'), arg(arg='train_repeat'), arg(arg='pre'), arg(arg='add_lossy_valsets'), arg(arg='add_lossy_testsets'), arg(arg='lossy_params'), arg(arg='add_verification_valsetsRUi'), arg(arg='add_verification_testsets'), arg(arg='validate_on_test')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=4), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=256), Constant(value=4), Constant(value=False), Constant(value=8), Constant(value=None), Constant(value=False), Constant(value=True), Constant(value=1), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=False), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='Get coήllɡecͥtioǓ̍n parameterϪcs̥.\n\nϿAfʱrŅgĚ×sͪ:\n ÚȐÖ c  nƷamÁe: T˔yˮpe of ɅthWe Łtra˖in2͋inͻg: ͒daϏtaseρɍƸt K(Ƅ`cƄa\u0380siƚƸʲaë`, `ms1ˤmʩȸv2`,\u038b `ms1mv3`ȼ, ŋΎĵ`ŝlfw`, ș`̄ϵίcΦub200`, `cars1Ύʳϭ96` or ̇`ĲsopƝɄ`).ʬ\n    3dvaĺliƚdatioĶnE_̲fold:;ζƂ ƟFolɁdɨ˻ iɉn˷ǲdex u|sªɽɍed ¨for vϤͰalidatφion5.\n  ό ͯ nΔumͳ_validaɻtPi͑ɣon_Tfoʀl̿dsä: Numberǒ ϑΐof valǞid̯ɨħɑ~atʝion ͷsʽ̛ʒplitùΖsǇΪ.\n ̿   ȑvalȉidation_ṡpŗlit_irˍȭn͕teàrleaveϩǓ: \x85If Trʃue,Ǚ ͫus͒eȊ Ϟintmàerƪťleave spŒųĺliǝɧtĲɓŸti#}ίɉǾƞngƪ¤ `ĆÕϝscheme. Splitɨ òuƳsȕing "segmenpts otīhαerwšisΗe˔.\n  (  tľóransˋfϒƅoĦrmĴ_ȩpÉ̷a͌raʑȅmʽsF\x7f:U ͛ɜParaʫmeíteƻrsɚ˞ oʹǔf :clas\x93s:`Imơ˳ageĠǊͼŪTrƀ͙anΒsfoΧrɽė\'ρΟȥm\u038dƋȕǁ`.\nħ    trans˸forȔm_test_pǇNarɢamϰs: P\x97arameters ϰBofȚ̔ɲ ʬ:̚cǹƺ˻lϳass:`ImMagˎ̚eTestTȐraƜnsf͓o̘Ã̵rcm`Ͼ used during te˭\x9b£ȉsϘt\u0380inΚ̓Ŵgv.Ι\n    ̤auƫgme̾Ȫnƞʈteǂrʖ_parˈaǺγƠms: PʱarWϝameɞte˹̨rsÄɱ of :classɼ:ğ`ŲƋIϸiϭmagiɭeAēuŻvgƥńǞm̦ěenŧter` ǘusǧȼed dʟurinÔ\x9f\xa0gϸ tǎ˅raɠγi̺ƠniΉng.ϣ\n Īʰ  ͯ¤ mͣixupțϭ\\_tyʶp̀e: ƄTyɁpΏe ˸oǴf mâfixupλ strateÜgy͕ f͍oƺr ÍcɨMla̙ssifÂϱicǚϜati˴onͩ Ȓdʥa̲ta͘sǽets.ɞ϶ ̃Ā̂(͈NʄǞȥone orz "samȎe_claʻłsΏϔ̏ƛs,˃")Ə.\x8d\nɔ Ǚ   baʚǕtchĆ_size: Bˑɞ\x9ea¡tʺŰċΒͭch˚ XsiʾzeĈ.<\nØ ą   samɖpleŎs_per_ϜcěÁlaȕs\x92s: If\u038bµ n-o˅tɌ Nʧo}ǪƊne, Ǟ϶sample ϳc̲lasseŏ«Γsǭ uϞnʶifoˀrmÌlʢy& wϩȻĩithǋ Pth͟eȤ αgive˞͵nãCØ nͥumƻbˏer̟Ξ\u0381 ǔȮofÛ sαȬ̼ampleĺÙs pÓeįĬúrmĚ cžălass.\nʮ   Ņ÷  uniforŤmÀ_˥samǍplĻinjŦͺg=ĩ: If trueaƓőÎĢ ̴aʓnd samples_per_c͜lasͰȞǰs ¹isŏ not NƒronĺeȂǴ, ǚcla˂sspʉşes ͘aŇrċe samplɍ̷ed \x9fuʃŷnǭiʓΓforʳmΖly ˊϖf̹or eaňcEh batƴ͖Ƈȥ˩\x9fch.\n ϋ   nźuƩm˞˱_workeư_rs: ͇Nóu̷˹mb¨er of loa\x8bder wo͚rkƝerÌs̭ɠ.ɇĞ\n Ĵ  ϰ͟ƛ nuɦm_valid_w̖orġker\x91ˑs:Łθ 1NumbeŖr of workπψΠ˗eǁ3rsś usedʮĩΰ for ɵƉvZalid\x86ʨatioƣn. JŋǷSĶĠõˡeʦt ȆNÂ˃one ɢto uͺseϡɢċǌ theľ˚ ®saϯm4eƻ nuʣmbŞer˵ȏɜ Ɛas ɅʔiȞµn ǨϓϮϲt>Ω͑rʩain.˭\nǣƘ   ̕ īp͞ˎ˥ers\x91̤i̺sΫtent_woϢrŌk̭er͗s: KeġeʐpɕɊ Ƿloaλder ĳwϸğorŹk]ers ZΓϦ˖˼Ȇalivμəe aȒft̕Őer ite^rΡatƘion.ā\n   A sʫêƉ]Ͻhuffle_tǄrain:θɠ W̢ʽh)Dɟethe˚rų̴ to s¡͆huffle Ě˒tr.̋ain or̥Q not.\n    tǇraǿiġn_Ɋrep\x95Űeaʑʣtķ: NŞɿumbřĖeʟr  ˯ȕʻof ƢtrainiάngȠ sȍƷet ΥrepeϘtiti\u03a2o̻¾n W\x88\u038bdurking eĊpoch (u¦sȢe|fulȉϖ foŽϼňr ɗ͋smż˴̘aʲll 5ȱ˓ηdaPt\x96ase©ts)έΜ͌©½.\nɨΖ   }̳\x91 prǟ̩˒el̞oad: Load fşulléˢ d̽˳̛ataset toƄɳƍʭ̤ σtϤhe mĩſemHorƜĿy ǺbʹƿΟǁĸefoƔre tr͔aʅƸiρniȑnȐgΐ.\n  Ψψ  ΑʂaμÏƹȲd͉d_ίlͮƁoƷss1y_valͧsetǊs: AdĀʦdą loďssy va3ɯriĊants oŅf̪\xa0̃ˣŧ*Ƴ vwaʱlȁˇíǺdaρtionϫ setsƓȕ˻.̑\n  ɨ  adϦΒL̖d_lċossy|_teǯstƣD̥sʮLɩîetˠs: Addτ űlǆ\u038boség\\sy variant˻s of tʈǃest͡ seɌ\x8btDs.\n Ĺ Ά Ϧ loɀãssy]èƚŶ_pƒȡarΑaΩm̓s\x9eʝ:λ Paʆrſameters\u038d \x82ʵƼoɟΙȠ͊η<þfϑĒ ôl͎̇o\x9d~sʎsy Θʿ/dĉat̨as͠ets.\n   ̘ \x84adȈd_verifɐicatɐionϯ_ϭval͛ϩ˦sešǊ̋tȫs:Ž Whether® tΡo ĔĄa÷ŋdd˭ɿ veYriɱfiϖŔöcaę̨Ğt˻ƶiʊŖon vĢ\x8eˍa\u0378Ŧlidɝaγtiɜo\x8cnϸ Ϸɐsetºs Ċinϻȫ adƳdȮition to ^cϹlasƥsi\xa0fication.\nE  ˏgŪ  âadd_verifi͟ɏcÜatŁiˍå̀on_tĄ§ƷƋeŅstơse˱ts: Ɂ¥Wˁheħthǟer̙ to `aϓddÐ vȬeri̗×ficˠȐatΑğiŹon ×testsetΐƎs ƖiǨ̂ŚƄ\u0378Ɣn aŘddiϐtion to ʇc¬lĥassiʃfiΩcat͉ion±.\n  _ Š+Έ ƥqvýalʅidƛaőˠtźƪǿeŌ_oΖn_Ěntest:ý Cpo[mpu\x9ate teŭstǪ ̻ʫmeĨźt°ricΨs łbÙŰetw˘ʷeen epoýchȥsɿΝ.ƙ')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='name'), Name(id='name', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='validation_fold'), Name(id='validation_fold', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='num_validation_folds'), Name(id='num_validation_folds', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='validation_split_interleave'), Name(id='validation_split_interleav', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='transform_params'), Name(id='transform_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='transform_test_params'), Name(id='transform_test_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='augmenter_params'), Name(id='augmenter_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='mixup_type'), Name(id='mixup_type', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='batch_size'), Name(id='batch_size', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='samples_per_class'), Name(id='samples_per_class', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='uniform_sampling'), Name(id='uniform_sampling', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='num_workers'), Name(id='num_workers', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='persistent_workers'), Name(id='persistent_workers', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='num_valid_workers'), Name(id='num_valid_workers', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='shuffle_train'), Name(id='shuffle_train', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='train_repeat'), Name(id='train_repeat', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='preload'), Name(id='pre', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='add_lossy_valsets'), Name(id='add_lossy_valsets', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='add_lossy_testsets'), Name(id='add_lossy_testsets', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='lossy_params'), Name(id='lossy_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='add_verification_testsets'), Name(id='add_verification_testsets', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='add_verification_valsets'), Name(id='add_verification_valsetsRUi', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='validate_on_test'), Name(id='validate_on_test', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dat_a_root')], kwonlyargs=[arg(arg='config')], kw_defaults=[None], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Constant(value='Dataset type must be provided')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data_root', ctx=Store())], value=Name(id='dat_a_root', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_image_transform', ctx=Store())], value=Call(func=Name(id='ImageTransform', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='transform_params'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_image_test_transform', ctx=Store())], value=Call(func=Name(id='ImageTestTransform', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='image_size', ctx=Load())], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='transform_test_params'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_augmenter', ctx=Store())], value=Call(func=Name(id='ImageAugmenter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='image_size', ctx=Load())], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='augmenter_params'), ctx=Load()))])), Assign(targets=[Name(id='trainset', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_trainset', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Constant(value=False))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Attribute(value=Name(id='trainset', ctx=Load()), attr='num_classes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_openset', ctx=Store())], value=Attribute(value=Name(id='trainset', ctx=Load()), attr='openset', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_priors', ctx=Store())], value=Attribute(value=Name(id='trainset', ctx=Load()), attr='priors', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_loaders', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='train'), arg(arg='transform'), arg(arg='augment_train')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=True), Constant(value=True)]), body=[Expr(value=Constant(value='Gĺ˹etńǞ dat̨a ˆs\x95etÐ loadeģrs.')), Assign(targets=[Name(id='datasets', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_datasets', ctx=Load()), args=[], keywords=[keyword(arg='train', value=Name(id='train', ctx=Load())), keyword(arg='transform', value=Name(id='transform', ctx=Load())), keyword(arg='augment_train', value=Name(id='augment_train', ctx=Load()))])), Assign(targets=[Name(id='loaders', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_loader', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='train', value=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='train')]))])], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='dataset', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='datasets', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='loaders', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_trainset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transform'), arg(arg='augment')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=True)]), body=[Expr(value=Constant(value='Get tːrŗaini˱ng dat˓aset.')), Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='DEVSETS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data_root', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_fold'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='VALSETS', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Constant(value="`validation_fold` is not None. Cannot perform validation split,because this dataset has author's validation split.")], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='dataset', ctx=Load()), attr='openset', ctx=Load()), body=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Subscript(value=Call(func=Name(id='split_crossval_classes', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='i', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_fold'), ctx=Load())), keyword(arg='k', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_validation_folds'), ctx=Load())), keyword(arg='interleave', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_split_interleave'), ctx=Load()))]), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Subscript(value=Call(func=Name(id='split_crossval_elements', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='i', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_fold'), ctx=Load())), keyword(arg='k', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_validation_folds'), ctx=Load())), keyword(arg='interleave', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validation_split_interleave'), ctx=Load()))]), slice=Constant(value=0), ctx=Load()))])], orelse=[]), If(test=Name(id='transform', ctx=Load()), body=[If(test=Name(id='augment', ctx=Load()), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='Compose', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_augmenter', ctx=Load()), Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='ToTensor', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_image_transform', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='Compose', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='ToTensor', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_image_transform', ctx=Load())], ctx=Load())], keywords=[]))]), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='preload'), ctx=Load()), body=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='PreloadDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='image_size', value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='image_size', ctx=Load()), op=Mult(), right=Constant(value=1.5))], keywords=[])), keyword(arg='num_workers', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_workers'), ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='RepeatDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='train_repeat'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='TransformDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='transform', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='dataset', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_testsets', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transform')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Get dictÒionaͬry of tests˱ets.')), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='TESTSETS', ctx=Load())]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='base_testsets', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='TESTSETS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data_root', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='base_testsets', ctx=Load()), Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='OrderedDict', ctx=Load())], ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='base_testsets', ctx=Store())], value=Dict(keys=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='name'), ctx=Load())], values=[Name(id='base_testsets', ctx=Load())]))], orelse=[]), Assign(targets=[Name(id='base_testsets', ctx=Store())], value=DictComp(key=BinOp(left=Constant(value='infer-'), op=Add(), right=Name(id='k', ctx=Load())), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='base_testsets', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='add_lossy_testsets'), ctx=Load()), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='dataset', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='base_testsets', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Attribute(value=Name(id='dataset', ctx=Load()), attr='classification', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='base_testsets', ctx=Load()), slice=BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='-lossy')), ctx=Store())], value=Call(func=Name(id='LossyDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='lossy_params'), ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='testsets', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='dataset', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='base_testsets', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Name(id='transform', ctx=Load()), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='Compose', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='transforms', ctx=Load()), attr='ToTensor', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_image_test_transform', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_image_transform', ctx=Load())], ctx=Load())], keywords=[])), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='preload'), ctx=Load()), body=[Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='PreloadDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='image_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='image_size', ctx=Load())), keyword(arg='num_workers', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_workers'), ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='dataset', ctx=Store())], value=Call(func=Name(id='TransformDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='transform', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='testsets', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='dataset', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='dataset', ctx=Load()), attr='classification', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='add_verification_testsets'), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='testsets', ctx=Load()), slice=BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='-pairs')), ctx=Store())], value=Call(func=Name(id='SamplePairsDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='testsets', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_loader', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dataset'), arg(arg='train')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='k', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='num_workers', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_workers'), ctx=Load())), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='train', ctx=Load())), Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_valid_workers'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='num_workers', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_valid_workers'), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='batch_size', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='batch_size'), ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='train', ctx=Load()), Attribute(value=Name(id='dataset', ctx=Load()), attr='classification', ctx=Load()), Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='samples_per_class'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[If(test=UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='shuffle_train'), ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Balanced sampling requires shuffling.')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='k', ctx=Load()), slice=Constant(value='batch_sampler'), ctx=Store())], value=Call(func=Name(id='ShuffledClassBalancedBatchSampler', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='batch_size', value=Name(id='batch_size', ctx=Load())), keyword(arg='samples_per_class', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='samples_per_class'), ctx=Load())), keyword(arg='uniform', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='uniform_sampling'), ctx=Load()))]))], orelse=[Assign(targets=[Subscript(value=Name(id='k', ctx=Load()), slice=Constant(value='batch_size'), ctx=Store())], value=Name(id='batch_size', ctx=Load())), Assign(targets=[Subscript(value=Name(id='k', ctx=Load()), slice=Constant(value='drop_last'), ctx=Store())], value=Name(id='train', ctx=Load())), Assign(targets=[Subscript(value=Name(id='k', ctx=Load()), slice=Constant(value='shuffle'), ctx=Store())], value=IfExp(test=Name(id='train', ctx=Load()), body=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='shuffle_train'), ctx=Load()), orelse=Constant(value=False)))]), If(test=BoolOp(op=And(), values=[Name(id='train', ctx=Load()), Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='mixup_type'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Subscript(value=Name(id='k', ctx=Load()), slice=Constant(value='collate_fn'), ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='MIXUP', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='mixup_type'), ctx=Load()), ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='utils', ctx=Load()), attr='data', ctx=Load()), attr='DataLoader', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[keyword(arg='num_workers', value=Name(id='num_workers', ctx=Load())), keyword(arg='pin_memory', value=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='cuda', ctx=Load()), attr='device_count', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])), keyword(arg='persistent_workers', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='persistent_workers'), ctx=Load())), keyword(value=Name(id='k', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='train_prio', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_priors', ctx=Load()))], decorator_list=[Name(id='PROPERTY', ctx=Load())]), FunctionDef(name='openset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_openset', ctx=Load()))], decorator_list=[Name(id='PROPERTY', ctx=Load())]), FunctionDef(name='image_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_image_transform', ctx=Load()), attr='image_size', ctx=Load()))], decorator_list=[Name(id='PROPERTY', ctx=Load())]), FunctionDef(name='get_datasets', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='train'), arg(arg='transform'), arg(arg='augment_train')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=True), Constant(value=True)]), body=[Expr(value=Constant(value="Ge\x7ftŉ daĹtȵ\x85aĵ̕setsj diχctäǏ\u0380ʁionary.Ȍɺ\nž\nArgs:ȩ\n  \x82˫Ŋ  tŉ'traϲin͡:Ⱦ ˾W\x8fʆhet©heʎrǁ toƥ̳ βmake ɡtrBaining seÉt Ǳȥor not.\nǲļ  ͅɊ  trͪ\x8cansfǞoŮrÊm: WΟʙhelthˢeĽrƪ tƗo appɀlˆyɓ Ñtrans¹forRmXs oƞr ʷnot.")), Assign(targets=[Name(id='datasets', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), If(test=Name(id='train', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='datasets', ctx=Load()), slice=Constant(value='train'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_trainset', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Name(id='transform', ctx=Load())), keyword(arg='augment', value=Name(id='augment_train', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='datasets', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_valsets', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Name(id='transform', ctx=Load()))])], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='train', ctx=Load())), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='validate_on_test'), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='datasets', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testsets', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Name(id='transform', ctx=Load()))])], keywords=[]))], orelse=[]), Return(value=Name(id='datasets', ctx=Load()))], decorator_list=[]), FunctionDef(name='num_train_classes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()))], decorator_list=[Name(id='PROPERTY', ctx=Load())])], decorator_list=[])], type_ignores=[])