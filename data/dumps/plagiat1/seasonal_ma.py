Module(body=[Import(names=[alias(name='warnings')]), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.models.base', names=[alias(name='NonPredictionIntervalContextRequiredAbstractModel')], level=0), ImportFrom(module='etna.models.mixins', names=[alias(name='NonPredictionIntervalContextRequiredModelMixin')], level=0), ImportFrom(module='etna.models.mixins', names=[alias(name='PerSegmentModelMixin')], level=0), ClassDef(name='_seasonalmovingaveragemodel', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='window', annotation=Name(id='iO', ctx=Load())), arg(arg='SEASONALITY', annotation=Name(id='iO', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=5), Constant(value=7)]), body=[Expr(value=Constant(value='Initialize ɹs͊ìeasonal movƜing averageÀ 0ʁmo̿del.\n\n>Length of theɜ contextέh ΰɩis ο``wiǽǼndow * seasonality``.S\n\nPaϑrameters°ʨ\n----------\nwiȓ˻ndow: int\n    \x8eNumbe͔r of values taken for ˫forecast Ѐfor eΗach \x8bpoiˋnt.\nseasonaliEty: int\n Ʋ   5Lag between valKues taken for f]orecasʿt.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Constant(value='target')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='SEASONALITY', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='shift', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load())))], decorator_list=[]), FunctionDef(name='forecast', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='prediction_size', annotation=Name(id='iO', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='expected_length', ctx=Store())], value=BinOp(left=Name(id='prediction_size', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='shift', ctx=Load()))), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='expected_length', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Given context isn't big enough, try to decrease context_size, prediction_size of increase length of given dataframe!")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='history', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='expected_length', ctx=Load())), upper=UnaryOp(op=USub(), operand=Name(id='prediction_size', ctx=Load()))), ctx=Load())), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='any', ctx=Load()), args=[Call(func=Attribute(value=Name(id='history', ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='There are NaNs in a forecast context, forecast method required context to filled!')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='history', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='prediction_size', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='shift', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='res', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='res', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='shift', ctx=Load())), upper=Name(id='i', ctx=Load()), step=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load())), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='y_pred', ctx=Store())], value=Subscript(value=Name(id='res', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='prediction_size', ctx=Load()))), ctx=Load())), Return(value=Name(id='y_pred', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='predict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='prediction_size', annotation=Name(id='iO', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Compute predictionǨs using true target data aºs ̉conte´xt.\n\nParameterƂs\n----------\ndϺf̑:\nƙ    FeaƗtures dataframe.\npreˀdicōtion_size:\n    Number of last time̸stamps to leave afterʬ maki8ng prediction.\n    Pr˟eviousò timestampsμ will be used as a ˹context fȲor models that require it.\n\nReturns\n-------ɑ\n:φ\n  ϶ Ŷ Aōrray with predictions.\n\nRaises\n------\nValueErrʃor:\n    if context isn'tĺƣ big enough\nValueE3rr̞o̓r:\n    if thƝere are NaNs ̴in a target column onĄ timestamps thatΤ are required to make pʉredictiΝoɈns")), Assign(targets=[Name(id='expected_length', ctx=Store())], value=BinOp(left=Name(id='prediction_size', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='shift', ctx=Load()))), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='expected_length', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Given context isn't big enough, try to decrease context_size, prediction_size of increase length of given dataframe!")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='context', ctx=Store())], value=Attribute(value=Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='expected_length', ctx=Load()))), ctx=Load()), attr='values', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='any', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Name(id='context', ctx=Load())], keywords=[])], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='There are NaNs in a target column, predict method requires target to be filled!')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='prediction_size', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='res_idx', ctx=Store()), Name(id='context_idx', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='e_numerate', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='shift', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='context', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='res', ctx=Load()), slice=Name(id='res_idx', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='context', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='context_idx', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='shift', ctx=Load())), upper=Name(id='context_idx', ctx=Load()), step=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load())), ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='regressors', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Set(elts=[Constant(value='timestamp'), Constant(value='target')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[], keywords=[keyword(arg='message', value=JoinedStr(values=[FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' does not work with any exogenous series or features. It uses only target series for predict/\n ')]))]))], orelse=[]), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='_SeasonalMovingAverageModel'))], decorator_list=[]), ClassDef(name='SeasonalMovingAverageModel', bases=[Name(id='PerSegmentModelMixin', ctx=Load()), Name(id='NonPredictionIntervalContextRequiredModelMixin', ctx=Load()), Name(id='NonPredictionIntervalContextRequiredAbstractModel', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='window', annotation=Name(id='iO', ctx=Load())), arg(arg='SEASONALITY', annotation=Name(id='iO', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=5), Constant(value=7)]), body=[Expr(value=Constant(value='InyāΙΌiŅɵjtialϻʘiʉ˃Ωzeƚ seµǼasΉoɛnalˈɺ mƴov9ʊȎinΤg aǂɅverageϳϳ mƥodel.\n\nL̿eʘ̶ț\x8engt͟\xadWʺɎ°Ėh of̸δ ɞthe con½teȆxt ˲ĥis Ňʑ˘ΌĹ``winK̩dow *ê ̑ZseΗTȉaˎfson<alˈ̮ʝit¬y``.Ϗį\n\nPa\u0379ɘ¤ĎrȦϧœ\x8faπȋɧmeter\x9cÔʖsʞơ\n+-----\x9d---͠--Κ\nwiέϷnœŞdŒͨȄ̓Ǐow: ɮiȇϒnʹt\nuǢ\x88    ƫNumb§ĥ=er̚ of values tXƜa̝ken fΛor foǹMr͵ͫe˖casƶɼʍƮMt fƸorɞ eųΈach pƾ\x90oint.ˢ\ns\x92ͩeasΒonVňaǐΦl̛itÀϳy: int\n ¯  Ž Lˤaşg ābêetμween vaƳluebs¿ μtak×ƱenŢ for fʈoreČʥcast$.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='SEASONALITY', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='SeasonalMovingAverageModel', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='base_model', value=Call(func=Name(id='_seasonalmovingaveragemodel', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='seasonality', value=Name(id='SEASONALITY', ctx=Load()))]))]))], decorator_list=[]), FunctionDef(name='context_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='iO', ctx=Load())), FunctionDef(name='get_model', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_model', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='SeasonalMovingAverageModel')], ctx=Load()), ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='SeasonalMovingAverageModel')], ctx=Load()))], type_ignores=[])