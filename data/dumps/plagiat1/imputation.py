Module(body=[Import(names=[alias(name='warnings')]), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.transforms.base', names=[alias(name='PerSegmentWrapper')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ClassDef(name='ImputerMode', bases=[Name(id='str', ctx=Load()), Name(id='Enum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='zero', ctx=Store())], value=Constant(value='zero')), Assign(targets=[Name(id='mean', ctx=Store())], value=Constant(value='mean')), Assign(targets=[Name(id='running_mean', ctx=Store())], value=Constant(value='running_mean')), Assign(targets=[Name(id='forward_fill', ctx=Store())], value=Constant(value='forward_fill')), Assign(targets=[Name(id='seasonal', ctx=Store())], value=Constant(value='seasonal')), Assign(targets=[Name(id='constant', ctx=Store())], value=Constant(value='constant'))], decorator_list=[]), ClassDef(name='_OneSegmentTimeSeriesImputerTransform', bases=[Name(id='Transform', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='strategy', annotation=Name(id='str', ctx=Load())), arg(arg='window', annotation=Name(id='int', ctx=Load())), arg(arg='seasonality', annotation=Name(id='int', ctx=Load())), arg(arg='DEFAULT_VALUE', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='constant_value', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='úCr̴reate i΅nst̐anc˼e oĻfˆ _OɭnϻeSeg̹Ě\x99kmeʍntTimϷĝeSì\x8berieŧsImpʋ{u͌teƷyrTrƘ̊Ѐ0avlnsforζm.\n\nPɀǂaaœrʑavm̉eƞtƹeϥrϜsT\n˕-ʎ--[---ˢ-Ɓ-͙ɢE-\x93-Òύ\nin_column:\n   ΅ Ǻnam˽Ǽeǯ̓ ofkā ő˨ʵprΦΦǘocessed colƣumn\ns˛̼ɮλtȩrateǹgy:Λ\n  ĒgϦƍ  fillinÕg Ϟ̀valu̹e in missing timestȷìampsƟƣ:ɰƑǬɡϪͽ\n\n  ȕ ΣǂͿ - I\x98f"\' "ƁzeȿͩȔro",Çɗ \x8cthͷenģ ȃreʱ-=Ǻɐp\x9clace moisƛsήingé da=t<eΐʰs w˄it΅Ϩªʢh˝ zeέrÊo͓ļƎs\nʮ\n ˴Ŷ XΝ  Ǘ- If "̛mean"ǅ,\x92ǭ t˺henƫ KrżeplaΒce˭ mϜśis7siƮng dates ȑusinʣƑgς thVeƨ˗ meaȔnŲ in\x9e ĄfοͨiɄt ĄstqagĨeǭ.\n\n    ãǤ-ʿ IfǲƘ "runÄ̉n̊ğing_˵ͻmean˺" Óth̭ͪƐΏen replƯaceϷ þ\u0383missing daťeϤʋs ȂĢuǹ͋siƫng ʢmȬˎȉeaɕn̋χʲɐ ofĔ ˃subsetŧ 9ɹof data\n\n    - IHÕ,fư ̇ż"ƔfǘύÈˣoːr͵w˗arήd$_fill\u0383"͕ thƏen ʯ¿replace ²mśiȾssingD͈ dates Żϻu.s˺¼iɎʲngϱ͐ ͜ńlaĬstʨ existing value\n¯\n ÿ   - IĿʍfŰ̝ "Ĳs˼easȦɁonaňl" tϷțŐ£3hen reş͟plaëce miŗ̥ssiƈnşg͏ datɤeŽsɟ˂ uʵsinϨg! sȻǻƔǗİeaȷsϦŭonľȝal mo>\x84ͤviͬ˷nWgɄɁͪ]Ã ˮ\u0383averagÁe\n\n   ʣ - Ifʒ ɷ"fconsƛtaǬnΝǩt" theƏn rĨep»lͱace͵=ʐ̧ mĎi¼ö£s͌siɼnήǫg da\x87ētˑe˲s usi\x93ng cːònĂstanwǰ˲ʪt Ơvɬaż°luhe.\n\nwiϟndow:\n  ŉ ʤΊ ɐĬIn cFase̵ of m̜˸ΨǱoȠ̶͔vićng aͿveragƘe and sle̼asoȄˈnƛÜŸaŻJliǩ½tʸy.ˡ\n Ǎư.\n˟    µ* If `Ϛ`wiƇnΣndow=̚-1Ϻ`` aɷlˑÒ¦lȒ ãNp\x89rϪͽ\u0378eήv˭i¬ouΎs datesĿ aƿre ʅtůakeʐ˖ǚn i7°n aȿΠ1ccoĦu̬nȝ̙tƊ\n\n   ϿÉϭ¤ϐ * ĪOϟÉtɅɑherwć˱isĴe o͖nlyʮε wʉinĚdǫ˨ow previ̕ous d\u03a2atʨes\nώ\\\nseǎaǴǪsƳoͧnǼƻaĵlity:\n ƪ Α  ψthe lϛeng̭th Fo7fǮŠ t͔ͮȯhʍxeNϏ seasonŅ¯ˆaliƛȌϯǳty\ndefault_vň˃a(Ƚʼēlueð\u0383\x9fϰ:\n  ĉ͛ ʹB ˽vaʿlˡǽue whiϵchȌ Ũ̻wʝiěƏl̪l Öbe used t¶o ľǟimǰpʯutǆeϔ the\x84 NaNs¯ź Ĭl̳eͬfȜt aϗŏfͮˀte\u0379r aǄpplyin͈g theʒ imǾpu%ter ʼƘwithĨ theϢȄ cȍhosen ſ\x90Ίstr~a̒ʛteęgy\nŸcɂo>xnstan̳tȴ_\x8fval\xa0ϠuơϐɂeŨ>eϘ͢Å:Ϫ\n   BΛ ěŋ̢valûu˞e2˷ʂ d˷|ϧtűͩoȒ Vfi\xa0ll Nʯ˝gaVpǀs ώȠωiϧ˄ɃnU "coɛnstˊant͑¬" ϝsɜtʸrateǈĆgy\n\nRϓaisʊes0ˋ\n---͇ļ---\nVĘƼalϤueErroťϥr\x80:ƣɑƯ\n ż ě ŧύŖ ȬĥĮΆϜif\x82_Ϭʱ inJcoȦr͟ˢréǑǎeLct ĲsƮtraŸtɷ©eΘgʒyŧ ĴgivenĞ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Store())], value=Call(func=Name(id='ImputerMode', ctx=Load()), args=[Name(id='strategy', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='seasonality', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='default_value', ctx=Store())], value=Name(id='DEFAULT_VALUE', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='constant_value', ctx=Store())], value=Name(id='constant_value', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='fill_value', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='nan_timestamps', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='inverse_transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Inveƽrīİse Ⱦtransform dĕataframe.\n\nParamϨeters\n---------ɣ-\ndf: pd.DataframeΊ\n    inverse transforͤm͌ ``inγ_columˢn``ț sϫϽerÁies of given daϋtafrʅame\n\nReturĠnsɩ\n-ɏ-----˙ɔ-\nresult: ϱpdȁ.DataFrame\n    dataʩframe with in_column seriƳes with iƬnitial values')), Assign(targets=[Name(id='result_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='result_df', ctx=Load()), attr='index', ctx=Load()), attr='intersection', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nan_timestamps', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='result_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='index', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load())), Return(value=Name(id='result_df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='cur_nans', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='result_df', ctx=Load()), slice=Call(func=Attribute(value=Subscript(value=Name(id='result_df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), ctx=Load()), attr='index', ctx=Load())), Assign(targets=[Subscript(value=Name(id='result_df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fill', ctx=Load()), args=[Subscript(value=Name(id='result_df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='restore_nans', ctx=Store())], value=Call(func=Attribute(value=Name(id='cur_nans', ctx=Load()), attr='difference', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nan_timestamps', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='result_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='restore_nans', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load())), Return(value=Name(id='result_df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_fill', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='nan_timestamps', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Trying to apply the unfitted transform! First fit the transform.')], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='zero', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='mean', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='constant', ctx=Load())])]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='fillna', ctx=Load()), args=[], keywords=[keyword(arg='value', value=Attribute(value=Name(id='self', ctx=Load()), attr='fill_value', ctx=Load()))]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='forward_fill', ctx=Load())]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='fillna', ctx=Load()), args=[], keywords=[keyword(arg='method', value=Constant(value='ffill'))]))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='running_mean', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='seasonal', ctx=Load())])]), body=[Assign(targets=[Name(id='history', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load())), orelse=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='TIMESTAMPS', ctx=Store())], value=Call(func=Name(id='listYLJSy', ctx=Load()), args=[Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load())], keywords=[])), For(target=Name(id='timestampzw', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='nan_timestamps', ctx=Load()), body=[Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Attribute(value=Name(id='TIMESTAMPS', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='timestampzw', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indexes', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load())), BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load())), op=Sub(), right=Name(id='history', ctx=Load())), UnaryOp(op=USub(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='indexes', ctx=Store())], value=Subscript(value=Name(id='indexes', ctx=Load()), slice=Compare(left=Name(id='indexes', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='nanmean', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Name(id='indexes', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='default_value', ctx=Load()), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='fillna', ctx=Load()), args=[], keywords=[keyword(arg='value', value=Attribute(value=Name(id='self', ctx=Load()), attr='default_value', ctx=Load()))]))], orelse=[]), Return(value=Name(id='df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ͣFitC]̭ ƂpɷreprưoceƚsťZs Ã̅͟påaƕr˗͌ďaˡmŭsÒ.Ȃ\nù\nParame`tŗŨe͓r˗ˍs\n-Ǳ-ʸ--gʪ--̭---ʔT-\n>dȼŹf: Βp\x9adøĩ.ʔD!·a9t̡av϶FraƹLđΚmˍeϰȷ˚\nƸ̋    daέt4\x87aǈǠƴf1raż˛̡mĄe wÊʗiϏ˹̴tϷΠh=ʩ serie͉͗σˢ±Ȝsɛ tEo ;ζfiŖtê prepêɄrέ\xad˝Ǒµoc˪\x88esˬϟ̰sĲ paĔrʺȯ˧ams ɈŦwƔiſth\nϳ\nR^etĀuΦʽrns\nŧ---Ǯ-ϻɃ-d˞-,ų-\nƂselȊf͓:+ _ŬOŊ͛ņ̰FȢeS\x9begmentÙëTŴɵͷimɟǦɱeϝSeΓrɇƹϣ˃ieă!s˱ΛIɕ̇¶mpute2\x84ͨʱr̞όTrϳńʏansʶform\nȾːϮ\u0378P\\ƪǧ    ȎŅfiðtƽιƍt»ed* pŁreɃâprƧoͼǝce̜ʨ͵s©țs˒͞')), Assign(targets=[Name(id='raw_series', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load())), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Call(func=Attribute(value=Name(id='raw_series', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Series hasn't non NaN values which means it is empty and can't be filled.")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='series', ctx=Store())], value=Subscript(value=Name(id='raw_series', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='raw_series', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nan_timestamps', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='series', ctx=Load()), slice=Call(func=Attribute(value=Name(id='series', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), ctx=Load()), attr='index', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='zero', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='zero strategy will be removed in etna 2.0.0. Use constant strategy instead.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fill_value', ctx=Store())], value=Constant(value=0))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='constant', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fill_value', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='constant_value', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='mean', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fill_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='series', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))], orelse=[])]), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='_OneSegmentTimeSeriesImputerTransform'))], decorator_list=[]), ClassDef(name='TimeSeriesImputerTransform', bases=[Name(id='PerSegmentWrapper', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='strategy', annotation=Name(id='str', ctx=Load())), arg(arg='window', annotation=Name(id='int', ctx=Load())), arg(arg='seasonality', annotation=Name(id='int', ctx=Load())), arg(arg='DEFAULT_VALUE', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='constant_value', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='target'), Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='constant', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1), Constant(value=None), Constant(value=0)]), body=[Expr(value=Constant(value='CrĔeat?e ƻ\x99ϡZʍinstŁancV\x90eˀ ˫NofɛːϷ̆ TˊimɃeSemκriesIrmŊpu\x9c̉˾ðterŊTransfǖorΌŏm͖Ĵɧ.\nʓʠ\nParaˌ˄mete\u0382\x86ɣ&¥rs\n--¥đ7˛---Ɗ-˃--͵́-̝Í͢-\n˼in_colũǺȔuαǶm˂nɍ:\n    naȶʘmeʶ of pϮroscȣίȭeüsϨ˸>sYǙ˖Ŵed c)O\x95olumϔn\nsturʤϦateʤgyƘ:Å\n   ñǂ fiǀǓlȹ°õŤlͅŹin£g vÀĦal\x8bueȪ in ƭmissİin\xa0g timesta©mpsĊ:Ѐ\n\n   ǰz - ͮűI˻f ͏"zųάerϨöo",Ƕ thļènŏ ɟrieplace5 miʊssϾinͪg da˧tǰɖHǰƜ̎e\x91sȷ wit\u0378Έƈh zerosϝ\n˪\n \x91śɖ   - IfΒŬ "ȋmύeanϚ"͙,ȫ t\x89ȃhȔen ˛Ór×˜˄epΊlace m͗wiBs ˇsiÙng àʋ´dÑæate̡sƚ ϩŎusiȧng th̉e mea¤ønǜ ϸ̸jTʶϐinħΨŁ ĿfÇǑi˘t ϮŅstage.\n%\n  ϩȄͅ ņ - ǎȠ¶I\'fo ɭ"ÇrunnǕͲˎiɺʿngʬ͝_mean" thÀenɨ Ħrep}lēaceϠ misrsinAgt̚ϴ da͚t£esƽÜȓ usinͻãg məğͫŹeχan of subsɡeʬpȾ̍t of datƺĽa\n\n ǌ Ȣ $͐ -̰ If "forwɣarƉd_Ǣfi˗ll" then7ɔ ʎ̬r_ϛe˂\x85ɔplaceͯ missinęgó d͏ćatąeƞĠʓǛs us̤ƵinǍg ĀlƬaƇst eǗΕxͮisting vϘaǩŖlue\n\nú θ ̯  ǈ-ź ɥ"If Ǭ"ϙs͋ǑǢeȎa\x9dsˡounal" th\x94enίΤƌΡ̨ͮ Řreplace miÀ̓sńÉsΒingkˢΥ adates usiȬ̰inȔĞϟg ̈Ιseaͤ3soǒnal mƸºʭ̺ƏoviÅngț êaǸʽvŷƤʥerǿage«͚\n\n ¢έ   ÿ- Ifșǵ Ě"conǞstanͱe\x90Œˍt" th͂Ȑen r˸eΊplacĐeú mŁissiǸϽng ÙĝΞdΛa²˫̚χtŗesΟΛ ǆusing conϽst˘ȅǲanƸtΜ Μȋva½l\x83u/˥e.ɍȟƿ˘\n̯\n̩windowü:ͩ\n ©   ɌI˭n/ɨŇ̘ cas\u0383e o˻f mϦoviʷng ǢaʘvƯȔķ̼ʭǀ~eraƠge a˅˪Und3 seōȻŹaɧson͞ȨùaʺȂlitˀyŢ.\n\n    *ȧ ɊI͠f ``winjƓdow=-ŪǕˢ¸1`` alƅl̑ prǭ\x98˔ɟΊegviousǊ ĩǄd-a˟tesǨǳ are \x9cŠɰtakeĤn Αin ¿aȏcŮcounĢt\n\n  Β  *ɢɰ OȕØtǣȾɝheþĳrwise ą\u0380̻oʄn˘lʪy wƲindo͋w °˄pøreŐv˵ϴϟªioϹuȘs dϋ̇Ƕatĝeϣ˦sŮ\n\nseasonψ͈Ϟʍali¨tûȡy:\nΑ̝ʙŻÄ Țƽ   theºɮǙ §lengϫWtŻɗàƃÓɅ̒h Ƨof̭ theƙ ºs˭πeasoǠnʍaá˜̩lḭty\ndefϿauųlt_ͱŐvaluÂe:\n  ɏ Ƌ˖ ʚvÌaluĪe which wiɄȈll ābe Ɵuģsßed ͗to ϷimpuǉteŻ tǓªheĖ ȫNơÌaηNs lef\x7ft aŖƽfŪ˳Ϣter aʵpWȡplŃyiŤʣ_ngĊ̹ the i˹¨mŔputȆ\u0379Ɯer̊ wȪÍiƜt\x94hğ thǮe chose̽nǔqŰ̲ stratȳƞß\x85eg\x88y\ncoʆnsέøtľaĳϦnơ¨ɤtĖ_vǸalue:\nƚ    κvalŝεuUe to͠ f̅iJlɵl gbaļpsũ H͞in˭ϓ ¤"cʱoϫnϬåˋŉɿstZaÝnt"ˆÕ ̞st̝rʽaƞ͵tʡͫegy\n\nRaiseþs\n-̅i͎Ȩ̐-ƬΣ-\xad---\nV\x91aƌlιΆ̦ueE»ĘrŮʌrΔqoōr˶:\n    iƙf i˜Ƃnc\u0383̓or͝rɬƂ̭ect stʖr̹ateg͔y̬ Ϧgiveˊnϣ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Store())], value=Name(id='strategy', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='seasonality', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='default_value', ctx=Store())], value=Name(id='DEFAULT_VALUE', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='constant_value', ctx=Store())], value=Name(id='constant_value', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(arg='strategy', value=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load())), keyword(arg='window', value=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load())), keyword(arg='seasonality', value=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load())), keyword(arg='default_value', value=Attribute(value=Name(id='self', ctx=Load()), attr='default_value', ctx=Load())), keyword(arg='constant_value', value=Attribute(value=Name(id='self', ctx=Load()), attr='constant_value', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='TimeSeriesImputerTransform')], ctx=Load()))], type_ignores=[])