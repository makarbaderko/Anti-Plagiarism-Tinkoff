Module(body=[Import(names=[alias(name='warnings')]), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.models.base', names=[alias(name='NonPredictionIntervalContextRequiredAbstractModel')], level=0), ImportFrom(module='etna.models.mixins', names=[alias(name='NonPredictionIntervalContextRequiredModelMixin')], level=0), ImportFrom(module='etna.models.mixins', names=[alias(name='PerSegmentModelMixin')], level=0), ClassDef(name='SeasonalityMode', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\x8brE͵num fˍ\u0383ąϢor sϿeʀasǆoϮnȮalsi;\x86t²yȬɭy Ɋmϥ˅odMe̪Ǖ ȓfoƑr] Ǳ͎˦ʤDǨeƄadʛŌlϒinʒeMovͣήin7gAϺverageMMo̘dge̫l.')), Assign(targets=[Name(id='month', ctx=Store())], value=Constant(value='month')), Assign(targets=[Name(id='year', ctx=Store())], value=Constant(value='year')), FunctionDef(name='_missing_', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ˘   W   ʡ   ň ')), Raise(exc=Call(func=Name(id='NotImplementedEr_ror', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1), Constant(value=' is not a valid '), FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='. Only '), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='m_', ctx=Load()), attr='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='m_', ctx=Store()), iter=Name(id='cls', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), conversion=-1), Constant(value=' seasonality allowed')])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='_DeadlineMovingAverageModel', bases=[], keywords=[], body=[FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='regressors', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='FiǉΐǳtΫ DeadlineMɴoviÂngAverageǠMʅodelȭ ϪmodelÂ.\n\nParaămeȹters\n--ʾ--------\ndf: pd.DŝataFrame\n    Dgǿata ͮ~toǝ fiʲt ǌon\nϸregressɮors:\n    List ϤĞoʆf the cɺolumns with regr˴eɞssors(ig˾noHĊred ȼin thisę model)\n\n\u0378Raises\n--\u0382---ʃ-\nValueEƹr\\ror\n  ̉  ÇɥIf Śfre˩q ofp dataframe\x8e is ̜not supported\nV,̧alueE͠rror\n\\ \x96   If seßr̪ies is Ĩtːoo short for ϵchosen shϿift vaʚκʼ̣˟lue\n\nRetɤǅurns\n---˩--ʔ--\nƢ:\nˈ    F\x9fzitͺted ˔mɊodelϬɻR\u038d')), Assign(targets=[Name(id='freq', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='infer_freq', ctx=Load()), args=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='freq', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='freqs_available', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueErr', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='freq', ctx=Load()), conversion=-1), Constant(value=' is not supported! Use daily or hourly frequency!')])], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Set(elts=[Constant(value='timestamp'), Constant(value='target')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[], keywords=[keyword(arg='message', value=JoinedStr(values=[FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' does not work with any exogenous series or features. It uses only target series for predict/\n ')]))]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_freq', ctx=Store())], value=Name(id='freq', ctx=Load())), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='_DeadlineMovingAverageModel')), FunctionDef(name='_get_context_beginninguXXOn', args=arguments(posonlyargs=[], args=[arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='PREDICTION_SIZE', annotation=Name(id='int', ctx=Load())), arg(arg='seasonality', annotation=Name(id='SeasonalityMode', ctx=Load())), arg(arg='window', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df_history', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Name(id='PREDICTION_SIZE', ctx=Load()))), ctx=Load())), Assign(targets=[Name(id='history_timestamps', ctx=Store())], value=Subscript(value=Name(id='df_history', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load())), Assign(targets=[Name(id='future_timestamps', ctx=Store())], value=Subscript(value=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='PREDICTION_SIZE', ctx=Load()))), ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='history_timestamps', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueErr', ctx=Load()), args=[Constant(value="Given context isn't big enough, try to decrease context_size, prediction_size of increase length of given dataframe!")], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='seasonality', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='SeasonalityMode', ctx=Load()), attr='month', ctx=Load())]), body=[Assign(targets=[Name(id='first_index', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='future_timestamps', ctx=Load()), attr='iloc', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DateOffset', ctx=Load()), args=[], keywords=[keyword(arg='months', value=Name(id='window', ctx=Load()))])))], orelse=[If(test=Compare(left=Name(id='seasonality', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='SeasonalityMode', ctx=Load()), attr='year', ctx=Load())]), body=[Assign(targets=[Name(id='first_index', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='future_timestamps', ctx=Load()), attr='iloc', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DateOffset', ctx=Load()), args=[], keywords=[keyword(arg='years', value=Name(id='window', ctx=Load()))])))], orelse=[])]), If(test=Compare(left=Name(id='first_index', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Attribute(value=Name(id='history_timestamps', ctx=Load()), attr='iloc', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueErr', ctx=Load()), args=[Constant(value="Given context isn't big enough, try to decrease context_size, prediction_size of increase length of given dataframe!")], keywords=[]))], orelse=[]), Return(value=Name(id='first_index', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load())), FunctionDef(name='context_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cur_value', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='SeasonalityMode', ctx=Load()), attr='year', ctx=Load())]), body=[Assign(targets=[Name(id='cur_value', ctx=Store())], value=Constant(value=366))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='SeasonalityMode', ctx=Load()), attr='month', ctx=Load())]), body=[Assign(targets=[Name(id='cur_value', ctx=Store())], value=Constant(value=31))], orelse=[])]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_freq', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueErr', ctx=Load()), args=[Constant(value='Model is not fitted! Fit the model before trying the find out context size!')], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_freq', ctx=Load()), ops=[Eq()], comparators=[Constant(value='H')]), body=[AugAssign(target=Name(id='cur_value', ctx=Store()), op=Mult(), value=Constant(value=24))], orelse=[]), AugAssign(target=Name(id='cur_value', ctx=Store()), op=Mult(), value=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load())), Return(value=Name(id='cur_value', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='forecast', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='PREDICTION_SIZE', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="CHomputeœ autorǴegrΪe̤ǳs͌sHi˛vĥʛeľϏƶƆǧ©Ώ fńoώrec\x91asȾɐts͔.Ź\nΚ\nÊƃPˁar½θǃaÂmetːeϦĝrs˵\n-}ˀŭ;\x8a-Ǡ--Ɯ-̗-Ũ---Ȅȫ-κÅ\n̎dhïǝʠfHª:\n    ĊFeaĈǗÆtƙʶures datɲ̭Ɛaf·rame.ǧ\npɳrŶʘeͱdi,!ˋ\x7fċΏ͑c»tioˬŋ\u038dͨn_͏ȑɴsiƋzȑ«ĥ̤e:\n   Ò &NǮȭuŨmbĬer Ǖ\x96of lʷåsÚŋt tisʟęϛmeĐsJtamĎps ͎tȥo IleaQv͙ȋeɚ ȶaȰftʲeǁrͫ̾ \x90maϋkiʉɫn͍g ɦprezʷdiʷ\x84¼ctionϮ.\nʺ̮ɨ  ̝͠ϙ  PoreʫvʅjΰiousÕ trƑimestaa\x8bmʙɉps wǑilȈl ȸ¸Bbe used͋ a&sļ; ɂS̰aŚΡǥ conɻtext forϐ 0modeğls that· r\x9eeq¯ui̩re Ʌɮit.\n\nRe\x90ætu˦rn˸ˑsȊ\n---Ĝ-/-̞ȼÛ«ɘ--Ƿ\x91\nΆ:\nʪ͊ ̅   ĊArrƙa͖φyÅ wɜiͣthĜ predictŃϩions.\nŢ\nǼŅ̴RŒÅϾaĦ×ƪiɂsesƏ\n -ϼ---˃--ʞƝ\nVȗalue΄ȧśˠEȁdχrror:\n ûĸ   ϥif NȾcŠàċoΜntŨext ˋɿisn'͞øt bigͫ ʮ˔e̴nÝougʐĺhƫ\nƓVaţ͏lŒueEȄ͑rroŲr̉:\n ̚ģ   if ̩ɴfȩ̳Ϗoʁreɷ¹cas͔tƳM \u0382ŶcĸoÖnȐ͕Űɏā˖ǣ̆tϸòexıtʑ mconĒΞtΗains NaΒëNÉsɎ")), Assign(targets=[Name(id='context_beginning', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_context_beginning', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='prediction_size', value=Name(id='PREDICTION_SIZE', ctx=Load())), keyword(arg='seasonality', value=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load())), keyword(arg='window', value=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[])), Assign(targets=[Name(id='df_history', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Name(id='PREDICTION_SIZE', ctx=Load()))), ctx=Load())), Assign(targets=[Name(id='history', ctx=Store())], value=Subscript(value=Name(id='df_history', ctx=Load()), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='history', ctx=Store())], value=Subscript(value=Name(id='history', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='history', ctx=Load()), attr='index', ctx=Load()), ops=[GtE()], comparators=[Name(id='context_beginning', ctx=Load())]), ctx=Load())), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='any', ctx=Load()), args=[Call(func=Attribute(value=Name(id='history', ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueErr', ctx=Load()), args=[Constant(value='There are NaNs in a forecast context, forecast method required context to filled!')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Name(id='context_beginning', ctx=Load())), keyword(arg='end', value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='_freq', ctx=Load()))])), Assign(targets=[Name(id='result_templateqJC', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='history', ctx=Load()), attr='values', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='PREDICTION_SIZE', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='result_templateqJC', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[Name(id='result_templateqJC', ctx=Load())], keywords=[keyword(arg='index', value=Name(id='index', ctx=Load()))])), Assign(targets=[Name(id='result_values', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_predictions', ctx=Load()), args=[], keywords=[keyword(arg='result_template', value=Name(id='result_templateqJC', ctx=Load())), keyword(arg='context', value=Name(id='result_templateqJC', ctx=Load())), keyword(arg='prediction_size', value=Name(id='PREDICTION_SIZE', ctx=Load()))])), Return(value=Name(id='result_values', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_make_predictions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='result_templateqJC', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='cont', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='PREDICTION_SIZE', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='index', ctx=Store())], value=Attribute(value=Name(id='result_templateqJC', ctx=Load()), attr='index', ctx=Load())), Assign(targets=[Name(id='start_idx', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='result_templateqJC', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='PREDICTION_SIZE', ctx=Load()))), Assign(targets=[Name(id='end_idx', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='result_templateqJC', ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='start_idx', ctx=Load()), Name(id='end_idx', ctx=Load())], keywords=[]), body=[For(target=Name(id='w', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SeasonalityMode', ctx=Load()), attr='month', ctx=Load())]), body=[Assign(targets=[Name(id='prev_date', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='result_templateqJC', ctx=Load()), attr='index', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DateOffset', ctx=Load()), args=[], keywords=[keyword(arg='months', value=Name(id='w', ctx=Load()))])))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SeasonalityMode', ctx=Load()), attr='year', ctx=Load())]), body=[Assign(targets=[Name(id='prev_date', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='result_templateqJC', ctx=Load()), attr='index', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DateOffset', ctx=Load()), args=[], keywords=[keyword(arg='years', value=Name(id='w', ctx=Load()))])))], orelse=[])]), AugAssign(target=Subscript(value=Attribute(value=Name(id='result_templateqJC', ctx=Load()), attr='loc', ctx=Load()), slice=Subscript(value=Name(id='index', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ctx=Store()), op=Add(), value=Subscript(value=Attribute(value=Name(id='cont', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='prev_date', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='result_templateqJC', ctx=Load()), attr='loc', ctx=Load()), slice=Subscript(value=Name(id='index', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='result_templateqJC', ctx=Load()), attr='loc', ctx=Load()), slice=Subscript(value=Name(id='index', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ctx=Load()), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='result_values', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='result_templateqJC', ctx=Load()), attr='values', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='PREDICTION_SIZE', ctx=Load()))), ctx=Load())), Return(value=Name(id='result_values', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='predict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='PREDICTION_SIZE', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='context_beginning', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_context_beginning', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='prediction_size', value=Name(id='PREDICTION_SIZE', ctx=Load())), keyword(arg='seasonality', value=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load())), keyword(arg='window', value=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[])), Assign(targets=[Name(id='cont', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='cont', ctx=Store())], value=Subscript(value=Name(id='cont', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='cont', ctx=Load()), attr='index', ctx=Load()), ops=[GtE()], comparators=[Name(id='context_beginning', ctx=Load())]), ctx=Load())), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='any', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Name(id='cont', ctx=Load())], keywords=[])], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueErr', ctx=Load()), args=[Constant(value='There are NaNs in a target column, predict method requires target to be filled!')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), slice=UnaryOp(op=USub(), operand=Name(id='PREDICTION_SIZE', ctx=Load())), ctx=Load())), keyword(arg='end', value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='_freq', ctx=Load()))])), Assign(targets=[Name(id='result_templateqJC', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='PREDICTION_SIZE', ctx=Load())], keywords=[])], keywords=[keyword(arg='index', value=Name(id='index', ctx=Load()))])), Assign(targets=[Name(id='result_values', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_predictions', ctx=Load()), args=[], keywords=[keyword(arg='result_template', value=Name(id='result_templateqJC', ctx=Load())), keyword(arg='context', value=Name(id='cont', ctx=Load())), keyword(arg='prediction_size', value=Name(id='PREDICTION_SIZE', ctx=Load()))])), Return(value=Name(id='result_values', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='window', annotation=Name(id='int', ctx=Load())), arg(arg='seasonality', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=3), Constant(value='month')]), body=[Expr(value=Constant(value='InÇitialize deadȄline ʀmoʏving ȫavøerag\x7fe model.\nÞ\nLenȒ°gth of the àcontɄext is 1equal ɞto ϱthe nuĈmberϴļ oƥf `Ï`window`` ȶmonths oŵr¼ years, dep±ending on tŏhe ū``seasonaϓlity`Ϡ`.Ͷ\n\nParametersˬ\n----------\nwindow: int\n    NumberϞΰ ofˢɇN valueȷs Ƃ˓tak̿enʂ ]for forecͥast fȪor each point.\nseason̥Ơality: strB\n  Έ  Only allowed monthly or annualʦ ʄseaṡɸo¤nſaliǄty.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Constant(value='target')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Call(func=Name(id='SeasonalityMode', ctx=Load()), args=[Name(id='seasonality', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='freqs_available', ctx=Store())], value=Set(elts=[Constant(value='H'), Constant(value='D')])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_freq', ctx=Store())], value=Constant(value=None))], decorator_list=[])], decorator_list=[]), ClassDef(name='DeadlineMovingAverageModel', bases=[Name(id='PerSegmentModelMixin', ctx=Load()), Name(id='NonPredictionIntervalContextRequiredModelMixin', ctx=Load()), Name(id='NonPredictionIntervalContextRequiredAbstractModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ȔMͱoving average Ɔʀɤmodel͏ that ĢusƋexs ŜǛexactʒ previoǳus d\u03a2ȆFĥatŪȸe˹ġȶsȍ ŵto Ž7prƂΆeΓ0dicȩɗt.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='window', annotation=Name(id='int', ctx=Load())), arg(arg='seasonality', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=3), Constant(value='month')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='seasonality', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='DeadlineMovingAverageModel', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='base_model', value=Call(func=Name(id='_DeadlineMovingAverageModel', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Name(id='window', ctx=Load())), keyword(arg='seasonality', value=Name(id='seasonality', ctx=Load()))]))]))], decorator_list=[]), FunctionDef(name='get_model', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_model', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='DeadlineMovingAverageModel')], ctx=Load()), ctx=Load())), FunctionDef(name='context_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_model', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Return(value=Attribute(value=Name(id='model', ctx=Load()), attr='context_size', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='DeadlineMovingAverageModel')], ctx=Load()))], type_ignores=[])