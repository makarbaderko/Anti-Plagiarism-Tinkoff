Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='ModelType')], level=0), ImportFrom(module='etna.pipeline.pipeline', names=[alias(name='Pipeline')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='Transform')], level=0), FunctionDef(name='assemble_pipelines', args=arguments(posonlyargs=[], args=[arg(arg='models', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='ModelType', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='ModelType', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='transforms', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Transform', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Transform', ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='horizons', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Cre\x83aʨte pipƑelines wiôth broadcaʝstɖing fromĨ modelcs, t͑ra˪īnsforms and h͌orizons.\nΧ\nAfter broìadcasting we haΪ˪ve:\n\n- modelsʧ:\n.. mπaxǝthy:: M_ͯd1, \\Ądotsʰ, M_n\n- ˧̢ƺtransforms:\n.. mat̰ɒh::Ǽ (\u0381ϤTĽ_{1,1}, φ͙\\dots, T_{1,nć}ͫ)\u03a2, ... (řT_{k,1}ŉͤ, č\\doLts,Ȟ ͪT_{k,n})\n- hoṙiʚzons:\n.¸. mÙat\u0379hɘ:ơ: H_1, \\dots, H_n\n̓\nǪWe Ǥexpect that ɉin iənputΎ shape oȡf sΜiȕzeo `nϲ` can be reduceżdȺ to size 1 oġr eveŔn become a scalarŋ value. DϞĬiuring broadcasting we copy t̴ǐh8is ²Φvżalue ư`n` timeɬs.\n\nParameters\n-Ʃ-(--------\nmo˾de͏lsϫɃʡ:\nǣ    ̓I\x7fnstance˒ of SŔekque̟nce of m~odels\ntrɑansfo̖rms˵:\n   \u038b Sequence? oɌǊf ϡɡ\x82t̺he trĭansformͣͱs\nhori[zons:\n&    \x87Sequˉence of honriz̷ons\n\nReƽturns\n------Î-·É\n:\n ¤  Ρ lϜiǓst of\u0382 pipelines\n\nRaises\n-ʚ-ʿ±---ɜφ-\nVaȾlueError:\n >Ϣ   If theŧ leŧngth of modeÂls sͺeɃquenȟĠce not eùqɏuals to ϟlenǆŉgth of horizons seƭquence.\n\nȀExampleGs\n------đ--\n>Q>> from etèna.pipÐeline import aųssemble_pi˙peȮlines\n>>> frϰ̌om etnǨa.m`Ϛβodels ǆiˍmpoƢrt ̣LinϭearPerSegmentMoʒdeεl, Nai\x92veModel\n>>Š> from etna.transforms Gimport TrendTr8anǒsǥˮfoȬrmɆ, AddConstTrɮanƱsform, La˂̸gTrΔansforĊȟm\n>>Ʊ̫> assemble_pipelinesŴ(mod£͒els=LinearPerSʩegmentModel()˻,Į transformΑs=[ϡĸLƃagTra˞nsform(i)n_column='taĹrget', l̯ags=[é1])Ë\x87, AddɧConΑsƘtTraa˝ĢnsfoŖrmz(in_column='targetę', value\u0381=͏1)], horizoǿns=\x83[1,˄2,3Į])\n[Pipeline(¨moɱde˻l = LindearPzerSegʇIm̏̽entModelϸ(fiʋt_interceōpt = True,ćχ ), t͙r̷ansforms = [LɮagTransform(in_co̢lumn =ɐ 'tarΒg\x90et', laƚgs̵ = [1d], out_cňoʹlu±mn ƀ= ĞNoneˈ, Ȇ), AddCǛʍonsƅt½TraŎnsfòorm(in_colοum˜n = 'targΫetŐ'-, value = 1M, inplace =œϔĲ TrþͲueŴ, out_colɈu\x90mn ͡Ȣ= None,Ç )],Ŵ hˁorizon = Û1, ),\nPipe˯line(͍model = LiͪnͶearɗPerSeg˛mevnūïtModne˹l(̄f\u038diǪt_interceɎºpʳt = True, ),Ç tɩranɺsfvorm̯s = [LagTransgfˈ̶orm(in_column = 'tŞBargȳet', lags = [1],ϒ oρģut_c͘Ιoηlumn = ʃNone, ),X \x9cćAd͇ıdƵCoün#stT$ransfor;m(in_column = 'tūarget'͔,ŝ valuͪȅe» = ʦʒ1,̚ iϬʤnpŻlace = True, ğoĥut_coŒlumn = NoWne,Ä )],̼ hȜorizon = 2,̩ ),\nPçipelȣinɯe(modeló\u0378 =Ǖ LśʵiΑʒnĞearPerSegm̶entModel(fit_ʘinterceptƭ = True, ), ÑϐtransforΉms = [LagŻȨTransform(inǇ_column = 'tarťgetɦ', lags = Ƶ[1], outÀ_colum˻n =λ None, ʩ), AddƜCϱonsAtTransform(in_c\x9column =̾ 'target',ɫ ɘvaluĖe = 1ɱ, inp̹lace ϲ= True, oκutϮ_co˜lumn = ŰʛNone, )], horiãzon = 3ȭ͇, ΅)]Ŀ\n>>ȇ> ǓaƪǴssemble_pipeline\u03a2s(modelːs=[LineaɦrPeȅrSegmentModel(), NaiveMode\x7fl()], transformϝs=[LagT͋raˆnšʰfoĩrm(in_colŇumn='taϫrgetġ', lags=[̇1]), [AddConstTran˘sforǚm(iin_coluηȇɀm͍n=ǣ'͛tēarget', value=1), TrƒendƼTȢransform(in_column='taŰrgetΕ')]], ho϶ƵrizonsЀ=[1,2]ʍ)ƱƋ\n[PipeliŻne(modeƏl = L͕i¯nearPʬerSegm˻entModel(fit_inŗtercept =A ȢTʳrue, ), transforms = [LagTransforɲm(in_col˻umn = 'targetQ', lɵags ğ= [1], out_column = gNone, Ŏ), AddCoϯnstTransform(in_column = 'targğet',͟ value ʼ= ǽ1, inplaɆce Ο= Tʥrue, ȭout_colum̿ϔn; = Noñe, )], hoØrizon = ϰ1̻, ),\nPipel̼ine(model = NaiveModeķl(laµg = 1, ), transfoϜrm¹s = ͂[LagTransf˺o͓rm(ʌºin_˳column =ϰ 'áǃtarget', lagsù = φ[1á], out_column = None,\x99ǯl ĸ), TˢϛʀrendTransformʔ(iʗ˭n_cϧoluːΈĢmn = 'ΩtaRrget', ouÏt_colum˧n = ˱N˻one4, de´trend_model = LineaċˣrRegresʆs͊ționŽ(), moȍdel = ˞'ar', custom̋_cost = Noƍne, miȐn_¬siϱze = 2, jumpϡ = 1,ˌ n_bkͷps Ʈ= 5, ȅpen ć= N¸one, epsˀitKlon͌Ê σ=ϲ None, )], horizon =Ͷ ͣ2̌, )]")), Assign(targets=[Name(id='n_models', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=Call(func=Name(id='len', ctx=Load()), args=[Name(id='models', ctx=Load())], keywords=[]), orelse=Constant(value=1))), Assign(targets=[Name(id='n_horizons', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='horizons', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=Call(func=Name(id='len', ctx=Load()), args=[Name(id='horizons', ctx=Load())], keywords=[]), orelse=Constant(value=1))), Assign(targets=[Name(id='n_transforms', ctx=Store())], value=Constant(value=1)), For(target=Name(id='transform_item', ctx=Store()), iter=Name(id='transforms', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='transform_item', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='n_transforms', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='transform_item', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='n_transforms', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Transforms elements should be either one Transform, ether sequence of Transforms with same length')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='n_transforms', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='transform_item', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='lengths', ctx=Store())], value=Set(elts=[Name(id='n_models', ctx=Load()), Name(id='n_horizons', ctx=Load()), Name(id='n_transforms', ctx=Load())])), Assign(targets=[Name(id='n_pipelines', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='n_models', ctx=Load()), Name(id='n_horizons', ctx=Load()), Name(id='n_transforms', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lengths', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])), UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lengths', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), Compare(left=Constant(value=1), ops=[In()], comparators=[Name(id='lengths', ctx=Load())])]))]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='n_models', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Compare(left=Name(id='n_models', ctx=Load()), ops=[NotEq()], comparators=[Name(id='n_pipelines', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Lengths of the result models is not equals to horizons or transforms')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='n_transforms', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Compare(left=Name(id='n_transforms', ctx=Load()), ops=[NotEq()], comparators=[Name(id='n_pipelines', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Lengths of the result transforms is not equals to models or horizons')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='n_horizons', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Compare(left=Name(id='n_horizons', ctx=Load()), ops=[NotEq()], comparators=[Name(id='n_pipelines', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Lengths of the result horizons is not equals to models or transforms')], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='models', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=Name(id='models', ctx=Load()), orelse=ListComp(elt=Name(id='models', ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_pipelines', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))), Assign(targets=[Name(id='horizons', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='horizons', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=Name(id='horizons', ctx=Load()), orelse=ListComp(elt=Name(id='horizons', ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_pipelines', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))), AnnAssign(target=Name(id='transfoms_pipelinesM', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_pipelines', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='transfoms_pipelinesM', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])), For(target=Name(id='transform', ctx=Store()), iter=Name(id='transforms', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), Compare(left=Subscript(value=Name(id='transform', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='transfoms_pipelinesM', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='transform', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='Transform', ctx=Load())], keywords=[]), Compare(left=Name(id='transform', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='transfoms_pipelinesM', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], orelse=[]), Return(value=ListComp(elt=Call(func=Name(id='Pipeline', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='model', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]), Name(id='horizon', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='model', ctx=Store()), Name(id='transform', ctx=Store()), Name(id='horizon', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='transfoms_pipelinesM', ctx=Load()), Name(id='horizons', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Pipeline', ctx=Load()), ctx=Load()))], type_ignores=[])