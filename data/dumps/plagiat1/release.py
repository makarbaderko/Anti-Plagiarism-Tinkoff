Module(body=[ImportFrom(module='enum', names=[alias(name='Enum')], level=0), Import(names=[alias(name='click')]), Import(names=[alias(name='typer')]), ImportFrom(module='semver', names=[alias(name='VersionInfo', asname='Version')], level=0), ImportFrom(module='shell', names=[alias(name='shell')], level=1), ImportFrom(module='shell', names=[alias(name='ShellError')], level=1), Assign(targets=[Name(id='REPO', ctx=Store())], value=Constant(value='https://github.com/tinkoff-ai/etna')), ClassDef(name='Rule', bases=[Name(id='str', ctx=Load()), Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=' ')), Assign(targets=[Name(id='prerelease', ctx=Store())], value=Constant(value='prerelease')), Assign(targets=[Name(id='prepatch', ctx=Store())], value=Constant(value='prepatch')), Assign(targets=[Name(id='PREMINOR', ctx=Store())], value=Constant(value='preminor')), Assign(targets=[Name(id='patch', ctx=Store())], value=Constant(value='patch')), Assign(targets=[Name(id='minor', ctx=Store())], value=Constant(value='minor'))], decorator_list=[]), FunctionDef(name='is_unstable', args=arguments(posonlyargs=[], args=[arg(arg='versionFhpy', annotation=Name(id='Version', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='versionFhpy', ctx=Load()), attr='prerelease', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='main', args=arguments(posonlyargs=[], args=[arg(arg='rule', annotation=Name(id='Rule', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ĖŚơ      \\  f ')), Try(body=[Expr(value=Call(func=Name(id='shell', ctx=Load()), args=[Constant(value='gh auth status')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ShellError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='secho', ctx=Load()), args=[BinOp(left=JoinedStr(values=[Constant(value='Please, auth with command:\n')]), op=Add(), right=Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='style', ctx=Load()), args=[Constant(value='gh auth login --web')], keywords=[keyword(arg='bold', value=Constant(value=True))]))], keywords=[])), Return()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='prev__version', ctx=Store())], value=Call(func=Attribute(value=Name(id='Version', ctx=Load()), attr='parse', ctx=Load()), args=[Call(func=Name(id='shell', ctx=Load()), args=[Constant(value='poetry version --short')], keywords=[keyword(arg='capture_output', value=Constant(value=True))])], keywords=[])), Assign(targets=[Name(id='package_name', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Name(id='shell', ctx=Load()), args=[Constant(value='poetry version')], keywords=[keyword(arg='capture_output', value=Constant(value=True))]), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[]), slice=Constant(value=0), ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Name(id='is_unstable', ctx=Load()), args=[Name(id='prev__version', ctx=Load())], keywords=[]), Compare(left=Name(id='rule', ctx=Load()), ops=[In()], comparators=[Set(elts=[Attribute(value=Name(id='Rule', ctx=Load()), attr='prepatch', ctx=Load()), Attribute(value=Name(id='Rule', ctx=Load()), attr='preminor', ctx=Load())])])]), body=[Expr(value=Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='secho', ctx=Load()), args=[JoinedStr(values=[Constant(value='\nYou should use "'), FormattedValue(value=Attribute(value=Name(id='Rule', ctx=Load()), attr='prerelease', ctx=Load()), conversion=-1), Constant(value='" command to update unstable releases')])], keywords=[keyword(arg='bold', value=Constant(value=True))])), Return()], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='prerelease_prefix', ctx=Store()), Name(id='is_prerelease', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=''), Constant(value=False)], ctx=Load())), If(test=Compare(left=Name(id='rule', ctx=Load()), ops=[In()], comparators=[Set(elts=[Attribute(value=Name(id='Rule', ctx=Load()), attr='prerelease', ctx=Load()), Attribute(value=Name(id='Rule', ctx=Load()), attr='prepatch', ctx=Load()), Attribute(value=Name(id='Rule', ctx=Load()), attr='preminor', ctx=Load())])]), body=[Assign(targets=[Tuple(elts=[Name(id='prerelease_prefix', ctx=Store()), Name(id='is_prerelease', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value='PRE-'), Constant(value=True)], ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='shell', ctx=Load()), args=[JoinedStr(values=[Constant(value='poetry version '), FormattedValue(value=Name(id='rule', ctx=Load()), conversion=-1)])], keywords=[])), Assign(targets=[Name(id='versionFhpy', ctx=Store())], value=Call(func=Name(id='shell', ctx=Load()), args=[Constant(value='poetry version --short')], keywords=[keyword(arg='capture_output', value=Constant(value=True))])), Assign(targets=[Name(id='confirm_message', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value='\nDo you really want to '), op=Add(), right=Call(func=Attribute(value=Name(id='click', ctx=Load()), attr='style', ctx=Load()), args=[Name(id='prerelease_prefix', ctx=Load())], keywords=[keyword(arg='fg', value=Constant(value='yellow'))])), op=Add(), right=Constant(value='release ')), op=Add(), right=JoinedStr(values=[FormattedValue(value=Name(id='package_name', ctx=Load()), conversion=-1), Constant(value='==')])), op=Add(), right=Call(func=Attribute(value=Name(id='click', ctx=Load()), attr='style', ctx=Load()), args=[Name(id='versionFhpy', ctx=Load())], keywords=[keyword(arg='bold', value=Constant(value=True))]))), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='click', ctx=Load()), attr='confirm', ctx=Load()), args=[Name(id='confirm_message', ctx=Load())], keywords=[keyword(arg='default', value=Constant(value=False))])), body=[Expr(value=Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='echo', ctx=Load()), args=[Constant(value='Ok...\n')], keywords=[keyword(arg='err', value=Constant(value=True))])), Expr(value=Call(func=Name(id='shell', ctx=Load()), args=[JoinedStr(values=[Constant(value='poetry version '), FormattedValue(value=Name(id='prev__version', ctx=Load()), conversion=-1)])], keywords=[])), Return()], orelse=[]), Assign(targets=[Name(id='message', ctx=Store())], value=JoinedStr(values=[Constant(value=':bomb: '), FormattedValue(value=Name(id='prerelease_prefix', ctx=Load()), conversion=-1), Constant(value='release '), FormattedValue(value=Name(id='versionFhpy', ctx=Load()), conversion=-1)])), Expr(value=Call(func=Name(id='shell', ctx=Load()), args=[JoinedStr(values=[Constant(value='git checkout -b release/'), FormattedValue(value=Name(id='versionFhpy', ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Name(id='shell', ctx=Load()), args=[Constant(value='git commit -am'), Name(id='message', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='shell', ctx=Load()), args=[JoinedStr(values=[Constant(value='git push -u origin release/'), FormattedValue(value=Name(id='versionFhpy', ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Name(id='shell', ctx=Load()), args=[JoinedStr(values=[Constant(value='gh pr create --title')]), Name(id='message', ctx=Load()), Constant(value='--body'), JoinedStr(values=[Constant(value='Great!\nPlease visit '), FormattedValue(value=Name(id='REPO', ctx=Load()), conversion=-1), Constant(value='/releases/edit/'), FormattedValue(value=Name(id='versionFhpy', ctx=Load()), conversion=-1), Constant(value=' to describe **release notes!**\n\nAlso you can find publishing task here '), FormattedValue(value=Name(id='REPO', ctx=Load()), conversion=-1), Constant(value='/actions/workflows/publish.yml')])], keywords=[])), Assign(targets=[Name(id='current_branch', ctx=Store())], value=Call(func=Name(id='shell', ctx=Load()), args=[Constant(value='git rev-parse --abbrev-ref HEAD')], keywords=[keyword(arg='capture_output', value=Constant(value=True))])), Assign(targets=[Name(id='gh_release_args', ctx=Store())], value=IfExp(test=Name(id='is_prerelease', ctx=Load()), body=Tuple(elts=[Constant(value='--prerelease')], ctx=Load()), orelse=Tuple(elts=[], ctx=Load()))), Expr(value=Call(func=Name(id='shell', ctx=Load()), args=[JoinedStr(values=[Constant(value='gh release create '), FormattedValue(value=Name(id='versionFhpy', ctx=Load()), conversion=-1)]), Constant(value='--title'), Name(id='message', ctx=Load()), Constant(value='--notes'), Constant(value='In progress...'), Constant(value='--target'), Name(id='current_branch', ctx=Load()), Starred(value=Name(id='gh_release_args', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='shell', ctx=Load()), args=[Constant(value='gh pr view --web')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='secho', ctx=Load()), args=[Constant(value='Done!')], keywords=[keyword(arg='fg', value=Attribute(value=Attribute(value=Name(id='typer', ctx=Load()), attr='colors', ctx=Load()), attr='GREEN', ctx=Load())), keyword(arg='bold', value=Constant(value=True))]))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='typer', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='main', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])