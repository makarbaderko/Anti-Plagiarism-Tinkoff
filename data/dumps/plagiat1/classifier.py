Module(body=[ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), Import(names=[alias(name='math')]), Import(names=[alias(name='torch')]), ImportFrom(module='_workarounds', names=[alias(name='ArcFace'), alias(name='CosFace')], level=2), ImportFrom(module='config', names=[alias(name='prepare_config'), alias(name='ConfigError')], level=2), ImportFrom(module='distribution', names=[alias(name='NormalDistribution'), alias(name='VMFDistribution')], level=1), ImportFrom(module='parametrization', names=[alias(name='Parametrization')], level=1), FunctionDef(name='get_log_priors', args=arguments(posonlyargs=[], args=[arg(arg='NUM_CLASSES'), arg(arg='priors')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='priors', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='priors', ctx=Load()), Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='priors', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='tensor', ctx=Load()), args=[Name(id='priors', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='priors', ctx=Load()), attr='shape', ctx=Load()), ops=[NotEq()], comparators=[Tuple(elts=[Name(id='NUM_CLASSES', ctx=Load())], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Expected initial priors with shape ({},), got: {}.'), attr='format', ctx=Load()), args=[Name(id='NUM_CLASSES', ctx=Load()), Attribute(value=Name(id='priors', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='log_priors', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='priors', ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[]), attr='log', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='log_priors', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='NUM_CLASSES', ctx=Load())], keywords=[]))]), Return(value=Name(id='log_priors', ctx=Load()))], decorator_list=[]), FunctionDef(name='additive_margin', args=arguments(posonlyargs=[], args=[arg(arg='logits'), arg(arg='labels'), arg(arg='margin')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='margin', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='one_hotBfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros_like', ctx=Load()), args=[Name(id='logits', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='one_hotBfo', ctx=Load()), attr='scatter_', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), attr='long', ctx=Load()), args=[], keywords=[]), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='logits', ctx=Store())], value=BinOp(left=Name(id='logits', ctx=Load()), op=Sub(), right=BinOp(left=Name(id='one_hotBfo', ctx=Load()), op=Mult(), right=Name(id='margin', ctx=Load()))))], orelse=[]), Return(value=Name(id='logits', ctx=Load()))], decorator_list=[]), ClassDef(name='linearclassifier', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Linear', ctx=Load())], keywords=[], body=[FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ˤ̖     ʲ ŗ      ή ¬ɨ  ͂ ÈŁ   ')), Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='set_variance', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ɖ       ')), Assign(targets=[Name(id='hidden', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_variance_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='tensor', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hidden_variance', ctx=Load()), attr='data', ctx=Load()), attr='fill_', ctx=Load()), args=[Name(id='hidden', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='NUM_CLASSES')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='supe_r', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load()), Name(id='NUM_CLASSES', ctx=Load())], keywords=[keyword(arg='bias', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='NUM_CLASSES', ctx=Load())), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_scale'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), body=[AugAssign(target=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), attr='data', ctx=Store()), op=Mult(), value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_scale'), ctx=Load())), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()), body=[AugAssign(target=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()), attr='data', ctx=Store()), op=Mult(), value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_scale'), ctx=Load()))], orelse=[])], orelse=[]), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_variance'), ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_variance_parametrization', ctx=Store())], value=Call(func=Name(id='Parametrization', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='variance_parametrization'), ctx=Load())], keywords=[keyword(arg='center', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='variance_center'), ctx=Load())), keyword(arg='scale', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='variance_scale'), ctx=Load()))])), Assign(targets=[Name(id='initial_variance', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_variance'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='initial_hidden_variance', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_variance_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='initial_variance', ctx=Load())], keywords=[])], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hidden_variance', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='initial_hidden_variance', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='float', ctx=Load()))])], keywords=[keyword(arg='requires_grad', value=UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='freeze_variance'), ctx=Load())))]))], orelse=[])], decorator_list=[]), FunctionDef(name='has_weight', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='sample'), arg(arg='use_bias'), arg(arg='initial_scale'), arg(arg='normalize_weights'), arg(arg='use_variance'), arg(arg='initial_variance'), arg(arg='variance_parametri_zation'), arg(arg='freeze_variance'), arg(arg='variance_center'), arg(arg='variance_s_cale')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=True), Constant(value=1), Constant(value=False), Constant(value=False), Constant(value=1), Constant(value='exp'), Constant(value=False), Constant(value=0), Constant(value=1)]), body=[Expr(value=Constant(value='Get̡ clasģsifier config.\n\nArgŧľs:\n    sample:Ɲ SIf Tru˻Ɛeʹ, saŪmple from distriʂbϩution. Use dis½Ťtributi(oyn mean o΅therwise.\n  c û \x89use_ϥbźias: Whet\u03a2her to use bi˘as in linear layeĽr or not.\n    initial_scale: ςScaleʐ paramĞeters during initiʜaÌÑ\x84lization.\n    nÆȦormalize_wei͋ghtΘsǒ: NormaȲĘlΎi˺ze weigƄhts beforeϊ applΩying.\n ˱   use_variance: Wƨhʓether to add trȁaina#ble Ȫemŏbeddings variance or not.\n    initial_variance:ĸ ƒI´nitial vΨalue of th˨e variance.\n Ĉ ˘  va\\riance_parametrization: Type of ˩varƥiance codi̝nΒg ("exp" ˬor "invlin")˱.\n  ͥƜε  freezɸe_ϾvarǶiance: Don\'ȅt \u0382train variance paramet̡er.\n    v`ari˴anĕce_center: ParamǚƳetriƱzaɌtΫioΒʯn cen_ter.\n    var.ianãce_scale: Parametrization-Ɣ sǎ̤ȳcale.')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='sample'), Name(id='sample', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='use_bias'), Name(id='use_bias', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='initial_scale'), Name(id='initial_scale', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='normalize_weights'), Name(id='normalize_weights', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='use_variance'), Name(id='use_variance', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='initial_variance'), Name(id='initial_variance', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='variance_parametrization'), Name(id='variance_parametri_zation', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='freeze_variance'), Name(id='freeze_variance', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='variance_center'), Name(id='variance_center', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='variance_scale'), Name(id='variance_s_cale', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='PARAMETERS'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample'), ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='embeddings', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='PARAMETERS', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='embeddings', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='PARAMETERS', ctx=Load())], keywords=[]))]), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='normalize_weights'), ctx=Load()), body=[Assign(targets=[Name(id='weight', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), attr='flatten', ctx=Load()), args=[], keywords=[])], keywords=[]))), Assign(targets=[Name(id='bias', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='weight', ctx=Store()), Name(id='bias', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load())], ctx=Load()))]), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='linear', ctx=Load()), args=[Name(id='embeddings', ctx=Load()), Name(id='weight', ctx=Load()), Name(id='bias', ctx=Load())], keywords=[])), Return(value=Name(id='logits', ctx=Load()))], decorator_list=[]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_variance'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics foćr Ϫlogging.\n̳\nVReˡturns:\n    DictionŲary ƶwith fŋloating-point statisticsą vƎalues˗.')), Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='clip_variance', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   Ͳ \x89 Ʒ ')), Assign(targets=[Name(id='max_hidden', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_variance_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='tensor', ctx=Load()), args=[Name(id='max', ctx=Load())], keywords=[])], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hidden_variance', ctx=Load()), attr='data', ctx=Load()), attr='clip_', ctx=Load()), args=[], keywords=[keyword(arg='max', value=Name(id='max_hidden', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_variance_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='hidden_variance', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='     ')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='ArcFaceClassifier', bases=[Name(id='ArcFace', ctx=Load())], keywords=[], body=[FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='        ˩   ƯƸ        ')), Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='PARAMETERS'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value=' ô   ')), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample'), ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='embeddings', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='PARAMETERS', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='embeddings', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='PARAMETERS', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Subscript(value=Call(func=Name(id='LIST', ctx=Load()), args=[Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='embeddings', ctx=Store())], value=Call(func=Attribute(value=Name(id='embeddings', ctx=Load()), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Subscript(value=Attribute(value=Name(id='embeddings', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=IfExp(test=Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='flatten', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='supe_r', ctx=Load()), args=[], keywords=[]), attr='forward', ctx=Load()), args=[Name(id='embeddings', ctx=Load())], keywords=[keyword(arg='target', value=Name(id='labels', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='logits', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=List(elts=[BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load())], ctx=Load()))], ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='has_weight', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sc', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='trainable')]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='s', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[]), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='s', ctx=Load()))), Return(value=Dict(keys=[Constant(value='scale')], values=[Name(id='sc', ctx=Load())]))], decorator_list=[]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='sample'), arg(arg='sc'), arg(arg='margin')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=64.0), Constant(value=0.5)]), body=[Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='sample'), Name(id='sample', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='scale'), Name(id='sc', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='margin'), Name(id='margin', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='NUM_CLASSES')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='  ɟ    Ǟ  ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='distribution', ctx=Load()), attr='is_spherical', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Spherical distrubution is expected.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sc', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='trainable')]), body=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='ones', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[]), orelse=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()))), Expr(value=Call(func=Attribute(value=Call(func=Name(id='supe_r', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load()), Name(id='NUM_CLASSES', ctx=Load())], keywords=[keyword(arg='m', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='margin'), ctx=Load())), keyword(arg='s', value=Name(id='sc', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='NUM_CLASSES', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='CosFaceClassifier', bases=[Name(id='CosFace', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Cɍȳoˤsʲ!ɸɊĲF\x82ȊƋacǋegϰϝ ΨclϷassiō̰ficȮa4tion he̯aΘ\x94dϥ ȚȨʡwith̪ trȇ¨ainabΓlϤϔe\x8cȼ Ȩt˨¨γargetʤ EcxĿȭ÷lωƜasses· cʭȐe\x9bnƤtʡ͖erʆs.\n\nA`rÁgsͥΖƪ:\n   Ͱ ƙd[istribut\x7fʁi\x99ǗŪonΛ: DÍi̵ȶstɎriĽbųutiŶon͛ uƝĎϵǴωseˤd° in /Ųthe mo[dp̟̣eȐl.\n  Ϡ  nuĜƐʁΠmȨǽ̽_ǚǘȟcl\x84aȦsseȣͪs: Nu͖ȵɆmb͈erͰǘ ʈofʹ͉ oȋuơtpu˛π̾tϟ Åˡ\u038dʇclɊƸa͆sseés.\n   ɉ ˗pŎήrXioĬrs Ǡ(uƏnuseǲzd)˟: ˴ǃPrͼeco͵ȆmpǓěuýted zclasŽì̴́s˨̩ prχiɕ̴͂Ůoηãrsɨ. PrΏioQ̦r͜sĹʸ ƭcaĘǠnǾȉ be learЀnČedͣ onĖ-#lķiƨόϒǔnʙeiȪ Êif nȿoǎʒt pro²Ɯˊv˰i̬dedɰ.\n\n\x8dInpɀuts:\n  Ȃ͓ uì -İ p͘aŐĝramÑ\x8cȻeter×Γíǀs:ʷ Diɳ̛sĢțriƩbuǢtio.ɦn Rpar˱ame͟ʹětóerΨȘs ̐ΟȼwÎi̋th ʿͤɥƐshapņKƊe \x95(ɶ..ΜŇ.ϴ,ο K).\n̄ͳ͋ \x97 ɡ  ˏ-ʹεŻ labńϮel͆äs: #If̻ǯ pr;ovideŇd, useΞǈ̧ÃĩĮdǶŅ ͵for loĹ͐git͂ɓʐ åɜcorrzeȝctio\x83ͪĂn.ƪ ĄCompuÊtzɑe͑ ¨ϫ͟͟cosÆi\x8bÑnƏeɧ otČCherʞwiːsǿeə.ŭ\n  ǄÚ\x9bHȣ  - êϠ˂Ʃǟs˧c%oręºķer: χUnuQȢse¤̛ͮdß.\n\n϶OʝuϿ϶tpuċtεǃķ¼Ɯ0s:\x80\nɌĻ    Ƒ- PˊlϪo\x92gψits: Clȋa̡Άssǧͼ loĥļgiΎƭts w>itͯhȷ shape ą(..p˕ħ., C)̫ƺ.̡ŏ\x8d')), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="CoɜmpϷϯêutɣeπ¨Ϡ usŢeɱɈ̯έf͔ͯɢu˂Ňlʆ˃ ͞϶s'tatisti%˰˪Ėʐcs4 fʫɯoεr˖ ˈl˧oǈgginȿȃȎϏ̀šg.Ͳ\n\nRe˙turʀ¦nt͓sϔ:ʧ\n  ɜȲɀϺ  DicȔtˡʣiΗʹͱʨonͣƋˮĻk˓Θarϴy w\u0382i«̿thĢa fsloatÛɫ˜iϳʖǼƺn̗g-˧p̖oiɕn\x8bt stǿatistiücςƬCs v\x84alÑʠ̷uesʠ.ώ")), Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="   'Ͷ  ,   W  Ɩǂ  Ŏ  ħ")), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='NUM_CLASSES')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='distribution', ctx=Load()), attr='is_spherical', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Spherical distrubution is expected.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='supe_r', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load()), Name(id='NUM_CLASSES', ctx=Load())], keywords=[keyword(arg='m', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='margin'), ctx=Load())), keyword(arg='s', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='NUM_CLASSES', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='sc'), arg(arg='margin'), arg(arg='symmetric')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=64.0), Constant(value=0.35), Constant(value=False)]), body=[Expr(value=Constant(value='Get claÁsɧĤsifiȾertɽϚ con;fϭig.\n\nAeArgĪs:\n    scale: Ouʅtpχut WscalȄeǄ.\n    marginɷ: CosFace margin.\n    symmeŒǳt˅ric̃: If true, add maɾrgin to n\x80egatives (Šusʅefuɿl fƚ°or Ɗ͵ǠProxǬyʔ-Anchoƪr loɂ̷sŖs).')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='scale'), Name(id='sc', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='margin'), Name(id='margin', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='symmetric'), Name(id='symmetric', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  Ȟ   ɽ          ')), Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ϕ        ͈        ς    ')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_weight', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ʧ  Ϝ  Ʉ  ŪǓ̖\x86  ʧ   ')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='PARAMETERS'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='   ď ')), Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Subscript(value=Call(func=Name(id='LIST', ctx=Load()), args=[Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='embeddings', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='PARAMETERS', ctx=Load())], keywords=[])), Assign(targets=[Name(id='embeddings', ctx=Store())], value=Call(func=Attribute(value=Name(id='embeddings', ctx=Load()), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Subscript(value=Attribute(value=Name(id='embeddings', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=IfExp(test=Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='flatten', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='supe_r', ctx=Load()), args=[], keywords=[]), attr='forward', ctx=Load()), args=[Name(id='embeddings', ctx=Load())], keywords=[keyword(arg='target', value=Name(id='labels', ctx=Load()))])), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='symmetric'), ctx=Load()), body=[AugAssign(target=Name(id='logits', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=Constant(value=0.5), op=Mult(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='margin'), ctx=Load())), op=Mult(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load())))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='logits', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=List(elts=[BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load())], ctx=Load()))], ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='loglikeclassifier', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ǌˌContainsÕ Εtaɔrget˝ Τɒc˕enětroi̵ds 5?a͡nd pϓerfo˔rms" loǡg likƩƋ͢el\xa0iÈho>od estÄiǒm$ationǹ.̯b\n\nLĎaϪyer ̑caèίn add prĨior c͚orrecl\xa0tioȪn ³i\u0379nĘ dɢåiff˂erDŚeĎntψ̚ forms˜ν. ¤ɯ̴ˉIáf "pεr˛etraineΞd"\nis ȴused>, log priors froǊǢm tɑra˦̈iʈnˮi\\ng set are ad/dedȹ Ȯt͊ϟo ʓlogȵitǮʁs.ͦ If\nƠ"trainča͝vbleϏǱ" ʽis used, biɴas ΥvɷeƹņcΟtor iɳ˷s tra³ļǑ³ȁϖiɇned ¤f̲or output lǄo˽g˦itǴÒsʙȝͦ.ď B\x8ey\ndefa͟Ɏult priorQ correction is turned o\x7fff.\n\nAr͚gs:\n6  έ Ɉ\x92 distrɜḯb˃u˟Ħtioɡan: DɏistrLibuΗtion used Ƅ²in theǾ model.ŘƔğ\n ²j̸ ơ\x9d Β num_clŪasϚs̓es: Number of oêut9put ʸclasses.\n̾  ˧ϊ ə priorįsĥ̊: ƮPrecoĻm$p˳͓àuteɱƵd f̞clasƸAs p̤rziorϴs. Priokr\u0382s cȷan bɵe learn͈eƦͿd ΚƘo.n-¾Ȏlinɣe iŮΚf ċnot pro˴vgideğ$d.\nĎ͞\nInΖputs:˷ˆυȨ\n ϋȔ   - ǯ͛paraƻ\x8c\x98Ùmeters:Ɇ Dˑis¸tǢribͪ\'uϋtio͚n ǵparame\x97tΕersϰ͌Ŵ wˀiªth ɺshapeʵ (...Ś, Kζ ).\n  ǀ  - lab͖eȪlś:Τ PoïǓsitiveĪ labύżýeφlßʘǤsŧ used for margDiρn with Ŭƪshape ƫ\x8d@(...).\n    ǣ- scorerϣ:Ŋ \x97Unused.\nš˱\nγOutpϯuεtɞŝs:ʅ\n ǻ  ͅϒÓ -̹ logiţts: ȟClass logiɜÌts ǰwith͇ shŘape (.ę̡..ű, Că9).')), Assign(targets=[Name(id='TARGET_DISTRIBUTIONS', ctx=Store())], value=Dict(keys=[Constant(value='gmm'), Constant(value='vmf')], values=[Name(id='NormalDistribution', ctx=Load()), Name(id='VMFDistribution', ctx=Load())])), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ̰ ʝ́   ą  Ȍ` ɻà ψjsªϭ  Ʋ')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='confidence_s', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='confidences', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='target_confidence/mean'), ctx=Store())], value=Call(func=Attribute(value=Name(id='confidence_s', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='target_confidence/std'), ctx=Store())], value=Call(func=Attribute(value=Name(id='confidence_s', ctx=Load()), attr='std', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='NUM_CLASSES')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='supe_r', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='NUM_CLASSES', ctx=Load())), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_target_distribution', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='TARGET_DISTRIBUTIONS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution'), ctx=Load()), ctx=Load()), args=[], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution_params'), ctx=Load()))])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='dim', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Predicted and target embeddings size mismatch: {} != {}.'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='dim', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='is_spherical', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='distribution', ctx=Load()), attr='is_spherical', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Constant(value='Predicted and target embeddings normalization mismatch')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='FloatTensor', ctx=Load()), args=[Name(id='NUM_CLASSES', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='num_parameters', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='FloatTensor', ctx=Load()), args=[Name(id='NUM_CLASSES', ctx=Load()), Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load())], keywords=[])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='init', ctx=Load()), attr='xavier_uniform_', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='priors'), ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value=None), Constant(value='none')], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Store())], value=Constant(value=None))], orelse=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='no_grad', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='log_priors', ctx=Store())], value=Call(func=Name(id='get_log_priors', ctx=Load()), args=[Name(id='NUM_CLASSES', ctx=Load()), Name(id='priors', ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='priors'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='pretrained')]), body=[If(test=Compare(left=Name(id='priors', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Need dataset priors for pretrained mode')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='trai_nable', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='priors'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='trainable')]), body=[Assign(targets=[Name(id='trai_nable', ctx=Store())], value=Constant(value=True))], orelse=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknown priors mode: {}.'), attr='format', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='priors'), ctx=Load())], keywords=[])], keywords=[]))])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Name(id='log_priors', ctx=Load())], keywords=[keyword(arg='requires_grad', value=Name(id='trai_nable', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='has_weight', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  P ǦȨŵ ʢGǴ˝Ɔ< ͝ŧ  ͯ  a  ǿ  ľɅÙ     ')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='priors'), arg(arg='margin'), arg(arg='target_distribution'), arg(arg='target_distribution_params')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0), Constant(value=None), Constant(value=None)]), body=[Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='priors'), Name(id='priors', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='margin'), Name(id='margin', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='target_distribution'), Name(id='target_distribution', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='target_distribution_params'), Name(id='target_distribution_params', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='PARAMETERS'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value=' ̈́    ɇ   ˗ș\x9f \x9b  Ŷȵº ˦̣   Ȩ ̥̬ˀί®    ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Parameters and labels shape mismatch: {}, {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='shape', ctx=Load()), Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Subscript(value=Call(func=Name(id='LIST', ctx=Load()), args=[Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='targets', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=BinOp(left=List(elts=[Constant(value=1)], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dim_prefix', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='LIST', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), attr='shape', ctx=Load())], keywords=[])), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution'), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='PARAMETERS', ctx=Store())], value=Call(func=Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logpdf', ctx=Load()), args=[Name(id='PARAMETERS', ctx=Load()), Name(id='targets', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='embeddings', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='PARAMETERS', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='logpdf', ctx=Load()), args=[Name(id='targets', ctx=Load()), Name(id='embeddings', ctx=Load())], keywords=[]))]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='log_priors', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()), Constant(value=0)], keywords=[]))), Assign(targets=[Name(id='logits', ctx=Store())], value=BinOp(left=Name(id='log_priors', ctx=Load()), op=Add(), right=Name(id='logits', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Name(id='additive_margin', ctx=Load()), args=[Name(id='logits', ctx=Load()), Name(id='labels', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='margin'), ctx=Load())], keywords=[])), Return(value=Name(id='logits', ctx=Load()))], decorator_list=[]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='VMFClassifier', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ʋ         Ϲʽ͢   ½ Eǥ ˲˯   ļ ó  ')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='    ȼò  ̬TŢ')), Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='scale')], values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_scale', ctx=Load()), args=[], keywords=[])])), If(test=UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load())), body=[Assign(targets=[Name(id='target_hidden_ik', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load())], keywords=[]), slice=Constant(value=2), ctx=Load()), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='target_sqrt_ik', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='target_hidden_ik', ctx=Load())], keywords=[]), attr='sqrt', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='target_sqrt_inv_k/mean'), ctx=Store())], value=Call(func=Attribute(value=Name(id='target_sqrt_ik', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='target_sqrt_inv_k/std'), ctx=Store())], value=Call(func=Attribute(value=Name(id='target_sqrt_ik', ctx=Load()), attr='std', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='NUM_CLASSES')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='distribution', ctx=Load()), Name(id='VMFDistribution', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Expected vMF distribution for vMF loss.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='supe_r', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='NUM_CLASSES', ctx=Load())), Assign(targets=[Name(id='lSK', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='kappa_confidence'), ctx=Load())), Assign(targets=[Name(id='dim', ctx=Store())], value=Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load())), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load()), body=[Assign(targets=[Name(id='means', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='randn', ctx=Load()), args=[Name(id='NUM_CLASSES', ctx=Load()), Name(id='dim', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='lSK', ctx=Load())), op=Div(), right=BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='lSK', ctx=Load()), op=Mult(), right=Name(id='lSK', ctx=Load())))), op=Mult(), right=BinOp(left=Name(id='dim', ctx=Load()), op=Sub(), right=Constant(value=1))), op=Div(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='dim', ctx=Load())], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Name(id='means', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='means', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='randn', ctx=Load()), args=[Name(id='NUM_CLASSES', ctx=Load()), Constant(value=1), Name(id='dim', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='lSK', ctx=Load())), op=Div(), right=BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='lSK', ctx=Load()), op=Mult(), right=Name(id='lSK', ctx=Load())))), op=Mult(), right=BinOp(left=Name(id='dim', ctx=Load()), op=Sub(), right=Constant(value=1))), op=Div(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='dim', ctx=Load())], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='distribution', ctx=Load()), attr='join_parameters', ctx=Load()), args=[], keywords=[keyword(arg='log_probs', value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='NUM_CLASSES', ctx=Load()), Constant(value=1)], keywords=[])), keyword(arg='means', value=Name(id='means', ctx=Load())), keyword(arg='hidden_ik', value=Call(func=Attribute(value=Attribute(value=Name(id='distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[Name(id='means', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='keepdim', value=Constant(value=True))]))], keywords=[]))])], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_scale', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='trainable')]), body=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[], ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_log_scale'), ctx=Load())], keywords=[])], keywords=[]), orelse=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='log', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='has_weight', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ɩ  ˔ŏ ɐ     ͆ Ͷ\x94Ţçǩ     ')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_vmf_logmls', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='means1'), arg(arg='hidden_ik1'), arg(arg='means2'), arg(arg='hidden_ik2gJ')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='k1', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik1', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='k2', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik2gJ', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='k1', ctx=Load()), op=Mult(), right=Name(id='means1', ctx=Load())), op=Add(), right=BinOp(left=Name(id='k2', ctx=Load()), op=Mult(), right=Name(id='means2', ctx=Load())))], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='keepdim', value=Constant(value=True))])), Assign(targets=[Name(id='logc1', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='k1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='logc2', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='k2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='logch', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=BinOp(left=BinOp(left=Name(id='logc1', ctx=Load()), op=Add(), right=Name(id='logc2', ctx=Load())), op=Sub(), right=Name(id='logch', ctx=Load())), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], decorator_list=[]), FunctionDef(name='kappa_confidence', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='̣°Get \u0380\x89lͅa]4m̾\x80bdÂƮa Ĺpa\x8aĠr(ʅa͝me\x80t´ĽeΣrė˽ ɄoțÒf vàMF-͟loss.ʋ')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='kappa_confidence'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='PARAMETERS'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='           ω         ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Parameters and labels shape mismatch: {}, {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='shape', ctx=Load()), Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dtype', ctx=Store())], value=Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='dtype', ctx=Load())), Assign(targets=[Name(id='device', ctx=Store())], value=Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='device', ctx=Load())), Assign(targets=[Name(id='B', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='PARAMETERS', ctx=Load())], keywords=[])), Assign(targets=[Name(id='k', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample_size'), ctx=Load())), Assign(targets=[Name(id='c', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load())), Assign(targets=[Name(id='sc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_scale', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='sample', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='PARAMETERS', ctx=Load()), BinOp(left=Call(func=Name(id='LIST', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Name(id='k', ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='sample', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Name(id='sample', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load()))]), body=[Assign(targets=[Name(id='sampl_e_parameters', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='join_parameters', ctx=Load()), args=[], keywords=[keyword(arg='log_probs', value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='B', ctx=Load()), Name(id='k', ctx=Load()), Constant(value=1)], keywords=[keyword(arg='dtype', value=Name(id='dtype', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])), keyword(arg='means', value=Call(func=Attribute(value=Name(id='sample', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), keyword(arg='hidden_ik', value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='ones', ctx=Load()), args=[Name(id='B', ctx=Load()), Name(id='k', ctx=Load()), Constant(value=1), Constant(value=1)], keywords=[keyword(arg='dtype', value=Name(id='dtype', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))]), op=Div(), right=Name(id='sc', ctx=Load()))], keywords=[]))])), Assign(targets=[Name(id='logmlsWT', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_logmls', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sampl_e_parameters', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='B', ctx=Load()), Name(id='k', ctx=Load()), Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), attr='reshape', ctx=Load()), args=[Constant(value=1), Constant(value=1), Name(id='c', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])], keywords=[])), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='PARAMETERS', ctx=Load())], keywords=[])), Assign(targets=[Name(id='target_means', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), slice=Name(id='labels', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='neg_lognum', ctx=Store())], value=BinOp(left=Name(id='sc', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=BinOp(left=Name(id='means', ctx=Load()), op=Mult(), right=Name(id='target_means', ctx=Load())), attr='sum', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))]))), Assign(targets=[Name(id='neg_logden', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Name(id='logmlsWT', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=2))]), op=Sub(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='sc', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='losses', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='neg_logden', ctx=Load()), attr='mean', ctx=Load()), args=[Constant(value=1)], keywords=[]), op=Sub(), right=Name(id='neg_lognum', ctx=Load()))), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='empty', ctx=Load()), args=[Name(id='B', ctx=Load()), Name(id='c', ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='dtype', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='logits', ctx=Load()), attr='scatter_', ctx=Load()), args=[Constant(value=1), Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='B', ctx=Load()), Constant(value=1)], keywords=[]), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='losses', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='B', ctx=Load()), Constant(value=1)], keywords=[]))], keywords=[]))], orelse=[If(test=Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assert(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load())), Assign(targets=[Name(id='nweight', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='PARAMETERS', ctx=Load())], keywords=[])), Assign(targets=[Name(id='neg_lognum', ctx=Store())], value=BinOp(left=Name(id='sc', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=BinOp(left=Name(id='means', ctx=Load()), op=Mult(), right=Subscript(value=Name(id='nweight', ctx=Load()), slice=Name(id='labels', ctx=Load()), ctx=Load())), attr='sum', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))]))), Assign(targets=[Name(id='products', ctx=Store())], value=BinOp(left=Name(id='sc', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=BinOp(left=Subscript(value=Name(id='nweight', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load()), op=Mult(), right=Subscript(value=Name(id='sample', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load())), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))), Assign(targets=[Name(id='neg_logden', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Name(id='products', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=2))])), Assign(targets=[Name(id='losses', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='neg_logden', ctx=Load()), attr='mean', ctx=Load()), args=[Constant(value=1)], keywords=[]), op=Sub(), right=Name(id='neg_lognum', ctx=Load()))), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='empty', ctx=Load()), args=[Name(id='B', ctx=Load()), Name(id='c', ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='dtype', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='logits', ctx=Load()), attr='scatter_', ctx=Load()), args=[Constant(value=1), Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='B', ctx=Load()), Constant(value=1)], keywords=[]), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='losses', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='B', ctx=Load()), Constant(value=1)], keywords=[]))], keywords=[]))], orelse=[If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load()), body=[Assign(targets=[Name(id='target', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='target', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='tk', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='target', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='cosines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='linear', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sample', ctx=Load()), attr='reshape', ctx=Load()), args=[BinOp(left=Name(id='B', ctx=Load()), op=Mult(), right=Name(id='k', ctx=Load())), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), Call(func=Attribute(value=Name(id='target', ctx=Load()), attr='reshape', ctx=Load()), args=[BinOp(left=Name(id='c', ctx=Load()), op=Mult(), right=Name(id='tk', ctx=Load())), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])], keywords=[])), Assign(targets=[Name(id='cosines', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cosines', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='B', ctx=Load()), Name(id='k', ctx=Load()), Name(id='c', ctx=Load()), Name(id='tk', ctx=Load())], keywords=[]), attr='permute', ctx=Load()), args=[Constant(value=0), Constant(value=2), Constant(value=1), Constant(value=3)], keywords=[]), attr='reshape', ctx=Load()), args=[Name(id='B', ctx=Load()), Name(id='c', ctx=Load()), BinOp(left=Name(id='k', ctx=Load()), op=Mult(), right=Name(id='tk', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='scores', ctx=Store())], value=BinOp(left=Name(id='sc', ctx=Load()), op=Mult(), right=Name(id='cosines', ctx=Load()))), Assign(targets=[Name(id='probs', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='softmax', ctx=Load()), args=[Name(id='scores', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))]), attr='mean', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='probs', ctx=Load()), attr='log', ctx=Load()), args=[], keywords=[]))])]), Return(value=Name(id='logits', ctx=Load()))], decorator_list=[]), FunctionDef(name='_logmls', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='approximate_logc'), ctx=Load())), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logmls', ctx=Load()), args=[Name(id='parameters1', ctx=Load()), Name(id='parameters2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='log_probs1', ctx=Store()), Name(id='means1', ctx=Store()), Name(id='hidden_ik1', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='log_probs2', ctx=Store()), Name(id='means2', ctx=Store()), Name(id='hidden_ik2gJ', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pairwise_logmls', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logmls', ctx=Load()), args=[], keywords=[keyword(arg='means1', value=Subscript(value=Name(id='means1', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load())), keyword(arg='hidden_ik1', value=Subscript(value=Name(id='hidden_ik1', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load())), keyword(arg='means2', value=Subscript(value=Name(id='means2', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load())), keyword(arg='hidden_ik2', value=Subscript(value=Name(id='hidden_ik2gJ', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load()))])), Assign(targets=[Name(id='pairwise_logprobsgwMqH', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='log_probs1', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(), Constant(value=None)], ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='log_probs2', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None), Slice()], ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Subscript(value=Call(func=Name(id='LIST', ctx=Load()), args=[Attribute(value=Name(id='pairwise_logmls', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load())), Assign(targets=[Name(id='logmlsWT', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Call(func=Attribute(value=BinOp(left=Name(id='pairwise_logprobsgwMqH', ctx=Load()), op=Add(), right=Name(id='pairwise_logmls', ctx=Load())), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())), ctx=Load())], keywords=[])], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Return(value=Name(id='logmlsWT', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_scale', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  ÒƢ      n    ')), Return(value=IfExp(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='trainable')]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_scale', ctx=Load()), attr='exp', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='exp', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='log_scale', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='sc'), arg(arg='initial_log_scale'), arg(arg='kappa_confidence'), arg(arg='sample__size'), arg(arg='approximate_logc'), arg(arg='deterministic_target')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='trainable'), Constant(value=2.773), Constant(value=0.7), Constant(value=10), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='Get clŤčařss˿ifrϐiʬ̇er Ɖcͧonύsfˈi>ϭg.\n\nA̢rgs:ï\n˿ ˼¡ ǌ̠  scaφʅle:ͣf Output scalˏe \x9b(number oȏr "tȑrƒŃżainaʓȨǛb=ëleĻ"ǹǐ)ΰʹ͢.\n    initʌial_logǲ_sĜcalˠeʟ: InitƑʁial logarithm˛ ěofͼ scale =valueɞ ȲwƗhǓenǳ Čϒscalͯ͡e ̰˓is ϏtɶƁra2inϑabl˕̭ϼe.\n Ǖ ̅  əȵkľȀaŐppŽa_confidνence: ̪Hȼy̰̐perŶpɩarameteͼr used f0oÛr ̙ǿinit̨`\x8aƉialiΖĤzÇation and scorinŀg.\n    sa\x93Ȁmpħle_size: ɄNΪuÞmbeɞr oáf sǐamplesÍ fδoŕ Y¬probabiϢliÇty eʤasιtiĨmation.\n    ʣaΎpproxiϐmatόer_˕Ȣlogc: Θ1UsŁke ͇ʄapäɇprSK˖oximaΘtioǍnW f\x96͉rom ̅t]he Βpaȏ\x9dϣVper to ˻spǷeedup tr\x82ΝͬaƃiniΘħng.Ȫɳ\n   ȋ determŭinisȽtic_tÁɯarge͒tı: Use a Κţvarίiæʕati͓on of vM&F-lϮϬossɨç wńɍɓɜithŅƽ deteɬrmin;Aiũstiϙc targȅɤéũt e˞mbeddinȀ9gsπ.')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='scale'), Name(id='sc', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='initial_log_scale'), Name(id='initial_log_scale', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='kappa_confidence'), Name(id='kappa_confidence', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='sample_size'), Name(id='sample__size', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='approximate_logc'), Name(id='approximate_logc', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='deterministic_target'), Name(id='deterministic_target', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_vmf_logc', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='k')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dim', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='dim', ctx=Load())), Assign(targets=[Name(id='nm14', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='dim', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Div(), right=Constant(value=4))), Assign(targets=[Name(id='nm12', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='dim', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Div(), right=Constant(value=2))), Assign(targets=[Name(id='np12', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='dim', ctx=Load()), op=Add(), right=Constant(value=1)), op=Div(), right=Constant(value=2))), Assign(targets=[Name(id='nm12sq', ctx=Store())], value=BinOp(left=Name(id='nm12', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='np12sq', ctx=Store())], value=BinOp(left=Name(id='np12', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='ksq', ctx=Store())], value=BinOp(left=Name(id='k', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='sqrtm', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='nm12sq', ctx=Load()), op=Add(), right=Name(id='ksq', ctx=Load())), attr='sqrt', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sqrtp', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='np12sq', ctx=Load()), op=Add(), right=Name(id='ksq', ctx=Load())), attr='sqrt', ctx=Load()), args=[], keywords=[])), Return(value=BinOp(left=BinOp(left=Name(id='nm14', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Attribute(value=BinOp(left=Name(id='nm12', ctx=Load()), op=Add(), right=Name(id='sqrtm', ctx=Load())), attr='log', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=BinOp(left=Name(id='nm12', ctx=Load()), op=Add(), right=Name(id='sqrtp', ctx=Load())), attr='log', ctx=Load()), args=[], keywords=[]))), op=Sub(), right=BinOp(left=Constant(value=0.5), op=Mult(), right=BinOp(left=Name(id='sqrtm', ctx=Load()), op=Add(), right=Name(id='sqrtp', ctx=Load())))))], decorator_list=[]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='SPEClassifier', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ExtǫractiƖʆäʌ̖ˮϿs ˎΏ˻ƲëKtargetʎȍ cǈèʑnʧt\x84roi£ds ȴăfroģm (Ĳeʈlȸeƃmƨ̹ʻe͙ntČɦsɛ ĕof theΤ söam~e_ʵ ƷbảǷηtcìȐɈ̐Ϲ̵hĕ ʊΈ\x93anƤŒdƕ compute_˙s Stochǻastʋic Proɾtoɔέtypɼeɝ Ϛ͖ɩEwmÐb͇edd̀ˍʹñʖiɰĤngsǮ ńG\u0378logƈits͟.\n\nSee "ϒˋ΅uStocΉɠhasşȌtiĶcķ˔ ȷPrĲototƮyēǻpeă EmbƯed˾di\x86ŠngϡÀˇ¥s." ñɀ(20191ȩ) ͔f\x86oϬǍȰ˿Ȱτr dŃeīþtaɶilsηĞɧ.\nɾɭ̀\nAΫrgs_8̆:\n ɂΗ \x8c̸ŸΓ  di̩stͩriΤͭbĦutiͮoʡίn: DistribǺɅʲϭÂO̺ȄΙ[˟ǔutioşȪȵn uƧsěĜe̛Űdŏ̀ȍƱ\x8a ɻinʢV Ƥtɶhψçɻe ΕmǤodάƲe4lɶ.̽ƹ)\n ɳ ΅  nuŽm_clasȉsƄǒe\x88sôs:àˤ ȄNuǡ̻ľˑmbǱer{: o̙f outįapÙu\x9fĢňũt Õcl˞\u03a2aasse̖s.\n\nIn\x9cʵp$utsƘ:\n Ή  %ɚƊʭ0ɯŜ® ΊʓjƟ- parame>ψtˏʃƪăľeșr×sˌ: DisƔt_rǶǰib˩Ǖutionʻ paramύe\x8fŒİteírsǺV wi˼tQźh s˦IH$hʖape̸ (.ͩ°..,Ż ΔK)l.\n   ΥƁĦ - la¦ɿbûeÑls: Pos˄Ʒitive]ǚσąƪ labeǗls u̐¾Āsɬ°Ȋže̘ͤ³dʍ forűΆɤ˧ ϗɶmʿ̨argiš˘Ɂn ͡dͮw\x96ith s̵̥ʊȃhĖapƍĵ̂e (.\x84ɭ.ǩ.Ϸ).Υ\nȔş  \x82 ̵ - sǪƃco\u03a2rƒeȝr: Uªˍƕ̨nψuɈǘsed.\x85ʄΞ\nϋʧ\nOutp-uίtsɠƴ:Κ\nƥ    -ɖϘɰ ϲlogḯtŖ8s: C:έlʺassĵχΞ̺ͯ; lFogits wůióǇtʞh sʓhʭǕapƜe Ŝ{(΄Ɗ...¹ș, \x9dCˀƟ)țʄ.ʜΰµ̃Ʀ')), Assign(targets=[Name(id='LOG_EPS', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=100.0))), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='train_epsilon'), arg(arg='sample__size')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=16)]), body=[Expr(value=Constant(value="Geˍt ͖clasƋs̼ifierþ cϢonfigδ.\n\nArgs$:\n   å traiϞn_̕ĲίepsiϬϹloŜn:̆ Whǟether Ǌto uƻϯse ͌ɣt̺rainable additiðon t4o tΞàhϴe variance or not.Ͽϲ\n  í  sϓampl̦e_sizeǱ:ǱȂʹ ʠNųϑuĔmber of sͤampłlǁesɢ \u03a2usƀed for Ǿintɂegral evϏaΫluation\u0381.Ȓǥ Z\u038bȢeÍro ˧Ǳto disab͖l¡e sɢampɜlʪǽ̵isðng and kuse dÖ'istributiŇon˶ mean.")), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='train_epsilon'), Name(id='train_epsilon', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='sample_size'), Name(id='sample__size', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_compute_logits', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='query'), arg(arg='support')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Comϲdpȶute SϱPE ˯logiɦƹȝ7tsê.Ǌ\n\nArgs:\n  \x84  - queβryŅÿ:ú Querϖie³s with Üshaόɨp͊e̟ (B, L, P) t͝o comput̉e logiǯts͒ f̙or.\nK    - Ʋsupɫ¤por\x87t: Eƕ̶mbeddings CuseȆd for pƋrąͫötotype comɯ¸puĤtΟaÊΟtiŔon with shajpe Ƽ(ŜB', \x92L, ƃPʚ).ħ\nĪReturns:\x8c\n    }ɘSPEΉ logits ǒŵwith ʢshaħ˙peÞ̈́ (BΘ, ϹLȶ)ȹ.")), Assign(targets=[Name(id='prototypes', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_prototypes', ctx=Load()), args=[Name(id='support', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='PROD_DISTRIBUTION', ctx=Store()), Name(id='prod_parameters', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='pdf_product', ctx=Load()), args=[Subscript(value=Name(id='query', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load()), Subscript(value=Name(id='prototypes', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample_size'), ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Tuple(elts=[Name(id='B', ctx=Store()), Name(id='lSK', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='query', ctx=Load()), attr='shape', ctx=Load())), Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample_size'), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='sample', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='PROD_DISTRIBUTION', ctx=Load()), attr='sample', ctx=Load()), args=[Subscript(value=Name(id='prod_parameters', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load()), List(elts=[Name(id='B', ctx=Load()), Name(id='lSK', ctx=Load()), Name(id='s', ctx=Load()), Name(id='lSK', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='sample', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='PROD_DISTRIBUTION', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='prod_parameters', ctx=Load())], keywords=[]), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=3))], keywords=[]))]), Assign(targets=[Name(id='logmlsWT', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logmls', ctx=Load()), args=[Subscript(value=Name(id='query', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load()), Subscript(value=Name(id='prototypes', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='target_logpdfs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logpdf', ctx=Load()), args=[Subscript(value=Name(id='prototypes', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()), Name(id='sample', ctx=Load())], keywords=[])), Assign(targets=[Name(id='logdenum', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Name(id='target_logpdfs', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='keepdim', value=Constant(value=True))])), Assign(targets=[Name(id='logits', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='logmlsWT', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='logdenum', ctx=Load()))], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=2)))])), op=Sub(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='log', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))), Return(value=Name(id='logits', ctx=Load()))], decorator_list=[]), FunctionDef(name='has_weight', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='NUM_CLASSES')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='distribution', ctx=Load()), Name(id='NormalDistribution', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Expected GMM distribution for SPE loss.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='supe_r', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='NUM_CLASSES', ctx=Load())), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='train_epsilon'), ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hidden_epsilon', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[], ctx=Load()), BinOp(left=Constant(value=0.01), op=Pow(), right=BinOp(left=Constant(value=2), op=Div(), right=Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load())))], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='float', ctx=Load()))])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='˼ m ˹şɫ  ɔΦ ǈ ͽ̠   ĥ ʔĝϤ   Ȥ    ')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="ͻ ǜ¹ŝ ɨ   ª ɾ̬ Γ'  Ɨ   ̭  ")), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='train_epsilon'), ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hidden_epsilon', ctx=Load()), attr='exp', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Constant(value=0))])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ϗ        ɰ    ')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='train_epsilon'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_compute_prototypes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='embeddings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='embeddings', ctx=Load()), attr='ndim', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=3)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Expected grouped embeddings with shape (B, L, P).')], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='logprobs', ctx=Store()), Name(id='mean', ctx=Store()), Name(id='hidden_varvp', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='embeddings', ctx=Load())], keywords=[])), Assign(targets=[Name(id='v_ar', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='variance', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_varvp', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='new_var', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=BinOp(left=Constant(value=1), op=Div(), right=Name(id='v_ar', ctx=Load())), attr='sum', ctx=Load()), args=[Constant(value=0)], keywords=[]))), Assign(targets=[Name(id='new_mean', ctx=Store())], value=BinOp(left=Name(id='new_var', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=BinOp(left=Name(id='mean', ctx=Load()), op=Div(), right=Name(id='v_ar', ctx=Load())), attr='sum', ctx=Load()), args=[Constant(value=0)], keywords=[]))), Assign(targets=[Name(id='new_hidden_var', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='variance', ctx=Load()), op=Add(), right=Name(id='new_var', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='prototypes', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='join_parameters', ctx=Load()), args=[Subscript(value=Name(id='logprobs', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='new_mean', ctx=Load()), Name(id='new_hidden_var', ctx=Load())], keywords=[])), Return(value=Name(id='prototypes', ctx=Load()))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='PARAMETERS'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='         ʽ  ǵ    ')), If(test=Compare(left=Name(id='labels', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Starred(value=BinOp(left=Call(func=Name(id='LIST', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load())], ctx=Load())), ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='dtype', ctx=Load())), keyword(arg='device', value=Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='device', ctx=Load()))]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='ndim', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Expected embeddings with shape (B, N), got: {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Parameters and labels shape mismatch: {}, {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='shape', ctx=Load()), Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='by_class', ctx=Store()), Name(id='order', ctx=Store()), Name(id='LABEL_MAP', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_group_by_class', ctx=Load()), args=[Name(id='PARAMETERS', ctx=Load()), Name(id='labels', ctx=Load())], keywords=[])), Assign(targets=[Name(id='k', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='by_class', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))), Assign(targets=[Name(id='logits1', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_logits', ctx=Load()), args=[Subscript(value=Name(id='by_class', ctx=Load()), slice=Slice(upper=Name(id='k', ctx=Load())), ctx=Load()), Subscript(value=Name(id='by_class', ctx=Load()), slice=Slice(lower=Name(id='k', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='logits2', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_logits', ctx=Load()), args=[Subscript(value=Name(id='by_class', ctx=Load()), slice=Slice(lower=Name(id='k', ctx=Load())), ctx=Load()), Subscript(value=Name(id='by_class', ctx=Load()), slice=Slice(upper=Name(id='k', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[List(elts=[Name(id='logits1', ctx=Load()), Name(id='logits2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=0))])), Assign(targets=[Name(id='all_logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[Subscript(value=Attribute(value=Name(id='logits', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Attribute(value=Name(id='logits', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load())], ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='LOG_EPS', ctx=Load())], keywords=[keyword(arg='device', value=Attribute(value=Name(id='logits', ctx=Load()), attr='device', ctx=Load())), keyword(arg='dtype', value=Attribute(value=Name(id='logits', ctx=Load()), attr='dtype', ctx=Load()))])), Assign(targets=[Name(id='indices', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='LABEL_MAP', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()), attr='tile', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='logits', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Attribute(value=Name(id='logits', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='all_logits', ctx=Load()), attr='scatter_', ctx=Load()), args=[Constant(value=2), Name(id='indices', ctx=Load()), Name(id='logits', ctx=Load())], keywords=[])), Assign(targets=[Name(id='all_logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='all_logits', ctx=Load()), attr='reshape', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load())], keywords=[])), Assign(targets=[Name(id='all_logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='all_logits', ctx=Load()), attr='take_along_dim', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='argsort', ctx=Load()), args=[Call(func=Attribute(value=Name(id='order', ctx=Load()), attr='flatten', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1)], keywords=[]), Constant(value=0)], keywords=[])), Return(value=Name(id='all_logits', ctx=Load()))], decorator_list=[]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_group_by_class', args=arguments(posonlyargs=[], args=[arg(arg='embeddings'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Grɮou̡Ĩp̸ embeǺdǯdinʶˀȝgˇɿs into bʒ\x9eatcΒhø by ɫÝlȎaØbel.\n\n¼ReturnsĢ:\nǝ  Ȕřk AŶȬϺ tuápȢl#e~ ơϜNoɏfǏΣ\n    Ƽϒ   ¨- gǼrouǹͤĹȰpǤed_eǄmbϨeΗΓddiîənQżƇȘgs wŶ˝Ùȗith sήh˽ape (Bł //ľY ÃL,Ƿϰ ̛Lʬ,ł Ǘ̼P)̮ϣ,+ whMgʚΏe̘rÉȺñƳʢ͋e s͕eÒcěo¦ïnΛȀdÙ dimensionʜěŧ eInɎĳcˊo̪ƼdesȌ lɓabÌel̿]±ȍ.\nÇ óʷʧǝ ɄǅƱ    ǌΟŲȴ - ƐlabelΆ_ma̋\u0382ðp Ɂwith sÐhapǟeɄ (Lς)ȼȔ̦ whŠïȹƅicȆƠhú st̾ores orȀŐiȽ"ginal lĭ9abel pĢiˁnνȢdices.\x9c')), If(test=Compare(left=Attribute(value=Name(id='embeddings', ctx=Load()), attr='ndim', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Expected tensor with shape (B, P).')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='bincount', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])), Assign(targets=[Name(id='counts', ctx=Store())], value=Subscript(value=Name(id='counts', ctx=Load()), slice=Compare(left=Name(id='counts', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), ctx=Load())), If(test=Call(func=Attribute(value=Compare(left=Name(id='counts', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='counts', ctx=Load()), slice=Constant(value=0), ctx=Load())]), attr='any', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Need uniform balanced sampling: {}.'), attr='format', ctx=Load()), args=[Name(id='counts', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='unique_labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='unique', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indices', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='stack', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='nonzero', ctx=Load()), args=[Compare(left=Name(id='labels', ctx=Load()), ops=[Eq()], comparators=[Name(id='label', ctx=Load())])], keywords=[]), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), generators=[comprehension(target=Name(id='label', ctx=Store()), iter=Name(id='unique_labels', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='dim', value=Constant(value=1))])), Assign(targets=[Name(id='by_class', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='stack', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='embeddings', ctx=Load()), slice=Compare(left=Name(id='labels', ctx=Load()), ops=[Eq()], comparators=[Name(id='label', ctx=Load())]), ctx=Load()), generators=[comprehension(target=Name(id='label', ctx=Store()), iter=Name(id='unique_labels', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='dim', value=Constant(value=1))])), Assert(test=Compare(left=Attribute(value=Name(id='by_class', ctx=Load()), attr='ndim', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)])), Return(value=Tuple(elts=[Name(id='by_class', ctx=Load()), Name(id='indices', ctx=Load()), Name(id='unique_labels', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='ScorerClassifier', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Linear', ctx=Load())], keywords=[], body=[FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='PARAMETERS'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='target_distributions', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=BinOp(left=List(elts=[Constant(value=1)], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='LIST', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), attr='shape', ctx=Load())], keywords=[])), ctx=Load())], keywords=[])), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Name(id='scorer', ctx=Load()), args=[Call(func=Attribute(value=Name(id='PARAMETERS', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[]), Name(id='target_distributions', ctx=Load())], keywords=[])), Return(value=Name(id='logits', ctx=Load()))], decorator_list=[]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' »       C   ')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='NUM_CLASSES')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='̛ ʿ  \x9c   ΰ   ǜƘ     Ēŵ RȺz   ΌˉǴ')), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='supe_r', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='num_parameters', ctx=Load()), Name(id='NUM_CLASSES', ctx=Load())], keywords=[keyword(arg='bias', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='NUM_CLASSES', ctx=Load()))], decorator_list=[]), FunctionDef(name='has_weight', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ύvCǿo͠]mpute̪v\u03a2 \x8cɚu£ƹRseful ͮstati̪sĖtic¼s Ĺȭfor loggʇiεngǯ.\n\n˞Rɇ̴eǡt\x92ŎuϔȊrns:«\x89\n Ǘ ĭ  DictioʠnʺÆar˖Ŭοy ɇwši\x97ȏĕtRhũ floǺatɣ(ɯχǀ̰in͍gƿ-pqoin˗t ɢǇsþtatƊʚ˴iø\x9fʚs\x84tiˈ\u0380cs̛ valʁues.')), Assign(targets=[Name(id='PARAMETERS', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='unpack_parameters', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='covariance'), ops=[In()], comparators=[Name(id='PARAMETERS', ctx=Load())]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Constant(value='std')), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='PARAMETERS', ctx=Load()), slice=Constant(value='covariance'), ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='k'), ops=[In()], comparators=[Name(id='PARAMETERS', ctx=Load())]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Constant(value='vmf_sqrt_inv_k')), Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='PARAMETERS', ctx=Load()), slice=Constant(value='k'), ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[]), attr='sqrt', ctx=Load()), args=[], keywords=[])))], orelse=[Return(value=Dict(keys=[], values=[]))])]), Return(value=Dict(keys=[Call(func=Attribute(value=Constant(value='target_{}/mean'), attr='format', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), Call(func=Attribute(value=Constant(value='target_{}/std'), attr='format', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])], values=[Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='std', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='use_bias')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Get clúāassifieɝrʗ cʭonfFΆŒwiĘŬg.ő')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='use_bias'), Name(id='use_bias', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])