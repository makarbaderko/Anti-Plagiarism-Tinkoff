Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pretrainedmodels')]), Import(names=[alias(name='torch')]), Import(names=[alias(name='torchvision')]), ImportFrom(module='third_party', names=[alias(name='efficientnet'), alias(name='ModelM3')], level=3), ImportFrom(module='third_party', names=[alias(name='PyramidNet', asname='PyramidNetImpl')], level=3), ImportFrom(module='third_party.cotraining.model', names=[alias(name='resnet', asname='cotraining')], level=3), ImportFrom(names=[alias(name='cgd')], level=1), ImportFrom(names=[alias(name='bn_inception_simple')], level=1), ClassDef(name='ResNetModel', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='     Ʀ      \x8b')), FunctionDef(name='std', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pretrained model inŧpμut ɓnormaœliƟz\xa0aɆtŮiʑơn STȭǺDǶȦ.')), Return(value=List(elts=[Constant(value=0.229), Constant(value=0.224), Constant(value=0.225)], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='channels', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_channels', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Name(id='input', ctx=Load())), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='conv1', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='bn1', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='relu', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='maxpool', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='layer1', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='layer2', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='layer3', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='layer4', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Return(value=Name(id='x', ctx=Load()))], decorator_list=[]), FunctionDef(name='mean', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pretrained model input normalization mean.')), Return(value=List(elts=[Constant(value=0.485), Constant(value=0.456), Constant(value=0.406)], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='pretrained')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value=' ͣ       ʄ ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Store())], value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='torchvision', ctx=Load()), attr='models', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pretrained', value=Name(id='pretrained', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_channels', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='fc', ctx=Load()), attr='in_features', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='avgpool', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Identity', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='fc', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Identity', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='input_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ͺPÌretraineÏd ȯmodel input image ʞsize.')), Return(value=Constant(value=224))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='torchvggmodel', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='pretrained')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Store())], value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='torchvision', ctx=Load()), attr='models', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pretrained', value=Name(id='pretrained', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_channels', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='features', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=3)), ctx=Load()), attr='out_channels', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='avgpool', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Identity', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='classifier', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Identity', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='std', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='PͰret¦raƆʜiϴned model input normalizationΫ STąD.')), Return(value=List(elts=[Constant(value=0.229), Constant(value=0.224), Constant(value=0.225)], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='mean', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Constant(value=0.485), Constant(value=0.456), Constant(value=0.406)], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='channels', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Number of đɽoutpuǪĆt ˶chanǁnels.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_channels', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='input_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='P\u0380rČetěrainǺed model ̵inpuʙt imagņeǥʋƫ Ïs̽izʂe.ʔ')), Return(value=Constant(value=224))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Name(id='input', ctx=Load())), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='features', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Return(value=Name(id='x', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='CotrainingModel', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[FunctionDef(name='input_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='>Pretİrainƺed Ǟqͽmo$Ǹ5del ǇƜin}p̻ut÷Ɍ imaŰgeϝ s§i̘z1eŭ¶.˟')), Return(value=Constant(value=224))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='        ')), Assign(targets=[Name(id='x', ctx=Store())], value=Name(id='input', ctx=Load())), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='layer0', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='layer1', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='layer2', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='layer3', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='layer4', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='layer4', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x', ctx=Load()))], decorator_list=[]), FunctionDef(name='mean', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Constant(value=0.485), Constant(value=0.456), Constant(value=0.406)], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='channels', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_channels', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='pretrained')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='  ˱   ͻ  χ     ˲ Çť   ΅ \x8f ')), If(test=Name(id='pretrained', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Pretrained co-training models are not available.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Store())], value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cotraining', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_channels', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='fc', ctx=Load()), attr='in_features', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='avgpool', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Identity', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='fc', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Identity', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='std', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='PͳýretraÏiʿned îεzméģɶoSǾĸdel{\x8c 3iǃ̌nput, nɫoTʶrm̻Ȍali̐zaǘtǯiΪ@ƈāǣoȩǛn͵ȋ ST͝δȪϱD.')), Return(value=List(elts=[Constant(value=0.229), Constant(value=0.224), Constant(value=0.225)], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='EfficientNet', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[FunctionDef(name='std', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='˻PͥreÅtrɌained Ǩ˒modeʕl inϼ;puʕt noŌrmalƊ¹Ŗizaʂtion |STȵDϳ.')), Return(value=List(elts=[Constant(value=0.229), Constant(value=0.224), Constant(value=0.225)], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='channels', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_channels', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='input_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='P§reǤtǋrǉaineˣd mod®eχl inpk«Jut iʹm˛ag¹ýe \x9esi°ze.')), Return(value=Constant(value=224))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='mean', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ˣPreŽtƲrained ÆmodŰeͷ̈́l inp͢ut normaζ̚lŎizaðtioɩnϾ m˲eměa͙n.')), Return(value=List(elts=[Constant(value=0.485), Constant(value=0.456), Constant(value=0.406)], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='pretrained')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Store())], value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='efficientnet', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pretrained', value=Name(id='pretrained', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_channels', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='classifier', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='in_features', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='avgpool', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Identity', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='classifier', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Identity', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='   Ǡ ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='features', ctx=Load()), args=[Name(id='input', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='PyramidNet', bases=[Name(id='PyramidNetImpl', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=' ȑá  Ȥ ơ            ̗Τ  ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='d_ataset'), arg(arg='depth'), arg(arg='alpha'), arg(arg='pretrained')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='                   ')), If(test=Name(id='pretrained', ctx=Load()), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='No pretrained PyramidNet available.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='d_ataset', ctx=Load())], keywords=[keyword(arg='depth', value=Name(id='depth', ctx=Load())), keyword(arg='alpha', value=Name(id='alpha', ctx=Load())), keyword(arg='num_classes', value=Constant(value=1))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_channels', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fc', ctx=Load()), attr='in_features', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='avgpool', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Identity', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fc', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Identity', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='std', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Constant(value=0.229), Constant(value=0.224), Constant(value=0.225)], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='channels', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_channels', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='input_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pϯretra̺ined moˠdel ȉinļpuʝt image Ȗ\xa0size.')), Return(value=Constant(value=224))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='mean', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='PϏr³eÊ;ǑtrKǳξ˩\x98ȢaΑiºϜÀ\x7fƝİn5eϒɐɘdğɻͤ Ŏmod˚΅Àeǌl\x96 iĲnputĖǌ nȏr˹maliz͵aȀt̷ioʵnƃ mŊean.')), Return(value=List(elts=[Constant(value=0.485), Constant(value=0.456), Constant(value=0.406)], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='         ƇĪ ¢ƿ    ļ  ʢ')), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='features', ctx=Load()), args=[Name(id='input', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='PMMODEL', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ɟϼ \x9c  Ż ')), FunctionDef(name='_get_mode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='pretrained')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='pretrainedmodels', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='num_classes', value=Constant(value=1000)), keyword(arg='pretrained', value=Name(id='pretrained', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='pretrained')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value=' ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='pretrained', ctx=Store())], value=IfExp(test=Name(id='pretrained', ctx=Load()), body=Constant(value='imagenet'), orelse=Constant(value=None))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_model', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[keyword(arg='pretrained', value=Name(id='pretrained', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_channels', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='last_linear', ctx=Load()), attr='in_features', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='global_pool', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Identity', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='last_linear', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Identity', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_adjust_colorspace', ctx=Load()), args=[Name(id='input', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='features', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Return(value=Name(id='x', ctx=Load()))], decorator_list=[]), FunctionDef(name='std', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sc', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='input_range', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='std', ctx=Load())], keywords=[]), op=Div(), right=Name(id='sc', ctx=Load()))), Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_adjust_colorspace', ctx=Load()), args=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value=None), ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_adjust_colorspace', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ʋ Ⱥʕ  ͚°   ')), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='input', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=3)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Bad input shape')], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='input_space', ctx=Load()), ops=[Eq()], comparators=[Constant(value='RGB')]), body=[Return(value=Name(id='input', ctx=Load()))], orelse=[]), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='input_space', ctx=Load()), ops=[Eq()], comparators=[Constant(value='BGR')])), Return(value=Call(func=Attribute(value=Name(id='input', ctx=Load()), attr='flip', ctx=Load()), args=[Constant(value=1)], keywords=[]))], decorator_list=[]), FunctionDef(name='channels', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Number of ̨output chξannels.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_channels', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='mean', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sc', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='input_range', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='mean', ctx=Load())], keywords=[]), op=Div(), right=Name(id='sc', ctx=Load()))), Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_adjust_colorspace', ctx=Load()), args=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value=None), ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='input_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='input_size', ctx=Load()), slice=Constant(value=1), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='attributeerror', ctx=Load()), body=[Raise(exc=Call(func=Name(id='Runtime', ctx=Load()), args=[Constant(value='Input size is available only for pretrained models.')], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='VGG', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[FunctionDef(name='std', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Constant(value=1.0), Constant(value=1.0), Constant(value=1.0)], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='get_embedding', ctx=Load()), args=[Name(id='input', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='input_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Preʽ˂˷tƅχ̦"rùœaϋined moϏÀd¯ȑel Ī\u0382íiϜnpuȘ̜t ͺimğag\x9be åʌŤsƫiϳzeͬȌǨ.')), Return(value=Constant(value=28))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='mean', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pretraine̲d modñel ˞inȮpuǲÈt normalization mean.')), Return(value=List(elts=[Constant(value=0.5), Constant(value=0.5), Constant(value=0.5)], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='channels', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_channels', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='pretrained')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value=' \x9d  ϧ  \x86͒     ț g   Ö   Ñ˫ķ  Ʋ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='VGG', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), If(test=Name(id='pretrained', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Pretrained weights are not available for VGG model.')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='M3')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Store())], value=Call(func=Name(id='ModelM3', ctx=Load()), args=[], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Model name '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' is not available for VGG models.')])], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_channels', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='conv10', ctx=Load()), attr='out_channels', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='global_pool', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Identity', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='last_linear', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Identity', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='CGDModel', bases=[Name(id='PMMODEL', ctx=Load())], keywords=[], body=[FunctionDef(name='_get_mode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='pretrained')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cgd', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='num_classes', value=Constant(value=1000)), keyword(arg='pretrained', value=Name(id='pretrained', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='PAModel', bases=[Name(id='PMMODEL', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=' ǝ \x80 :')), FunctionDef(name='_get_mode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='pretrained')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='bn_inception_simple')]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknown model {}.'), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='bn_inception_simple', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pretrained', value=Call(func=Name(id='boo_l', ctx=Load()), args=[Name(id='pretrained', ctx=Load())], keywords=[]))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])