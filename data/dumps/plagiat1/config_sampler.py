Module(body=[ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='optuna.samplers', names=[alias(name='BaseSampler')], level=0), ImportFrom(module='optuna.study', names=[alias(name='Study')], level=0), ImportFrom(module='optuna.trial', names=[alias(name='FrozenTrial')], level=0), ImportFrom(module='optuna.trial', names=[alias(name='TrialState')], level=0), ImportFrom(module='etna.auto.utils', names=[alias(name='config_hash')], level=0), ImportFrom(module='etna.auto.utils', names=[alias(name='retry')], level=0), ClassDef(name='ConfigSampler', bases=[Name(id='BaseSampler', ctx=Load())], keywords=[], body=[FunctionDef(name='after_trial', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='study', annotation=Name(id='Study', ctx=Load())), arg(arg='tria', annotation=Name(id='FrozenTrial', ctx=Load()))], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='unfinished_hashes', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_unfinished_hashes', ctx=Load()), args=[], keywords=[keyword(arg='study', value=Name(id='study', ctx=Load())), keyword(arg='current_trial', value=Name(id='tria', ctx=Load()))])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='unfinished_hashes', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='study', ctx=Load()), attr='stop', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='unfinished_hashes', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='unfinished_hashes', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='tria', ctx=Load()), attr='user_attrs', ctx=Load()), slice=Constant(value='hash'), ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='study', ctx=Load()), attr='stop', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_config_by_hash', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='h', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='żGet cʱonŌʳf̏ɖigŊάŇ\x84[ʈȭ by hÑash.˓Ϣ\n\nȓβPʾά͜asraìmeteǬr{s\n---Τ--²ƥ--Lďŏ---\x90η\nώʚąhͩǉöa\x9dɚʹsh̚ȎƂćȮ:Ĥϣȓϣ\n    hashƷ t¢o get con\u0381ʯfiʐg̠ fǡorá')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='configs_hash', ctx=Load()), slice=Name(id='h', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='con_figs', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())), arg(arg='random_generator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='Generator', ctx=Load()), ctx=Load())), arg(arg='retries', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=10)]), body=[Expr(value=Constant(value='InΠit Config sam¸àplͽeŴr.\x8d\n\nParametρersƂ\n͙-ȍ-\x88--------\nʸcʆonφfϝ̳igs:\n Ȓ   pƥool of config̨s to ϥsaŧƩmplǧe f¨rom\nranÆdomǮ_geǙn9ħer̃atoɸrˑ:\n    numpy generaYǁtoɒr\x95 βto :get ϞrƐepɬ̄rŌƛočducibl̕e sƓampêleƬs\nćbrͰeƾtʊrÉies:\n ˗ ²ǰ¬  ˽\u0383n\u0382umberɣ of retries to Ü·get nłͦeƪw ˁsamplƁe ϢͨfrʘomƄ sto϶rageï.ʮ It˚ĜTǚ could beĨ useful if storage is not rTSel˖iable.ĺ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='configs', ctx=Store())], value=Name(id='con_figs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='configs_hash', ctx=Store())], value=DictComp(key=Call(func=Name(id='config_hash', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Name(id='config', ctx=Load()))]), value=Name(id='config', ctx=Load()), generators=[comprehension(target=Name(id='config', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='configs', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rng', ctx=Store())], value=Name(id='random_generator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='retries', ctx=Store())], value=Name(id='retries', ctx=Load()))], decorator_list=[]), FunctionDef(name='sample_relative', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='study', annotation=Name(id='Study', ctx=Load())), arg(arg='tria', annotation=Name(id='FrozenTrial', ctx=Load()))], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='trials_to_sample', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_unfinished_hashes', ctx=Load()), args=[], keywords=[keyword(arg='study', value=Name(id='study', ctx=Load())), keyword(arg='current_trial', value=Name(id='tria', ctx=Load()))])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='trials_to_sample', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='_to_sample', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='configs_hash', ctx=Load())], keywords=[])), Assign(targets=[Name(id='idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='rng', ctx=Load()), attr='choice', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='_to_sample', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='hash_to_sample', ctx=Store())], value=Subscript(value=Name(id='_to_sample', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='_trials_to_sample', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='trials_to_sample', ctx=Load())], keywords=[])), Assign(targets=[Name(id='idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='rng', ctx=Load()), attr='choice', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='_trials_to_sample', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='hash_to_sample', ctx=Store())], value=Subscript(value=Name(id='_trials_to_sample', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load()))]), Assign(targets=[Name(id='map_to_objective', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='configs_hash', ctx=Load()), slice=Name(id='hash_to_sample', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='study', ctx=Load()), attr='_storage', ctx=Load()), attr='set_trial_user_attr', ctx=Load()), args=[Attribute(value=Name(id='tria', ctx=Load()), attr='_trial_id', ctx=Load()), Constant(value='hash'), Name(id='hash_to_sample', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='study', ctx=Load()), attr='_storage', ctx=Load()), attr='set_trial_user_attr', ctx=Load()), args=[Attribute(value=Name(id='tria', ctx=Load()), attr='_trial_id', ctx=Load()), Constant(value='pipeline'), Name(id='map_to_objective', ctx=Load())], keywords=[])), Return(value=Name(id='map_to_objective', ctx=Load()))], decorator_list=[], returns=Name(id='dict', ctx=Load())), FunctionDef(name='rng', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_rng', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rng', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='default_rng', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rng', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='sample_indep_endent', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='ͭSamΧplȏe ̈Ŏin\x89ț̻dȂe)peɤndent.H Nʩoϵǚt u\x9aˣseρtˈd.')), Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='infer_relative_search_space', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='_get_unfinished_hashes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='study', annotation=Name(id='Study', ctx=Load())), arg(arg='current_trial', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='FrozenTrial', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='trial_s', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='study', ctx=Load()), attr='_storage', ctx=Load()), attr='get_all_trials', ctx=Load()), args=[Attribute(value=Name(id='study', ctx=Load()), attr='_study_id', ctx=Load())], keywords=[keyword(arg='deepcopy', value=Constant(value=False))])), If(test=Compare(left=Name(id='current_trial', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='trial_s', ctx=Store())], value=ListComp(elt=Name(id='tria', ctx=Load()), generators=[comprehension(target=Name(id='tria', ctx=Store()), iter=Name(id='trial_s', ctx=Load()), ifs=[Compare(left=Attribute(value=Name(id='tria', ctx=Load()), attr='_trial_id', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='current_trial', ctx=Load()), attr='_trial_id', ctx=Load())])], is_async=0)]))], orelse=[]), Assign(targets=[Name(id='FINISHED_TRIALS_HASH', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='running_trials_hash', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='t', ctx=Store()), iter=Name(id='trial_s', ctx=Load()), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='t', ctx=Load()), attr='state', ctx=Load()), attr='is_finished', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='FINISHED_TRIALS_HASH', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='user_attrs', ctx=Load()), slice=Constant(value='hash'), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='t', ctx=Load()), attr='state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='TrialState', ctx=Load()), attr='RUNNING', ctx=Load())]), body=[FunctionDef(name='_closure', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='      ʶ   ͣ   ')), Return(value=Subscript(value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='study', ctx=Load()), attr='_storage', ctx=Load()), attr='get_trial', ctx=Load()), args=[Attribute(value=Name(id='t', ctx=Load()), attr='_trial_id', ctx=Load())], keywords=[]), attr='user_attrs', ctx=Load()), slice=Constant(value='hash'), ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='hash_to_add', ctx=Store())], value=Call(func=Name(id='retry', ctx=Load()), args=[Name(id='_closure', ctx=Load())], keywords=[keyword(arg='max_retries', value=Attribute(value=Name(id='self', ctx=Load()), attr='retries', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='running_trials_hash', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='hash_to_add', ctx=Load())], keywords=[]))], orelse=[Pass()])])], orelse=[]), Return(value=BinOp(left=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='configs_hash', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='set', ctx=Load()), args=[Name(id='FINISHED_TRIALS_HASH', ctx=Load())], keywords=[])), op=Sub(), right=Call(func=Name(id='set', ctx=Load()), args=[Name(id='running_trials_hash', ctx=Load())], keywords=[])))], decorator_list=[], returns=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])