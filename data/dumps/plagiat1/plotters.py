Module(body=[Import(names=[alias(name='itertools')]), Import(names=[alias(name='math')]), ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='functools', names=[alias(name='singledispatch')], level=0), ImportFrom(module='etna.analysis.feature_selection', names=[alias(name='AggregationMode')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), ImportFrom(module='ruptures.base', names=[alias(name='BaseCost')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='holidays', asname='holidays_lib')]), Import(names=[alias(name='matplotlib.pyplot', asname='plt')]), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='plotly')]), Import(names=[alias(name='plotly.graph_objects', asname='go')]), Import(names=[alias(name='seaborn', asname='sns')]), ImportFrom(module='matplotlib.lines', names=[alias(name='Line2D')], level=0), ImportFrom(module='ruptures.exceptions', names=[alias(name='BadSegmentationParameters')], level=0), ImportFrom(module='ruptures.base', names=[alias(name='BaseEstimator')], level=0), Import(names=[alias(name='warnings')]), ImportFrom(module='scipy.signal', names=[alias(name='periodogram')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='RelevanceTable')], level=0), ImportFrom(module='etna.analysis.feature_relevance', names=[alias(name='StatisticsRelevanceTable')], level=0), ImportFrom(module='etna.analysis.feature_selection', names=[alias(name='AGGREGATION_FN')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='etna.analysis.utils', names=[alias(name='prepare_axes')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='Transform')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='TimeSeriesImputerTransform')], level=0), ImportFrom(module='etna.transforms.decomposition.change_points_trend', names=[alias(name='ChangePointsTrendTransform')], level=0), ImportFrom(module='etna.transforms.decomposition.detrend', names=[alias(name='LinearTrendTransform')], level=0), ImportFrom(module='etna.transforms.decomposition.detrend', names=[alias(name='TheilSenTrendTransform')], level=0), ImportFrom(module='etna.transforms.decomposition.stl', names=[alias(name='STLTransform')], level=0)], orelse=[]), FunctionDef(name='_select_quan', args=arguments(posonlyargs=[], args=[arg(arg='forecast_results', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Constant(value='TSDataset')], ctx=Load()), ctx=Load())), arg(arg='quantiles', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='intersection_quantiles_set', ctx=Store())], value=Call(func=Attribute(value=Name(id='set', ctx=Load()), attr='intersection', ctx=Load()), args=[Starred(value=ListComp(elt=Call(func=Name(id='_get_existing_quantiles', ctx=Load()), args=[Name(id='forecast', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='forecast', ctx=Store()), iter=Call(func=Attribute(value=Name(id='forecast_results', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]), ctx=Load())], keywords=[])), Assign(targets=[Name(id='intersection_quantiles', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='intersection_quantiles_set', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='quantiles', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='selected_quantiles', ctx=Store())], value=Name(id='intersection_quantiles', ctx=Load()))], orelse=[Assign(targets=[Name(id='selected_quantiles', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='quantiles', ctx=Load())], keywords=[]), op=BitAnd(), right=Name(id='intersection_quantiles_set', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='non_existent', ctx=Store())], value=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='quantiles', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='intersection_quantiles_set', ctx=Load()))), If(test=Name(id='non_existent', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Quantiles '), FormattedValue(value=Name(id='non_existent', ctx=Load()), conversion=-1), Constant(value=' do not exist in each forecast dataset. They will be dropped.')])], keywords=[]))], orelse=[])]), Return(value=Name(id='selected_quantiles', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), FunctionDef(name='_get_existing_quantiles', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cols', ctx=Store())], value=ListComp(elt=Name(id='col', ctx=Load()), generators=[comprehension(target=Name(id='col', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='col', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='target_0.')], keywords=[])], is_async=0)])), Assign(targets=[Name(id='existing_quantiles', ctx=Store())], value=SetComp(elt=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='col', ctx=Load()), slice=Slice(lower=Call(func=Name(id='le', ctx=Load()), args=[Constant(value='target_')], keywords=[])), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='col', ctx=Store()), iter=Name(id='cols', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='existing_quantiles', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), FunctionDef(name='p', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='period', annotation=Name(id='float', ctx=Load())), arg(arg='amplitude_aggregation_mode', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='per-segment'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='periodogram_para_ms', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='xticks', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='AggregationMode', ctx=Load()), attr='mean', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='PloϥϙǊt the \u0381peKr̪iȺǧ\x8aodɽbograĐ̞m ˅$using :pyğ̨:fɅunˎǦ̩c\x9eȁ:ϊ`scipyͼĩYφó.ǟsiϭ˗ɱgnaǣl͝.peÛ̠riodo¦˪gƋram`έUȟ.\n\nɳIt iƚ̛ös ̨Ʀċ\x9cЀ˹ɲ\x85ͳƈusƂefˋul to dʨeVterƯmƅɯȅine theϵ͎zȑɎ optimal ȏ``ʃoirder`` p$aram&ϛeϳt͵er\nΨȖfǕorξ πʛό:p¥ay:claǙss:(`~etȞna.ņtransf̬Ãorms.@éƼoˆŦ!timŉeFstġaǫmΟpʶ.έfo>uɄϮriŒer͋.ǦFourierTʃrσansformʌ`.\n\n\xadǣόParameters\n--Ï--oκ-----0-\nǱts:\nɻ    ˭TͨͿS̭DaɲZtaǁ@s÷et witŽh tiɘmeƘˣseries data̸ő̂\x85\nperiͅonĭdϗş:̵\nŖ    t˨?he ͗pÚeΎriod ofŀƤ tƵ̧he seasȤ̹ço\x89nξalσÓʬity to c̜ƺaptϹîćure ǓMin fr;Șequ^en˵cŶy ̕unĂits ofǅ ˍ3timeX΄ seƎrƷies, it̚ shθm̩oυΧɋZu÷ld ˣ¹be >=í 2;͙Ĺ˱\n\x8a˟ ̶ \'  iūώ͈Łt isΜ \x9dɔtĐ̞rans͊ƶlÑatƔÊÎed˓ toΪͱ tʠ϶he `Ğ`fŸs``ɦĺɑ ̀pɻíarameȄɪt6er of <:Ƕȃpyà:fʧunc¥ą:`sącơŌȄipɍƞy.siơg˴nalϐ˯.pıeτǪKƗrǞiodog\x97όramŎ`Cɹ\nͻƐ#amɒplƘǌ¶ŌȫłiËt͖udƕe_agg̾reĻgɍ́ation_mŦɃʄŕϡʭodeŁ˛:ʤ\nɝ  v  àagΕ͟grȍegat·Ņionʠ sŷtr˪ařtĎǰϙ̟eϺʆgĂϕy˔ for obtaiȻÀnϫed pƞϫeÓr sǇ&eϣgment ̪pʝƕerȽiŅƂodowgΈra?ɕmΎs;\n    alʞlɟʏ tΡhe strategiɎes caɗnǳε bïĥΕe Ǘ̙examined\n͎̓\xad ǎ ϋ  at :pĺy:classn:`~̽e̸ȿmtnaƪ.ĩ͕analMĎysiͨs.ιÛfͤeaP¸xΈtuˍʷǥͶω̭re_seleΖction/.̯mȽrmr_oƻʧsǥele\u0378ctiʗϏźʥƐonȧ.AʌɻgƚgƝȵregationModeϠ`\nƨ͉pΦeriįR͔ϲĠϊodoɫgraƠğm_pŞa\x9er͐¯ǁaʁms:\n    aIΫc̘͂ddiǅtiuoϟn\x84al ke·ɈŸyȏw˼ord aʪúrgumeǘųnˡtɕsź˩Ȅ βŸfor ˀpeñpriodϬŀȾȜoȅgramÞ̿ɻY, :Ő!pycū:˔fīunĥcɾ:ʐȆ`s̄ʪcip˓y.ϙsiɫg̯nŶalɪ.pǀeriodɸogra˗m`ƞ\u038b śi_s uɻsed\nsegments:;\n  Ė ȐͶz ûseʇgm)entʟsȌ ·ĢtoR usφɜĮe\nxticǂOµkǗϳÕÔs:£\n  ŕ  ɲlʁͿist o¸ĸĳ˖f ͫtž\x7fΐ˝șǩ\x7fick loca%octiΚons\x99 ȷof the x˚-aÜxÁiɃϙōsÇ,ʿ usefƔul̆ to higGhlight͈˔ ͙spʔe͋ǧcˋifi˩cȔ rɸeƑfeéɁͲreżʡnceɬȗ pe§Ȫri¡Țosdˍ˴iɊ;ciɷt̮\u038dies\ncoƠ\x95ƥlumns_n\x8eṷm:Í\n    ưif ̖ňƆϹ``aɝŦɕmplÜiΣtu͖de_\x8eɎȃagˈgregat̂\x8aioűn_moĽdōe="pTeĵʳr-VƝse1ȇǨgmȠenʫt"`ϡ` ČnʠumberưȁÙ ofʎȰ c˂̀olʛuɀÇͭϬmnώs ǬinƟ sϕub}ploţs, othĸe¥ɴrwˋƐiţse the valϤue ʟ\x96is ig\x82nƦŪχoredĳΩιϊȲ\nΣfŊiǙgsˎizeϮ:&̭\n    sǉʠɜize Ͽ\x91oƖf ̬thƲʺe f\x82ΚĎƥʪČ@igure peɄ\x98r subǛplo2ɢt ͼwith. one; ǲsegment in ĚƓinches\n\nåRaises\nŞ---Ă--/-ÑɌ\nVʪia͈lɔueˎErroˎrÁɏ:\n  \x94ʔǈ ʫ˺ ȑiάf peǼrˇʓÍioǟd <Η\x99 2\nȶVaūluϩeErʞror:\n    uif pʂeri˻oRdogrͲĜOɉ\x7famǥ can\'t2 ̒bfe Ķc\u0379ʪaƳ˲l\x9acǢOȸulatĲedʀÀȽ̡˾ˬþ ¸+lo2n ƿs̒egmentɿ \x8aεbeƼcause of dn6ƢtChe NɆaNs iTnsɜid˓Ȓe i¨÷\x95\x81Ňtͼ\n\n͆ϡNotÒesĳƣ˟\ný--̿ʤ--ʺ-\nÍn PnaoȎƤn Ήper-sʏeλgmȉen3̵˲Tt moƁd̩e ïϟall sdefȊgmeʩ(ntŬósƨ¶Ǳ areū cəut͞Ė toĝ b˒e thxe ͩsʢÐ]amǏe lÊeengʉ̀ÓÈth, ̸the last ˙vʏaȵl͛uθesÏ ɰaεrìeğ7 taɎΒϘϣők\x8eenɭ.')), If(test=Compare(left=Name(id='period', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Period should be at least 2')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='periodogram_para_ms', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='periodogram_para_ms', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='segments', ctx=Load())), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='amplitude_aggregation_mode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='per-segment')]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load())), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="Periodogram can't be calculated on segment with NaNs inside: "), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='frequencies', ctx=Store()), Name(id='spectrum', ctx=Store())], ctx=Store())], value=Call(func=Name(id='periodogram', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='segment_df', ctx=Load())), keyword(arg='fs', value=Name(id='period', ctx=Load())), keyword(value=Name(id='periodogram_para_ms', ctx=Load()))])), Assign(targets=[Name(id='spectrum', ctx=Store())], value=Subscript(value=Name(id='spectrum', ctx=Load()), slice=Compare(left=Name(id='frequencies', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), ctx=Load())), Assign(targets=[Name(id='frequencies', ctx=Store())], value=Subscript(value=Name(id='frequencies', ctx=Load()), slice=Compare(left=Name(id='frequencies', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='step', ctx=Load()), args=[Name(id='frequencies', ctx=Load()), Name(id='spectrum', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_xscale', ctx=Load()), args=[Constant(value='log')], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_xlabel', ctx=Load()), args=[Constant(value='Frequency')], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_ylabel', ctx=Load()), args=[Constant(value='Power spectral density')], keywords=[])), If(test=Compare(left=Name(id='xticks', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_xticks', ctx=Load()), args=[], keywords=[keyword(arg='ticks', value=Name(id='xticks', ctx=Load())), keyword(arg='labels', value=Name(id='xticks', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[JoinedStr(values=[Constant(value='Periodogram: '), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='lengths_segments', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='segment', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load())), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="Periodogram can't be calculated on segment with NaNs inside: "), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='lengths_segments', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='le', ctx=Load()), args=[Name(id='segment_df', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cut_length', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='lengths_segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='frequencies_segments', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='spectrums_segments', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='segment', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='cut_length', ctx=Load()))), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='frequencies', ctx=Store()), Name(id='spectrum', ctx=Store())], ctx=Store())], value=Call(func=Name(id='periodogram', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='segment_df', ctx=Load())), keyword(arg='fs', value=Name(id='period', ctx=Load())), keyword(value=Name(id='periodogram_para_ms', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='frequencies_segments', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='frequencies', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='spectrums_segments', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='spectrum', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='frequencies', ctx=Store())], value=Subscript(value=Name(id='frequencies_segments', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='amplitude_aggregation_fn', ctx=Store())], value=Subscript(value=Name(id='AGGREGATION_FN', ctx=Load()), slice=Call(func=Name(id='AggregationMode', ctx=Load()), args=[Name(id='amplitude_aggregation_mode', ctx=Load())], keywords=[]), ctx=Load())), Assign(targets=[Name(id='spectrum', ctx=Store())], value=Call(func=Name(id='amplitude_aggregation_fn', ctx=Load()), args=[Name(id='spectrums_segments', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=0))])), Assign(targets=[Name(id='spectrum', ctx=Store())], value=Subscript(value=Name(id='spectrum', ctx=Load()), slice=Compare(left=Name(id='frequencies', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), ctx=Load())), Assign(targets=[Name(id='frequencies', ctx=Store())], value=Subscript(value=Name(id='frequencies', ctx=Load()), slice=Compare(left=Name(id='frequencies', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='subplots', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Name(id='figsize', ctx=Load())), keyword(arg='constrained_layout', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='step', ctx=Load()), args=[Name(id='frequencies', ctx=Load()), Name(id='spectrum', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_xscale', ctx=Load()), args=[Constant(value='log')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_xlabel', ctx=Load()), args=[Constant(value='Frequency')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_ylabel', ctx=Load()), args=[Constant(value='Power spectral density')], keywords=[])), If(test=Compare(left=Name(id='xticks', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_xticks', ctx=Load()), args=[], keywords=[keyword(arg='ticks', value=Name(id='xticks', ctx=Load())), keyword(arg='labels', value=Name(id='xticks', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_title', ctx=Load()), args=[Constant(value='Periodogram')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='_prepare_forecast_results', args=arguments(posonlyargs=[], args=[arg(arg='forecast_ts', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='TSDataset'), Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='TSDataset'), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Constant(value='TSDataset')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Prep˥aΕìrƅ»ĒƸe dɇi\xa0ʪ˚ctiɹüoϿɷna͌νry ʹǤwiϕtȐh fo̭rec͡ǰasts resulʄts.Ʉ')), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='forecast_ts', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[]), body=[Return(value=Dict(keys=[Constant(value='1')], values=[Name(id='forecast_ts', ctx=Load())]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='forecast_ts', ctx=Load()), Name(id='listKsP', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='le', ctx=Load()), args=[Name(id='forecast_ts', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])]), body=[Return(value=DictComp(key=Call(func=Name(id='STR', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), value=Name(id='forecast', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='forecast', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='forecast_ts', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='forecast_ts', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='le', ctx=Load()), args=[Name(id='forecast_ts', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])]), body=[Return(value=Name(id='forecast_ts', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Unknown type of `forecast_ts`')], keywords=[]))])])])], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Constant(value='TSDataset')], ctx=Load()), ctx=Load())), FunctionDef(name='PLOT_FORECAST', args=arguments(posonlyargs=[], args=[arg(arg='forecast_ts', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='TSDataset'), Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='TSDataset'), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Constant(value='TSDataset')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='test_ts', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='TSDataset'), ctx=Load())), arg(arg='train_ts', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='TSDataset'), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='n_train_samples', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='prediction_intervals', annotation=Name(id='bool', ctx=Load())), arg(arg='quantiles', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load()), Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Name(id='forecast_results', ctx=Store())], value=Call(func=Name(id='_prepare_forecast_results', ctx=Load()), args=[Name(id='forecast_ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='num_forecasts', ctx=Store())], value=Call(func=Name(id='le', ctx=Load()), args=[Call(func=Attribute(value=Name(id='forecast_results', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='unique_segments', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='forecast', ctx=Store()), iter=Call(func=Attribute(value=Name(id='forecast_results', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='unique_segments', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='forecast', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='listKsP', ctx=Load()), args=[Name(id='unique_segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), If(test=Name(id='prediction_intervals', ctx=Load()), body=[Assign(targets=[Name(id='quantiles', ctx=Store())], value=Call(func=Name(id='_select_quan', ctx=Load()), args=[Name(id='forecast_results', ctx=Load()), Name(id='quantiles', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='train_ts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='train_ts', ctx=Load()), attr='df', ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='by', value=Constant(value='timestamp')), keyword(arg='inplace', value=Constant(value=True))]))], orelse=[]), If(test=Compare(left=Name(id='test_ts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='test_ts', ctx=Load()), attr='df', ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='by', value=Constant(value='timestamp')), keyword(arg='inplace', value=Constant(value=True))]))], orelse=[]), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='train_ts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segment_train_df', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='train_ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='segment_train_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='columns', value=List(elts=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], ctx=Load()))]))]), If(test=Compare(left=Name(id='test_ts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segment_test_df', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='test_ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='segment_test_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='columns', value=List(elts=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], ctx=Load()))]))]), If(test=Compare(left=Name(id='n_train_samples', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Name(id='segment_train_df', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='n_train_samples', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Subscript(value=Name(id='segment_train_df', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='n_train_samples', ctx=Load()))), ctx=Load()))], orelse=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='columns', value=List(elts=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], ctx=Load()))]))])]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='train_ts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='n_train_samples', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='plot_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Attribute(value=Name(id='plot_df', ctx=Load()), attr='target', ctx=Load()), attr='values', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='train'))]))], orelse=[]), If(test=Compare(left=Name(id='test_ts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_test_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Attribute(value=Name(id='segment_test_df', ctx=Load()), attr='target', ctx=Load()), attr='values', ctx=Load())], keywords=[keyword(arg='color', value=Constant(value='purple')), keyword(arg='label', value=Constant(value='test'))]))], orelse=[]), Assign(targets=[Name(id='quantile_p', ctx=Store())], value=Constant(value='target_')), For(target=Tuple(elts=[Name(id='forecast_name', ctx=Store()), Name(id='forecast', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='forecast_results', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='legend_prefix', ctx=Store())], value=IfExp(test=Compare(left=Name(id='num_forecasts', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=JoinedStr(values=[FormattedValue(value=Name(id='forecast_name', ctx=Load()), conversion=-1), Constant(value=': ')]), orelse=Constant(value=''))), Assign(targets=[Name(id='segment_forecast_df', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='by', value=Constant(value='timestamp'))])), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='target', ctx=Load()), attr='values', ctx=Load())], keywords=[keyword(arg='linewidth', value=Constant(value=1)), keyword(arg='label', value=JoinedStr(values=[FormattedValue(value=Name(id='legend_prefix', ctx=Load()), conversion=-1), Constant(value='forecast')]))])), Assign(targets=[Name(id='forecast_color', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='get_color', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='prediction_intervals', ctx=Load()), Compare(left=Name(id='quantiles', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='alpha', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='linspace', ctx=Load()), args=[Constant(value=0), BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2)), BinOp(left=BinOp(left=Call(func=Name(id='le', ctx=Load()), args=[Name(id='quantiles', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2)), op=Add(), right=Constant(value=2))], keywords=[]), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), For(target=Name(id='quantile_idx', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='le', ctx=Load()), args=[Name(id='quantiles', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))], keywords=[]), body=[Assign(targets=[Name(id='low_quantile', ctx=Store())], value=Subscript(value=Name(id='quantiles', ctx=Load()), slice=Name(id='quantile_idx', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='high_quantile', ctx=Store())], value=Subscript(value=Name(id='quantiles', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='quantile_idx', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='values_low', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id='quantile_p', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='low_quantile', ctx=Load()), conversion=-1)]), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='values_high', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id='quantile_p', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='high_quantile', ctx=Load()), conversion=-1)]), ctx=Load()), attr='values', ctx=Load())), If(test=Compare(left=Name(id='quantile_idx', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=BinOp(left=Call(func=Name(id='le', ctx=Load()), args=[Name(id='quantiles', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2)), op=Sub(), right=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='fill_between', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Name(id='values_low', ctx=Load()), Name(id='values_high', ctx=Load())], keywords=[keyword(arg='facecolor', value=Name(id='forecast_color', ctx=Load())), keyword(arg='alpha', value=Subscript(value=Name(id='alpha', ctx=Load()), slice=Name(id='quantile_idx', ctx=Load()), ctx=Load())), keyword(arg='label', value=JoinedStr(values=[FormattedValue(value=Name(id='legend_prefix', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='low_quantile', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Name(id='high_quantile', ctx=Load()), conversion=-1)]))]))], orelse=[Assign(targets=[Name(id='low_next_quantile', ctx=Store())], value=Subscript(value=Name(id='quantiles', ctx=Load()), slice=BinOp(left=Name(id='quantile_idx', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='high_prev_quantile', ctx=Store())], value=Subscript(value=Name(id='quantiles', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='quantile_idx', ctx=Load())), op=Sub(), right=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='values_next', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id='quantile_p', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='low_next_quantile', ctx=Load()), conversion=-1)]), ctx=Load()), attr='values', ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='fill_between', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Name(id='values_low', ctx=Load()), Name(id='values_next', ctx=Load())], keywords=[keyword(arg='facecolor', value=Name(id='forecast_color', ctx=Load())), keyword(arg='alpha', value=Subscript(value=Name(id='alpha', ctx=Load()), slice=Name(id='quantile_idx', ctx=Load()), ctx=Load())), keyword(arg='label', value=JoinedStr(values=[FormattedValue(value=Name(id='legend_prefix', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='low_quantile', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Name(id='high_quantile', ctx=Load()), conversion=-1)]))])), Assign(targets=[Name(id='values_prev', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id='quantile_p', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='high_prev_quantile', ctx=Load()), conversion=-1)]), ctx=Load()), attr='values', ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='fill_between', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Name(id='values_high', ctx=Load()), Name(id='values_prev', ctx=Load())], keywords=[keyword(arg='facecolor', value=Name(id='forecast_color', ctx=Load())), keyword(arg='alpha', value=Subscript(value=Name(id='alpha', ctx=Load()), slice=Name(id='quantile_idx', ctx=Load()), ctx=Load()))]))])], orelse=[]), If(test=Compare(left=BinOp(left=Call(func=Name(id='le', ctx=Load()), args=[Name(id='quantiles', ctx=Load())], keywords=[]), op=Mod(), right=Constant(value=2)), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='remaining_quantile', ctx=Store())], value=Subscript(value=Name(id='quantiles', ctx=Load()), slice=BinOp(left=Call(func=Name(id='le', ctx=Load()), args=[Name(id='quantiles', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='values', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id='quantile_p', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='remaining_quantile', ctx=Load()), conversion=-1)]), ctx=Load()), attr='values', ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Name(id='values', ctx=Load()), Constant(value='--')], keywords=[keyword(arg='color', value=Name(id='forecast_color', ctx=Load())), keyword(arg='label', value=JoinedStr(values=[FormattedValue(value=Name(id='legend_prefix', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='remaining_quantile', ctx=Load()), conversion=-1)]))]))], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[keyword(arg='loc', value=Constant(value='upper left'))]))], orelse=[])], decorator_list=[]), FunctionDef(name='_get_borders_ts', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='start', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='start_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='start', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='start_idx', ctx=Store())], value=Constant(value=0))]), If(test=Compare(left=Name(id='end', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='END_IDX', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='end', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='END_IDX', ctx=Store())], value=BinOp(left=Call(func=Name(id='le', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)))]), If(test=Compare(left=Name(id='start_idx', ctx=Load()), ops=[GtE()], comparators=[Name(id='END_IDX', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Parameter 'end' must be greater than 'start'!")], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Subscript(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=Name(id='start_idx', ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=Name(id='END_IDX', ctx=Load()), ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Name(id='STR', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='plot_backtest', args=arguments(posonlyargs=[], args=[arg(arg='forecast_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='history_len', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=2), Constant(value=0), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='history_len', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='all')]), Compare(left=Name(id='history_len', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Parameter history_len should be non-negative or 'all'")], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='fold_numbers', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='forecast_df', ctx=Load()), slice=Subscript(value=Name(id='segments', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), slice=Constant(value='fold_number'), ctx=Load())), Expr(value=Call(func=Name(id='_validate_intersecting_segments', ctx=Load()), args=[Name(id='fold_numbers', ctx=Load())], keywords=[])), Assign(targets=[Name(id='folds', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='fold_numbers', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load())), Assign(targets=[Name(id='forecast_start', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='history_df', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), ops=[Lt()], comparators=[Name(id='forecast_start', ctx=Load())]), ctx=Load())), Assign(targets=[Name(id='backtest_df', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), ops=[GtE()], comparators=[Name(id='forecast_start', ctx=Load())]), ctx=Load())), Assign(targets=[Name(id='freq_timedelta', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=0), ctx=Load()))), Assign(targets=[Name(id='default_colors', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='plt', ctx=Load()), attr='rcParams', ctx=Load()), slice=Constant(value='axes.prop_cycle'), ctx=Load()), attr='by_key', ctx=Load()), args=[], keywords=[]), slice=Constant(value='color'), ctx=Load())), Assign(targets=[Name(id='color_cycle', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='cycle', ctx=Load()), args=[Name(id='default_colors', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines_colors', ctx=Store())], value=DictComp(key=Name(id='li_ne_name', ctx=Load()), value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='color_cycle', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='li_ne_name', ctx=Store()), iter=List(elts=[Constant(value='history'), Constant(value='test'), Constant(value='forecast')], ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_backtest_df', ctx=Store())], value=Subscript(value=Name(id='backtest_df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_history_df', ctx=Store())], value=Subscript(value=Name(id='history_df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_forecast_df', ctx=Store())], value=Subscript(value=Name(id='forecast_df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='is_full__folds', ctx=Store())], value=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='segment_backtest_df', ctx=Load()), attr='index', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='index', ctx=Load())], keywords=[])])), If(test=Compare(left=Name(id='history_len', ctx=Load()), ops=[Eq()], comparators=[Constant(value='all')]), body=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Name(id='segment_history_df', ctx=Load()), Name(id='segment_backtest_df', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='history_len', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Call(func=Attribute(value=Name(id='segment_history_df', ctx=Load()), attr='tail', ctx=Load()), args=[Name(id='history_len', ctx=Load())], keywords=[]), Name(id='segment_backtest_df', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Name(id='segment_backtest_df', ctx=Load()))])]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='plot_df', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='plot_df', ctx=Load()), attr='target', ctx=Load())], keywords=[keyword(arg='color', value=Subscript(value=Name(id='lines_colors', ctx=Load()), slice=Constant(value='history'), ctx=Load()))])), For(target=Name(id='fold_number', ctx=Store()), iter=Name(id='folds', ctx=Load()), body=[Assign(targets=[Name(id='start_foldVUdt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='fold_numbers', ctx=Load()), slice=Compare(left=Name(id='fold_numbers', ctx=Load()), ops=[Eq()], comparators=[Name(id='fold_number', ctx=Load())]), ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='end_fold', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='fold_numbers', ctx=Load()), slice=Compare(left=Name(id='fold_numbers', ctx=Load()), ops=[Eq()], comparators=[Name(id='fold_number', ctx=Load())]), ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='end_fold_exclusive', ctx=Store())], value=BinOp(left=Name(id='end_fold', ctx=Load()), op=Add(), right=Name(id='freq_timedelta', ctx=Load()))), Assign(targets=[Name(id='backtest_df_slice_fold', ctx=Store())], value=Subscript(value=Name(id='segment_backtest_df', ctx=Load()), slice=Slice(lower=Name(id='start_foldVUdt', ctx=Load()), upper=Name(id='end_fold_exclusive', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='target', ctx=Load())], keywords=[keyword(arg='color', value=Subscript(value=Name(id='lines_colors', ctx=Load()), slice=Constant(value='test'), ctx=Load()))])), If(test=Name(id='is_full__folds', ctx=Load()), body=[Assign(targets=[Name(id='forecast_df_slice_fold', ctx=Store())], value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=Slice(lower=Name(id='start_foldVUdt', ctx=Load()), upper=Name(id='end_fold_exclusive', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='target', ctx=Load())], keywords=[keyword(arg='color', value=Subscript(value=Name(id='lines_colors', ctx=Load()), slice=Constant(value='forecast'), ctx=Load()))]))], orelse=[Assign(targets=[Name(id='forecast_df_slice_fold', ctx=Store())], value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=Slice(lower=Name(id='start_foldVUdt', ctx=Load()), upper=Name(id='end_fold', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='backtest_df_slice_fold', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='loc', ctx=Load()), slice=Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='index', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='scatter', ctx=Load()), args=[Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='target', ctx=Load())], keywords=[keyword(arg='color', value=Subscript(value=Name(id='lines_colors', ctx=Load()), slice=Constant(value='test'), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='scatter', ctx=Load()), args=[Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='target', ctx=Load())], keywords=[keyword(arg='color', value=Subscript(value=Name(id='lines_colors', ctx=Load()), slice=Constant(value='forecast'), ctx=Load()))]))]), Assign(targets=[Name(id='opacitynBRCa', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=0.075), op=Mult(), right=BinOp(left=BinOp(left=Name(id='fold_number', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mod(), right=Constant(value=2))), op=Add(), right=Constant(value=0.075))), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvspan', ctx=Load()), args=[Name(id='start_foldVUdt', ctx=Load()), Name(id='end_fold_exclusive', ctx=Load())], keywords=[keyword(arg='alpha', value=Name(id='opacitynBRCa', ctx=Load())), keyword(arg='color', value=Constant(value='skyblue'))]))], orelse=[]), Assign(targets=[Name(id='legend_handles', ctx=Store())], value=ListComp(elt=Call(func=Name(id='Line2D', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load()), List(elts=[Constant(value=0)], ctx=Load())], keywords=[keyword(arg='marker', value=Constant(value='o')), keyword(arg='color', value=Name(id='color', ctx=Load())), keyword(arg='label', value=Name(id='label', ctx=Load()))]), generators=[comprehension(target=Tuple(elts=[Name(id='label', ctx=Store()), Name(id='color', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='lines_colors', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[keyword(arg='handles', value=Name(id='legend_handles', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))]))], orelse=[])], decorator_list=[]), FunctionDef(name='plot_anomalies_int_eractive', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='segment', annotation=Name(id='STR', ctx=Load())), arg(arg='method', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='params_bounds', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='iP', annotation=Name(id='STR', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='target'), Tuple(elts=[Constant(value=20), Constant(value=10)], ctx=Load()), Constant(value=None), Constant(value=None)]), body=[ImportFrom(module='ipywidgets', names=[alias(name='FloatSlider')], level=0), ImportFrom(module='ipywidgets', names=[alias(name='IntSlider')], level=0), ImportFrom(module='ipywidgets', names=[alias(name='interact')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_borders_ts', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Name(id='segment', ctx=Load()), Name(id='iP', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Name(id='df', ctx=Load()), attr='values', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='cache_', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='sliders', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='style', ctx=Store())], value=Dict(keys=[Constant(value='description_width')], values=[Constant(value='initial')])), For(target=Tuple(elts=[Name(id='param', ctx=Store()), Name(id='bounds', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='params_bounds', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='min_', ctx=Store()), Name(id='max_', ctx=Store()), Name(id='step', ctx=Store())], ctx=Store())], value=Name(id='bounds', ctx=Load())), If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='min_', ctx=Load()), Name(id='float', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='max_', ctx=Load()), Name(id='float', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='step', ctx=Load()), Name(id='float', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='sliders', ctx=Load()), slice=Name(id='param', ctx=Load()), ctx=Store())], value=Call(func=Name(id='FloatSlider', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Name(id='min_', ctx=Load())), keyword(arg='max', value=Name(id='max_', ctx=Load())), keyword(arg='step', value=Name(id='step', ctx=Load())), keyword(arg='continuous_update', value=Constant(value=False)), keyword(arg='style', value=Name(id='style', ctx=Load()))]))], orelse=[Assign(targets=[Subscript(value=Name(id='sliders', ctx=Load()), slice=Name(id='param', ctx=Load()), ctx=Store())], value=Call(func=Name(id='IntSlider', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Name(id='min_', ctx=Load())), keyword(arg='max', value=Name(id='max_', ctx=Load())), keyword(arg='step', value=Name(id='step', ctx=Load())), keyword(arg='continuous_update', value=Constant(value=False)), keyword(arg='style', value=Name(id='style', ctx=Load()))]))])], orelse=[]), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='k'), defaults=[]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Constant(value='_'), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='STR', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='val', ctx=Store()), iter=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='cache_', ctx=Load())]), body=[Assign(targets=[Name(id='anomalies', ctx=Store())], value=Subscript(value=Call(func=Name(id='method', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(value=Name(id='k', ctx=Load()))]), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='anomalies', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='anomalies', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load())])], is_async=0)])), Assign(targets=[Subscript(value=Name(id='cache_', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='anomalies', ctx=Load()))], orelse=[Assign(targets=[Name(id='anomalies', ctx=Store())], value=Subscript(value=Name(id='cache_', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='scatter', ctx=Load()), args=[Name(id='anomalies', ctx=Load()), Subscript(value=Name(id='y', ctx=Load()), slice=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), attr='isin', ctx=Load()), args=[Name(id='anomalies', ctx=Load())], keywords=[]), ctx=Load())], keywords=[keyword(arg='c', value=Constant(value='r'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xticks', ctx=Load()), args=[], keywords=[keyword(arg='rotation', value=Constant(value=45))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), Expr(value=Call(func=Name(id='interact', ctx=Load()), args=[Name(id='update', ctx=Load())], keywords=[keyword(value=Name(id='sliders', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='plot_anomalies', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='anomaly_dict', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='iP', annotation=Name(id='STR', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='target'), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load()), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_borders_ts', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='anomaly', ctx=Store())], value=Subscript(value=Name(id='anomaly_dict', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Name(id='iP', ctx=Load()), ctx=Load()), attr='values', ctx=Load())], keywords=[])), Assign(targets=[Name(id='anomaly', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='anomaly', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load())])], is_async=0)])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='scatter', ctx=Load()), args=[Name(id='anomaly', ctx=Load()), Attribute(value=Subscript(value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Call(func=Attribute(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), attr='isin', ctx=Load()), args=[Name(id='anomaly', ctx=Load())], keywords=[]), ctx=Load()), slice=Name(id='iP', ctx=Load()), ctx=Load()), attr='values', ctx=Load())], keywords=[keyword(arg='c', value=Constant(value='r'))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_correlation_matrix', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='column_s', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='method', annotation=Name(id='STR', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value='pearson')]), body=[Expr(value=Constant(value='Cˁ˗ʽʙĎo\x83͈mpu˼t͓·bνe ΰpairw˗Ɠise correȩlation ofź tiϻmeÏseΉϼrʍi¿esƱ foɫrΦ ÚselecƛHtƈed sϮÇĚ\x80āΈe˵Ŵ̾\u0379ǢɓϨgmeµnts0.\n\n͈PaˁŻraκųmeteϱʒ1rzsƈ̦¬)\n---ō-¿--ɏ--γ̯-æ-\nȼtǀɕs:\n̞ˌȔĵ\u0382    T±̜SData̋seπʤtȊ witÖh ti˂ƾmeʓ̒ϙˌsòeries dʙĉatak\ncα˜oȥlu͑ˋmnsϢ:\n   ň ɗCĞǔolτumnsR toŅ u͐>seo,=˽ΰ ̋ɩ͵ifÏ NŇoɷ\\neΨ useɂ ŷal̼l ¼columns\nsÊϼegmenfȢtsƇ:\nǦ͈͑ ǯBƨ ¦  ˪S˰egmen͈tsÓ tȝo ǰŨΦusƹƀǳeʑ\nmϣȟethoƿd:϶ŘƘóʤ\nm y ɂȩ  Met͵hãoöȪˊdĳ uœƴof ˜^cƤorreElaΣti̔V÷\x97on:\n\n  ˫ʝ  * pÂ²o[e̓ars̋oƢʧn: űsĴtƢandar,rϽd ̀σcorr̲eɬlaƱtȁ˳ioȆn ̫coéfficiʟent\n\n ƾ   *\x93 kendĝaͨll:Ǉ ̌ɱΚKendall Tau coȱhñļr̾rel\x9eχaŭǧ\x80ʓtiϪ͝Ŭon coǐeffiucÌΫɛiτent\n\nǵ  Ƿώ  * Ϭsέňpearm\x8aaʢŕʢ̘ƀRnā: °Spªearma+\x8eUn¡ rƤʇankǧǁ mc̼oVrrelĮȷǙatiʤͿon\nͨ\nRe\x93turͳnƠΌs\nś------̝-\x86\nŶó]ϥnp.ɰndarrʩǖŘaεyǺ\n ́  ɠ CorreƄlaάÛtĽϕioEnĂ mʻ1aƛtrϪixe')), If(test=Compare(left=Name(id='method', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Constant(value='pearson'), Constant(value='kendall'), Constant(value='spearman')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="'"), FormattedValue(value=Name(id='method', ctx=Load()), conversion=-1), Constant(value="' is not a valid method of correlation.")])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='column_s', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='column_s', ctx=Store())], value=Call(func=Name(id='listKsP', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='correlation_matrix', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segments', ctx=Load()), Name(id='column_s', ctx=Load())], ctx=Load()), ctx=Load()), attr='corr', ctx=Load()), args=[], keywords=[keyword(arg='method', value=Name(id='method', ctx=Load()))]), attr='values', ctx=Load())), Return(value=Name(id='correlation_matrix', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='PLOT_CORRELATION_MATRIX', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='column_s', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='method', annotation=Name(id='STR', ctx=Load())), arg(arg='mode', annotation=Name(id='STR', ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='heatmap_kwargs'), defaults=[Constant(value=None), Constant(value=None), Constant(value='pearson'), Constant(value='macro'), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=10)], ctx=Load())]), body=[Expr(value=Constant(value='PloƎt pairwise c˟˂oĒ\x87rrelatĜion heatmap for selͼected segments.\n\nParamet͘ersŦ\n--R------e--\nʖts:\n    \u0379TSData˖sϦ˦eϽtɾ wƐ"ith ͱtimϼeseries datǐa\ncolìumŨns:\n    Columns Ĳ́to use, if NΩŰoʓne(Ŗ ʎuse a̎ll ȴcolumΖns\nsegϿmentsΊ:\n  Ʋ  Segments to ˗use\nmϘeƶthŉo¸d:\n Χ\x9e  Ȝ MƎe\x8ethoW̘d of coȣrrelationƇ:\n\n   ̶9À * pƢeaɅrs̕on:o stå$ƍn̜dard Ǻǝcņ́orrel͉õÈȚationϳ coeffˊicient\n\n    Ŏ* kendal˿ïl: ΆKeÛndall Tʬau cǘorrelǞation co͟efficiˮƾent\n\n   ̆ ŭȺ* spearmǢan: SΪp˩ear\x8aman rank coǎrrel̜ation\n\nmode: \'macro\'< ψor \'per-segΕmeònt\'\n ˊ   Agg;̿re7gatióon \x86modƶe\ncolϛumns_num:\n  N  ŁNumber of ̀sǪąub1plots ͜`cȄoʼluϫ¾mns\nfigsize:\n  ȑ  ɘsKize of tʴhe ʑfæiŠguȎrǄe Ʒin Ʀfinches')), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='column_s', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='column_s', ctx=Store())], value=Call(func=Name(id='listKsP', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='vmin'), ops=[NotIn()], comparators=[Name(id='heatmap_kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='heatmap_kwargs', ctx=Load()), slice=Constant(value='vmin'), ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[]), If(test=Compare(left=Constant(value='vmax'), ops=[NotIn()], comparators=[Name(id='heatmap_kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='heatmap_kwargs', ctx=Load()), slice=Constant(value='vmax'), ctx=Store())], value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='mode', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Constant(value='macro'), Constant(value='per-segment')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="'"), FormattedValue(value=Name(id='mode', ctx=Load()), conversion=-1), Constant(value="' is not a valid method of mode.")])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='mode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='macro')]), body=[Assign(targets=[Tuple(elts=[Name(id='fig', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='subplots', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Assign(targets=[Name(id='correlation_matrix', ctx=Store())], value=Call(func=Name(id='get_correlation_matrix', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='column_s', ctx=Load()), Name(id='segments', ctx=Load()), Name(id='method', ctx=Load())], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=Call(func=Name(id='listKsP', ctx=Load()), args=[Attribute(value=Attribute(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segments', ctx=Load()), Name(id='column_s', ctx=Load())], ctx=Load()), ctx=Load()), attr='columns', ctx=Load()), attr='values', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ax', ctx=Store())], value=Call(func=Attribute(value=Name(id='sns', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='correlation_matrix', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='.1g')), keyword(arg='square', value=Constant(value=True)), keyword(arg='ax', value=Name(id='ax', ctx=Load())), keyword(value=Name(id='heatmap_kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_xticks', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='le', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value=0.5))], keywords=[keyword(arg='labels', value=Name(id='labels', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_yticks', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='le', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value=0.5))], keywords=[keyword(arg='labels', value=Name(id='labels', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='setp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='get_xticklabels', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='rotation', value=Constant(value=45)), keyword(arg='ha', value=Constant(value='right')), keyword(arg='rotation_mode', value=Constant(value='anchor'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='setp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='get_yticklabels', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='rotation', value=Constant(value=0)), keyword(arg='ha', value=Constant(value='right')), keyword(arg='rotation_mode', value=Constant(value='anchor'))])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_title', ctx=Load()), args=[Constant(value='Correlation Heatmap')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='mode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='per-segment')]), body=[Assign(targets=[Tuple(elts=[Name(id='fig', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])], keywords=[keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='correlation_matrix', ctx=Store())], value=Call(func=Name(id='get_correlation_matrix', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='column_s', ctx=Load()), List(elts=[Name(id='segment', ctx=Load())], ctx=Load()), Name(id='method', ctx=Load())], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=Call(func=Name(id='listKsP', ctx=Load()), args=[Attribute(value=Attribute(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Name(id='column_s', ctx=Load())], ctx=Load()), ctx=Load()), attr='columns', ctx=Load()), attr='values', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='sns', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='correlation_matrix', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='.1g')), keyword(arg='square', value=Constant(value=True)), keyword(arg='ax', value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), keyword(value=Name(id='heatmap_kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_xticks', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='le', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value=0.5))], keywords=[keyword(arg='labels', value=Name(id='labels', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_yticks', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='le', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value=0.5))], keywords=[keyword(arg='labels', value=Name(id='labels', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='setp', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='get_xticklabels', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='rotation', value=Constant(value=45)), keyword(arg='ha', value=Constant(value='right')), keyword(arg='rotation_mode', value=Constant(value='anchor'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='setp', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='get_yticklabels', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='rotation', value=Constant(value=0)), keyword(arg='ha', value=Constant(value='right')), keyword(arg='rotation_mode', value=Constant(value='anchor'))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='Correlation Heatmap'), op=Add(), right=Constant(value=' ')), op=Add(), right=Name(id='segment', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_validate_intersecting_segments', args=arguments(posonlyargs=[], args=[arg(arg='fold_numbers', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='f', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='fold_number', ctx=Store()), iter=Call(func=Attribute(value=Name(id='fold_numbers', ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='fold_start', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='fold_numbers', ctx=Load()), slice=Compare(left=Name(id='fold_numbers', ctx=Load()), ops=[Eq()], comparators=[Name(id='fold_number', ctx=Load())]), ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fold_end', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='fold_numbers', ctx=Load()), slice=Compare(left=Name(id='fold_numbers', ctx=Load()), ops=[Eq()], comparators=[Name(id='fold_number', ctx=Load())]), ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='fold_start'), Constant(value='fold_end')], values=[Name(id='fold_start', ctx=Load()), Name(id='fold_end', ctx=Load())])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='fold_start'), ctx=Load())))])), For(target=Tuple(elts=[Name(id='fold_info_1', ctx=Store()), Name(id='fold_info_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='f', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Subscript(value=Name(id='f', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='fold_info_2', ctx=Load()), slice=Constant(value='fold_start'), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='fold_info_1', ctx=Load()), slice=Constant(value='fold_end'), ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Folds are intersecting')], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='plot_clusters', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='segment2cluster', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='centroids_df', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='bPlo¾t ʠ2ʋǡclus˼tʢeğrsǦǴ Ìι[wřithÏ ceƷntr~oids].\x94\n\nPʸvaʷrɥŜa̝mĆeteĦrsf\n----ω--\x98-e---ʔ̙ʨ\ntΝșsʯ˭Ō:Ƿ\n Þ   pTSD@óaǳtasǰet ̙wiȥt\u0383ǟh tςiʣmeseɳries\nĀseĬgm̀e×nt2cl̙uȜster:\n    ĩma¶pιp˸iɺȢǻng frŦoméϗ ûsegment to ȹclustĮer× iɀôn fϷoærŵm4at {\u0381ķsüeg2meϵǩntͪƑ: cluϗster}\ncȁĭͧentroɔiědsʡ_Ydf:\n    dʛ½atʶȰʏafȤraŴȆme ˌwith ceÍntroΌids\x9cɦm˛Õ\ncoυlȬumns_Z̒\x8fǊn/um:Ω\n    numb̻er Ǿof col\x8eǆumɤns in ǅsubplotsǃ\x93\nfig\x9csirzɗeǉ:ǵ\nƵĈǏ \u038d Ɂ  ʏsizĲe of ½ʸthe>»\x9b figure pʖerĚ subpƚślɞʋot ɧwith oneɕ s͝˿Ňegmen\x8ft πinf̹ \x94fincheŤėǴs')), Assign(targets=[Name(id='unique_clusters', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='segment2cluster', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='le', ctx=Load()), args=[Name(id='unique_clusters', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Assign(targets=[Name(id='default_colors', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='plt', ctx=Load()), attr='rcParams', ctx=Load()), slice=Constant(value='axes.prop_cycle'), ctx=Load()), attr='by_key', ctx=Load()), args=[], keywords=[]), slice=Constant(value='color'), ctx=Load())), Assign(targets=[Name(id='segment_color', ctx=Store())], value=Subscript(value=Name(id='default_colors', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='cluster', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='unique_clusters', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=ListComp(elt=Name(id='segment', ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Name(id='segment2cluster', ctx=Load()), ifs=[Compare(left=Subscript(value=Name(id='segment2cluster', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='cluster', ctx=Load())])], is_async=0)])), For(target=Name(id='segment', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_slice', ctx=Store())], value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_slice', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Name(id='segment_slice', ctx=Load()), attr='values', ctx=Load())], keywords=[keyword(arg='alpha', value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='sqrt', ctx=Load()), args=[Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])], keywords=[]))), keyword(arg='c', value=Name(id='segment_color', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[JoinedStr(values=[Constant(value='cluster='), FormattedValue(value=Name(id='cluster', ctx=Load()), conversion=-1), Constant(value='\n'), FormattedValue(value=Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' segments in cluster')])], keywords=[])), If(test=Compare(left=Name(id='centroids_df', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='centroid', ctx=Store())], value=Subscript(value=Name(id='centroids_df', ctx=Load()), slice=Tuple(elts=[Name(id='cluster', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='centroid', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Name(id='centroid', ctx=Load()), attr='values', ctx=Load())], keywords=[keyword(arg='c', value=Constant(value='red')), keyword(arg='label', value=Constant(value='centroid'))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='plot_time_series_with_change_points', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='change_points', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load()), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\x8aļϢČPlot Ās@egme)Ǹnɧts dđwi˝th ̊their Ƌtȯɦrɫcfend έch+(ƵangÄe pŲƞoɉûȒĐƞi\x93nt͚ϵsǡ.\nͩ\n˞ʐP˧ĔäϪarC͝ametſͼe\x85ȱǛrs\nƇ\x98ˤƂ--Ϯ5ɭ-˄--"?ƴ--5-ƈ-3ǗĉÞŝǬʤ-ȗo\ntϝɦȡ̟ɾέsǮƹ:ƠɃ\nȿ   ˖ ùT\\SDaŋÏ\x89taseʢ<tα͖ ϒw?ƀi½ʅth Ʒ§ϝtōYåimeǮseɶrϷiIƕeò\x86Ƙs̀\ncϗhağnɁge̩_˰pʄoĔÎáŴiō̋nts:\nϷ G à  dʢơŹ÷ύĜ\x8dƾľŕi\x84Ιctʹ¶ioϺnƔaryrńǋ( wiǜΛȲÓt́h tarŁƩen-d chaǧÌn¢gÞțe p˓oinÊɃg&ơ˗͓tȍ̼s foǁr ea\x9cLʐcÜȃǨϼh segmeənƉî̷¾tʳ\x98,ͤ\n͎ Ͳ Ɣϗ χ caΪn\u03a2ʉx ĜŪbeɐΖ U˿\x9cίɃoƣbût˒ΗainešdĀϐ̈ βɎ͝ɩfrom Ɲ:$ɋ̹ɮĀpy:ɊfuDʺnc:`\u038b~eĥtnʢa̓ͿÕ.a͐n˞al\xa0ÁϮysisŽɯǚ.cΈhϹϹ˩@aϴn$ϋgeÕΆƭƩȫ_pȋoin̼ts7_ĭtreēndȟ.sτeǤģíɆ˦̛arǩch.fiİƍǘ̴ndſ_ãōcΐhange_Ƕpóʩo±in̖ΉtƊϧ̆ţ¤͆sǋ`\nseʑgm͊B\x90enώtoȀΨΜs:ȔFı\n˝ʨ˄ġ ŏǎ  /^ sͨͼeg\x98îmŕeƖnts˕ϒ͊ tˋo ŀusɉȆŒe\ncolJ͊ƶumns\u0379_nEumƬ:\n̒ \u0382   Ȍnάǌuųõmber͈ oŲ̃f˖\x9băǺò ŗsņ̿ubplɚots colƵuŒ4̦mns\nfϾ˂igsi\x8aŢ̑zeů:\nŁ ̇   sƁize ̯of7ʒ thɜeȯ ΐΥfigſ ρure ŭperŽ subɳϒÅɖp˵ͦʛǆ|ŁùāψȫlϿoȟt˓£ɋ ɺwđ˽iɮƀΒKth Ĭ̝o¿ne Ŀsegmźent in iśnʶchňesʨ˷Ǚ`\n̒stŹ̺õartʟ:·\n  ʖ  Ûʱs\x9dtart ƻt˕imèʪǩψes˗ͧ̕t̏Δų³ȵƍʒamÈpΰƳǲ\x9b Ƙf˾NorKl ȋ£pflϯüoƸṯƀǀ\nŸ͚enˍd:ÞͿ\n\x90˿ Ȣ ų  Ťend ˬtȺʷimǚestƅͬƋaȨmÓ[p fĢͬoͻr pˆlɏˆot')), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_borders_ts', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='change_points_segment', ctx=Store())], value=Subscript(value=Name(id='change_points', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='target', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='change_points_segment', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='change_points_segment', ctx=Load()), ifs=[Compare(left=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), ops=[Lt(), Lt()], comparators=[Name(id='i', ctx=Load()), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])])], is_async=0)])), Assign(targets=[Name(id='all_change_points_segment', ctx=Store())], value=BinOp(left=BinOp(left=List(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load()), op=Add(), right=Name(id='change_points_segment', ctx=Load())), op=Add(), right=List(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])], ctx=Load()))), For(target=Name(id='idx', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='le', ctx=Load()), args=[Name(id='all_change_points_segment', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='start_time', ctx=Store())], value=Subscript(value=Name(id='all_change_points_segment', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='end_time', ctx=Store())], value=Subscript(value=Name(id='all_change_points_segment', ctx=Load()), slice=BinOp(left=Name(id='idx', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='selected_indices', ctx=Store())], value=BinOp(left=Compare(left=Name(id='timestamp', ctx=Load()), ops=[GtE()], comparators=[Name(id='start_time', ctx=Load())]), op=BitAnd(), right=Compare(left=Name(id='timestamp', ctx=Load()), ops=[LtE()], comparators=[Name(id='end_time', ctx=Load())]))), Assign(targets=[Name(id='cur_timestamp', ctx=Store())], value=Subscript(value=Name(id='timestamp', ctx=Load()), slice=Name(id='selected_indices', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='cur_target', ctx=Store())], value=Subscript(value=Name(id='target', ctx=Load()), slice=Name(id='selected_indices', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='cur_timestamp', ctx=Load()), Name(id='cur_target', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='change_point', ctx=Store()), iter=Name(id='change_points_segment', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvline', ctx=Load()), args=[Name(id='change_point', ctx=Load())], keywords=[keyword(arg='linestyle', value=Constant(value='dashed')), keyword(arg='c', value=Constant(value='grey'))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_residuals', args=arguments(posonlyargs=[], args=[arg(arg='forecast_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='ts', annotation=Constant(value='TSDataset'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), Assign(targets=[Name(id='true_d', ctx=Store())], value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='forecast_df', ctx=Load()), attr='index', ctx=Load()), Slice(), Slice()], ctx=Load()), ctx=Load())), If(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Constant(value='Segments of `ts` and `forecast_df` should be the same')], keywords=[]))], orelse=[]), AugAssign(target=Subscript(value=Attribute(value=Name(id='true_d', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store()), op=Sub(), value=Subscript(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='new_ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='true_d', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='new_ts', ctx=Load()), attr='known_future', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='known_future', ctx=Load())), Assign(targets=[Attribute(value=Name(id='new_ts', ctx=Load()), attr='_regressors', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())), Assign(targets=[Attribute(value=Name(id='new_ts', ctx=Load()), attr='transforms', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='transforms', ctx=Load())), Assign(targets=[Attribute(value=Name(id='new_ts', ctx=Load()), attr='df_exog', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='df_exog', ctx=Load())), Return(value=Name(id='new_ts', ctx=Load()))], decorator_list=[], returns=Constant(value='TSDataset')), FunctionDef(name='plot_residuals', args=arguments(posonlyargs=[], args=[arg(arg='forecast_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='feature', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='transforms', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Transform', ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='timestamp'), Tuple(elts=[], ctx=Load()), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='Plo°t ɾrˢeʼsiɁduaɋl̥sȶ for pʾȹredictiƦons fʯrom backtest against some featu\x93re.\n\nPárameters\n--------ŷɋ--\nfoǵrοec,ast_̽dyf:\nʃ  ň  for˕ecastͥed ϨdaəƯtafraͨmeē ϻwith ˩̡timeseries data\x8a\nts:ʍ\n    da~taframe of tiǣmeserieosƯ that w\xa0ɯas ȅused for bạcktzestȺ\nfeature:\n    feȣʷaturƲe name to ͽdraw agμaiưƟnst residuǚœals, if "timestamp" plot r{esƒidŬu·͈als agaiƂnđst thʐeȷ tζimeǠstaÜmp\ntranüsforms:\n  \x99Ő  s+equenc¿e of tra¬nsforms tož g̐eɇt feature̦ colum\x83n\nUγƣȈƴsegment̚s:\n   ɒ̚ segmentůs to| usƆe͓\nco\x9alumĸns_num:\n    ˰Änumber ofɌ columns in subpϛlot\x80s͊\nfigsize:\n ΕΉ   ôsizɧe of thķe figure per subplot with ˵o«ne segment in inches\n\nRai͜ses\n---Ɛ-ś--ϵϷ\nVĮŇalueŘErroor:ĭ\n   · ÈifȲ featuĽre isnǯ\'t pʶreseˮϞnt iʳÎn the dataset ǳaftμeʪr appƢlying trans\x85foǋrmations͠\n\nNote̓s\n-----\nPʏarameter˖ ÷``traƴnsforɂόŲmūs`` Žis Eʋnecessarƶy beϱcausγe someƈ piƜpelͷi͏neƸ;s¢ does\x85n\'\x96t sȖave features in theiĞr forecastsŹ,\neƈ.g. Í:Έpy:mod:`etnħƬŢa.ensemblejˮs` pipelines.')), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Assign(targets=[Name(id='TS_COPY', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='TS_COPY', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='transforms', value=Name(id='transforms', ctx=Load()))])), Assign(targets=[Name(id='ts_residuals', ctx=Store())], value=Call(func=Name(id='get_residuals', ctx=Load()), args=[], keywords=[keyword(arg='forecast_df', value=Name(id='forecast_df', ctx=Load())), keyword(arg='ts', value=Name(id='TS_COPY', ctx=Load()))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_residuals', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='feature', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='timestamp')]), body=[Assign(targets=[Name(id='all_features', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='feature', ctx=Load()), ops=[NotIn()], comparators=[Name(id='all_features', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Given feature isn't present in the dataset after applying transformations")], keywords=[]))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_forecast_df', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='segment_residuals_df', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='residuals', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_residuals_df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='feature_values', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_residuals_df', ctx=Load()), slice=Name(id='feature', ctx=Load()), ctx=Load()), attr='values', ctx=Load())), If(test=Compare(left=Name(id='feature', ctx=Load()), ops=[Eq()], comparators=[Constant(value='timestamp')]), body=[Assign(targets=[Name(id='folds', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=Constant(value='fold_number'), ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='fold_number', ctx=Store()), iter=Name(id='folds', ctx=Load()), body=[Assign(targets=[Name(id='forecast_df_slice_fold', ctx=Store())], value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=Constant(value='fold_number'), ctx=Load()), ops=[Eq()], comparators=[Name(id='fold_number', ctx=Load())]), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvspan', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='forecast_df_slice_fold', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='forecast_df_slice_fold', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='alpha', value=BinOp(left=Constant(value=0.15), op=Mult(), right=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Subscript(value=Name(id='forecast_df_slice_fold', ctx=Load()), slice=Constant(value='fold_number'), ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[]), op=Mod(), right=Constant(value=2)))), keyword(arg='color', value=Constant(value='skyblue'))]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='scatter', ctx=Load()), args=[Name(id='feature_values', ctx=Load()), Name(id='residuals', ctx=Load())], keywords=[keyword(arg='c', value=Constant(value='b'))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_xlabel', ctx=Load()), args=[Name(id='feature', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='TrendTransformType', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='ChangePointsTrendTransform'), Constant(value='LinearTrendTransform'), Constant(value='TheilSenTrendTransform'), Constant(value='STLTransform')], ctx=Load()), ctx=Load())), FunctionDef(name='_get_labels_names', args=arguments(posonlyargs=[], args=[arg(arg='trend_transformVFs'), arg(arg='segments')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='etna.transforms.decomposition.detrend', names=[alias(name='LinearTrendTransform')], level=0), ImportFrom(module='etna.transforms.decomposition.detrend', names=[alias(name='TheilSenTrendTransform')], level=0), Assign(targets=[Name(id='labels', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='transform', ctx=Store()), iter=Name(id='trend_transformVFs', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='labels_short', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='i', ctx=Load()), slice=Slice(upper=Call(func=Attribute(value=Name(id='i', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='(')], keywords=[])), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='labels', ctx=Load()), ifs=[], is_async=0)])), If(test=Compare(left=Call(func=Name(id='le', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='unique', ctx=Load()), args=[Name(id='labels_short', ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='le', ctx=Load()), args=[Name(id='labels_short', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='labels', ctx=Store())], value=Name(id='labels_short', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='linear_coeffs', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Name(id='segments', ctx=Load()), ListComp(elt=Constant(value=''), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[])], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='le', ctx=Load()), args=[Name(id='trend_transformVFs', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='trend_transformVFs', ctx=Load()), slice=Constant(value=0), ctx=Load()), Tuple(elts=[Name(id='LinearTrendTransform', ctx=Load()), Name(id='TheilSenTrendTransform', ctx=Load())], ctx=Load())], keywords=[]), Compare(left=Attribute(value=Subscript(value=Name(id='trend_transformVFs', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='poly_degree', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[For(target=Name(id='sef', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='linear_coeffs', ctx=Load()), slice=Name(id='sef', ctx=Load()), ctx=Store())], value=BinOp(left=Constant(value=', k='), op=Add(), right=JoinedStr(values=[FormattedValue(value=Subscript(value=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Attribute(value=Subscript(value=Attribute(value=Subscript(value=Name(id='trend_transformVFs', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='segment_transforms', ctx=Load()), slice=Name(id='sef', ctx=Load()), ctx=Load()), attr='_pipeline', ctx=Load()), attr='steps', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='coef_', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='g')]))])))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='labels', ctx=Load()), Name(id='linear_coeffs', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='plot_trend', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='trend_transformVFs', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='TrendTransformType'), Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='TrendTransformType'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Assign(targets=[Name(id='df', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='trend_transformVFs', ctx=Load()), Name(id='listKsP', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='trend_transformVFs', ctx=Store())], value=List(elts=[Name(id='trend_transformVFs', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='df_detrend', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='transform', ctx=Store()), iter=Name(id='trend_transformVFs', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Tuple(elts=[Name(id='labels', ctx=Store()), Name(id='linear_coeffs', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_labels_names', ctx=Load()), args=[Name(id='trend_transformVFs', ctx=Load()), Name(id='segments', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Initial series'))])), For(target=Tuple(elts=[Name(id='label', ctx=Store()), Name(id='df_now', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='labels', ctx=Load()), Name(id='df_detrend', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='df', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='df_now', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()))], keywords=[keyword(arg='label', value=BinOp(left=Name(id='label', ctx=Load()), op=Add(), right=Subscript(value=Name(id='linear_coeffs', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()))), keyword(arg='lw', value=Constant(value=3))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_get_fictitious_relevances', args=arguments(posonlyargs=[], args=[arg(arg='pvalues', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ΠCɖo{nvÑɶeÈnrύt p-̸ͫvȴalČu̶̎eƟsǭɺ ǜiϖnto fϘiƽcŵtëitƨ(C©ious vò̦aϽriȣɧables, ΚČ˕wʩithĐ Ŕ˹fuɋϕnƕ:cſȭĜtiḼ́éon őf¶(Ơx) = ϸ1 ϡ˵ʋɐ-ˡ Õ¬̈́x.\n\nʶAǚl6soɽ Ϸc8oʬĐn̾Ļŋƅv͒erctsλ͝mɍŏƐϹ alωpʥhƧaĩ in©Ȣtǵ<ͤŮȄoƝ fiɁcǹtńitiouƷÃƓs ĨvaǻrȥiǮable.\nϒ\nPĨar\x80ameters\n-ƘɖȤ-͚Ȝ-͋--ϥñ¹---â-̏ˣ-\npvaˆluɢ<ɏļes:\nƏȑͥ˟ Ƕ ͒˩̷  dataFraǇme Ͻ̹wɺith ̝pϡʾΛ̑ĸvʌalʾŎƐuʹe&dϽʯµs\nˑĕa˖lphľa:\n Ȋĺ  ǿ͋ Ͼ\'sɯigʛłþnifȰŷic$ʁΥaĉϚncMŖȂ\x9f͏Ϗe leȆvˌel,Ʈ ςȽǍdefauʶνlηt ϵalpǈha =ƣ ɬǰ0̡ϰͬ.05Ǐ\nɐȷ\n˨ReàtuQēˤŋɻ̫rnƅsɅ̤\n-Σ-ŞɌ-----ϩ\nͬpvaοΜƦ˔lƃȻϗu˪ɤesε:)ʑ\n ƌ   ̸ͥarraΰy1ȡ ̾wȮitČƝh fict\u0378itǤiͥ͘oi͚Ȱɦuɰ˾ƕs ȫķřĕelϙЀeΟŤɀĳϹvƪaſnňcʐes\nnǅeȗˢȩĂʼw_aƜlpha:\nŨ  e\x8a  ȑϛadŎjǓus}t\u0381e˲ɕʪd s̺ȬŖiήıgniX̗fėħ÷ica}nczex5ɏ leve"͐lõ')), Assign(targets=[Name(id='pvalues', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='pvalues', ctx=Load()))), Assign(targets=[Name(id='new_alpha', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='alpha', ctx=Load()))), Return(value=Tuple(elts=[Name(id='pvalues', ctx=Load()), Name(id='new_alpha', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='plot_feature_relevance', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='relevance_table', annotation=Name(id='RelevanceTable', ctx=Load())), arg(arg='normalized', annotation=Name(id='bool', ctx=Load())), arg(arg='RELEVANCE_AGGREGATION_MODE', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='per-segment'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='relevance_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='top_k', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Attribute(value=Name(id='AggregationMode', ctx=Load()), attr='mean', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=0.05), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='ßPěǚƔlͬGɜot̵̀" relev̳anȶΩcε͌Ⱦˑe oŤäf Ȩtˮhe f\x8beatuδrƷes.ǻ\n\nTŴheØ mostŨŇ͵ȴ ǂIiƂmpo͔ˌrtƌaʑφƄnt fƱǼeaύturƚδƚḛsś aόŒre# Ǌκńat theɤȁ toϳpϒ, thŕƫ͏e hlea˦stŤ ʯim²portüażnˉ͐Ȇt +aȝrÝeń aźt thːe bo̭tƄɅt}õoHm.ƽǺ\n\nFˡǤjƔðorϦͦ ƬW:Z\x8apĿy:ɱclpā˽űTa˧sǁʍsϠ:`ǹ~eΩĀôtȿnΤaɡ.a\x9bnal˒ʽyđsiȅϛθsĐƗ.fηȔeatƙˇ\u0382uÇrÅʯe˹_ǍŏͰr4eĒϒlŞ\x84eßƹvance.ΖrɈeʅleιvaϊnc¾e.StCatis͕Ϝt̠i͟ÞcsRe͔levˁ̘a¨ɇncȲeTͶaŇbʷ_le`̩ a\x84lsɤoĴĽǱ ʬÄp³Υlot vͻe͵+rtƛǧɬ\x82iǠzcaʲlìϋ line: tňɼBȥ˄r\xa0ϧansfϧo\x88\u0383rmeēdħ ̳sȻi͎ǵμɧ˕gnϒifiɦcanc̨ΏeΉŒ leϻũvelª.Ěͥ͑\nϰˁ\n* ͢ȦʬVa͍lɽuesĉ˱̋ σ̢ŏÅthaȟtà l\x90iʼǕǲe ɉďto tȢhe Ʉ˚\x8fright o˗Śfσ̷̘ Τthi˥Θs lξrǙiņnčΩˠeϱ ſha\x93vȥe Αp̳éŹϐ-\x95val\x88\x8cue"ùè < Čìal¹ǿɿph˰ạɣ.\n\nƺ\x96Żč* ͠ϲAnƚ̀d thͱe d1va/lu˻δeʥņs͛ thΖat l\x83ƍiċĳe to Ƥ\u0381the le̍̕fċt Ȏŗh¸ʿŎave p-va̕lue ȟèĐ> alɫphòa.Ĩˑ\x90\n˿\nP\u0379arªëamƐe\u038dterɊÎźsĺ\nʫ-ɣoϩ(--̄--Β----͠-/?\ntêϲsǐ:\nȠ ̳  <ŵ ɽTSĹD]ŲʑʰƁơɽĥŴEawǆta\x9cs¨ɀɎȼe\x99̅t wiΊtƯh tåi̯mʑesŒľzʒeriưes dàatǋ̉a\nĶrǞeʰɖ?ˇƉl\xadev\x8eŅanc˿e΅ʋ_̬tableˈ:\nŎ˒   ÷ ΜƁmŪeϢtĊýhod tǑoo eva0Íluate Ǖt˶he fÜƉe̙aturƠ͐e ʆr¶Ăel̳evgǷa̓nɂcˬfe;\n\n  h Ѐ Ƶȏǐ*ʧ if :ǤǆpyϜ:όcɐɖlaĜ̫ssȑɦ͆:`ͅ~etƷnńϚa.aƒnaɩ9lŘŌysʠɇis.fƅʠeʦ;atuŋre_re̼ϱāŽlevΖa\x9eΗnc6e.ΞreªlȅvͷaƜLnυce.SͻtatiͼstÙĝicsR̫áǑeleȥvaϠϚnɪűceɬTaǻbɐlÊ\x92ȼʠhɃ̓ͶeƝ` tǢͱable ȓiǚs ɒØϲused tɈĲĪ˾hϴeŝn ͎r̰Ͻȅelʊe͋vanceͷs ɖșarŵξϨeB͚ ͽnυƕǧoȎźrϛmΩͥaȩlizüőϺed`Ƒ pŻ-ϤvaǪlu˄es˻\n\n   ϐ *͒ ˾̯if :ūpæɒÐyCÉΑ:class:`~keɾR\x97tna.Ͼanǵalysis.feɊĥδÓˍʛatĺĖure_rƙeǺĜ\u0380leȚvʶaɌ\x8aåǧŶnƼCɻcȭeκ.re¿leɍvanǰc5\x90ŧɀëe.ṀɹþéodǞΛ0eʾlơPRelȇevanòpcΣBeTºaɬˆbοϳleɀ˗` \u0382ȋǯtaǛble iôƅs ̉used thˮe̶nʍ rʎú\x80elȗζevǈanc˜\x95eƊſʔs ar͂e͇ imŢpoνǗrʵŇta͕nĮceÞÐ̃s~Ź fˊǃĴğēɻ\u0380rʏomϋ ̼so͒kƲmeȦ[ĵ mo]ǚϭdχelɵ\n\nŮnoĸʱΑrma\x9fliȗzΦ̷ed:T\n  ̶Ȋù͌ϩ C wɾhęth̞er ìo͞btOaiɘnčϠedN ɶƐrƦaRƹʎe̞͝ÜȽlevϱanϺƂǃces ʯshoΆ̥uldɆ ɐbẹÖ normƶȅaʛlŲ˭iȀȶzˆϢeŐǞˆd tȍ\x84¡ \x89ƨͮsŖuɛÉľm̢ up ĵto 1\nɓrƗelϚeЀ͢v)ưa3nceͫ_ă˸ÀgϵgregatȠ͌ΡȻǸ\x9cio͏ϙşn_̢mode:\n;    ŞagȮFgrȬ½\x91̽Ȝeĥga,tion ŗįŔ͟þs˃tȅraŋ͖te˿gΪy for žobtainͤey(dΙ˨ϣžʣ\u0379ρãĸʾ fųǋeat\x8dʱurȝßȫuͲe relʢevaɦnce tϐÅablϖŋe;˭̰\n ăŋǶϦĿ ȴ ςő łaƽ̟ll t" Aheƞˤ stɴrŎ>aūʡ˧2ât_«etgies cȪaĊʲn Ý\x82\u0380\x92be̺ ¯eǊxða͑ʫmine˸d\n    aǾtʵ :py˔:cǑlas΅͐əĨs3:`ʒà~eΟ̖˓tnaͲ.aǾġϰʹnϕÑͤǀ\u0382aĦlysis.feŵaʆt̾urʠ\u03a2eůʁ_ ƌs̾ʡe6lϙ\x83ec͠tiȠo˴~̆n.ġ\x90ϟmΤrmr_Țseʄȼleʢȣcsϧutioœǔ̊nŧ.A\x96gįǐgrʫ͔̆Ύťēgaͼʔʺ˺ʳtˌiĿȘ̄Ő\'o¦n̜þM\x80o>ïȺŕdýey`Ί\nrLʹΝ\x83ÅΜuežƘlevǬaɫȒnceʷǒ_Ȉßͯ͢pŇÈarʎÒa´msȱȵ:ɍ\n    add˫it̟͊ŅioŴ͔ʺnal k¯\x99e@ywʳĻordˠ arguÜ˂mɨ`ʾΗăeθnʊ:˓̦tť¥ǂs for͊ ¡the± ``__˫cƁZ̃˝allƼ__ǟɦ`ý`Ļ\u038d͔αȵ~ȩ ¾̰methȂod ̃ofȻæ\n    Ŋ:py:OcˈlWaɽsǯɶs:¹`űϙţ~μƷɤeȔtnʕa.ȓanΉƤal4̃͆ày˴sis.fǩea˩tȦ̺ureǓ_reě̷Ūǖîle-čvʷancİeĶɸ.Ďrelevanc͢eȣ̯ʿςȏȷ.ȝůRo\u0380ʜelevanέŐcπʸǼeʸ̪Tɫable`˞\nt̔oʕˬpƒ_ÿͷk˨:ʹ\n˜ʠĀ¨Ɗ  ̿\u03a2 ʵ num¨ɏbeƙr Ϩʰof besô]ͥt\\ǻPţ fȡĩeat͒œuresȅʢ to ʺpƯlOotʓ, if \u0381No˵Ƕ̯áЀȵnǯ!e:F M^pͩlʞ̺o\x96Ȯtʸ all̚ ̩t¦hňe ϸ\x91fō̦]˼þĞeaturϾe˙sĒ\nalpɾȱha:\n Ɇ̹ ˸  ĩsÀāiTgniſfΎicaDƽnc̟ǟeȲ RȻleΓˀv˘eel, d:ϦĀãͻƒͭefaɔƇultł ͒a̙ȶl˖ʳphͪa = 0.0Π5, only ̰for ˳ʣŚ:pÆĳy:cϞĝlĄa±˹ŔήsΌβs:`έ~etna.ɮanͬalysΝʼis.feǨaȋͩturƢe˫_rĜƷeͥleˮvance˽.ȳrelevance.ƔSʈtatistiƚpcsReǿŽleηPvaÝ\x96ncɠɞeTaʣblŗe`̿\nƋsČegmǐθńİeƁεnΦtȅs·:\nɔ    seŃ¯®gϕ̳ǭmɼeǳʰntsɸʶ Ņ̣ět́̽?o ıus1̲ϥeɅ̏ɭç\nc\x83ώϘŭɼȈwoηlǄuŧmǴÀnǠs_nľuĹm˽:Ƙ\n ˝χ Ϭ  ɘi˚fĩk `ŸËļ`reōʙleΛva˼ɓnce_aȯggregaCͳη¼t͠ʘèion·_modϖe͍Ąŀ=ΰ"pŘe\\ǙĭǸɺǯϕr˨-segmenttɱ"ϸ`åɠ` ø¯nuɋΦmber Ĳɟ\x97of ϿcoɍlǗΈÖuúmns in ̤sđ̙ɰƥuÞ̔bpUlăots, ³ʪoΝπ=čt¤ǫheǫϊrΪwise \u03a2th\x83Ϊɺɰe έʷv{aƃ̐luͼe ϘƆiǫsà ignȨʪored\nʘ\x86Ȅ̃˩figsŘůizze:\nɛ Ĩ ǳ  ǻsiɃś̃ġze of2 th\x83͘ʅe ˟-figł̏˫ure̟͵˪˚ pƄerɓ ̉suοbεpfloȽt wiŸ¾ϘtƯh oɥneɪϨ se\x8bgmTenĆ˥tɀơ iͱɠnʎ ƛiΞ¾ṇchÕιḺ́eΔs')), If(test=Compare(left=Name(id='relevance_params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='relevance_params', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='border_value', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='features', ctx=Store())], value=Call(func=Name(id='listKsP', ctx=Load()), args=[BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), op=Sub(), right=Set(elts=[Constant(value='target')]))], keywords=[])), Assign(targets=[Name(id='relevance_df_', ctx=Store())], value=Call(func=Name(id='relevance_table', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segments', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), keyword(arg='df_exog', value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segments', ctx=Load()), Name(id='features', ctx=Load())], ctx=Load()), ctx=Load())), keyword(value=Name(id='relevance_params', ctx=Load()))])), If(test=Compare(left=Name(id='RELEVANCE_AGGREGATION_MODE', ctx=Load()), ops=[Eq()], comparators=[Constant(value='per-segment')]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='relevance', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='relevance_df_', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='relevance_table', ctx=Load()), Name(id='StatisticsRelevanceTable', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='relevance', ctx=Store()), Name(id='border_value', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_fictitious_relevances', ctx=Load()), args=[Name(id='relevance', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='na_relevance_features', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='relevance', ctx=Load()), slice=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), ctx=Load()), attr='index', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Relevances on segment: '), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1), Constant(value=' of features: '), FormattedValue(value=Name(id='na_relevance_features', ctx=Load()), conversion=-1), Constant(value=" can't be calculated.")])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='relevance', ctx=Store())], value=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='ascending', value=Constant(value=False))])), Assign(targets=[Name(id='relevance', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Name(id='top_k', ctx=Load())), ctx=Load())), If(test=Name(id='normalized', ctx=Load()), body=[If(test=Compare(left=Name(id='border_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='border_value', ctx=Store())], value=BinOp(left=Name(id='border_value', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[])))], orelse=[]), Assign(targets=[Name(id='relevance', ctx=Store())], value=BinOp(left=Name(id='relevance', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[])))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='sns', ctx=Load()), attr='barplot', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='relevance', ctx=Load()), attr='values', ctx=Load())), keyword(arg='y', value=Attribute(value=Name(id='relevance', ctx=Load()), attr='index', ctx=Load())), keyword(arg='orient', value=Constant(value='h')), keyword(arg='ax', value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))])), If(test=Compare(left=Name(id='border_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvline', ctx=Load()), args=[Name(id='border_value', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[JoinedStr(values=[Constant(value='Feature relevance: '), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='relevance_aggregation_f', ctx=Store())], value=Subscript(value=Name(id='AGGREGATION_FN', ctx=Load()), slice=Call(func=Name(id='AggregationMode', ctx=Load()), args=[Name(id='RELEVANCE_AGGREGATION_MODE', ctx=Load())], keywords=[]), ctx=Load())), Assign(targets=[Name(id='relevance', ctx=Store())], value=Call(func=Attribute(value=Name(id='relevance_df_', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='relevance_aggregation_f', ctx=Load()), args=[Subscript(value=Name(id='x', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])), ctx=Load())], keywords=[]))], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='relevance_table', ctx=Load()), Name(id='StatisticsRelevanceTable', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='relevance', ctx=Store()), Name(id='border_value', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_fictitious_relevances', ctx=Load()), args=[Name(id='relevance', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='na_relevance_features', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='relevance', ctx=Load()), slice=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), ctx=Load()), attr='index', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Relevances of features: '), FormattedValue(value=Name(id='na_relevance_features', ctx=Load()), conversion=-1), Constant(value=" can't be calculated.")])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='relevance', ctx=Store())], value=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='ascending', value=Constant(value=False))])), Assign(targets=[Name(id='relevance', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Name(id='top_k', ctx=Load())), ctx=Load())), If(test=Name(id='normalized', ctx=Load()), body=[If(test=Compare(left=Name(id='border_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='border_value', ctx=Store())], value=BinOp(left=Name(id='border_value', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[])))], orelse=[]), Assign(targets=[Name(id='relevance', ctx=Store())], value=BinOp(left=Name(id='relevance', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[])))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='subplots', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Name(id='figsize', ctx=Load())), keyword(arg='constrained_layout', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='sns', ctx=Load()), attr='barplot', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='relevance', ctx=Load()), attr='values', ctx=Load())), keyword(arg='y', value=Attribute(value=Name(id='relevance', ctx=Load()), attr='index', ctx=Load())), keyword(arg='orient', value=Constant(value='h')), keyword(arg='ax', value=Name(id='ax', ctx=Load()))])), If(test=Compare(left=Name(id='border_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='axvline', ctx=Load()), args=[Name(id='border_value', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_title', ctx=Load()), args=[Constant(value='Feature relevance')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='plot_imputation', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='impute_r', annotation=Constant(value='TimeSeriesImputerTransform')), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load()), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Pȇloɻt thÆeu re˹sultȄɠ oƪfɾ imȮpu\\tat\u0382ion by ˔a g4ivenƤ¼ ˆΈim̧pudter.\n\nǦƕ¿Paǫrametpers\n--Ϯώ---ºœ-ɔ--C--\nts:\x9dȔ\n    TSDatasetʏ Ǥwith¼ timesεeries αdatȡa\niȳ͆mpuŇteˊr:\n ŗ   ũtr\u0382ansĹform toƻ mak͂e imputƸation ofɉ NaNs\nɡĽsegm͛ents:΅\n Ȇ   ä̜ςsegŢments Ʊ\u0378toʉ uļse\ncoǬlȸuͩ\x94\u03a2mnːs_num:̗\n   - numɨber of columns in ̾sƀubplots\nfigsize:\n ƶ ɏ  ̈́sizͣe ̡ofÓ͎ t˒heĈΟ figure p5er subplo͛t witϮhΐ one sĳegment in inches\nstart:\n    start timʏe]stĻamp for ?plot\nƲºend:\n   ·͉ɂ end timest\xadaΧmp for plȴσot')), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_borders_ts', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Assign(targets=[Name(id='ts_after', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ts_after', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='transforms', value=List(elts=[Name(id='impute_r', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='feature_name', ctx=Store())], value=Attribute(value=Name(id='impute_r', ctx=Load()), attr='in_column', ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_before_dfY', ctx=Store())], value=Subscript(value=Attribute(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[]), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Name(id='feature_name', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='se', ctx=Store())], value=Subscript(value=Attribute(value=Call(func=Attribute(value=Name(id='ts_after', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[]), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Name(id='feature_name', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='se', ctx=Load()), attr='index', ctx=Load()), Name(id='se', ctx=Load())], keywords=[])), Assign(targets=[Name(id='imputed_index', ctx=Store())], value=BinOp(left=UnaryOp(op=Invert(), operand=Call(func=Attribute(value=Name(id='se', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])), op=BitAnd(), right=Call(func=Attribute(value=Name(id='segment_before_dfY', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]))), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='scatter', ctx=Load()), args=[Attribute(value=Subscript(value=Attribute(value=Name(id='se', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='imputed_index', ctx=Load()), ctx=Load()), attr='index', ctx=Load()), Subscript(value=Attribute(value=Name(id='se', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='imputed_index', ctx=Load()), ctx=Load())], keywords=[keyword(arg='c', value=Constant(value='red')), keyword(arg='zorder', value=Constant(value=2))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))]))], orelse=[])], decorator_list=[]), FunctionDef(name='plot_backtest_interactive', args=arguments(posonlyargs=[], args=[arg(arg='forecast_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='history_len', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0), Tuple(elts=[Constant(value=900), Constant(value=600)], ctx=Load())]), body=[Expr(value=Constant(value='Pºőloñt targetsÕ ˙Ίøandνʏ Ɔfo͛ͅrˢecasCʌt̖ ͂fȵ\u0382oȡr\x8f bÍ̜äacQktʙȦesȲt ƿpɹip΄eli̒˿¸ne usài\x92nʙg ʅpl̀ƻo\xadtóly.\n\n̚Paramû̴etersũ)\n--ʁͣ͑ʮ-Κ--Š-ʣ;----\n[ǚf͘oεŃϨrecasϛt_dǐf:T\n ɓ˷   ɍfo-ǺrɽeϏcaƯ\u0378ęsted ÞοdataťfraƮme wiæth Ɣt̼iÌƪm˧αeserƀies daΩta\nts:\nΚˬ    ͟da͋Φtƣēaͨfr̫æame\x84 oçǉƞͨǖϱf timeseri3es śthatʘ˦ʴ waʰƋ\x9csυĤ uʬsed ʸfoΛr bðackĚͱĆtɕɭ4esğǝtT\nsegÍǇmeΥǯntsɖ:\nǿ̨    sήeϥgment÷sɌ tjȣĖ>o̽ plΩot\nhiƈstfoͫry_Ɏø̎οlŉ³en:Ɵ\nϳˊI   ˳ϒă leĞngʾth ɽof pre-̟backʌƳwξȖtßÇwest hƐisϚªtǭo(rɄy t˵t͍ɶo Hpφǡloϓʸt,Ƈ ͅyÑif v̊al4užeɳ i͏s ʬ"aυl\xadl" theȧΛ͜%nΤ Ǻploņt ˫*řaφllƋC¨ëȞ ÷the̴˥ ŝhiϋsʭtπƛoryȤʡ\ncfiΩgsizϩe:ū\n̊  ¦ ʱ˽ Ŋvnìsize ήoȀͪεaɳf thęΞ˳ Ĩ̈́fȀigure[ in pixelˎ\x89Ι0s\n\nĞ\x8fRetuɐrȄn̊s\n-̡--ı--͒Ϳ--ƫ\nOƎˈ̊goţ.ǫFiŀguΗ4įre:\n4¼ȭɰÕ\x95   á˪ŏčϽĝ ɘresuÀɎlt ɲofŻ̇ͨ Ȱp˼lottȌχ̷ßi̼ÀϢngɧ\n\n̤RaƓǎŃ̇iʓses\n-Ǆz-----\n°ςValuʨeEɦʈrroƲr:Λ\nΪ   ĵ ifŉ \x99``histʯoΤrɣy_ǃle(n`` \x9bŹiȲsȃ 9̷nκƷegatiəˇͨΐveɪ\n˗ʫ̾ValuĴeƚErθ\x88r\x97o\x82r:\n ɭKøyƄ x  if fϩΨolͭΉƗĥͮds\x8b aʳ͢re̱ intǧerseȗ͠/̸c͈ȃíϹt\x99ɬingȎ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='history_len', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='all')]), Compare(left=Name(id='history_len', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Parameter history_len should be non-negative or 'all'")], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='fold_numbers', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='forecast_df', ctx=Load()), slice=Subscript(value=Name(id='segments', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), slice=Constant(value='fold_number'), ctx=Load())), Expr(value=Call(func=Name(id='_validate_intersecting_segments', ctx=Load()), args=[Name(id='fold_numbers', ctx=Load())], keywords=[])), Assign(targets=[Name(id='folds', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='fold_numbers', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load())), Assign(targets=[Name(id='forecast_start', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='history_df', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), ops=[Lt()], comparators=[Name(id='forecast_start', ctx=Load())]), ctx=Load())), Assign(targets=[Name(id='backtest_df', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), ops=[GtE()], comparators=[Name(id='forecast_start', ctx=Load())]), ctx=Load())), Assign(targets=[Name(id='freq_timedelta', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=0), ctx=Load()))), Assign(targets=[Name(id='colors', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='plotly', ctx=Load()), attr='colors', ctx=Load()), attr='qualitative', ctx=Load()), attr='Dark24', ctx=Load())), Assign(targets=[Name(id='fig', ctx=Store())], value=Call(func=Attribute(value=Name(id='go', ctx=Load()), attr='Figure', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_backtest_df', ctx=Store())], value=Subscript(value=Name(id='backtest_df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_history_df', ctx=Store())], value=Subscript(value=Name(id='history_df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_forecast_df', ctx=Store())], value=Subscript(value=Name(id='forecast_df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='is_full__folds', ctx=Store())], value=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='segment_backtest_df', ctx=Load()), attr='index', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='index', ctx=Load())], keywords=[])])), If(test=Compare(left=Name(id='history_len', ctx=Load()), ops=[Eq()], comparators=[Constant(value='all')]), body=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='segment_history_df', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='segment_backtest_df', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='history_len', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='segment_history_df', ctx=Load()), attr='tail', ctx=Load()), args=[Name(id='history_len', ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Name(id='segment_backtest_df', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Name(id='segment_backtest_df', ctx=Load()))])]), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='add_trace', ctx=Load()), args=[Call(func=Attribute(value=Name(id='go', ctx=Load()), attr='Scattergl', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='plot_df', ctx=Load()), attr='index', ctx=Load())), keyword(arg='y', value=Attribute(value=Name(id='plot_df', ctx=Load()), attr='target', ctx=Load())), keyword(arg='legendgroup', value=JoinedStr(values=[FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='name', value=JoinedStr(values=[FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='mode', value=Constant(value='lines')), keyword(arg='marker_color', value=Subscript(value=Name(id='colors', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Call(func=Name(id='le', ctx=Load()), args=[Name(id='colors', ctx=Load())], keywords=[])), ctx=Load())), keyword(arg='showlegend', value=Constant(value=True)), keyword(arg='line', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=2)), keyword(arg='dash', value=Constant(value='dash'))]))])], keywords=[])), For(target=Name(id='fold_number', ctx=Store()), iter=Name(id='folds', ctx=Load()), body=[Assign(targets=[Name(id='start_foldVUdt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='fold_numbers', ctx=Load()), slice=Compare(left=Name(id='fold_numbers', ctx=Load()), ops=[Eq()], comparators=[Name(id='fold_number', ctx=Load())]), ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='end_fold', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='fold_numbers', ctx=Load()), slice=Compare(left=Name(id='fold_numbers', ctx=Load()), ops=[Eq()], comparators=[Name(id='fold_number', ctx=Load())]), ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='end_fold_exclusive', ctx=Store())], value=BinOp(left=Name(id='end_fold', ctx=Load()), op=Add(), right=Name(id='freq_timedelta', ctx=Load()))), Assign(targets=[Name(id='backtest_df_slice_fold', ctx=Store())], value=Subscript(value=Name(id='segment_backtest_df', ctx=Load()), slice=Slice(lower=Name(id='start_foldVUdt', ctx=Load()), upper=Name(id='end_fold_exclusive', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='add_trace', ctx=Load()), args=[Call(func=Attribute(value=Name(id='go', ctx=Load()), attr='Scattergl', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='index', ctx=Load())), keyword(arg='y', value=Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='target', ctx=Load())), keyword(arg='legendgroup', value=JoinedStr(values=[FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='name', value=JoinedStr(values=[Constant(value='Test: '), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='mode', value=Constant(value='lines')), keyword(arg='marker_color', value=Subscript(value=Name(id='colors', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Call(func=Name(id='le', ctx=Load()), args=[Name(id='colors', ctx=Load())], keywords=[])), ctx=Load())), keyword(arg='showlegend', value=Constant(value=False)), keyword(arg='line', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=2)), keyword(arg='dash', value=Constant(value='solid'))]))])], keywords=[])), If(test=Name(id='is_full__folds', ctx=Load()), body=[Assign(targets=[Name(id='forecast_df_slice_fold', ctx=Store())], value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=Slice(lower=Name(id='start_foldVUdt', ctx=Load()), upper=Name(id='end_fold_exclusive', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='add_trace', ctx=Load()), args=[Call(func=Attribute(value=Name(id='go', ctx=Load()), attr='Scattergl', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='index', ctx=Load())), keyword(arg='y', value=Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='target', ctx=Load())), keyword(arg='legendgroup', value=JoinedStr(values=[FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='name', value=JoinedStr(values=[Constant(value='Forecast: '), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='mode', value=Constant(value='lines')), keyword(arg='marker_color', value=Subscript(value=Name(id='colors', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Call(func=Name(id='le', ctx=Load()), args=[Name(id='colors', ctx=Load())], keywords=[])), ctx=Load())), keyword(arg='showlegend', value=Constant(value=False)), keyword(arg='line', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=2)), keyword(arg='dash', value=Constant(value='dot'))]))])], keywords=[]))], orelse=[Assign(targets=[Name(id='forecast_df_slice_fold', ctx=Store())], value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=Slice(lower=Name(id='start_foldVUdt', ctx=Load()), upper=Name(id='end_fold', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='backtest_df_slice_fold', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='loc', ctx=Load()), slice=Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='index', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='add_trace', ctx=Load()), args=[Call(func=Attribute(value=Name(id='go', ctx=Load()), attr='Scattergl', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='index', ctx=Load())), keyword(arg='y', value=Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='target', ctx=Load())), keyword(arg='legendgroup', value=JoinedStr(values=[FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='name', value=JoinedStr(values=[Constant(value='Test: '), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='mode', value=Constant(value='markers')), keyword(arg='marker_color', value=Subscript(value=Name(id='colors', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Call(func=Name(id='le', ctx=Load()), args=[Name(id='colors', ctx=Load())], keywords=[])), ctx=Load())), keyword(arg='showlegend', value=Constant(value=False))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='add_trace', ctx=Load()), args=[Call(func=Attribute(value=Name(id='go', ctx=Load()), attr='Scattergl', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='index', ctx=Load())), keyword(arg='y', value=Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='target', ctx=Load())), keyword(arg='legendgroup', value=JoinedStr(values=[FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='name', value=JoinedStr(values=[Constant(value='Forecast: '), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='mode', value=Constant(value='markers')), keyword(arg='marker_color', value=Subscript(value=Name(id='colors', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Call(func=Name(id='le', ctx=Load()), args=[Name(id='colors', ctx=Load())], keywords=[])), ctx=Load())), keyword(arg='showlegend', value=Constant(value=False))])], keywords=[]))]), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='opacitynBRCa', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=0.075), op=Mult(), right=BinOp(left=BinOp(left=Name(id='fold_number', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mod(), right=Constant(value=2))), op=Add(), right=Constant(value=0.075))), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='add_vrect', ctx=Load()), args=[], keywords=[keyword(arg='x0', value=Name(id='start_foldVUdt', ctx=Load())), keyword(arg='x1', value=Name(id='end_fold_exclusive', ctx=Load())), keyword(arg='line_width', value=Constant(value=0)), keyword(arg='fillcolor', value=Constant(value='blue')), keyword(arg='opacity', value=Name(id='opacitynBRCa', ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='update_layout', ctx=Load()), args=[], keywords=[keyword(arg='height', value=Subscript(value=Name(id='figsize', ctx=Load()), slice=Constant(value=1), ctx=Load())), keyword(arg='width', value=Subscript(value=Name(id='figsize', ctx=Load()), slice=Constant(value=0), ctx=Load())), keyword(arg='title', value=Constant(value='Backtest for all segments')), keyword(arg='xaxis_title', value=Constant(value='timestamp')), keyword(arg='yaxis_title', value=Constant(value='target')), keyword(arg='legend', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='itemsizing', value=Constant(value='trace')), keyword(arg='title', value=Constant(value='Segments'))])), keyword(arg='updatemenus', value=List(elts=[Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='type', value=Constant(value='buttons')), keyword(arg='direction', value=Constant(value='left')), keyword(arg='xanchor', value=Constant(value='left')), keyword(arg='yanchor', value=Constant(value='top')), keyword(arg='showactive', value=Constant(value=True)), keyword(arg='x', value=Constant(value=1.0)), keyword(arg='y', value=Constant(value=1.1)), keyword(arg='buttons', value=List(elts=[Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='method', value=Constant(value='restyle')), keyword(arg='args', value=List(elts=[Constant(value='visible'), Constant(value='all')], ctx=Load())), keyword(arg='label', value=Constant(value='show all'))]), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='method', value=Constant(value='restyle')), keyword(arg='args', value=List(elts=[Constant(value='visible'), Constant(value='legendonly')], ctx=Load())), keyword(arg='label', value=Constant(value='hide all'))])], ctx=Load()))])], ctx=Load())), keyword(arg='annotations', value=List(elts=[Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Constant(value='Show segments:')), keyword(arg='showarrow', value=Constant(value=False)), keyword(arg='x', value=Constant(value=1.0)), keyword(arg='y', value=Constant(value=1.08)), keyword(arg='xref', value=Constant(value='paper')), keyword(arg='yref', value=Constant(value='paper')), keyword(arg='align', value=Constant(value='left'))])], ctx=Load()))])), Return(value=Name(id='fig', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='go', ctx=Load()), attr='Figure', ctx=Load())), FunctionDef(name='_create_holidays_df', args=arguments(posonlyargs=[], args=[arg(arg='holidays'), arg(arg='index', annotation=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='core', ctx=Load()), attr='indexes', ctx=Load()), attr='datetimes', ctx=Load()), attr='DatetimeIndex', ctx=Load())), arg(arg='as_is', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ɼ ʾĩ ɠ ő-    ĺǟ    ¡    Ύ')), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Parameter holidays is expected as str or pd.DataFrame')], keywords=[]))], decorator_list=[Name(id='singledispatch', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_create_holidays_df_str', args=arguments(posonlyargs=[], args=[arg(arg='holidays', annotation=Name(id='STR', ctx=Load())), arg(arg='index'), arg(arg='as_is')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='as_is', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Parameter `as_is` should be used with `holiday`: pd.DataFrame, not string.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='index', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='country_holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='holidays_lib', ctx=Load()), attr='country_holidays', ctx=Load()), args=[], keywords=[keyword(arg='country', value=Name(id='holidays', ctx=Load()))])), Assign(targets=[Name(id='holiday_names', ctx=Store())], value=SetComp(elt=Call(func=Attribute(value=Name(id='country_holidays', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='timestamp_value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='timestamp_value', ctx=Store()), iter=Name(id='timestamp', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='holiday_names', ctx=Store())], value=Call(func=Attribute(value=Name(id='holiday_names', ctx=Load()), attr='difference', ctx=Load()), args=[Set(elts=[Constant(value=None)])], keywords=[])), Assign(targets=[Name(id='holidays_dict', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='holiday_n_ame', ctx=Store()), iter=Name(id='holiday_names', ctx=Load()), body=[Assign(targets=[Name(id='cur_holiday_index', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[]), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Call(func=Attribute(value=Name(id='country_holidays', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='x', ctx=Load()), Constant(value='')], keywords=[]), ops=[Eq()], comparators=[Name(id='holiday_n_ame', ctx=Load())]))], keywords=[])), Assign(targets=[Subscript(value=Name(id='holidays_dict', ctx=Load()), slice=Name(id='holiday_n_ame', ctx=Load()), ctx=Store())], value=Name(id='cur_holiday_index', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='holidays_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='holidays_dict', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='holidays_df', ctx=Load()), attr='index', ctx=Store())], value=Name(id='timestamp', ctx=Load())), Return(value=Name(id='holidays_df', ctx=Load()))], decorator_list=[Attribute(value=Name(id='_create_holidays_df', ctx=Load()), attr='register', ctx=Load())]), FunctionDef(name='_create_holidays_df_dataframeI', args=arguments(posonlyargs=[], args=[arg(arg='holidays', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='index'), arg(arg='as_is')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='holidays', ctx=Load()), attr='empty', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Got empty `holiday` pd.DataFrame.')], keywords=[]))], orelse=[]), If(test=Name(id='as_is', ctx=Load()), body=[Assign(targets=[Name(id='holidays_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Name(id='index', ctx=Load())), keyword(arg='columns', value=Attribute(value=Name(id='holidays', ctx=Load()), attr='columns', ctx=Load())), keyword(arg='data', value=Constant(value=False))])), Assign(targets=[Name(id='dt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='holidays_df', ctx=Load()), attr='index', ctx=Load()), attr='intersection', ctx=Load()), args=[Attribute(value=Name(id='holidays', ctx=Load()), attr='index', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='holidays_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='dt', ctx=Load()), Slice()], ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='holidays', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='dt', ctx=Load()), Slice()], ctx=Load()), ctx=Load())), Return(value=Name(id='holidays_df', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='holidays_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Name(id='index', ctx=Load())), keyword(arg='columns', value=Call(func=Attribute(value=Subscript(value=Name(id='holidays', ctx=Load()), slice=Constant(value='holiday'), ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[])), keyword(arg='data', value=Constant(value=False))])), For(target=Name(id='name', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id='holidays', ctx=Load()), slice=Constant(value='holiday'), ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='freq', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='infer_freq', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[])), Assign(targets=[Name(id='DS', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='holidays', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='holidays', ctx=Load()), slice=Constant(value='holiday'), ctx=Load()), ops=[Eq()], comparators=[Name(id='name', ctx=Load())]), ctx=Load()), slice=Constant(value='ds'), ctx=Load())), Assign(targets=[Name(id='dt', ctx=Store())], value=List(elts=[Name(id='DS', ctx=Load())], ctx=Load())), If(test=Compare(left=Constant(value='upper_window'), ops=[In()], comparators=[Attribute(value=Name(id='holidays', ctx=Load()), attr='columns', ctx=Load())]), body=[Assign(targets=[Name(id='periods', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='holidays', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='holidays', ctx=Load()), slice=Constant(value='holiday'), ctx=Load()), ops=[Eq()], comparators=[Name(id='name', ctx=Load())]), ctx=Load()), slice=Constant(value='upper_window'), ctx=Load()), attr='fillna', ctx=Load()), args=[Constant(value=0)], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='periods', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Upper windows should be non-negative.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ds_upper_bound', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='timedelta_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value=0)), keyword(arg='periods', value=BinOp(left=Name(id='periods', ctx=Load()), op=Add(), right=Constant(value=1))), keyword(arg='freq', value=Name(id='freq', ctx=Load()))])), For(target=Name(id='bound', ctx=Store()), iter=Name(id='ds_upper_bound', ctx=Load()), body=[Assign(targets=[Name(id='ds_add', ctx=Store())], value=BinOp(left=Name(id='DS', ctx=Load()), op=Add(), right=Name(id='bound', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='dt', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ds_add', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Constant(value='lower_window'), ops=[In()], comparators=[Attribute(value=Name(id='holidays', ctx=Load()), attr='columns', ctx=Load())]), body=[Assign(targets=[Name(id='periods', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='holidays', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='holidays', ctx=Load()), slice=Constant(value='holiday'), ctx=Load()), ops=[Eq()], comparators=[Name(id='name', ctx=Load())]), ctx=Load()), slice=Constant(value='lower_window'), ctx=Load()), attr='fillna', ctx=Load()), args=[Constant(value=0)], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='periods', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Lower windows should be non-positive.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ds_lower_bound', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='timedelta_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value=0)), keyword(arg='periods', value=BinOp(left=Call(func=Name(id='absCc', ctx=Load()), args=[Name(id='periods', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))), keyword(arg='freq', value=Name(id='freq', ctx=Load()))])), For(target=Name(id='bound', ctx=Store()), iter=Name(id='ds_lower_bound', ctx=Load()), body=[Assign(targets=[Name(id='ds_add', ctx=Store())], value=BinOp(left=Name(id='DS', ctx=Load()), op=Sub(), right=Name(id='bound', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='dt', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ds_add', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='dt', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Name(id='dt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='holidays_df', ctx=Load()), attr='index', ctx=Load()), attr='intersection', ctx=Load()), args=[Name(id='dt', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='holidays_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='dt', ctx=Load()), Name(id='name', ctx=Load())], ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Return(value=Name(id='holidays_df', ctx=Load()))], decorator_list=[Attribute(value=Name(id='_create_holidays_df', ctx=Load()), attr='register', ctx=Load())]), FunctionDef(name='plot_holidays', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='holidays', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load())), arg(arg='as_is', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value="Ṕϛlot hoÖʼlidaʖ̫y0sÆɟ for seg̳mentĮs.\n\nS¥ˤeɳħquŌenÍc̤;e o ͍f tϩimƑestaHη1mps͏̨ ϜwϊƇiĥthɯš^˻E oɘne ͮϽholiǳdaÁy is̄ dĲϊrawƀnb ǳŵͭ\x82ˬas Ø̭ÐĶa ƍʾ¡colo˚ƙǦr̎ƈeǎd rǉĿ˺eƵgɾiĚoνn.\nIn'dǺiɻviͼĵīduaȘl hͼolΕiǑday iƻs͐Ŷ ɀdraw\x81n like a coʮlʬĹoredĥȓϒʝͧ pʸoͷiʭΌżͣnɁt.ÿɪ\n\u038d\nIƦtʦΧ iÑìs nɾot possibǏɐƌle tɁo dǌisɔtiËͻnguish ϔ\x8f\x85Ϳɢpč̜o¾ʌiƇnǵtͧsΈ pƻlθotted̖ șat on˖ŬǄe͠ ƁtóimÆΠesɡta£mˮp,ώ ͚ěbut ǯtΓ˩ɫĢhis cas̻Ǵ̝e ɭis cͮʉonı˘;sϊ͒ʨidered raKrǌe.ŶŶ\nT\u0378hisł tʬƬĦhe ˽prɌoȇbǼ\u0383w÷l|͆Ǎem isŰǪn'td rȥeͭlevñantƥ ĢfoŅȮr ƮŤƥregOion ďdrawing bΔƷǜecauʝse όtƧćheyͩ are paªûršϲt«ʑiaɎllypŭ\x8cĸßƞ tr˞aɘaò£ʏ8nsō˂ȧpaƎrLeσnt.ːϜ\n\nPŠaͳ́r͵̛amˑeteǮǇrsǷ\n--˅̬#---͍ɨ--Ø-¹̓-̯-Nȵŏ\nts :\n Ųʑ   TSDat§ͫƍasϙe&t ͚witϖóh \x89ʶǽtimǥe÷se˱ries ídfaŖǞta\nhoĦliŹdaœʶys:\n  ͈̓\u0379ķ  ϋtheóΩ\x85ˬǾre areϺ seǽv˶ɿ\u038d̃eraϑl oűϚptioĬnsçɳƘʯ:T\n̢\nʕ ƛ¥   * Ϲif͈ str, ͊tÔƔλheȩn ǃtɃÑhǑiǏsŏ ͫiʷÐsǍ rc˃ode ofƤÃ thȞeϓ countĆryÚ in `hºolidēaϟys- <̪Ͷhtt\x87pΘs³:ŘĲ//pypi.oĵrg̕/pͬroje˔ǆct/holΉidays/Ɖ̏>`ϒ_ libƸrary;ˁ\n\n Ņ   ˮ* ȜiǜĠf DataFrame, theͣn daͱňtƢ̸HźaƋf!Örame ˥Ωʘiːʫsȸ̵ ǡŌɛƖexpectʡΊeĄdŝ \x80ͱǷϝt̗\x9co<ώ beƒ in pB:rϧÔophet`s Ã˂Ǯhǅ˦Ťo\x9elϞʬȀi͵Ơday forϓěmʓ\u0382at;h\nȗ\nĕ\x95segϫmeƏntsǢŬ:\nŎϹ  ±˸  ̆seǫgment̎s Λtoʁ use\ncoήŖl7̄uʒmns_nϽ\u03a2u̬͉mǅ:\n ͇ Ϟ  ËknumWb>er oƞŒf columns in ĲsubploΜts\nfʬigΏƴsize:\n  ε ʳ size ǳƯī÷oϩf̝ėϲͪ tɔh̹eϘǓ ɓf˳ǟʈ´cigγure pǃer \x98sȧQφubpȱlɦo\x92ͥ˯t wηit³˦h one sɚeÜgmegn;Ⱥt inƭ ɗiʽ3ɕɏnche˾s\nϭas\x7fǰA_ɛis:\nȾ rG  ńʚ * | ̣ΛUɕsʟĭ˲Ͷe tɐÕhţisƏ oÿ̈́ŅĨʊptʐǁόłŔi&on ͼif Daȉ̟tƯaFramϝΊeΔ ǷȍrʟisŞ ϓʠ\x99rȋe΄preǽĉɀsǸenśtHɦeȚd a͍ΩsΒΔ ōǷǠͨa dat͒afrÒ\x92ame wi˸ʢth̚ aĬƷƚ tͧiȠmeÊʟsƨɠtœampǙ inXÎϿϚdĀŚe͂x and hǣώoɷli~Ϭͪda¢£ğ5Ϭşìy ϡ̈́nameǬɃ*s\x98r columns̝͕ζ.\x8c\n  ˋ  i  | In öͮ\x8dʧa holi͂day żc̊oîȒlumn vǙalues Ȼ0 Ͻreǝpre̐sĜPenǛt abs̉Ȗence o\x96fɺ holiÐdßɖaʤy ƹi\x9an˪ thảĶt Ξtime˳åLstυamp, 1 ƩrȮe\x9bƘpreSse/Υnˀt #the presencͧŖe.\nǵǹĎstart:\n    sϲtqa\x95ɳrƊtηǎ tBë\x8eiɓmestampÃ f͒ǉʈorƘ pňlotſÍ\nəendˠ:\n ǋ˪   endK tɽ͋im̒ȑesǮtaĻm\u0383ɲptȏ ϫªfoϙr ̒Ėplˠǅot\n\nRaŤisĭʕeǄ\x86s\n-ó-----\nVa̢Ɔ¡Äl΄Ǩue̸ǣError:\x8a\nĢ˩Å ǝ   ͇*Ϣ Holi÷day norʤ ΖɬpČÙd.DͻataFramǂe oËr ̥Stŵƨrinǲg.\n ΫO Ƥ ̖þ * HoɄlɈʵiǏday iëUƿlsϞ aϻn emśpƓty Πɪòpd.DaǆtaFƮƚraŜmƫ˦ºǉeğ.\n    *ȕ `ÍaʣsĠϸ_Ƨ]\x96is=ϱTruβe` wΨhile hollʊ̅i˳day is SͳƎtriˏng.\ǹÚ    *ɣϿɇ ͝IŔf]ĸ yʹu˚ʼ˃Ɗpͷp̬̉Ǉeȴr_winƼḍow iYs nbegɀäƓḁ:t˫ǨivĚe.\n ͌ϋ  ǎ * Ìfǜ ǮOlʨoŉw¹er;̗_ɕɞ͟ĭwϷièn̎ͭ˛doƄɅ\x9awɓ ƞ\x95iŉs Ʃp˻oǶsɗĩϘtiȩÁve.")), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_borders_ts', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='holidays_df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load())], keywords=[keyword(arg='index', value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load())), keyword(arg='as_is', value=Name(id='as_is', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assign(targets=[Name(id='target_plot', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), Name(id='segment_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='TARGET_COLOR', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='target_plot', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='get_color', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='default_colors', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='plt', ctx=Load()), attr='rcParams', ctx=Load()), slice=Constant(value='axes.prop_cycle'), ctx=Load()), attr='by_key', ctx=Load()), args=[], keywords=[]), slice=Constant(value='color'), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='default_colors', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='TARGET_COLOR', ctx=Load())], keywords=[])), Assign(targets=[Name(id='color_cycle', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='cycle', ctx=Load()), args=[Name(id='default_colors', ctx=Load())], keywords=[])), Assign(targets=[Name(id='holidays_colors', ctx=Store())], value=DictComp(key=Name(id='holiday_n_ame', ctx=Load()), value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='color_cycle', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='holiday_n_ame', ctx=Store()), iter=Attribute(value=Name(id='holidays_df', ctx=Load()), attr='columns', ctx=Load()), ifs=[], is_async=0)])), For(target=Name(id='holiday_n_ame', ctx=Store()), iter=Attribute(value=Name(id='holidays_df', ctx=Load()), attr='columns', ctx=Load()), body=[Assign(targets=[Name(id='holiday_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='holidays_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), Name(id='holiday_n_ame', ctx=Load())], ctx=Load()), ctx=Load())), For(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='holiday_group', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='groupby', ctx=Load()), args=[Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='holiday_df', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load())))]), body=[Assign(targets=[Name(id='holiday_group_cached', ctx=Store())], value=Call(func=Name(id='listKsP', ctx=Load()), args=[Name(id='holiday_group', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indices', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='holiday_group_cached', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='values', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='holiday_group_cached', ctx=Load()), ifs=[], is_async=0)])), If(test=Compare(left=Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='color', ctx=Store())], value=Subscript(value=Name(id='holidays_colors', ctx=Load()), slice=Name(id='holiday_n_ame', ctx=Load()), ctx=Load())), If(test=Compare(left=Call(func=Name(id='le', ctx=Load()), args=[Name(id='indices', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='scatter', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), slice=Subscript(value=Name(id='indices', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='iloc', ctx=Load()), slice=Subscript(value=Name(id='indices', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load())], keywords=[keyword(arg='color', value=Name(id='color', ctx=Load())), keyword(arg='zorder', value=Constant(value=2))]))], orelse=[Assign(targets=[Name(id='x_min', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), slice=Subscript(value=Name(id='indices', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_max', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), slice=Subscript(value=Name(id='indices', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvline', ctx=Load()), args=[Name(id='x_min', ctx=Load())], keywords=[keyword(arg='color', value=Name(id='color', ctx=Load())), keyword(arg='linestyle', value=Constant(value='dashed'))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvline', ctx=Load()), args=[Name(id='x_max', ctx=Load())], keywords=[keyword(arg='color', value=Name(id='color', ctx=Load())), keyword(arg='linestyle', value=Constant(value='dashed'))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvspan', ctx=Load()), args=[], keywords=[keyword(arg='xmin', value=Name(id='x_min', ctx=Load())), keyword(arg='xmax', value=Name(id='x_max', ctx=Load())), keyword(arg='alpha', value=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=4))), keyword(arg='color', value=Name(id='color', ctx=Load()))]))])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))])), Assign(targets=[Name(id='legend_handles', ctx=Store())], value=ListComp(elt=Call(func=Name(id='Line2D', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load()), List(elts=[Constant(value=0)], ctx=Load())], keywords=[keyword(arg='marker', value=Constant(value='o')), keyword(arg='color', value=Name(id='color', ctx=Load())), keyword(arg='label', value=Name(id='label', ctx=Load()))]), generators=[comprehension(target=Tuple(elts=[Name(id='label', ctx=Store()), Name(id='color', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='holidays_colors', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[keyword(arg='handles', value=Name(id='legend_handles', ctx=Load()))]))], orelse=[])], decorator_list=[]), ClassDef(name='PerFol', bases=[Name(id='STR', ctx=Load()), Name(id='Enum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='mean', ctx=Store())], value=Constant(value='mean')), Assign(targets=[Name(id='sum', ctx=Store())], value=Constant(value='median')), FunctionDef(name='GET_FUNCTION', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get aggregËatÄioιnOδ functioɑn.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='mean')]), body=[Return(value=Attribute(value=Name(id='np', ctx=Load()), attr='nanmean', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='median')]), body=[Return(value=Attribute(value=Name(id='np', ctx=Load()), attr='nanmedian', ctx=Load()))], orelse=[])])], decorator_list=[]), FunctionDef(name='_missing_cWis', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ƶ      Ć˙   ¢')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1), Constant(value=' is not a valid '), FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='. Only '), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='r', ctx=Load()), args=[Attribute(value=Name(id='m', ctx=Load()), attr='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Name(id='cls', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), conversion=-1), Constant(value=' aggregations are allowed')])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), FunctionDef(name='plot_metric_per_segment', args=arguments(posonlyargs=[], args=[arg(arg='metrics_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='metric_name', annotation=Name(id='STR', ctx=Load())), arg(arg='ascending', annotation=Name(id='bool', ctx=Load())), arg(arg='per_fold_aggregation_mode', annotation=Name(id='STR', ctx=Load())), arg(arg='top_k', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='barplot_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Attribute(value=Name(id='PerFol', ctx=Load()), attr='mean', ctx=Load()), Constant(value=None), Constant(value=None), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[If(test=Compare(left=Name(id='barplot_params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='barplot_params', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='aggregation_mode', ctx=Store())], value=Call(func=Name(id='PerFol', ctx=Load()), args=[Name(id='per_fold_aggregation_mode', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), If(test=Compare(left=Name(id='metric_name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='metrics_df', ctx=Load()), attr='columns', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Given metric_name isn't present in metrics_df")], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='fold_number'), ops=[In()], comparators=[Attribute(value=Name(id='metrics_df', ctx=Load()), attr='columns', ctx=Load())]), body=[Assign(targets=[Name(id='metrics_dict', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='metrics_df', ctx=Load()), attr='groupby', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='agg', ctx=Load()), args=[Dict(keys=[Name(id='metric_name', ctx=Load())], values=[Call(func=Attribute(value=Name(id='aggregation_mode', ctx=Load()), attr='get_function', ctx=Load()), args=[], keywords=[])])], keywords=[]), attr='to_dict', ctx=Load()), args=[], keywords=[]), slice=Name(id='metric_name', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='metrics_dict', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Name(id='metrics_df', ctx=Load()), slice=Tuple(elts=[Constant(value='segment'), Name(id='metric_name', ctx=Load())], ctx=Load()), ctx=Load()), attr='to_dict', ctx=Load()), args=[], keywords=[]), slice=Name(id='metric_name', ctx=Load()), ctx=Load()))]), Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='listKsP', ctx=Load()), args=[Call(func=Attribute(value=Name(id='metrics_dict', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='listKsP', ctx=Load()), args=[Call(func=Attribute(value=Name(id='metrics_dict', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='sort_idx', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argsort', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='ascending', ctx=Load())), body=[Assign(targets=[Name(id='sort_idx', ctx=Store())], value=Subscript(value=Name(id='sort_idx', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='segments', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='segments', ctx=Load()), slice=Name(id='sort_idx', ctx=Load()), ctx=Load()), slice=Slice(upper=Name(id='top_k', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='values', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='values', ctx=Load()), slice=Name(id='sort_idx', ctx=Load()), ctx=Load()), slice=Slice(upper=Name(id='top_k', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='sns', ctx=Load()), attr='barplot', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='values', ctx=Load())), keyword(arg='y', value=Name(id='segments', ctx=Load())), keyword(arg='orient', value=Constant(value='h')), keyword(value=Name(id='barplot_params', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='title', ctx=Load()), args=[Constant(value='Metric per-segment plot')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Segment')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Name(id='metric_name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), ClassDef(name='MetricPlotType', bases=[Name(id='STR', ctx=Load()), Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ȱEnum ȩfor̋ ǧtyɹpesé óf \x9cplkot͇Ï Õin :Ppy:funȔãc:`~źetna.anɻaȰlysϊiϗs.ŧplʞottersπ.metric̍_p¨er_ˉOʉsegmʜeʃʥnt_d̺istrɛibuti˞on_plͅot`.̉\n\n\x83AtȬtribͰuBľǥtesʗ\n------ą---Ċ-\nąψhͻist:tδ\n    Hisǉtȭograĕmο plͪ3ot, :py:̌func:`ɒseabƍorn.ĦhḭstploǺt` isú used\n`bȚox:\n˪    BʰoxpĿǞlot,Ǳ :ϢÆzƼčpɸ̢y:±func:`seaƲborΠn\x9a.˩bƍoxplotϛ` is̳̣ɼʡÝ uĜsed\nvȼiolin:\n    VGϬioWlįin plot, :pȐy:fuÒncǖ:`seͣabœoÜ͊rn.violinplɹoˤt` is usÿedΙ')), Assign(targets=[Name(id='hist', ctx=Store())], value=Constant(value='hist')), Assign(targets=[Name(id='box', ctx=Store())], value=Constant(value='box')), Assign(targets=[Name(id='violin', ctx=Store())], value=Constant(value='violin')), FunctionDef(name='_missing_cWis', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1), Constant(value=' is not a valid '), FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='. Only '), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='r', ctx=Load()), args=[Attribute(value=Name(id='m', ctx=Load()), attr='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Name(id='cls', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), conversion=-1), Constant(value=' plots are allowed')])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='GET_FUNCTION', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get aggϗ$ƋrȥegaαȔȲtion funcȄίtŁioɪn.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='hist')]), body=[Return(value=Attribute(value=Name(id='sns', ctx=Load()), attr='histplot', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='box')]), body=[Return(value=Attribute(value=Name(id='sns', ctx=Load()), attr='boxplot', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='violin')]), body=[Return(value=Attribute(value=Name(id='sns', ctx=Load()), attr='violinplot', ctx=Load()))], orelse=[])])])], decorator_list=[])], decorator_list=[]), FunctionDef(name='metric_per_segment_distribution_plot', args=arguments(posonlyargs=[], args=[arg(arg='metrics_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='metric_name', annotation=Name(id='STR', ctx=Load())), arg(arg='per_fold_aggregation_mode', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load())), arg(arg='plot_type', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='hist'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='box'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='violin'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='seaborn_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value='hist'), Constant(value=None), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[If(test=Compare(left=Name(id='seaborn_params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='seaborn_params', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='metrics_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='metrics_df', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))])), Assign(targets=[Name(id='plot_type_enum', ctx=Store())], value=Call(func=Name(id='MetricPlotType', ctx=Load()), args=[Name(id='plot_type', ctx=Load())], keywords=[])), Assign(targets=[Name(id='plot_function', ctx=Store())], value=Call(func=Attribute(value=Name(id='plot_type_enum', ctx=Load()), attr='get_function', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), If(test=Compare(left=Name(id='metric_name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='metrics_df', ctx=Load()), attr='columns', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Given metric_name isn't present in metrics_df")], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='per_fold_aggregation_mode', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Constant(value='fold_number'), ops=[In()], comparators=[Attribute(value=Name(id='metrics_df', ctx=Load()), attr='columns', ctx=Load())])]), body=[If(test=Compare(left=Name(id='plot_type_enum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MetricPlotType', ctx=Load()), attr='hist', ctx=Load())]), body=[Expr(value=Call(func=Name(id='plot_function', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Name(id='metrics_df', ctx=Load())), keyword(arg='x', value=Name(id='metric_name', ctx=Load())), keyword(arg='hue', value=Constant(value='fold_number')), keyword(value=Name(id='seaborn_params', ctx=Load()))]))], orelse=[Expr(value=Call(func=Name(id='plot_function', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Name(id='metrics_df', ctx=Load())), keyword(arg='x', value=Constant(value='fold_number')), keyword(arg='y', value=Name(id='metric_name', ctx=Load())), keyword(value=Name(id='seaborn_params', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Fold')], keywords=[]))])], orelse=[If(test=Compare(left=Constant(value='fold_number'), ops=[In()], comparators=[Attribute(value=Name(id='metrics_df', ctx=Load()), attr='columns', ctx=Load())]), body=[Assign(targets=[Name(id='agg_func', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='PerFol', ctx=Load()), args=[Name(id='per_fold_aggregation_mode', ctx=Load())], keywords=[]), attr='get_function', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='metrics_df', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='metrics_df', ctx=Load()), attr='groupby', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='agg', ctx=Load()), args=[Dict(keys=[Name(id='metric_name', ctx=Load())], values=[Name(id='agg_func', ctx=Load())])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='plot_type_enum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MetricPlotType', ctx=Load()), attr='hist', ctx=Load())]), body=[Expr(value=Call(func=Name(id='plot_function', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Name(id='metrics_df', ctx=Load())), keyword(arg='x', value=Name(id='metric_name', ctx=Load())), keyword(value=Name(id='seaborn_params', ctx=Load()))]))], orelse=[Expr(value=Call(func=Name(id='plot_function', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Name(id='metrics_df', ctx=Load())), keyword(arg='y', value=Name(id='metric_name', ctx=Load())), keyword(value=Name(id='seaborn_params', ctx=Load()))]))])]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='title', ctx=Load()), args=[Constant(value='Metric per-segment distribution plot')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='plot_change_points_interactive', args=arguments(posonlyargs=[], args=[arg(arg='ts'), arg(arg='change_poin', annotation=Name(id='BaseEstimator', ctx=Load())), arg(arg='_model', annotation=Name(id='BaseCost', ctx=Load())), arg(arg='params_bounds', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='STR', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='model_params', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load())), arg(arg='predict_params', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load())), arg(arg='iP', annotation=Name(id='STR', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STR', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='target'), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load()), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='ÏPǬlot a ̖tim϶e seErie˗4s4 with indicatȿedϗ chang͜ˣeÏ points.\nèȿ\ñCϸh̶\x86a«nqgtϻe poɫˤiƷʰnts ΅aŘrʌĖe obtσ\x87aineͩd u\x90sing ʶtŝDhe specifΤied metϻhod. TheΊÐù meÁthod pάarameterΦs vaḽɓueʶs\n͜ƈcϯaˣn b˧e chȱanEged ǤġuɇϡsɳiͲng tȣhħe cor\x86respϲĶƐoΠnĂdiǴnͧgu F˒sli˳dͻśers.\n\x8c\nPa\u0381rɛaƃmeteɸrsϜ\n--±ĝ--------ƐHʔ\nts:\nȞ  ȓ ē īǘTSʺΩDataset with ˔tȐi×mese͋rieːsÙ Ŵǘda0ta\nchangeǛ_poͳint_moʏdeŤ˹ʏl:\n ̼\x97 Ʊ¬ Ɗ̟ moďdɇelο tũϔ͡ʚo geʩt tƜΥÝrend cühȥanƨge pointsĸ\nm̋ΑodelƩ9:\n ɜ ͐  !b̂͠iɒΤnseg® segme̬ntţ moƄdelŃ, ɠű["ͨl1",U "l2", "rbfθ"ɋ,.ºʡ..Ϧ].̔ ǇNċot\u03a2 used if ˘\'cu\x9dƯst\u0383͒Ƥȏ˝mδ̆_c̈ňost\' i̇s notĸ NoǫÞne\nˢpΜ\x94arams̶_boușϺnds:\n9 ͌Δɔ   Paramete˅Ȟrs ɗXrȌƳanges \x83of theȑ ǐϓcȉhēange ɛpoinǧtͲs͡ detſecti\x93oɯɁnÎ. Boundsƀ for \x89tΦhe̶εɠ paϿűʻʮϴraίºΈmetyer Ϻaßrȿe (ƃmin,maˬΤx,ÑsÄtepǵ)\nm˺˺oȝdeɥlƯ_Òpar¢aϟms:\n  ɒźŲ  Lɐist oŤJĚ̮ßf iterableɡ para̜me͂terȁs fʛorĨ "iènitial÷ize ʕthe modȞel\nƳprediͧctž_pȢarams:ϤȨ\n   ĘƟ Liʛst ofſ ξiterůaNǟble ͢parame˄terÕs for͈ [Ɨpr̝eƔdict m˸e̱thod\niǻn˼_coŮl͏umn:\nÑǙͨÌ  »  cq\u0381ɢ͓̍olɇumn ´t°oĸ ďplot\nɴsegm!ent¶̓s:\n̽  ˚  ċs\x93ǶegmentðŊ˟sOŇ to\x9a use\ncolumnÿͿŜs_ϮnuΕƐm:\n    nɾumb͗erϜʘ of sub-plots coʽĵl͊umns\nfiɀgƴ\x8aȆsize:̋\nOş    size of Ʈtheȑ fiΦgPure inɭë iƪƧncˢh˭ẽs\nstarϬɰtɡ:Ʃ\nĠ    stϣȃrt ȣtimestamǊp ŗfɈorǧ ploĲîtϼŭ\nϮʻendȓ:\n Ϩ  Ή end ʌgtimeŞstampʄ ƶˀfo¤r ʐploγƩtè\nƻ\nNoteǡ̯s\n---̐--Ϥ\nJu\x94pyǛtǎe͵r ţΰnoetebookɢ miʝϞg˛ht dis̛plaˍy tϛhe resïults Əinɯƭco\u0382rrecɡ̒1tʂȨly,\niɱn\x92 thiʳs ϗcaseɒ̫ ˝(try ǓJto us̋e ``!ǤĎjupyteÀr\' ΐnȠbexĕëteŬnsiƕonȖ e˶nʀable --ľpy widgets\x84nbϜeø˗xtensiϡon``.£\n\nE͵xamples\n----Ï----\n>>> froƵʹ¨mĪȜ ǳeƂ\x89ϕtna.daî̧tʰaseİts iςmpo͵rt TSDavȘtaĦset\n>>> fˌrom ĸ̄etna.da˭ˎtasetȚsʤ̳Ƿ) ĄimpoÎrtώ dgeƄ˫nerĂateʀȅ%ŋ_ma\x88r_df\n>ͭϤ>ɚͰǽȀFß> froƀʢımˈ etnµa.analysiɒǡs υʖȟimpQort plɰȄæƨot@_chaàŊnʇg˪e_ʣ\xadpoints_interǡƧǀactive\n>>> fromȺϩ ͫrupɨtu¤re:s.det}ecƕĥtioƀn iɃmporĮt Bi\x87n\x9fseg\n>>d> «äclaɈssic˥ȿ_dfβ˞ ·\x9c˦ˡ= gʧḙner̟ateƬ_aϚr_Cdf(period[s=ʫɖ1c\x9c̞000, s͇]tarЀt_tũiOme="j20ĺɐ21-08̒-0ϙ±1", n_sˋeȵcgmȽeƠntsΒ=2)\n>>>ʅ ΰd̒f = ΌTSDΜat0a¹set.t¯o_daɚtaset(claêssic_ädf\u0380)\n˕>>> ʖ˾ts ̘Ć=  TSD©͆aȹtaset(dÆƩǽfʘ, ̣"\x93ƣD")\n>\xad>>Ñ ăpʟara¦Ȣms˹_bounds˞\x87 ū"ƫ= ϑ{"n_bkpsʃ^"ɶ\x93:Ũ [0,£ʤ 5Ñ, 1], "mi\u0380nɯ_sizeϬ":[Ĩ̫1,10˓,3]}ŝ͟\n>ɏ>>̔ pϪlϕ͞ot_change_puoints_interactiżvϒe(ts=tsΨ, changeűʷ_̏̾point_modɲ̉eßl=Biʩŧnsegȗŧ×, modȆel="lŃ2"Ͽ,ĥ păraȐȑms_>bouɷŌ˹nds=paͩramsΑ\x85_boʲunŐdes͖,0 ̐model_params=[Õ"min\x80W_ˎɾY͞si\x82Ȱze"Õˬ], pȞreɥţdwƻic3$ɉtΧ_paĤrļams=ʞ["nɽ_b̞͆kʾps\x90ðr"ƃ]ȱ, fǐʏi˅ȖgŅsizMeū=(2\x9eΪM0,Ɇ½ 10)) ̀#Ķ doctēesıtϦ: ƻ+SKIP')), ImportFrom(module='ipywidgets', names=[alias(name='FloatSlider')], level=0), ImportFrom(module='ipywidgets', names=[alias(name='IntSlider')], level=0), ImportFrom(module='ipywidgets', names=[alias(name='interact')], level=0), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cache_', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='sliders', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='style', ctx=Store())], value=Dict(keys=[Constant(value='description_width')], values=[Constant(value='initial')])), For(target=Tuple(elts=[Name(id='param', ctx=Store()), Name(id='bounds', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='params_bounds', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='min_', ctx=Store()), Name(id='max_', ctx=Store()), Name(id='step', ctx=Store())], ctx=Store())], value=Name(id='bounds', ctx=Load())), If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='min_', ctx=Load()), Name(id='float', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='max_', ctx=Load()), Name(id='float', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='step', ctx=Load()), Name(id='float', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='sliders', ctx=Load()), slice=Name(id='param', ctx=Load()), ctx=Store())], value=Call(func=Name(id='FloatSlider', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Name(id='min_', ctx=Load())), keyword(arg='max', value=Name(id='max_', ctx=Load())), keyword(arg='step', value=Name(id='step', ctx=Load())), keyword(arg='continuous_update', value=Constant(value=False)), keyword(arg='style', value=Name(id='style', ctx=Load()))]))], orelse=[Assign(targets=[Subscript(value=Name(id='sliders', ctx=Load()), slice=Name(id='param', ctx=Load()), ctx=Store())], value=Call(func=Name(id='IntSlider', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Name(id='min_', ctx=Load())), keyword(arg='max', value=Name(id='max_', ctx=Load())), keyword(arg='step', value=Name(id='step', ctx=Load())), keyword(arg='continuous_update', value=Constant(value=False)), keyword(arg='style', value=Name(id='style', ctx=Load()))]))])], orelse=[]), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='k'), defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='le', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Constant(value='_'), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='STR', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='val', ctx=Store()), iter=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='is_fitted', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='cache_', ctx=Load())]), body=[Assign(targets=[Name(id='m_params', ctx=Store())], value=DictComp(key=Name(id='x', ctx=Load()), value=Subscript(value=Name(id='k', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='model_params', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='p_params', ctx=Store())], value=DictComp(key=Name(id='x', ctx=Load()), value=Subscript(value=Name(id='k', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='predict_params', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Subscript(value=Name(id='cache_', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[Assign(targets=[Name(id='is_fitted', ctx=Store())], value=Constant(value=True))]), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='target', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Name(id='iP', ctx=Load()), ctx=Load()), attr='values', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='is_fitted', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='algo', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='change_poin', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='_model', ctx=Load())), keyword(value=Name(id='m_params', ctx=Load()))]), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='signal', value=Name(id='target', ctx=Load()))])), Assign(targets=[Name(id='bkps', ctx=Store())], value=Call(func=Attribute(value=Name(id='algo', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[keyword(value=Name(id='p_params', ctx=Load()))])), Assign(targets=[Subscript(value=Subscript(value=Name(id='cache_', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Store())], value=Name(id='bkps', ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='cache_', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Constant(value=1)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='BadSegmentationParameters', ctx=Load()), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='cache_', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='segment_bkps', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='cache_', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='segment_bkps', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='idx', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='le', ctx=Load()), args=[Subscript(value=Name(id='segment_bkps', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='bkp', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='segment_bkps', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load()), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='start_time', ctx=Store())], value=Subscript(value=Name(id='timestamp', ctx=Load()), slice=Name(id='bkp', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='end_time', ctx=Store())], value=Subscript(value=Name(id='timestamp', ctx=Load()), slice=BinOp(left=Subscript(value=Name(id='segment_bkps', ctx=Load()), slice=BinOp(left=Name(id='idx', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='selected_indices', ctx=Store())], value=BinOp(left=Compare(left=Name(id='timestamp', ctx=Load()), ops=[GtE()], comparators=[Name(id='start_time', ctx=Load())]), op=BitAnd(), right=Compare(left=Name(id='timestamp', ctx=Load()), ops=[LtE()], comparators=[Name(id='end_time', ctx=Load())]))), Assign(targets=[Name(id='cur_timestamp', ctx=Store())], value=Subscript(value=Name(id='timestamp', ctx=Load()), slice=Name(id='selected_indices', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='cur_target', ctx=Store())], value=Subscript(value=Name(id='target', ctx=Load()), slice=Name(id='selected_indices', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='cur_timestamp', ctx=Load()), Name(id='cur_target', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='bkp', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvline', ctx=Load()), args=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Name(id='bkp', ctx=Load()), ctx=Load())], keywords=[keyword(arg='linestyle', value=Constant(value='dashed')), keyword(arg='c', value=Constant(value='grey'))]))], orelse=[])], orelse=[])], orelse=[Assign(targets=[Name(id='box', ctx=Store())], value=Dict(keys=[Constant(value='facecolor'), Constant(value='edgecolor'), Constant(value='boxstyle')], values=[Constant(value='grey'), Constant(value='red'), Constant(value='round')])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='text', ctx=Load()), args=[Constant(value=0.5), Constant(value=0.4), Constant(value='Parameters\nError')], keywords=[keyword(arg='bbox', value=Name(id='box', ctx=Load())), keyword(arg='horizontalalignment', value=Constant(value='center')), keyword(arg='color', value=Constant(value='white')), keyword(arg='fontsize', value=Constant(value=50))]))]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), Expr(value=Call(func=Name(id='interact', ctx=Load()), args=[Name(id='update', ctx=Load())], keywords=[keyword(value=Name(id='sliders', ctx=Load()))]))], decorator_list=[])], type_ignores=[])