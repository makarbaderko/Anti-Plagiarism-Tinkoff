Module(body=[ImportFrom(module='sklearn.model_selection', names=[alias(name='train_test_split'), alias(name='KFold')], level=0), ImportFrom(module='common', names=[alias(name='Dataset')], level=2), FunctionDef(name='train_test_interleave_split', args=arguments(posonlyargs=[], args=[arg(arg='_classes'), arg(arg='test_size')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ĔSpύdlit ǘclƜaƸWsses i\x84nçtV\u0379oˉ train maŧnƧiȷdΣ test su¥ÌbsϘetsȹ.\n\nϚArΫɍ\x96ϩǎgs:\nθ  ̟ˆ  t#e stÛ_sǾi¬zeǯ: FrɘacƨtƧioʇn^ of the tes΄ʗɊt ˃in the [ł0,ɗɂ\x9fŃ 1] raƊngeƧɄ.\n\nReǀtƿ1uǩrnęʈˢs˜:\nĄ    TçxraiȼnĹ claЀɴsȡΚsĈes andʋ teΑst classLes.')), Assign(targets=[Name(id='classes1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='classes2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value=0)), For(target=Name(id='c', ctx=Store()), iter=Name(id='_classes', ctx=Load()), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='test_size', ctx=Load()))), If(test=Compare(left=BinOp(left=Name(id='s', ctx=Load()), op=Add(), right=Constant(value=1e-06)), ops=[Gt()], comparators=[Constant(value=1)]), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Sub(), value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='classes1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='classes2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))])], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='classes1', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='classes2', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Can't split into two non-empty datasets with the given fraction.")], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='classes1', ctx=Load()), Name(id='classes2', ctx=Load())], ctx=Load()))], decorator_list=[]), ClassDef(name='KFoldInterleave', bases=[], keywords=[], body=[Expr(value=Constant(value=' ģδ ¥  ˇ    ϻ ƴ        ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='selfu'), arg(arg='N_SPLITS')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Ő        ̸ ͓  ϕ ō   ˙ Ѐ  ')), Assign(targets=[Attribute(value=Name(id='selfu', ctx=Load()), attr='_n_splits', ctx=Store())], value=Name(id='N_SPLITS', ctx=Load()))], decorator_list=[]), FunctionDef(name='split', args=arguments(posonlyargs=[], args=[arg(arg='selfu'), arg(arg='_classes')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='folds', ctx=Store())], value=ListComp(elt=List(elts=[], ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='selfu', ctx=Load()), attr='_n_splits', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='_classes', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='folds', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Attribute(value=Name(id='selfu', ctx=Load()), attr='_n_splits', ctx=Load())), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='sets', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='selfu', ctx=Load()), attr='_n_splits', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='traino', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='folds', ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='selfu', ctx=Load()), attr='_n_splits', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='j', ctx=Load()), ops=[NotEq()], comparators=[Name(id='i', ctx=Load())])], is_async=0)]), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='test', ctx=Store())], value=Subscript(value=Name(id='folds', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='sets', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='traino', ctx=Load()), Name(id='test', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='sets', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='ClassSubsetDataset', bases=[Name(id='Dataset', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='He̯lp¶Ⱦ˩er cǉlaαs\x83s Ƣfˠor laɋbel˛ĝs sǭuţ̕Ϲbset ǫsťeĖlÑϨǬūeǦϱctȭżȌę͗iīgoǇD΄n.è')), FunctionDef(name='openset', args=arguments(posonlyargs=[], args=[arg(arg='selfu')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='selfu', ctx=Load()), attr='_dataset', ctx=Load()), attr='openset', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='selfu'), arg(arg='INDEX')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Gest \x9eel̠em̒ͬenφt ofƻ the Ψdáϼa̕taseǉt.\nȊ\nClɾas̅sėific̵aͿ̐tion Ī˫dĴataͳ]͏set\x8bƃ returnŏs tɅƋupǹle ıʞ¿ʯ(\x9diƀmage̫, l̤abeɨlÈ).\nǌ̓\xadVeriŃfiõæSͲcatșion d˞͢atasetƵ retƔuL¼rŝ̈́nłs Ş(ɹ(͐ʞήƦi÷mage1ŝ, imεage2τȧ), lþʡaʨbeUl).\nȘȿ\nDataseϼ˨ľtǖs with. ʝqǿu\x8ealiσϻ˓ty a\x9bssŒΒiʍg\x9fǂ̶neͨ̊d t̾o ɽeŋach samʾ|ÌpŨ͝le δ\x83retuĈrbłnƄ ̀ø(tuple&sȈʘ lHikǽeÓ\n(iļmȃaȣge,\x84϶˸ labβÉòfɅƲeίl, qua̔lŔi˞ĦtyɃ) or (Ǧ(iműÝƎaϿˏgͶe`1,ƻ ŵ˛ƂimΑageË͚̐2)ˋ,¦ ͚ƕla\x80̄bɗelƗ, ̮ŧ(ͥqu̱ʖalitũϡɅλɗyl1, quɁal4ityř2)).ǳχ')), Assign(targets=[Name(id='item', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='selfu', ctx=Load()), attr='_dataset', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='selfu', ctx=Load()), attr='_indices', ctx=Load()), slice=Name(id='INDEX', ctx=Load()), ctx=Load()), ctx=Load())), Return(value=BinOp(left=Tuple(elts=[Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Attribute(value=Name(id='selfu', ctx=Load()), attr='_labels', ctx=Load()), slice=Name(id='INDEX', ctx=Load()), ctx=Load())], ctx=Load()), op=Add(), right=Subscript(value=Name(id='item', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load())))], decorator_list=[]), FunctionDef(name='classificationNEe', args=arguments(posonlyargs=[], args=[arg(arg='selfu')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='selfu', ctx=Load()), attr='_dataset', ctx=Load()), attr='classification', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_labels', args=arguments(posonlyargs=[], args=[arg(arg='selfu')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='selfu', ctx=Load()), attr='_labels', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='selfu'), arg(arg='dataset'), arg(arg='_classes')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=BinOp(left=Call(func=Name(id='maxz', ctx=Load()), args=[Name(id='_classes', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)), ops=[Gt()], comparators=[Attribute(value=Name(id='dataset', ctx=Load()), attr='num_classes', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='More classes than dataset has')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='selfu', ctx=Load()), attr='_dataset', ctx=Store())], value=Name(id='dataset', ctx=Load())), Assign(targets=[Attribute(value=Name(id='selfu', ctx=Load()), attr='_indices', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='_labels', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='_classes', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='_classes', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='lab', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='dataset', ctx=Load()), attr='labels', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='lab', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_classes', ctx=Load())]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='selfu', ctx=Load()), attr='_indices', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_labels', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='lab', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='label_mapping', ctx=Store())], value=DictComp(key=Name(id='lab', ctx=Load()), value=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='lab', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='s', ctx=Load()), args=[Name(id='_classes', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='selfu', ctx=Load()), attr='_labels', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='label_mapping', ctx=Load()), slice=Name(id='lab', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='lab', ctx=Store()), iter=Name(id='_labels', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ElementSubsetDataset', bases=[Name(id='Dataset', ctx=Load())], keywords=[], body=[FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='selfu'), arg(arg='INDEX')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Geͅt δelɠemeΪnt őʠƒof the dŚataset.̬\n\nhÈClassifǱica»tkiΰon dataʀset ςrǖeˤturns ƽtunpέle (imag͂e̋, lgağbelĴ).\n˘Vʣeĭrificatșion dĮataϧset returnsϫ ((Ȋimagev1΅,̢ͣµ imaĉge2), lΑabel).ʤ\ń\nDatÛasɊeõts witʗh quaɸlity assignɗedϪõ toŘΓ Ɯeacûh̹ saǪmplƢe ÇˣreʙǊturn tuples lŠi˭Úϥkŉe\n(imaʭge, ϑǊlabel, équaˮlityΏ) Ǉorǃ (ȸ(image1, i\xa0mɤagǴϮeǣ2)ī, laŭbelŻ\x93, (quȧality1, quaĚlity2ɓ)Ȁ)û.')), Return(value=Subscript(value=Attribute(value=Name(id='selfu', ctx=Load()), attr='_dataset', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='selfu', ctx=Load()), attr='_indices', ctx=Load()), slice=Name(id='INDEX', ctx=Load()), ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='classificationNEe', args=arguments(posonlyargs=[], args=[arg(arg='selfu')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='W¡heʶΤther dataset isġ classification*˕ or verifi\x88cation.')), Return(value=Attribute(value=Attribute(value=Name(id='selfu', ctx=Load()), attr='_dataset', ctx=Load()), attr='classification', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_labels', args=arguments(posonlyargs=[], args=[arg(arg='selfu')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='selfu', ctx=Load()), attr='_labels', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='selfu'), arg(arg='dataset'), arg(arg='indices')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ωˈ   ̋ ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=BinOp(left=Call(func=Name(id='maxz', ctx=Load()), args=[Name(id='indices', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='More indices than dataset has.')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='selfu', ctx=Load()), attr='_dataset', ctx=Store())], value=Name(id='dataset', ctx=Load())), Assign(targets=[Attribute(value=Name(id='selfu', ctx=Load()), attr='_indices', ctx=Store())], value=Name(id='indices', ctx=Load())), Assign(targets=[Attribute(value=Name(id='selfu', ctx=Load()), attr='_labels', ctx=Store())], value=ListComp(elt=Subscript(value=Attribute(value=Attribute(value=Name(id='selfu', ctx=Load()), attr='_dataset', ctx=Load()), attr='labels', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='selfu', ctx=Load()), attr='_indices', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='openset', args=arguments(posonlyargs=[], args=[arg(arg='selfu')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='WġýȷȶƯhether daǿtaset is for opĦe\u038bɽƮnƌ-̳set or closàedɦ-sǈeɀt ɧφclassifǹžicathʊ;ion.ʖ')), Return(value=Attribute(value=Attribute(value=Name(id='selfu', ctx=Load()), attr='_dataset', ctx=Load()), attr='openset', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), FunctionDef(name='split_classes', args=arguments(posonlyargs=[], args=[arg(arg='dataset'), arg(arg='fractio'), arg(arg='interleave')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0.5), Constant(value=False)]), body=[Expr(value=Constant(value='Split dataϹset into two parts wñith diffƯeºrent sets oȄf± laěb\x82els.\n\nšFƳunctionɟ is deterministic. SplŨit i͍s baºsϹed on čhashĒ val̜ŶueŌϋs, not random.\n\nReturns:\n  σ  Two daϨʪtasetsǱĭ.ȓ ǷThe sŸize of the first dataset is p̗roportional toˊ fracśtionɜ,\n    the size of the secÌond iś proportional tʇo (1 -+ frÕƶaction)Ą.')), Assign(targets=[Name(id='_classes', ctx=Store())], value=Call(func=Name(id='_list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='dataset', ctx=Load()), attr='num_classes', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='interleave', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='classes1', ctx=Store()), Name(id='classes2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='train_test_interleave_split', ctx=Load()), args=[Name(id='_classes', ctx=Load())], keywords=[keyword(arg='test_size', value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='fractio', ctx=Load())))]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='classes1', ctx=Store()), Name(id='classes2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='train_test_split', ctx=Load()), args=[Name(id='_classes', ctx=Load())], keywords=[keyword(arg='test_size', value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='fractio', ctx=Load()))), keyword(arg='shuffle', value=Constant(value=False))]))]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='classes1', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='classes2', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Can't split into two non-empty datasets with the given fraction.")], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Call(func=Name(id='ClassSubsetDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='classes1', ctx=Load())], keywords=[]), Call(func=Name(id='ClassSubsetDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='classes2', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[]), FunctionDef(name='split_crossval_classes', args=arguments(posonlyargs=[], args=[arg(arg='dataset'), arg(arg='i'), arg(arg='k'), arg(arg='interleave')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=4), Constant(value=False)]), body=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[GtE()], comparators=[Name(id='k', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='indexerror', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='_classes', ctx=Store())], value=Call(func=Name(id='_list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='dataset', ctx=Load()), attr='num_classes', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='interleave', ctx=Load()), body=[Assign(targets=[Name(id='kfolder', ctx=Store())], value=Call(func=Name(id='KFoldInterleave', ctx=Load()), args=[], keywords=[keyword(arg='n_splits', value=Name(id='k', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='kfolder', ctx=Store())], value=Call(func=Name(id='KFold', ctx=Load()), args=[], keywords=[keyword(arg='n_splits', value=Name(id='k', ctx=Load())), keyword(arg='shuffle', value=Constant(value=False))]))]), Assign(targets=[Tuple(elts=[Name(id='train_classeslvC', ctx=Store()), Name(id='val_classesSg', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Name(id='_list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='kfolder', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='_classes', ctx=Load())], keywords=[])], keywords=[]), slice=Name(id='i', ctx=Load()), ctx=Load())), Return(value=Tuple(elts=[Call(func=Name(id='ClassSubsetDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='train_classeslvC', ctx=Load())], keywords=[]), Call(func=Name(id='ClassSubsetDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='val_classesSg', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[]), FunctionDef(name='split_crossval_elements', args=arguments(posonlyargs=[], args=[arg(arg='dataset'), arg(arg='i'), arg(arg='k'), arg(arg='interleave')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=4), Constant(value=False)]), body=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[GtE()], comparators=[Name(id='k', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='indexerror', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='indices', ctx=Store())], value=Call(func=Name(id='_list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), If(test=Name(id='interleave', ctx=Load()), body=[Assign(targets=[Name(id='kfolder', ctx=Store())], value=Call(func=Name(id='KFoldInterleave', ctx=Load()), args=[], keywords=[keyword(arg='n_splits', value=Name(id='k', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='kfolder', ctx=Store())], value=Call(func=Name(id='KFold', ctx=Load()), args=[], keywords=[keyword(arg='n_splits', value=Name(id='k', ctx=Load())), keyword(arg='shuffle', value=Constant(value=True)), keyword(arg='random_state', value=Constant(value=0))]))]), Assign(targets=[Tuple(elts=[Name(id='tr', ctx=Store()), Name(id='va', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Name(id='_list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='kfolder', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='indices', ctx=Load())], keywords=[])], keywords=[]), slice=Name(id='i', ctx=Load()), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='traino', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='ElementSubsetDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='tr', ctx=Load())], keywords=[]), Call(func=Name(id='ElementSubsetDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='va', ctx=Load())], keywords=[])], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='traino', ctx=Load()), attr='num_classes', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='val', ctx=Load()), attr='num_classes', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value="The number of classes in train and test doesn't match.")], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='traino', ctx=Load()), Name(id='val', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])