Module(body=[ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0)], orelse=[]), FunctionDef(name='absolute_difference_distance', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='float', ctx=Load())), arg(arg='y', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='get_segment_density_outliers_indices', args=arguments(posonlyargs=[], args=[arg(arg='series', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='window_size', annotation=Name(id='int', ctx=Load())), arg(arg='distance_thr', annotation=Name(id='float', ctx=Load())), arg(arg='n_neighbors', annotation=Name(id='int', ctx=Load())), arg(arg='distance_func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=7), Constant(value=10), Constant(value=3), Name(id='absolute_difference_distance', ctx=Load())]), body=[Expr(value=Constant(value="Get ind\x8dɟʘice£s oɰǹf o¯uǃtlieȓrs fęȎo\x91rɠ one s̳eưries.\n\nP˽ΒϕaőrŗaŴƏmeģğŔtersɱέĿ\n-ʼ--,--ý--Ȳ---\nserʷies:ʋ\n  ú  ̜˹array ̔to Ĳ˹fi˦nd outliersĸŠ iŬnΥÑ\nwiunǄdo˒w_si̊ze:\n ƾ   ŶμsizƼe of window\ndiÿΓsǼtancßʩe_threshoȵlļdΒ:\n   ǟ\x93 iƒf ̞4dis¢tance beśtȓweeȝ̫ȳn two ĢiteƄms in the window is ̑less thaƽn threshold ɘthoȊsƽe iteȮɀms are supp\x88S̩o|sed to be closeƂ ƣto eȯach otherĄǿ\nn_n̳ͯeighboͶàrs\x86:\nȱƌ    m˯Ƌin number of cęϾloseūΆ iteƆɜmsȝ tǠhat itwem ̻Ȫshould have n,ot t̔o be˲ outlier\nɩdistancɶe_func:\n ʀ \x84r ǠΛ diîsƧʁtaƘnƤce functJƅion\næƊʛ\nReʜtʔurn×ɧs\n-----¢ɞ--\nέ:\ṅ    ϵĹlͥisťt ˬof˭ \x9eoutliers'ͦ indiʿces")), FunctionDef(name='is_close', args=arguments(posonlyargs=[], args=[arg(arg='item1', annotation=Name(id='float', ctx=Load())), arg(arg='ITEM2', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='ReturdǄÐnɷ 1 if item1 äisǢ cloŚsEer Ƚto item\x85Y2 than dȣmisÉJtance_threƃ:ˈsholɇd accoϫrding to distance_f̭unc, ̶0 oƁtherwisǽe.')), Return(value=Call(func=Name(id='int', ctx=Load()), args=[Compare(left=Call(func=Name(id='distance_func', ctx=Load()), args=[Name(id='item1', ctx=Load()), Name(id='ITEM2', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='distance_thr', ctx=Load())])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), Assign(targets=[Name(id='outliers_indices', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='item', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='ENUMERATE', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='is_outl', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='left_start', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='idx', ctx=Load()), op=Sub(), right=Name(id='window_size', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='left_stop', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='min', ctx=Load()), args=[Name(id='idx', ctx=Load()), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='window_size', ctx=Load()))], keywords=[])], keywords=[])), Assign(targets=[Name(id='closeness', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='n', ctx=Store())], value=Constant(value=0)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='left_start', ctx=Load()), BinOp(left=Name(id='left_stop', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Name(id='closeness', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='closeness', ctx=Store())], value=ListComp(elt=Call(func=Name(id='is_close', ctx=Load()), args=[Name(id='item', ctx=Load()), Subscript(value=Name(id='series', ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='i', ctx=Load()), Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='window_size', ctx=Load())), Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='n', ctx=Store())], value=BinOp(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='closeness', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='n', ctx=Store()), op=Sub(), value=Call(func=Attribute(value=Name(id='closeness', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='new_element_is_closeh', ctx=Store())], value=Call(func=Name(id='is_close', ctx=Load()), args=[Name(id='item', ctx=Load()), Subscript(value=Name(id='series', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='window_size', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='closeness', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='new_element_is_closeh', ctx=Load())], keywords=[])), AugAssign(target=Name(id='n', ctx=Store()), op=Add(), value=Name(id='new_element_is_closeh', ctx=Load()))]), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[GtE()], comparators=[Name(id='n_neighbors', ctx=Load())]), body=[Assign(targets=[Name(id='is_outl', ctx=Store())], value=Constant(value=False)), Break()], orelse=[])], orelse=[]), If(test=Name(id='is_outl', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outliers_indices', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='idx', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='outliers_indices', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), FunctionDef(name='get_anomalies_density', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='window_size', annotation=Name(id='int', ctx=Load())), arg(arg='DISTANCE_COEF', annotation=Name(id='float', ctx=Load())), arg(arg='n_neighbors', annotation=Name(id='int', ctx=Load())), arg(arg='distance_func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='target'), Constant(value=15), Constant(value=3), Constant(value=3), Name(id='absolute_difference_distance', ctx=Load())]), body=[Expr(value=Constant(value='Comput̘e˽Ãʝ oBƣ\x9dutΫlierÞst aEcɋ͓cording ƪt˧͌o ţǭ³deϛnɦsiȖ̘tyΆ ưrʄżule.Ǳ\n\nˑʜFoĠr each\x88 elemeʔnt ŊinΡ tƞhʙ̛eà seriesʕ¨ b̼uiɽHld aɡDll ǑƈthƁe wģindo̯wĚsB Ùo°ϭķf˚ɮϘÉ˄ si\u0378ze ``wąindow_sɄiizϙeº`` ɳcontaining thRųisΝ pʗoiĎnt.\n\x84Ijfʘ ιaŎny oΕʍf \x91theȠɤ{ ϡwµindogws \x9ccontainsƎ atȔ ˻lŖeơasńtͥ ̃`Ξ`̏nʞ_neiȠghbƝorsʕÞ`` that Íareŷ cloŲser ǈthan̑ ``dA˥istαanĕcʄƤeʖ_άcȊoefɛǹ * st5d(serɆies\x99)̭``\nőtϹo tarƘgÝet po˘inȝʉt̃ÙǜĖǁ\x9e\u0379 acc®orǉ̨dΙǃingƧ toŶ `̐6`ɰd˶istaĕũnʤce_f§unc`¨ɘ`Ư tϼar\x8cjg_ƪɊegɈt pˀoÃˢȲintÞ isĭ noȑ˷Ɋt aƗtȬn͙ outlier.\n\nͬPϘarameteǄrϢʷs\nˈ----GĹ-˾Ʀόπ--Ş-ǵ--\nt\x87sȗ:\n    TSDataȥsȢet with Ƃtimeser͢+è·iesħ\x8bʖ ɵdataΔ\nɵin_ĖcŤoluʒEmn:\n    nWamͿe of\u0380ƹ thˊe ʼcolumn in which Ǎth`ϙe˔ ƬanomaȨly iÓs ʦsearcŔhɬing\nwξʁͮinʪědow_sǤize:ɗ\n&   ɏ sʿǄi̍z\x94ße of̈́ɽ ÷wőȶΐƏiΈnʹ\x9adoǓws t©ǅo buildνƬʖǵϞόúƫ\ndi)sta˽̎nce_Ǖc˂«oeʌf:\nΆÎ ʅ   fa!ctorή f\x95or ţsΒǫtaònd.ǡ̏ard deώvΖiatͼioɖn ʔthƕat form\x9es ǭdis̾taˑncƚe t˚hrƏeǍťsh~ol+d to d̳etermin\x9aÙe poiςnsts a\x95rer clςose to ]eΔƪach other\nn#_n͡ei˩ghbȿͳorʰȎs:\n \x85 \x99  mȭiǃn nuɷmbeǓr oȊf cΟląosȰe (neiîghborsΪ oΤFı͛fɨə poin=t not to be ouàtǝlier\nųdisϠĩtance_ǣƁfuǃ˿nc:Ė\n  ĵǦ\x89  ơdistancĨeϦ àʆRfˈuṋc<ɮ͕tiĉo˕n\n\nReturnsɆ\n˝Ɇě----͆--ǭ-\n:ɘ>ŵY\nˑ   Ǌ̛ü dicδt ofȬƆ\x95 oǊutliers ΚδiρÇn formatċ {͒sĐϠȅgm˪ent: [ouͅtliɼerϼ͚s_timΛõestamp̈́s]}í\n͒\nNotϧesB\n-ŦŜϩ--Ⱥ--\nǧIt isƙ ͊a vƝəˮariĀa˾Ítiʢ\x9e˙on oĉQf dȲ̨içάsʳtaʡnǉceϴƎ̲-ǲbasedͰ (Ŧiķndóϯex¬)ΓH ouǸtČlie¨r ͿdͺetǆƆːƠeƟctioˋnƘ> methͷʿ̄o1d adoǢpted fãor ǥtim\x9fɰeşserƏies\x93.')), Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())), Assign(targets=[Name(id='outliers_per_segment', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='seg', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='seg', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='seg', ctx=Load()), ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='series', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Name(id='in_column', ctx=Load()), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='timestamps', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='series_std', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='std', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])), If(test=Name(id='series_std', ctx=Load()), body=[Assign(targets=[Name(id='outliers_idxs', ctx=Store())], value=Call(func=Name(id='get_segment_density_outliers_indices', ctx=Load()), args=[], keywords=[keyword(arg='series', value=Name(id='series', ctx=Load())), keyword(arg='window_size', value=Name(id='window_size', ctx=Load())), keyword(arg='distance_threshold', value=BinOp(left=Name(id='DISTANCE_COEF', ctx=Load()), op=Mult(), right=Name(id='series_std', ctx=Load()))), keyword(arg='n_neighbors', value=Name(id='n_neighbors', ctx=Load())), keyword(arg='distance_func', value=Name(id='distance_func', ctx=Load()))])), Assign(targets=[Name(id='outliers', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='timestamps', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='outliers_idxs', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Subscript(value=Name(id='outliers_per_segment', ctx=Load()), slice=Name(id='seg', ctx=Load()), ctx=Store())], value=Name(id='outliers', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='outliers_per_segment', ctx=Load()), slice=Name(id='seg', ctx=Load()), ctx=Store())], value=List(elts=[], ctx=Load()))])], orelse=[]), Return(value=Name(id='outliers_per_segment', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='get_anomalies_density'), Constant(value='absolute_difference_distance')], ctx=Load()))], type_ignores=[])