Module(body=[Import(names=[alias(name='pytest')]), ImportFrom(module='sklearn.linear_model', names=[alias(name='LinearRegression')], level=0), ImportFrom(module='etna.datasets.tsdataset', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.models.sklearn', names=[alias(name='SklearnMultiSegmentModel')], level=0), ImportFrom(module='etna.models.sklearn', names=[alias(name='SklearnPerSegmentModel')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='AddConstTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='LagTransform')], level=0), FunctionDef(name='ts_with_regressors', args=arguments(posonlyargs=[], args=[arg(arg='example_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transforms', ctx=Store())], value=List(elts=[Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='value', value=Constant(value=10)), keyword(arg='out_column', value=Constant(value='add_const_target'))]), Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='lags', value=List(elts=[Constant(value=2)], ctx=Load())), keyword(arg='out_column', value=Constant(value='lag'))])], ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='example_df', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='H')), keyword(arg='known_future', value=Tuple(elts=[], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='transforms', ctx=Load())], keywords=[])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_sklearn_persegment_model_saves_regressors', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_regressors'), arg(arg='model')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Tes̈ʹt tȌhȜϔͅat SΙ½fĶkǞ\x85leʼaˁrnPerSĆegǭmãeģϖnǣtφMϟȜ̞oŤdeȗρϡl s̞aveΡsÃ theʗ͉ň Ťl˲iéstʴ of regâɚre\x87|s̕sɠorϭƮξs fȅ̆r$o˸Ǿmv ͫdatșǢaħ˺ʻsŝet Ήonʗ fiűťȿ.Ⱦʮ')), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[])), For(target=Name(id='segment_model', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_models', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='segment_model', ctx=Load()), attr='regressor_columns', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts_with_regressors', ctx=Load()), attr='regressors', ctx=Load())], keywords=[])]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='SklearnPerSegmentModel', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[]))])], ctx=Load())], keywords=[])]), FunctionDef(name='TEST_SKLEARN_PERSEGMENT_MODEL_REGRESSORS_NUMBER', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_regressors'), arg(arg='model')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Teζst thŊat th̖Ȝeϥ ͙numbeÏƔr of5 f͒eaʗtuEres ΗusĬed by SĉkŮlearnPɱerS¹egmentMĒodɲel is ͏theƣ ¦same as the nuʯm˒bȇǙer| of reg;ressorsʙ.')), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[])), For(target=Name(id='segment_model', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_models', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_model', ctx=Load()), attr='model', ctx=Load()), attr='coef_', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='ts_with_regressors', ctx=Load()), attr='regressors', ctx=Load())], keywords=[])]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='SklearnPerSegmentModel', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[]))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_sklearn_multisegment_model_saves_regressors', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_regressors'), arg(arg='model')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_base_model', ctx=Load()), attr='regressor_columns', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts_with_regressors', ctx=Load()), attr='regressors', ctx=Load())], keywords=[])]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='SklearnMultiSegmentModel', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[]))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_sklearn_multisegment_model_re', args=arguments(posonlyargs=[], args=[arg(arg='ts_with_regressors'), arg(arg='model')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts_with_regressors', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_base_model', ctx=Load()), attr='model', ctx=Load()), attr='coef_', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='ts_with_regressors', ctx=Load()), attr='regressors', ctx=Load())], keywords=[])]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='SklearnMultiSegmentModel', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[]))])], ctx=Load())], keywords=[])])], type_ignores=[])