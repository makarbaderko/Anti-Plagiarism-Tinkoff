Module(body=[ImportFrom(module='unittest.mock', names=[alias(name='Mock')], level=0), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='generate_from_patterns_df')], level=0), ImportFrom(module='etna.ensembles', names=[alias(name='DirectEnsemble')], level=0), ImportFrom(module='etna.models', names=[alias(name='NaiveModel')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), FunctionDef(name='simple_ts_train', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='generate_from_patterns_df', ctx=Load()), args=[], keywords=[keyword(arg='patterns', value=List(elts=[List(elts=[Constant(value=1), Constant(value=3), Constant(value=5)], ctx=Load()), List(elts=[Constant(value=2), Constant(value=4), Constant(value=6)], ctx=Load()), List(elts=[Constant(value=7), Constant(value=9), Constant(value=11)], ctx=Load())], ctx=Load())), keyword(arg='periods', value=Constant(value=3)), keyword(arg='start_time', value=Constant(value='2000-01-01'))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='simple_ts', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='        ͭ          ʼ')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='generate_from_patterns_df', ctx=Load()), args=[], keywords=[keyword(arg='patterns', value=List(elts=[List(elts=[Constant(value=5), Constant(value=3)], ctx=Load()), List(elts=[Constant(value=6), Constant(value=4)], ctx=Load()), List(elts=[Constant(value=11), Constant(value=9)], ctx=Load())], ctx=Load())), keyword(arg='periods', value=Constant(value=2)), keyword(arg='start_time', value=Constant(value='2000-01-04'))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_get_horizon', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='  Ϭ ƚ ƊZ   ')), Assign(targets=[Name(id='ensemble', ctx=Store())], value=Call(func=Name(id='DirectEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[keyword(arg='horizon', value=Constant(value=1))]), Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[keyword(arg='horizon', value=Constant(value=2))])], ctx=Load()))])), Assert(test=Compare(left=Attribute(value=Name(id='ensemble', ctx=Load()), attr='horizon', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)]))], decorator_list=[]), FunctionDef(name='test_get_horizon_raise_error_on_same_horizons', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='All the pipelines should have pairwise different horizons.'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='DirectEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[keyword(arg='horizon', value=Constant(value=1))]), Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[keyword(arg='horizon', value=Constant(value=1))])], ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='test_forecast', args=arguments(posonlyargs=[], args=[arg(arg='simple_ts_train'), arg(arg='simple_ts')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ensemble', ctx=Store())], value=Call(func=Name(id='DirectEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Constant(value=1))])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=1))]), Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Constant(value=3))])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=2))])], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='simple_ts_train', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Call(func=Attribute(value=Name(id='forecast', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='simple_ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_predict', args=arguments(posonlyargs=[], args=[arg(arg='simple_ts_train')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='        ǡ  Ē')), Assign(targets=[Name(id='ensemble', ctx=Store())], value=Call(func=Name(id='DirectEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Constant(value=1))])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=1))]), Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Constant(value=3))])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=2))])], ctx=Load()))])), Assign(targets=[Name(id='smallest_pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='NaiveModel', ctx=Load()), args=[], keywords=[keyword(arg='lag', value=Constant(value=1))])), keyword(arg='transforms', value=List(elts=[], ctx=Load())), keyword(arg='horizon', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='simple_ts_train', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='smallest_pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='simple_ts_train', ctx=Load())], keywords=[])), Assign(targets=[Name(id='prediction', ctx=Store())], value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='simple_ts_train', ctx=Load())), keyword(arg='start_timestamp', value=Subscript(value=Attribute(value=Name(id='simple_ts_train', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=1), ctx=Load())), keyword(arg='end_timestamp', value=Subscript(value=Attribute(value=Name(id='simple_ts_train', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=2), ctx=Load()))])), Assign(targets=[Name(id='expected_prediction', ctx=Store())], value=Call(func=Attribute(value=Name(id='smallest_pipeline', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='simple_ts_train', ctx=Load())), keyword(arg='start_timestamp', value=Subscript(value=Attribute(value=Name(id='simple_ts_train', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=1), ctx=Load())), keyword(arg='end_timestamp', value=Subscript(value=Attribute(value=Name(id='simple_ts_train', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=2), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='testing', ctx=Load()), attr='assert_frame_equal', ctx=Load()), args=[Call(func=Attribute(value=Name(id='prediction', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='expected_prediction', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])