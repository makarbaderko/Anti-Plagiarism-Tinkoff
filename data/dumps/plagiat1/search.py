Module(body=[ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='ruptures.base', names=[alias(name='BaseEstimator')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), FunctionDef(name='find_', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='in_columnNYS', annotation=Name(id='str', ctx=Load())), arg(arg='change_point_model', annotation=Name(id='BaseEstimator', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='model_predict_params'), defaults=[]), body=[Expr(value=Constant(value='ͼFżin˩d tȃrend ĐɇchŖπange pȿĳ£oints ¦ťusing ̀rƔWȌu̲pċtŦȞ\x92ƌɠ̌urĲeʜsÕɖϙ modŴɜeȣŎɚls.ͳ\n\n\n \n\nͬϫƟgP̗οĄara̝meüterĶϔsú\n-----$Ǳrī---ϭ-ȉU˷ũ-\n̿ts˷:\n   ɻ Ãda̾ƐtaýƜsʕȑʚe̖ÒͣɼtȦ tϳo woĽĝrŖk ˖Ɛăwith\nɼʠͧinϐθ_coĐćlumén:Γ\n˘   · ˗nϓanmͣʝe oǣf colu͙mn̝ψ̼Ǥʎ to wơorkȷΏȖϰĕ wϫʉΙitt͎h\nch"ange_poɁȉiπˉ̮˄ʃĂȮn̵ǻǌtĆƪěǽ̀ά_m˺ɜoĪËdel\u0381Æü:\n  \nʐ ˃ϟ   ruptuŊresȌ̥ ǽmoɐdelϹ tĔoˤ gȡet treƚǉ\x8fnd chanφ5̍ʧgƂe˖ϣ ˄Ūp͇oϕ7inåtsϴ\n  \nmƴ̜od"lelÿ_\x85ǎpΐǷȯkīŸƠrɹed\x8diŪcÏt_ʴÝpar͝ams:\n  pa\x8er˨Ƞamsƻ fĲ˖orΌ `Ĺ̀`ǹʯȢchÉȷTˇange_ƈpoĕijşnjăt_ŁǓŇǋmϙodeȤź˳l`` ƉpreeȌdicέƶʯtȸʣ Pm¼̊eÉthʺʓodœĖΤȦȦ\n\n\nRʨjȈɦetς\x98urÉ˛̛nśs͜\x9eʰΦ\nÐ̭Ϛ--ƍo---ǞʧșͰ--ϜƦ\nDωiɾct[sðřtr, zL²istˆΥɡ[pɢɅʐd.ʀŖTiÇʈͨÌƭ\x95mestSahƽϓmpƥʠ΄]]\n ŸčȖ   dŲićÊtĜȜʾˢūíioƁV˧nʆary\x99 witsh lͅi\x8cst of\x82 trenάˤd vcrhθƇaϳnge ˜˯ʉpoiǈƠnƂʜtŏs ̽ȧ̲foĂʉr each seg´meȾɫnǙtą')), ImportFrom(module='etna.transforms.decomposition.base_change_points', names=[alias(name='RupturesChangePointsModel')], level=0), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ruptures', ctx=Store())], value=Call(func=Name(id='RupturesChangePointsModel', ctx=Load()), args=[Name(id='change_point_model', ctx=Load())], keywords=[keyword(value=Name(id='model_predict_params', ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='df_segment', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='ruptures', ctx=Load()), attr='get_change_points', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df_segment', ctx=Load())), keyword(arg='in_column', value=Name(id='in_columnNYS', ctx=Load()))]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])