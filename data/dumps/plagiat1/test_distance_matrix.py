Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.clustering.distances.distance_matrix', names=[alias(name='DistanceMatrix')], level=0), ImportFrom(module='etna.clustering.distances.dtw_distance', names=[alias(name='DTWDistance')], level=0), ImportFrom(module='etna.clustering.distances.euclidean_distance', names=[alias(name='EuclideanDistance')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), FunctionDef(name='simple_multisegment_ts', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='VGRenerate ʪsimplƀŭhe datafra.meȯĠ̷ ȴwith jmultiƸpÆlfǴe̿ sɩegmeɓ̒̚˘nͅts.I')), Assign(targets=[Name(id='date_range', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[keyword(arg='periods', value=Constant(value=4))])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Name(id='date_range', ctx=Load())])], keywords=[])), Assign(targets=[Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='A')), Assign(targets=[Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=List(elts=[Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Name(id='date_range', ctx=Load())])], keywords=[])), Assign(targets=[Subscript(value=Name(id='x2', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='B')), Assign(targets=[Subscript(value=Name(id='x2', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=List(elts=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x3', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Name(id='date_range', ctx=Load())])], keywords=[])), Assign(targets=[Subscript(value=Name(id='x3', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='C')), Assign(targets=[Subscript(value=Name(id='x3', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x4', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Name(id='date_range', ctx=Load())])], keywords=[])), Assign(targets=[Subscript(value=Name(id='x4', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='D')), Assign(targets=[Subscript(value=Name(id='x4', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=1)], ctx=Load())), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Name(id='x', ctx=Load()), Name(id='x2', ctx=Load()), Name(id='x3', ctx=Load()), Name(id='x4', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='float', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='D'))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='test_idx2segment_segment2idx', args=arguments(posonlyargs=[], args=[arg(arg='simple_multisegment_ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dm', ctx=Store())], value=Call(func=Name(id='DistanceMatrix', ctx=Load()), args=[], keywords=[keyword(arg='distance', value=Call(func=Name(id='EuclideanDistance', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='dm', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='simple_multisegment_ts', ctx=Load()))])), Assert(test=Compare(left=Attribute(value=Name(id='dm', ctx=Load()), attr='idx2segment', ctx=Load()), ops=[Eq()], comparators=[Dict(keys=[Constant(value=0), Constant(value=1), Constant(value=2), Constant(value=3)], values=[Constant(value='A'), Constant(value='B'), Constant(value='C'), Constant(value='D')])])), Assert(test=Compare(left=Attribute(value=Name(id='dm', ctx=Load()), attr='segment2idx', ctx=Load()), ops=[Eq()], comparators=[Dict(keys=[Constant(value='A'), Constant(value='B'), Constant(value='C'), Constant(value='D')], values=[Constant(value=0), Constant(value=1), Constant(value=2), Constant(value=3)])]))], decorator_list=[]), FunctionDef(name='test_eucl_matrix_valu', args=arguments(posonlyargs=[], args=[arg(arg='simple_multisegment_ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dm', ctx=Store())], value=Call(func=Name(id='DistanceMatrix', ctx=Load()), args=[], keywords=[keyword(arg='distance', value=Call(func=Name(id='EuclideanDistance', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='dm', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='simple_multisegment_ts', ctx=Load()))])), Assign(targets=[Name(id='matrix', ctx=Store())], value=Call(func=Attribute(value=Name(id='dm', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sqrt_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Constant(value=2)], keywords=[])), Assign(targets=[Name(id='sqrt__3', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Constant(value=3)], keywords=[])), Assign(targets=[Name(id='expected', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Constant(value=0), Constant(value=1), Name(id='sqrt_2', ctx=Load()), Name(id='sqrt__3', ctx=Load())], ctx=Load()), List(elts=[Constant(value=1), Constant(value=0), Constant(value=1), Name(id='sqrt_2', ctx=Load())], ctx=Load()), List(elts=[Name(id='sqrt_2', ctx=Load()), Constant(value=1), Constant(value=0), Constant(value=1)], ctx=Load()), List(elts=[Name(id='sqrt__3', ctx=Load()), Name(id='sqrt_2', ctx=Load()), Constant(value=1), Constant(value=0)], ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Name(id='matrix', ctx=Load()), Name(id='expected', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_dtw_matrix', args=arguments(posonlyargs=[], args=[arg(arg='simple_multisegment_ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Cϧhec{ȹΙ+k distaĉn,Ϊce mȟȖΥ̾ańEŢˀϮtħrϞix in caɞpʈse ɶŐ̼of d˘tw distòanŘce.')), Assign(targets=[Name(id='dm', ctx=Store())], value=Call(func=Name(id='DistanceMatrix', ctx=Load()), args=[], keywords=[keyword(arg='distance', value=Call(func=Name(id='DTWDistance', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='dm', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='simple_multisegment_ts', ctx=Load()))])), Assign(targets=[Name(id='matrix', ctx=Store())], value=Call(func=Attribute(value=Name(id='dm', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='expected', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[List(elts=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=2)], ctx=Load()), List(elts=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=2)], ctx=Load()), List(elts=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=1)], ctx=Load()), List(elts=[Constant(value=2), Constant(value=2), Constant(value=1), Constant(value=0)], ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Name(id='matrix', ctx=Load()), Name(id='expected', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_distance_matrix_fails_on_predict_without_fit', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Che?ĥϩck8 tǼhȳat diē͓˫ɯstía×nce śȸǭmaɛtrixϔΑ Υ\x8ff\xa0Ĺai˘Ɵls onˆʷĢ predȇΊiȆct ͢iɇfɒɁ iǼtɐ iǍs nŲot fiūɞ̴tteȓdɮ̇.')), Assign(targets=[Name(id='dm', ctx=Store())], value=Call(func=Name(id='DistanceMatrix', ctx=Load()), args=[], keywords=[keyword(arg='distance', value=Call(func=Name(id='EuclideanDistance', ctx=Load()), args=[], keywords=[]))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='valueerror', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='DistanceMatrix is not fitted!'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='dm', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[]))])], decorator_list=[])], type_ignores=[])