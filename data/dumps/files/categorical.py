Module(body=[ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='sklearn', names=[alias(name='preprocessing')], level=0), ImportFrom(module='sklearn.utils._encode', names=[alias(name='_check_unknown')], level=0), ImportFrom(module='sklearn.utils._encode', names=[alias(name='_encode')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ClassDef(name='ImputerMode', bases=[Name(id='str', ctx=Load()), Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Enum for different imputation strategy.')), Assign(targets=[Name(id='new_value', ctx=Store())], value=Constant(value='new_value')), Assign(targets=[Name(id='mean', ctx=Store())], value=Constant(value='mean')), Assign(targets=[Name(id='none', ctx=Store())], value=Constant(value='none'))], decorator_list=[]), ClassDef(name='_LabelEncoder', bases=[Attribute(value=Name(id='preprocessing', ctx=Load()), attr='LabelEncoder', ctx=Load())], keywords=[], body=[FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='y', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), arg(arg='strategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='_check_unknown', ctx=Load()), args=[Name(id='y', ctx=Load())], keywords=[keyword(arg='known_values', value=Attribute(value=Name(id='self', ctx=Load()), attr='classes_', ctx=Load()))])), Assign(targets=[Name(id='is_new_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isin', ctx=Load()), args=[Name(id='y', ctx=Load()), Name(id='diff', ctx=Load())], keywords=[])), Assign(targets=[Name(id='encoded', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='y', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='float', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='encoded', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Name(id='is_new_index', ctx=Load())), ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='_encode', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='y', ctx=Load()), attr='iloc', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Name(id='is_new_index', ctx=Load())), ctx=Load())], keywords=[keyword(arg='uniques', value=Attribute(value=Name(id='self', ctx=Load()), attr='classes_', ctx=Load())), keyword(arg='check_unknown', value=Constant(value=False))]), attr='astype', ctx=Load()), args=[Name(id='float', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='none', ctx=Load())]), body=[Assign(targets=[Name(id='filling_value', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='new_value', ctx=Load())]), body=[Assign(targets=[Name(id='filling_value', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Name(id='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='mean', ctx=Load())]), body=[Assign(targets=[Name(id='filling_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Subscript(value=Name(id='encoded', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isin', ctx=Load()), args=[Name(id='y', ctx=Load()), Name(id='diff', ctx=Load())], keywords=[])), ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="The strategy '"), FormattedValue(value=Name(id='strategy', ctx=Load()), conversion=-1), Constant(value="' doesn't exist")])], keywords=[]))])])]), Assign(targets=[Subscript(value=Name(id='encoded', ctx=Load()), slice=Name(id='is_new_index', ctx=Load()), ctx=Store())], value=Name(id='filling_value', ctx=Load())), Return(value=Name(id='encoded', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='LabelEncoderTransform', bases=[Name(id='Transform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Encode categorical feature with value between 0 and n_classes-1.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='out_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='strategy', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='mean', ctx=Load())]), body=[Expr(value=Constant(value='\n        Init LabelEncoderTransform.\n\n        Parameters\n        ----------\n        in_column:\n            Name of column to be transformed\n        out_column:\n            Name of added column. If not given, use ``self.__repr__()``\n        strategy:\n            Filling encoding in not fitted values:\n\n            - If "new_value", then replace missing values with \'-1\'\n\n            - If "mean", then replace missing values using the mean in encoded column\n\n            - If "none", then replace missing values with None\n\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Store())], value=Name(id='strategy', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='le', ctx=Store())], value=Call(func=Name(id='_LabelEncoder', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Fit Label encoder.\n\n        Parameters\n        ----------\n        df:\n            Dataframe with data to fit the transform\n        Returns\n        -------\n        :\n            Fitted transform\n        ')), Assign(targets=[Name(id='y', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='le', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='y', value=Name(id='y', ctx=Load()))])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='LabelEncoderTransform')), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Encode the ``in_column`` by fitted Label encoder.\n\n        Parameters\n        ----------\n        df\n            Dataframe with data to transform\n\n        Returns\n        -------\n        :\n            Dataframe with column with encoded values\n        ')), Assign(targets=[Name(id='out_column', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='result_df', ctx=Load()), slice=Name(id='out_column', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='le', ctx=Load()), attr='transform', ctx=Load()), args=[Subscript(value=Name(id='result_df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='result_df', ctx=Load()), slice=Name(id='out_column', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='result_df', ctx=Load()), slice=Name(id='out_column', ctx=Load()), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='category')], keywords=[])), Assign(targets=[Name(id='result_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='result_df', ctx=Load())], keywords=[])), Return(value=Name(id='result_df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_get_column_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get the ``out_column`` depending on the transform's parameters.")), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='OneHotEncoderTransform', bases=[Name(id='Transform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Encode categorical feature as a one-hot numeric features.\n\n    If unknown category is encountered during transform, the resulting one-hot\n    encoded columns for this feature will be all zeros.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='out_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Init OneHotEncoderTransform.\n\n        Parameters\n        ----------\n        in_column:\n            Name of column to be encoded\n        out_column:\n            Prefix of names of added columns. If not given, use ``self.__repr__()``\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ohe', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocessing', ctx=Load()), attr='OneHotEncoder', ctx=Load()), args=[], keywords=[keyword(arg='handle_unknown', value=Constant(value='ignore')), keyword(arg='sparse', value=Constant(value=False)), keyword(arg='dtype', value=Name(id='int', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Fit One Hot encoder.\n\n        Parameters\n        ----------\n        df:\n            Dataframe with data to fit the transform\n        Returns\n        -------\n        :\n            Fitted transform\n        ')), Assign(targets=[Name(id='x', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]), slice=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ohe', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='X', value=Name(id='x', ctx=Load()))])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='OneHotEncoderTransform')), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Encode the `in_column` by fitted One Hot encoder.\n\n        Parameters\n        ----------\n        df\n            Dataframe with data to transform\n\n        Returns\n        -------\n        :\n            Dataframe with column with encoded values\n        ')), Assign(targets=[Name(id='out_column', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='out_columns', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Name(id='out_column', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ohe', ctx=Load()), attr='categories_', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='result_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x', ctx=Store())], value=Subscript(value=Name(id='result_df', ctx=Load()), slice=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='result_df', ctx=Load()), slice=Name(id='out_columns', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ohe', ctx=Load()), attr='transform', ctx=Load()), args=[], keywords=[keyword(arg='X', value=Name(id='x', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='result_df', ctx=Load()), slice=Name(id='out_columns', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='result_df', ctx=Load()), slice=Name(id='out_columns', ctx=Load()), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='category')], keywords=[])), Assign(targets=[Name(id='result_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='result_df', ctx=Load())], keywords=[])), Return(value=Name(id='result_df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_get_column_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get the ``out_column`` depending on the transform's parameters.")), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])