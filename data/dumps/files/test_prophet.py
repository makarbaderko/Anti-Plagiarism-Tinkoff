Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='prophet', names=[alias(name='Prophet')], level=0), ImportFrom(module='etna.datasets.tsdataset', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.models', names=[alias(name='ProphetModel')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), FunctionDef(name='test_run', args=arguments(posonlyargs=[], args=[arg(arg='new_format_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Name(id='new_format_df', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load()), Constant(value='1d')], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future_ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=3)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future_ts', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='future_ts', ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[]), attr='values', ctx=Load()), attr='any', ctx=Load()), args=[], keywords=[])), body=[Assert(test=Constant(value=True))], orelse=[Assert(test=Constant(value=False))])], decorator_list=[]), FunctionDef(name='test_run_with_reg', args=arguments(posonlyargs=[], args=[arg(arg='new_format_df'), arg(arg='new_format_exog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Name(id='new_format_df', ctx=Load())), Assign(targets=[Name(id='regressors', ctx=Store())], value=Call(func=Attribute(value=Name(id='new_format_exog', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='regressors', ctx=Load()), attr='columns', ctx=Load()), attr='set_levels', ctx=Load()), args=[List(elts=[Constant(value='regressor_exog')], ctx=Load())], keywords=[keyword(arg='level', value=Constant(value='feature')), keyword(arg='inplace', value=Constant(value=True))])), Assign(targets=[Name(id='regressors_floor', ctx=Store())], value=Call(func=Attribute(value=Name(id='new_format_exog', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='regressors_floor', ctx=Load()), attr='columns', ctx=Load()), attr='set_levels', ctx=Load()), args=[List(elts=[Constant(value='floor')], ctx=Load())], keywords=[keyword(arg='level', value=Constant(value='feature')), keyword(arg='inplace', value=Constant(value=True))])), Assign(targets=[Name(id='regressors_cap', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='regressors_floor', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='regressors_cap', ctx=Load()), attr='columns', ctx=Load()), attr='set_levels', ctx=Load()), args=[List(elts=[Constant(value='cap')], ctx=Load())], keywords=[keyword(arg='level', value=Constant(value='feature')), keyword(arg='inplace', value=Constant(value=True))])), Assign(targets=[Name(id='exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='regressors', ctx=Load()), Name(id='regressors_floor', ctx=Load()), Name(id='regressors_cap', ctx=Load())], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load()), Constant(value='1d')], keywords=[keyword(arg='df_exog', value=Name(id='exog', ctx=Load())), keyword(arg='known_future', value=Constant(value='all'))])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[keyword(arg='growth', value=Constant(value='logistic'))])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future_ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=3)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future_ts', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='future_ts', ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[]), attr='values', ctx=Load()), attr='any', ctx=Load()), args=[], keywords=[])), body=[Assert(test=Constant(value=True))], orelse=[Assert(test=Constant(value=False))])], decorator_list=[]), FunctionDef(name='test_run_with_cap_floor', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cap', ctx=Store())], value=Constant(value=101)), Assign(targets=[Name(id='floor', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='target')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=100))]), Constant(value='segment_0'), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=100)], keywords=[])], keywords=[])])], keywords=[])), Assign(targets=[Name(id='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='segment'), Constant(value='cap'), Constant(value='floor')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=120))]), Constant(value='segment_0'), Name(id='cap', ctx=Load()), Name(id='floor', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), keyword(arg='df_exog', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_exog', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='D')), keyword(arg='known_future', value=Constant(value='all'))])), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[keyword(arg='growth', value=Constant(value='logistic'))])), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='horizon', value=Constant(value=7))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts_future', ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df_future', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_future', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='df_future', ctx=Load()), slice=Constant(value='target'), ctx=Load()), ops=[Lt()], comparators=[Name(id='cap', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_prediction_interval_run_insample', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='forecast', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_slice', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Set(elts=[Constant(value='target_0.025'), Constant(value='target_0.975'), Constant(value='target')]), attr='issubset', ctx=Load()), args=[Attribute(value=Name(id='segment_slice', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=BinOp(left=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.975'), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.025'), ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)]), attr='all', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_prediction_interval_run_infuture', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future', ctx=Store())], value=Call(func=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=10)], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future', ctx=Load())], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='forecast', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_slice', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Set(elts=[Constant(value='target_0.025'), Constant(value='target_0.975'), Constant(value='target')]), attr='issubset', ctx=Load()), args=[Attribute(value=Name(id='segment_slice', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=BinOp(left=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.975'), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.025'), ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)]), attr='all', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_prophet_save_regressors_on_fit', args=arguments(posonlyargs=[], args=[arg(arg='example_reg_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_reg_tsds', ctx=Load()))])), For(target=Name(id='segment_model', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_models', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='segment_model', ctx=Load()), attr='regressor_columns', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='example_reg_tsds', ctx=Load()), attr='regressors', ctx=Load())]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_get_model_before_training', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that get_model method throws an error if per-segment model is not fitted yet.')), Assign(targets=[Name(id='etna_model', ctx=Store())], value=Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Can not get the dict with base models, the model is not fitted!'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='etna_model', ctx=Load()), attr='get_model', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_get_model_after_training', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that get_model method returns dict of objects of Prophet class.')), Assign(targets=[Name(id='pipeline', ctx=Store())], value=Call(func=Name(id='Pipeline', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Call(func=Name(id='ProphetModel', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsds', ctx=Load()))])), Assign(targets=[Name(id='models_dict', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pipeline', ctx=Load()), attr='model', ctx=Load()), attr='get_model', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='models_dict', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='segments', ctx=Load()), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='models_dict', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), Name(id='Prophet', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])