Module(body=[Import(names=[alias(name='warnings')]), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.transforms.base', names=[alias(name='PerSegmentWrapper')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ClassDef(name='ImputerMode', bases=[Name(id='str', ctx=Load()), Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Enum for different imputation strategy.')), Assign(targets=[Name(id='zero', ctx=Store())], value=Constant(value='zero')), Assign(targets=[Name(id='mean', ctx=Store())], value=Constant(value='mean')), Assign(targets=[Name(id='running_mean', ctx=Store())], value=Constant(value='running_mean')), Assign(targets=[Name(id='forward_fill', ctx=Store())], value=Constant(value='forward_fill')), Assign(targets=[Name(id='seasonal', ctx=Store())], value=Constant(value='seasonal')), Assign(targets=[Name(id='constant', ctx=Store())], value=Constant(value='constant'))], decorator_list=[]), ClassDef(name='_OneSegmentTimeSeriesImputerTransform', bases=[Name(id='Transform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="One segment version of transform to fill NaNs in series of a given dataframe.\n\n    - It is assumed that given series begins with first non NaN value.\n\n    - This transform can't fill NaNs in the future, only on train data.\n\n    - This transform can't fill NaNs if all values are NaNs. In this case exception is raised.\n\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='strategy', annotation=Name(id='str', ctx=Load())), arg(arg='window', annotation=Name(id='int', ctx=Load())), arg(arg='seasonality', annotation=Name(id='int', ctx=Load())), arg(arg='default_value', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='constant_value', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='\n        Create instance of _OneSegmentTimeSeriesImputerTransform.\n\n        Parameters\n        ----------\n        in_column:\n            name of processed column\n        strategy:\n            filling value in missing timestamps:\n\n            - If "zero", then replace missing dates with zeros\n\n            - If "mean", then replace missing dates using the mean in fit stage.\n\n            - If "running_mean" then replace missing dates using mean of subset of data\n\n            - If "forward_fill" then replace missing dates using last existing value\n\n            - If "seasonal" then replace missing dates using seasonal moving average\n\n            - If "constant" then replace missing dates using constant value.\n\n        window:\n            In case of moving average and seasonality.\n\n            * If ``window=-1`` all previous dates are taken in account\n\n            * Otherwise only window previous dates\n\n        seasonality:\n            the length of the seasonality\n        default_value:\n            value which will be used to impute the NaNs left after applying the imputer with the chosen strategy\n        constant_value:\n            value to fill gaps in "constant" strategy\n\n        Raises\n        ------\n        ValueError:\n            if incorrect strategy given\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Store())], value=Call(func=Name(id='ImputerMode', ctx=Load()), args=[Name(id='strategy', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='seasonality', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='default_value', ctx=Store())], value=Name(id='default_value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='constant_value', ctx=Store())], value=Name(id='constant_value', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='fill_value', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='nan_timestamps', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Fit preprocess params.\n\n        Parameters\n        ----------\n        df: pd.DataFrame\n            dataframe with series to fit preprocess params with\n\n        Returns\n        -------\n        self: _OneSegmentTimeSeriesImputerTransform\n            fitted preprocess\n        ')), Assign(targets=[Name(id='raw_series', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load())), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Call(func=Attribute(value=Name(id='raw_series', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Series hasn't non NaN values which means it is empty and can't be filled.")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='series', ctx=Store())], value=Subscript(value=Name(id='raw_series', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='raw_series', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nan_timestamps', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='series', ctx=Load()), slice=Call(func=Attribute(value=Name(id='series', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), ctx=Load()), attr='index', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='zero', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='zero strategy will be removed in etna 2.0.0. Use constant strategy instead.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fill_value', ctx=Store())], value=Constant(value=0))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='constant', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fill_value', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='constant_value', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='mean', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fill_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='series', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))], orelse=[])]), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='_OneSegmentTimeSeriesImputerTransform')), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Transform given series.\n\n        Parameters\n        ----------\n        df: pd.Dataframe\n            transform ``in_column`` series of given dataframe\n\n        Returns\n        -------\n        result: pd.DataFrame\n            dataframe with in_column series with filled gaps\n        ')), Assign(targets=[Name(id='result_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='cur_nans', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='result_df', ctx=Load()), slice=Call(func=Attribute(value=Subscript(value=Name(id='result_df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), ctx=Load()), attr='index', ctx=Load())), Assign(targets=[Subscript(value=Name(id='result_df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fill', ctx=Load()), args=[Subscript(value=Name(id='result_df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='restore_nans', ctx=Store())], value=Call(func=Attribute(value=Name(id='cur_nans', ctx=Load()), attr='difference', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nan_timestamps', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='result_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='restore_nans', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load())), Return(value=Name(id='result_df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='inverse_transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Inverse transform dataframe.\n\n        Parameters\n        ----------\n        df: pd.Dataframe\n            inverse transform ``in_column`` series of given dataframe\n\n        Returns\n        -------\n        result: pd.DataFrame\n            dataframe with in_column series with initial values\n        ')), Assign(targets=[Name(id='result_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='result_df', ctx=Load()), attr='index', ctx=Load()), attr='intersection', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nan_timestamps', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='result_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='index', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load())), Return(value=Name(id='result_df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_fill', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create new Series taking all previous dates and adding missing dates.\n\n        Fills missed values for new dates according to ``self.strategy``\n\n        Parameters\n        ----------\n        df: pd.Series\n            series to fill\n\n        Returns\n        -------\n        result: pd.Series\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='nan_timestamps', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Trying to apply the unfitted transform! First fit the transform.')], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='zero', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='mean', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='constant', ctx=Load())])]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='fillna', ctx=Load()), args=[], keywords=[keyword(arg='value', value=Attribute(value=Name(id='self', ctx=Load()), attr='fill_value', ctx=Load()))]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='forward_fill', ctx=Load())]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='fillna', ctx=Load()), args=[], keywords=[keyword(arg='method', value=Constant(value='ffill'))]))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='running_mean', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='seasonal', ctx=Load())])]), body=[Assign(targets=[Name(id='history', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load())), orelse=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='timestamps', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load())], keywords=[])), For(target=Name(id='timestamp', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='nan_timestamps', ctx=Load()), body=[Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Attribute(value=Name(id='timestamps', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indexes', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load())), BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load())), op=Sub(), right=Name(id='history', ctx=Load())), UnaryOp(op=USub(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='indexes', ctx=Store())], value=Subscript(value=Name(id='indexes', ctx=Load()), slice=Compare(left=Name(id='indexes', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='nanmean', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Name(id='indexes', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='default_value', ctx=Load()), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='fillna', ctx=Load()), args=[], keywords=[keyword(arg='value', value=Attribute(value=Name(id='self', ctx=Load()), attr='default_value', ctx=Load()))]))], orelse=[]), Return(value=Name(id='df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], decorator_list=[]), ClassDef(name='TimeSeriesImputerTransform', bases=[Name(id='PerSegmentWrapper', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Transform to fill NaNs in series of a given dataframe.\n\n    - It is assumed that given series begins with first non NaN value.\n\n    - This transform can't fill NaNs in the future, only on train data.\n\n    - This transform can't fill NaNs if all values are NaNs. In this case exception is raised.\n\n    Warning\n    -------\n    This transform can suffer from look-ahead bias in 'mean' mode. For transforming data at some timestamp\n    it uses information from the whole train part.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='strategy', annotation=Name(id='str', ctx=Load())), arg(arg='window', annotation=Name(id='int', ctx=Load())), arg(arg='seasonality', annotation=Name(id='int', ctx=Load())), arg(arg='default_value', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='constant_value', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='target'), Attribute(value=Name(id='ImputerMode', ctx=Load()), attr='constant', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1), Constant(value=None), Constant(value=0)]), body=[Expr(value=Constant(value='\n        Create instance of TimeSeriesImputerTransform.\n\n        Parameters\n        ----------\n        in_column:\n            name of processed column\n        strategy:\n            filling value in missing timestamps:\n\n            - If "zero", then replace missing dates with zeros\n\n            - If "mean", then replace missing dates using the mean in fit stage.\n\n            - If "running_mean" then replace missing dates using mean of subset of data\n\n            - If "forward_fill" then replace missing dates using last existing value\n\n            - If "seasonal" then replace missing dates using seasonal moving average\n\n            - If "constant" then replace missing dates using constant value.\n\n        window:\n            In case of moving average and seasonality.\n\n            * If ``window=-1`` all previous dates are taken in account\n\n            * Otherwise only window previous dates\n\n        seasonality:\n            the length of the seasonality\n        default_value:\n            value which will be used to impute the NaNs left after applying the imputer with the chosen strategy\n        constant_value:\n            value to fill gaps in "constant" strategy\n\n        Raises\n        ------\n        ValueError:\n            if incorrect strategy given\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Store())], value=Name(id='strategy', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Store())], value=Name(id='seasonality', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='default_value', ctx=Store())], value=Name(id='default_value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='constant_value', ctx=Store())], value=Name(id='constant_value', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Call(func=Name(id='_OneSegmentTimeSeriesImputerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(arg='strategy', value=Attribute(value=Name(id='self', ctx=Load()), attr='strategy', ctx=Load())), keyword(arg='window', value=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load())), keyword(arg='seasonality', value=Attribute(value=Name(id='self', ctx=Load()), attr='seasonality', ctx=Load())), keyword(arg='default_value', value=Attribute(value=Name(id='self', ctx=Load()), attr='default_value', ctx=Load())), keyword(arg='constant_value', value=Attribute(value=Name(id='self', ctx=Load()), attr='constant_value', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='TimeSeriesImputerTransform')], ctx=Load()))], type_ignores=[])