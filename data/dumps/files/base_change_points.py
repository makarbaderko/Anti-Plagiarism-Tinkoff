Module(body=[ImportFrom(module='abc', names=[alias(name='ABC')], level=0), ImportFrom(module='abc', names=[alias(name='abstractmethod')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='ruptures.base', names=[alias(name='BaseEstimator')], level=0), ImportFrom(module='ruptures.costs', names=[alias(name='CostLinear')], level=0), ImportFrom(module='sklearn.base', names=[alias(name='RegressorMixin')], level=0), Assign(targets=[Name(id='TTimestampInterval', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='TDetrendModel', ctx=Store())], value=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='RegressorMixin', ctx=Load()), ctx=Load())), ClassDef(name='BaseChangePointsModelAdapter', bases=[Name(id='ABC', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='BaseChangePointsModelAdapter is the base class for change point models adapters.')), FunctionDef(name='get_change_points', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='in_column', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Find change points within one segment.\n\n        Parameters\n        ----------\n        df:\n            dataframe indexed with timestamp\n        in_column:\n            name of column to get change points\n\n        Returns\n        -------\n        change points:\n            change point timestamps\n        ')), Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())), FunctionDef(name='_build_intervals', args=arguments(posonlyargs=[], args=[arg(arg='change_points', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create list of stable intervals from list of change points.')), Expr(value=Call(func=Attribute(value=Name(id='change_points', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), attr='min', ctx=Load()), Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), attr='max', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='change_points', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='change_points', ctx=Load())], keywords=[])), Assign(targets=[Name(id='intervals', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='change_points', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Subscript(value=Name(id='change_points', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='intervals', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TTimestampInterval', ctx=Load()), ctx=Load())), FunctionDef(name='get_change_points_intervals', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='in_column', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Find change point intervals in given dataframe and column.\n\n        Parameters\n        ----------\n        df:\n            dataframe indexed with timestamp\n        in_column:\n            name of column to get change points\n\n        Returns\n        -------\n        :\n            change points intervals\n        ')), Assign(targets=[Name(id='change_points', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_change_points', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='in_column', value=Name(id='in_column', ctx=Load()))])), Assign(targets=[Name(id='intervals', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_intervals', ctx=Load()), args=[], keywords=[keyword(arg='change_points', value=Name(id='change_points', ctx=Load()))])), Return(value=Name(id='intervals', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TTimestampInterval', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='RupturesChangePointsModel', bases=[Name(id='BaseChangePointsModelAdapter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='RupturesChangePointsModel is ruptures change point models adapter.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='change_point_model', annotation=Name(id='BaseEstimator', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='change_point_model_predict_params'), defaults=[]), body=[Expr(value=Constant(value='Init RupturesChangePointsModel.\n\n        Parameters\n        ----------\n        change_point_model:\n            model to get change points\n        change_point_model_predict_params:\n            params for ``change_point_model.predict`` method\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='change_point_model', ctx=Store())], value=Name(id='change_point_model', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model_predict_params', ctx=Store())], value=Name(id='change_point_model_predict_params', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_change_points', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='in_column', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Find change points within one segment.\n\n        Parameters\n        ----------\n        df:\n            dataframe indexed with timestamp\n        in_column:\n            name of column to get change points\n\n        Returns\n        -------\n        change points:\n            change point timestamps\n        ')), Assign(targets=[Name(id='series', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(lower=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='in_column', ctx=Load()), ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='in_column', ctx=Load()), ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), Name(id='in_column', ctx=Load())], ctx=Load()), ctx=Load())), If(test=Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='series', ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[]), attr='values', ctx=Load()), attr='any', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='The input column contains NaNs in the middle of the series! Try to use the imputer.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='signal', ctx=Store())], value=Call(func=Attribute(value=Name(id='series', ctx=Load()), attr='to_numpy', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='change_point_model', ctx=Load()), attr='cost', ctx=Load()), Name(id='CostLinear', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='signal', ctx=Store())], value=Call(func=Attribute(value=Name(id='signal', ctx=Load()), attr='reshape', ctx=Load()), args=[Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1)], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Attribute(value=Name(id='series', ctx=Load()), attr='index', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='change_point_model', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='signal', value=Name(id='signal', ctx=Load()))])), Assign(targets=[Name(id='change_points_indices', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='change_point_model', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='model_predict_params', ctx=Load()))]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='change_points', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='timestamp', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='idx', ctx=Store()), iter=Name(id='change_points_indices', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='change_points', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])