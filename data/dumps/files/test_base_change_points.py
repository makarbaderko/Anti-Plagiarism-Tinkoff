Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='ruptures', names=[alias(name='Binseg')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='generate_ar_df')], level=0), ImportFrom(module='etna.transforms.decomposition.base_change_points', names=[alias(name='BaseChangePointsModelAdapter')], level=0), ImportFrom(module='etna.transforms.decomposition.base_change_points', names=[alias(name='RupturesChangePointsModel')], level=0), Assign(targets=[Name(id='N_BKPS', ctx=Store())], value=Constant(value=5)), FunctionDef(name='df_with_nans', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate pd.DataFrame with timestamp.')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2019-12-01'), Constant(value='2019-12-31')], keywords=[])])], keywords=[])), Assign(targets=[Name(id='tmp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Constant(value=31)], keywords=[])), Assign(targets=[Subscript(value=Name(id='tmp', ctx=Load()), slice=Constant(value=8), ctx=Store())], value=Constant(value=None)), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Name(id='tmp', ctx=Load())), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_1')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load()))])), Return(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment_1'), ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='simple_ar_df', args=arguments(posonlyargs=[], args=[arg(arg='random_seed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Constant(value=125)), keyword(arg='start_time', value=Constant(value='2021-05-20')), keyword(arg='n_segments', value=Constant(value=1)), keyword(arg='ar_coef', value=List(elts=[Constant(value=2)], ctx=Load())), keyword(arg='freq', value=Constant(value='D'))])), Assign(targets=[Name(id='df_ts_format', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]), slice=Constant(value='segment_0'), ctx=Load())), Return(value=Name(id='df_ts_format', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_fit_transform_with_nans_in_middle_raise_error', args=arguments(posonlyargs=[], args=[arg(arg='df_with_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='change_point_model', ctx=Store())], value=Call(func=Name(id='RupturesChangePointsModel', ctx=Load()), args=[], keywords=[keyword(arg='change_point_model', value=Call(func=Name(id='Binseg', ctx=Load()), args=[], keywords=[])), keyword(arg='n_bkps', value=Name(id='N_BKPS', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='The input column contains NaNs in the middle of the series!'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='change_point_model', ctx=Load()), attr='get_change_points_intervals', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df_with_nans', ctx=Load())), keyword(arg='in_column', value=Constant(value='target'))]))])], decorator_list=[]), FunctionDef(name='test_build_intervals', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check correctness of intervals generation with list of change points.')), Assign(targets=[Name(id='change_points', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-18')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-02-24')], keywords=[])], ctx=Load())), Assign(targets=[Name(id='expected_intervals', ctx=Store())], value=List(elts=[Tuple(elts=[Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), attr='min', ctx=Load()), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-01')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-18')], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-01-18')], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-02-24')], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Constant(value='2020-02-24')], keywords=[]), Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), attr='max', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='intervals', ctx=Store())], value=Call(func=Attribute(value=Name(id='BaseChangePointsModelAdapter', ctx=Load()), attr='_build_intervals', ctx=Load()), args=[], keywords=[keyword(arg='change_points', value=Name(id='change_points', ctx=Load()))])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='intervals', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='intervals', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=4)])), For(target=Tuple(elts=[Tuple(elts=[Name(id='exp_left', ctx=Store()), Name(id='exp_right', ctx=Store())], ctx=Store()), Tuple(elts=[Name(id='real_left', ctx=Store()), Name(id='real_right', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='expected_intervals', ctx=Load()), Name(id='intervals', ctx=Load())], keywords=[]), body=[Assert(test=Compare(left=Name(id='exp_left', ctx=Load()), ops=[Eq()], comparators=[Name(id='real_left', ctx=Load())])), Assert(test=Compare(left=Name(id='exp_right', ctx=Load()), ops=[Eq()], comparators=[Name(id='real_right', ctx=Load())]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_get_change_points_intervals_format', args=arguments(posonlyargs=[], args=[arg(arg='simple_ar_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='change_point_model', ctx=Store())], value=Call(func=Name(id='RupturesChangePointsModel', ctx=Load()), args=[], keywords=[keyword(arg='change_point_model', value=Call(func=Name(id='Binseg', ctx=Load()), args=[], keywords=[])), keyword(arg='n_bkps', value=Name(id='N_BKPS', ctx=Load()))])), Assign(targets=[Name(id='intervals', ctx=Store())], value=Call(func=Attribute(value=Name(id='change_point_model', ctx=Load()), attr='get_change_points_intervals', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='simple_ar_df', ctx=Load())), keyword(arg='in_column', value=Constant(value='target'))])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='intervals', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='intervals', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Name(id='N_BKPS', ctx=Load()), op=Add(), right=Constant(value=1))])), For(target=Name(id='interval', ctx=Store()), iter=Name(id='intervals', ctx=Load()), body=[Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='interval', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_get_change_points_format', args=arguments(posonlyargs=[], args=[arg(arg='simple_ar_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='change_point_model', ctx=Store())], value=Call(func=Name(id='RupturesChangePointsModel', ctx=Load()), args=[], keywords=[keyword(arg='change_point_model', value=Call(func=Name(id='Binseg', ctx=Load()), args=[], keywords=[])), keyword(arg='n_bkps', value=Name(id='N_BKPS', ctx=Load()))])), Assign(targets=[Name(id='intervals', ctx=Store())], value=Call(func=Attribute(value=Name(id='change_point_model', ctx=Load()), attr='get_change_points', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='simple_ar_df', ctx=Load())), keyword(arg='in_column', value=Constant(value='target'))])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='intervals', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='intervals', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='N_BKPS', ctx=Load())])), For(target=Name(id='interval', ctx=Store()), iter=Name(id='intervals', ctx=Load()), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='interval', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])