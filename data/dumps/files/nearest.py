Module(body=[ImportFrom(module='abc', names=[alias(name='abstractmethod'), alias(name='ABC')], level=0), ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='torch')]), ImportFrom(module='sklearn.metrics', names=[alias(name='average_precision_score'), alias(name='roc_curve')], level=0), ImportFrom(module='config', names=[alias(name='prepare_config')], level=2), ImportFrom(module='knn', names=[alias(name='KNNIndex')], level=1), FunctionDef(name='asarray', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='cpu', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ascontiguousarray', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='NearestNeighboursBase', bases=[Name(id='ABC', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base class for all nearest neighbour metrics.')), FunctionDef(name='match_self', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether to compare each sample with self or not.')), Pass()], decorator_list=[Name(id='property', ctx=Load()), Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='need_positives', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether metric requires positive scores or not.')), Pass()], decorator_list=[Name(id='property', ctx=Load()), Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='need_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether metric requires confidences or not.')), Pass()], decorator_list=[Name(id='property', ctx=Load()), Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='num_nearest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the number of required neighbours.\n\n        Args:\n            labels: Dataset labels.\n        ')), Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='class_sizes'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Compute metric value.\n\n        Args:\n            nearset_same: Binary labels of nearest neighbours equal to 1 iff class is equal to the query.\n            nearest_scores: Similarity scores of nearest neighbours.\n            class_sizes: Class size for each element.\n            positive_scores (optional): Similarity scores of elements with the same class (depends on match_self).\n            confidences (optional): Confidence for each element of the batch with shape (B).\n\n        Returns:\n            Metric value.\n        ')), Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='RecallK', bases=[Name(id='NearestNeighboursBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Recall@K metric.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='k')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_k', ctx=Store())], value=Name(id='k', ctx=Load()))], decorator_list=[]), FunctionDef(name='match_self', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether to compare each sample with self or not.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='need_positives', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether metric requires positive scores or not.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='need_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether metric requires confidences or not.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='num_nearest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the number of required neighbours.\n\n        Args:\n            labels: Dataset labels.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_k', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='class_sizes'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Compute metric value.\n\n        Args:\n            nearset_same: Binary labels of nearest neighbours equal to 1 iff class is equal to the query.\n            nearest_scores: Similarity scores of nearest neighbours.\n            class_sizes: Class size for each element.\n            positive_scores: Similarity scores of elements with the same class.\n            confidences (optional): Confidence for each element of the batch with shape (B).\n\n        Returns:\n            Metric value.\n        ')), Assign(targets=[Name(id='mask', ctx=Store())], value=Compare(left=Name(id='class_sizes', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)])), If(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='mask', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='has_same', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='nearest_same', ctx=Load()), slice=Tuple(elts=[Name(id='mask', ctx=Load()), Slice(upper=Attribute(value=Name(id='self', ctx=Load()), attr='_k', ctx=Load()))], ctx=Load()), ctx=Load()), attr='max', ctx=Load()), args=[Constant(value=1)], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='has_same', ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[]), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ERCRecallK', bases=[Name(id='NearestNeighboursBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Error-versus-Reject-Curve based on Recall@K metric.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='k')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_k', ctx=Store())], value=Name(id='k', ctx=Load()))], decorator_list=[]), FunctionDef(name='match_self', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether to compare each sample with self or not.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='need_positives', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether metric requires positive scores or not.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='need_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether metric requires confidences or not.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='num_nearest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the number of required neighbours.\n\n        Args:\n            labels: Dataset labels.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_k', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='class_sizes'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Compute metric value.\n\n        Args:\n            nearset_same: Binary labels of nearest neighbours equal to 1 iff class is equal to the query.\n            nearest_scores: Similarity scores of nearest neighbours.\n            class_sizes: Class size for each element.\n            positive_scores: Similarity scores of elements with the same class.\n            confidences (optional): Confidence for each element of the batch with shape (B).\n\n        Returns:\n            Metric value.\n        ')), If(test=Compare(left=Name(id='confidences', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Can't compute ERC without confidences.")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='mask', ctx=Store())], value=Compare(left=Name(id='class_sizes', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)])), If(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='mask', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='recalls', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='nearest_same', ctx=Load()), slice=Tuple(elts=[Name(id='mask', ctx=Load()), Slice(upper=Attribute(value=Name(id='self', ctx=Load()), attr='_k', ctx=Load()))], ctx=Load()), ctx=Load()), attr='max', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='recalls', ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='confidences', ctx=Store())], value=Subscript(value=Name(id='confidences', ctx=Load()), slice=Name(id='mask', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Assign(targets=[Name(id='order', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='argsort', ctx=Load()), args=[Name(id='confidences', ctx=Load())], keywords=[keyword(arg='descending', value=Constant(value=True))])), Assign(targets=[Name(id='errors', ctx=Store())], value=Subscript(value=Name(id='errors', ctx=Load()), slice=Name(id='order', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='mean_errors', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='cumsum', ctx=Load()), args=[Constant(value=0)], keywords=[]), op=Div(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='b', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[keyword(arg='device', value=Attribute(value=Name(id='errors', ctx=Load()), attr='device', ctx=Load()))]))), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='mean_errors', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='cpu', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ConfidenceRecallAccuracy', bases=[Name(id='NearestNeighboursBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Compute maximum accuracy for R@1 prediction from confidence.\n\n    NOTE: Decision threshold is adjusted using testset.\n    ')), FunctionDef(name='match_self', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether to compare each sample with self or not.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='need_positives', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether metric requires positive scores or not.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='need_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether metric requires confidences or not.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='num_nearest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the number of required neighbours.\n\n        Args:\n            labels: Dataset labels.\n        ')), Return(value=Constant(value=1))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='class_sizes'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Compute metric value.\n\n        Args:\n            nearset_same: Binary labels of nearest neighbours equal to 1 iff class is equal to the query.\n            nearest_scores: Similarity scores of nearest neighbours.\n            class_sizes: Class size for each element.\n            positive_scores: Similarity scores of elements with the same class.\n            confidences: Confidence for each element of the batch with shape (B).\n\n        Returns:\n            Metric value.\n        ')), Assert(test=Compare(left=Name(id='confidences', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='mask', ctx=Store())], value=Compare(left=Name(id='class_sizes', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)])), If(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='mask', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='predictions', ctx=Store())], value=Subscript(value=Name(id='confidences', ctx=Load()), slice=Name(id='mask', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='targets', ctx=Store())], value=Subscript(value=Name(id='nearest_same', ctx=Load()), slice=Tuple(elts=[Name(id='mask', ctx=Load()), Constant(value=0)], ctx=Load()), ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='targets', ctx=Load()), attr='ndim', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])), Assign(targets=[Name(id='pr', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='targets', ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[]), attr='mean', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='fprs', ctx=Store()), Name(id='tprs', ctx=Store()), Name(id='ths', ctx=Store())], ctx=Store())], value=Call(func=Name(id='roc_curve', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='targets', ctx=Load()), attr='cpu', ctx=Load()), args=[], keywords=[]), attr='numpy', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='predictions', ctx=Load()), attr='cpu', ctx=Load()), args=[], keywords=[]), attr='numpy', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='drop_intermediate', value=Constant(value=False))])), Assign(targets=[Name(id='accuracy', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='max', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='pr', ctx=Load()), op=Mult(), right=Name(id='tprs', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='pr', ctx=Load())), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='fprs', ctx=Load()))))], keywords=[])), Return(value=Name(id='accuracy', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='ATRBase', bases=[Name(id='NearestNeighboursBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base class for @R metrics.\n\n    All @R metrics search for the number of neighbours equal to class size.\n\n    Args:\n        match_self: Whether to compare each sample with self or not.\n\n    Inputs:\n        - parameters: Embeddings distributions tensor with shape (B, P).\n        - labels: Label for each embedding with shape (B).\n\n    Outputs:\n        - Metric value.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='match_self')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_match_self', ctx=Store())], value=Name(id='match_self', ctx=Load()))], decorator_list=[]), FunctionDef(name='oversample', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Sample times more nearest neighbours.')), Pass()], decorator_list=[Name(id='property', ctx=Load()), Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='_aggregate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='num_nearest'), arg(arg='class_sizes'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Compute metric value.\n\n        Args:\n            nearest_same: Matching labels for nearest neighbours with shape (B, R).\n                Matches are coded with 1 and mismatches with 0.\n            nearest_scores: Score for each neighbour with shape (B, R).\n            num_nearest: Number of nearest neighbours for each element of the batch with shape (B).\n            class_sizes: Number of elements in the class for each element of the batch.\n            positive_scores: Similarity scores of elements with the same class.\n            confidences (optional): Confidence for each element of the batch with shape (B).\n        ')), Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='match_self', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether to compare each sample with self or not.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_match_self', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='need_positives', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether metric requires positive scores or not.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='need_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether metric requires confidences or not.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='num_nearest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get maximum number of required neighbours.\n\n        Args:\n            labels: Dataset labels.\n        ')), Assign(targets=[Name(id='max_r', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='bincount', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[]), attr='max', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), AugAssign(target=Name(id='max_r', ctx=Store()), op=Mult(), value=Attribute(value=Name(id='self', ctx=Load()), attr='oversample', ctx=Load())), Return(value=Name(id='max_r', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='class_sizes'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Compute metric value.\n\n        Args:\n            nearset_same: Binary labels of nearest neighbours equal to 1 iff class is equal to the query.\n            nearest_scores: Similarity scores of nearest neighbours.\n            class_sizes: Number of elements in the class for each element of the batch.\n            positive_scores: Similarity scores of elements with the same class.\n            confidences (optional): Confidence for each element of the batch with shape (B).\n\n        Returns:\n            Metric value.\n        ')), Assign(targets=[Name(id='num_positives', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='match_self', ctx=Load()), body=Name(id='class_sizes', ctx=Load()), orelse=BinOp(left=Name(id='class_sizes', ctx=Load()), op=Sub(), right=Constant(value=1)))), Assign(targets=[Name(id='num_nearest', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='clip', ctx=Load()), args=[BinOp(left=Name(id='num_positives', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='oversample', ctx=Load()))], keywords=[keyword(arg='max', value=Subscript(value=Attribute(value=Name(id='nearest_same', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_aggregate', ctx=Load()), args=[Name(id='nearest_same', ctx=Load()), Name(id='nearest_scores', ctx=Load()), Name(id='num_nearest', ctx=Load()), Name(id='class_sizes', ctx=Load()), Name(id='positive_scores', ctx=Load())], keywords=[keyword(arg='confidences', value=Name(id='confidences', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='MAPR', bases=[Name(id='ATRBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='MAP@R metric.\n\n    See "A Metric Learning Reality Check" (2020) for details.\n    ')), FunctionDef(name='oversample', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Sample times more nearest neighbours.')), Return(value=Constant(value=1))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_aggregate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='num_nearest'), arg(arg='class_sizes'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Compute MAP@R.\n\n        Args:\n            nearest_same: Matching labels for nearest neighbours with shape (B, R).\n                Matches are coded with 1 and mismatches with 0.\n            nearest_scores: (unused) Score for each neighbour with shape (B, R).\n            num_nearest: Number of nearest neighbours for each element of the batch with shape (B).\n            class_sizes: (unused) Number of elements in the class for each element of the batch.\n            positive_scores: Similarity scores of elements with the same class.\n            confidences (optional): Confidence for each element of the batch with shape (B).\n        ')), Assign(targets=[Tuple(elts=[Name(id='b', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='nearest_same', ctx=Load()), attr='shape', ctx=Load())), Assign(targets=[Name(id='device', ctx=Store())], value=Attribute(value=Name(id='nearest_same', ctx=Load()), attr='device', ctx=Load())), Assign(targets=[Name(id='range', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='r', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[keyword(arg='device', value=Name(id='device', ctx=Load()))])), Assign(targets=[Name(id='count_mask', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=None), ctx=Load()), attr='tile', ctx=Load()), args=[Name(id='b', ctx=Load()), Constant(value=1)], keywords=[]), ops=[LtE()], comparators=[Subscript(value=Name(id='num_nearest', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='precisions', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='count_mask', ctx=Load()), op=Mult(), right=Name(id='nearest_same', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cumsum', ctx=Load()), args=[Name(id='nearest_same', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])), op=Div(), right=Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=None), ctx=Load()))), Assign(targets=[Name(id='maprs', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='precisions', ctx=Load()), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), op=Div(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='clip', ctx=Load()), args=[Name(id='num_nearest', ctx=Load())], keywords=[keyword(arg='min', value=Constant(value=1))]))), Return(value=Call(func=Attribute(value=Name(id='maprs', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ERCMAPR', bases=[Name(id='ATRBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ERC curve for MAP@R metric.')), FunctionDef(name='need_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether metric requires confidences or not.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='oversample', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Sample times more nearest neighbours.')), Return(value=Constant(value=1))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_aggregate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nearest_same'), arg(arg='nearest_scores'), arg(arg='num_nearest'), arg(arg='class_sizes'), arg(arg='positive_scores'), arg(arg='confidences')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Compute MAP@R ERC.\n\n        Args:\n            nearest_same: Matching labels for nearest neighbours with shape (B, R).\n                Matches are coded with 1 and mismatches with 0.\n            nearest_scores: (unused) Score for each neighbour with shape (B, R).\n            num_nearest: Number of nearest neighbours for each element of the batch with shape (B).\n            class_sizes: (unused) Number of elements in the class for each element of the batch.\n            positive_scores: Similarity scores of elements with the same class.\n            confidences (optional): Confidence for each element of the batch with shape (B).\n        ')), If(test=Compare(left=Name(id='confidences', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Can't compute ERC without confidences.")], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='b', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='nearest_same', ctx=Load()), attr='shape', ctx=Load())), Assign(targets=[Name(id='device', ctx=Store())], value=Attribute(value=Name(id='nearest_same', ctx=Load()), attr='device', ctx=Load())), Assign(targets=[Name(id='range', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='r', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[keyword(arg='device', value=Name(id='device', ctx=Load()))])), Assign(targets=[Name(id='count_mask', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=None), ctx=Load()), attr='tile', ctx=Load()), args=[Name(id='b', ctx=Load()), Constant(value=1)], keywords=[]), ops=[LtE()], comparators=[Subscript(value=Name(id='num_nearest', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='precisions', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='count_mask', ctx=Load()), op=Mult(), right=Name(id='nearest_same', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cumsum', ctx=Load()), args=[Name(id='nearest_same', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])), op=Div(), right=Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=None), ctx=Load()))), Assign(targets=[Name(id='maprs', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='precisions', ctx=Load()), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), op=Div(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='clip', ctx=Load()), args=[Name(id='num_nearest', ctx=Load())], keywords=[keyword(arg='min', value=Constant(value=1))]))), Assign(targets=[Name(id='errors', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='maprs', ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Assign(targets=[Name(id='order', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='argsort', ctx=Load()), args=[Name(id='confidences', ctx=Load())], keywords=[keyword(arg='descending', value=Constant(value=True))])), Assign(targets=[Name(id='errors', ctx=Store())], value=Subscript(value=Name(id='errors', ctx=Load()), slice=Name(id='order', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='mean_errors', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='cumsum', ctx=Load()), args=[Constant(value=0)], keywords=[]), op=Div(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='b', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[keyword(arg='device', value=Attribute(value=Name(id='errors', ctx=Load()), attr='device', ctx=Load()))]))), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='mean_errors', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), attr='cpu', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='NearestNeighboursMetrics', bases=[], keywords=[], body=[Expr(value=Constant(value='Metrics based on nearest neighbours search.\n\n    Args:\n        distribution: Distribution object.\n        scorer: Scorer object.\n\n    Inputs:\n        - parameters: Embeddings distributions tensor with shape (B, P).\n        - labels: Label for each embedding with shape (B).\n\n    Outputs:\n        - Metrics values.\n    ')), Assign(targets=[Name(id='METRICS', ctx=Store())], value=Dict(keys=[Constant(value='recall'), Constant(value='erc-recall@1'), Constant(value='confidence-accuracy'), Constant(value='mapr'), Constant(value='erc-mapr'), Constant(value='mapr-ms')], values=[Name(id='RecallK', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='ERCRecallK', ctx=Load()), args=[Constant(value=1)], keywords=[])), Name(id='ConfidenceRecallAccuracy', ctx=Load()), Name(id='MAPR', ctx=Load()), Name(id='ERCMAPR', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='MAPR', ctx=Load()), args=[], keywords=[keyword(arg='match_self', value=Constant(value=True))]))])), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='backend'), arg(arg='broadcast_backend'), arg(arg='metrics'), arg(arg='prefetch_factor'), arg(arg='recall_k_values')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='torch'), Constant(value='torch'), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=1)], ctx=Load())]), body=[Expr(value=Constant(value='Get metrics parameters.\n\n        Args:\n            backend: KNN search engine ("faiss", "torch" or "numpy").\n            broadcast_backend: Torch doesn\'t support broadcast for gather method.\n              We can emulate this behaviour with Numpy ("numpy") or tiling ("torch").\n            metrics: List of metric names to compute ("recall", "mapr", "mapr-nms").\n                By default compute all available metrics.\n            prefetch_factor: Nearest neighbours number scaler for presampling.\n            recall_k_values: List of K values to compute recall at.\n        ')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='backend'), Name(id='backend', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='broadcast_backend'), Name(id='broadcast_backend', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='metrics'), Name(id='metrics', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='prefetch_factor'), Name(id='prefetch_factor', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='recall_k_values'), Name(id='recall_k_values', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='scorer')], kwonlyargs=[arg(arg='config')], kw_defaults=[Constant(value=None)], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_scorer', ctx=Store())], value=Name(id='scorer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='metric_names', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='metrics'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='metrics'), ctx=Load()), orelse=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='METRICS', ctx=Load())], keywords=[]))), For(target=Name(id='name', ctx=Store()), iter=Name(id='metric_names', ctx=Load()), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='recall')]), body=[For(target=Name(id='k', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='recall_k_values'), ctx=Load()), body=[Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), slice=Call(func=Attribute(value=Constant(value='{}@{}'), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='k', ctx=Load())], keywords=[]), ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='METRICS', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='metric', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='METRICS', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='has_confidences', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='metric', ctx=Load()), attr='need_confidences', ctx=Load()))]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='metric', ctx=Load()))], orelse=[])])], orelse=[])], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='parameters', ctx=Load()), attr='ndim', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Expected parameters matrix.')], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Batch size mismatch between labels and parameters.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='parameters', ctx=Store())], value=Call(func=Attribute(value=Name(id='parameters', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='need_confidences', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[ListComp(elt=Attribute(value=Name(id='metric', ctx=Load()), attr='need_confidences', ctx=Load()), generators=[comprehension(target=Name(id='metric', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='confidences', ctx=Store())], value=IfExp(test=Name(id='need_confidences', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='confidences', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='label_counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='bincount', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])), Assign(targets=[Name(id='class_sizes', ctx=Store())], value=Subscript(value=Name(id='label_counts', ctx=Load()), slice=Name(id='labels', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='num_nearest', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Call(func=Attribute(value=Name(id='metric', ctx=Load()), attr='num_nearest', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='metric', ctx=Load()), attr='match_self', ctx=Load()))], keywords=[])), generators=[comprehension(target=Name(id='metric', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='num_nearest', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='num_nearest', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='nearest', ctx=Store()), Name(id='scores', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_nearest', ctx=Load()), args=[Name(id='parameters', ctx=Load()), Name(id='num_nearest', ctx=Load())], keywords=[])), Assign(targets=[Name(id='num_nearest', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='nearest', ctx=Load())], keywords=[])], ctx=Load()), Name(id='num_nearest', ctx=Load())], keywords=[keyword(arg='device', value=Attribute(value=Name(id='labels', ctx=Load()), attr='device', ctx=Load()))])), Assign(targets=[Name(id='nearest_labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_broadcast', ctx=Load()), args=[Subscript(value=Name(id='labels', ctx=Load()), slice=Constant(value=None), ctx=Load()), Constant(value=1), Name(id='nearest', ctx=Load())], keywords=[keyword(arg='backend', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='broadcast_backend'), ctx=Load()))])), Assign(targets=[Name(id='nearest_same', ctx=Store())], value=Compare(left=Name(id='nearest_labels', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='labels', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='need_positives', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='metric', ctx=Load()), attr='need_positives', ctx=Load()), generators=[comprehension(target=Name(id='metric', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), If(test=Name(id='need_positives', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='positive_scores', ctx=Store()), Name(id='_', ctx=Store()), Name(id='positive_same_mask', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_positives', ctx=Load()), args=[Name(id='parameters', ctx=Load()), Name(id='labels', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='positive_scores', ctx=Store()), Name(id='positive_same_mask', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))]), Assign(targets=[Name(id='need_nms', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=UnaryOp(op=Not(), operand=Attribute(value=Name(id='metric', ctx=Load()), attr='match_self', ctx=Load())), generators=[comprehension(target=Name(id='metric', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), If(test=Name(id='need_nms', ctx=Load()), body=[Assign(targets=[Name(id='no_self_mask', ctx=Store())], value=Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[keyword(arg='device', value=Attribute(value=Name(id='parameters', ctx=Load()), attr='device', ctx=Load()))]), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='nearest', ctx=Load())])), Assign(targets=[Tuple(elts=[Name(id='nearest_same_nms', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_mask', ctx=Load()), args=[Name(id='nearest_same', ctx=Load()), Name(id='num_nearest', ctx=Load()), Name(id='no_self_mask', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='scores_nms', ctx=Store()), Name(id='num_nearest', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_mask', ctx=Load()), args=[Name(id='scores', ctx=Load()), Name(id='num_nearest', ctx=Load()), Name(id='no_self_mask', ctx=Load())], keywords=[])), If(test=Name(id='need_positives', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='positive_scores_nms', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_mask', ctx=Load()), args=[Name(id='positive_scores', ctx=Load()), Name(id='class_sizes', ctx=Load()), UnaryOp(op=Invert(), operand=Name(id='positive_same_mask', ctx=Load()))], keywords=[]))], orelse=[Assign(targets=[Name(id='positive_scores_nms', ctx=Store())], value=Constant(value=None))])], orelse=[]), Assign(targets=[Name(id='metrics', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='metric', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metrics', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Attribute(value=Name(id='metric', ctx=Load()), attr='match_self', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='metrics', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='metric', ctx=Load()), args=[Name(id='nearest_same', ctx=Load()), Name(id='scores', ctx=Load()), Name(id='class_sizes', ctx=Load()), Name(id='positive_scores', ctx=Load())], keywords=[keyword(arg='confidences', value=Name(id='confidences', ctx=Load()))]))], orelse=[Assign(targets=[Subscript(value=Name(id='metrics', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='metric', ctx=Load()), args=[Name(id='nearest_same_nms', ctx=Load()), Name(id='scores_nms', ctx=Load()), Name(id='class_sizes', ctx=Load()), Name(id='positive_scores_nms', ctx=Load())], keywords=[keyword(arg='confidences', value=Name(id='confidences', ctx=Load()))]))])], orelse=[]), Return(value=Name(id='metrics', ctx=Load()))], decorator_list=[]), FunctionDef(name='_find_nearest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='max_nearest')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Find nearest neighbours for each element of the batch.\n\n        Stage 1. Find elements close to query by L2. Nearest neighbours are searched\n        for each distribution mode independently (in multi-modal setup).\n        Stage 2. Remove duplicates caused by cross-modal mining in stage 1.\n        Stage 3. Rescore nearest neighbours using scorer.\n        ')), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='modes', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='modes', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='b', ctx=Store()), Name(id='c', ctx=Store()), Name(id='d', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='modes', ctx=Load()), attr='shape', ctx=Load())), Assign(targets=[Name(id='prefetch', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='max_nearest', ctx=Load()), op=Mult(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='prefetch_factor'), ctx=Load())), Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Name(id='candidates_indices', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_multimodal_knn', ctx=Load()), args=[Name(id='modes', ctx=Load()), Name(id='prefetch', ctx=Load())], keywords=[]), attr='reshape', ctx=Load()), args=[Tuple(elts=[Name(id='b', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())], keywords=[])), Assign(targets=[Name(id='candidates_indices', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_duplicates', ctx=Load()), args=[Name(id='candidates_indices', ctx=Load()), Name(id='max_nearest', ctx=Load())], keywords=[])), Assign(targets=[Name(id='candidates_parameters', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_broadcast', ctx=Load()), args=[Subscript(value=Name(id='parameters', ctx=Load()), slice=Constant(value=None), ctx=Load()), Constant(value=1), Subscript(value=Name(id='candidates_indices', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None)], ctx=Load()), ctx=Load())], keywords=[keyword(arg='backend', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='broadcast_backend'), ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='no_grad', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='scores', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_scorer', ctx=Load()), args=[Subscript(value=Name(id='parameters', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load()), Name(id='candidates_parameters', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='nearest_order', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='argsort', ctx=Load()), args=[Name(id='scores', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1)), keyword(arg='descending', value=Constant(value=True))])), Assign(targets=[Name(id='nearest', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='gather', ctx=Load()), args=[Name(id='candidates_indices', ctx=Load()), Constant(value=1), Name(id='nearest_order', ctx=Load())], keywords=[])), Assign(targets=[Name(id='nearest_scores', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='gather', ctx=Load()), args=[Name(id='scores', ctx=Load()), Constant(value=1), Name(id='nearest_order', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='nearest', ctx=Load()), Name(id='nearest_scores', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_positives', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='label_counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='bincount', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])), Assign(targets=[Name(id='num_labels', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='label_counts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='max_label_count', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='label_counts', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='by_label', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Name(id='num_labels', ctx=Load()), Name(id='max_label_count', ctx=Load())], ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='long', ctx=Load()))])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='num_labels', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='np', ctx=Load()), attr='int64', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='label', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='cpu', ctx=Load()), args=[], keywords=[]), attr='numpy', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='by_label', ctx=Load()), slice=Name(id='label', ctx=Load()), ctx=Load()), slice=Subscript(value=Name(id='counts', ctx=Load()), slice=Name(id='label', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='i', ctx=Load())), AugAssign(target=Subscript(value=Name(id='counts', ctx=Load()), slice=Name(id='label', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='by_label', ctx=Store())], value=Call(func=Attribute(value=Name(id='by_label', ctx=Load()), attr='to', ctx=Load()), args=[Attribute(value=Name(id='labels', ctx=Load()), attr='device', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indices', ctx=Store())], value=Subscript(value=Name(id='by_label', ctx=Load()), slice=Name(id='labels', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='num_positives', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='from_numpy', ctx=Load()), args=[Name(id='counts', ctx=Load())], keywords=[]), attr='long', ctx=Load()), args=[], keywords=[]), attr='to', ctx=Load()), args=[Attribute(value=Name(id='labels', ctx=Load()), attr='device', ctx=Load())], keywords=[]), slice=Name(id='labels', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='positive_parameters', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_broadcast', ctx=Load()), args=[Subscript(value=Name(id='parameters', ctx=Load()), slice=Constant(value=None), ctx=Load()), Constant(value=1), Subscript(value=Name(id='indices', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None)], ctx=Load()), ctx=Load())], keywords=[keyword(arg='backend', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='broadcast_backend'), ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='no_grad', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='positive_scores', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_scorer', ctx=Load()), args=[Subscript(value=Name(id='parameters', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load()), Name(id='positive_parameters', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='same_mask', ctx=Store())], value=Compare(left=Name(id='indices', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[keyword(arg='device', value=Attribute(value=Name(id='indices', ctx=Load()), attr='device', ctx=Load()))]), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='no_sort_mask', ctx=Store())], value=Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='positive_scores', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[keyword(arg='device', value=Attribute(value=Name(id='parameters', ctx=Load()), attr='device', ctx=Load()))]), slice=Constant(value=None), ctx=Load()), ops=[GtE()], comparators=[Subscript(value=Name(id='num_positives', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load())])), Assign(targets=[Subscript(value=Name(id='positive_scores', ctx=Load()), slice=Name(id='no_sort_mask', ctx=Load()), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='positive_scores', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Constant(value=1))), Assign(targets=[Tuple(elts=[Name(id='positive_scores', ctx=Store()), Name(id='order', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='sort', ctx=Load()), args=[Name(id='positive_scores', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1)), keyword(arg='descending', value=Constant(value=True))])), Assign(targets=[Name(id='same_mask', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='gather', ctx=Load()), args=[Name(id='same_mask', ctx=Load()), Constant(value=1), Name(id='order', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='positive_scores', ctx=Load()), Name(id='num_positives', ctx=Load()), Name(id='same_mask', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_multimodal_knn', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x'), arg(arg='k')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Find nearest neighbours for multimodal queries.\n\n        Args:\n            x: Embeddings with shape (B, C, D) where C is the number of modalities.\n            k: Number of nearest neighbours.\n\n        Returns:\n            Nearest neighbours indices with shape (B, C, K). Indices are in the range [0, B - 1].\n        ')), Assign(targets=[Tuple(elts=[Name(id='b', ctx=Store()), Name(id='c', ctx=Store()), Name(id='d', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='x', ctx=Load()), attr='shape', ctx=Load())), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[Gt()], comparators=[Name(id='b', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Number of nearest neighbours is too large: {} for batch size {}.'), attr='format', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_flat', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='asarray', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), attr='reshape', ctx=Load()), args=[Tuple(elts=[BinOp(left=Name(id='b', ctx=Load()), op=Mult(), right=Name(id='c', ctx=Load())), Name(id='d', ctx=Load())], ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='KNNIndex', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[keyword(arg='backend', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='backend'), ctx=Load()))]), optional_vars=Name(id='index', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='index', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='x_flat', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='indices', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='index', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='x_flat', ctx=Load()), Name(id='k', ctx=Load())], keywords=[]))]), AugAssign(target=Name(id='indices', ctx=Store()), op=FloorDiv(), value=Name(id='c', ctx=Load())), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='from_numpy', ctx=Load()), args=[Call(func=Attribute(value=Name(id='indices', ctx=Load()), attr='reshape', ctx=Load()), args=[Tuple(elts=[Name(id='b', ctx=Load()), Name(id='c', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load())], keywords=[])], keywords=[]), attr='long', ctx=Load()), args=[], keywords=[]), attr='to', ctx=Load()), args=[Attribute(value=Name(id='x', ctx=Load()), attr='device', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_remove_duplicates', args=arguments(posonlyargs=[], args=[arg(arg='indices'), arg(arg='num_unique')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Take first n unique values from each row.\n\n        Args:\n            indices: Input indices with shape (B, K).\n            num_unique: Number of unique indices in each row.\n\n        Returns:\n            Unique indices with shape (B, num_unique) and new scores if scores are provided.\n        ')), Assign(targets=[Tuple(elts=[Name(id='b', ctx=Store()), Name(id='k', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='indices', ctx=Load()), attr='shape', ctx=Load())), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='indices', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='sorted_indices', ctx=Store()), Name(id='order', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='sort', ctx=Load()), args=[Name(id='indices', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1)), keyword(arg='stable', value=Constant(value=True))])), Assign(targets=[Name(id='mask', ctx=Store())], value=Compare(left=Subscript(value=Name(id='sorted_indices', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(lower=Constant(value=1))], ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='sorted_indices', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1)))], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='mask', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='ones_like', ctx=Load()), args=[Subscript(value=Name(id='mask', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(upper=Constant(value=1))], ctx=Load()), ctx=Load())], keywords=[]), Name(id='mask', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])), Assign(targets=[Name(id='mask', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='gather', ctx=Load()), args=[Name(id='mask', ctx=Load()), Constant(value=1), Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='argsort', ctx=Load()), args=[Name(id='order', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])], keywords=[])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cumsum', ctx=Load()), args=[Name(id='mask', ctx=Load()), Constant(value=1)], keywords=[])), AugAssign(target=Name(id='mask', ctx=Store()), op=BitAnd(), value=Compare(left=Name(id='counts', ctx=Load()), ops=[LtE()], comparators=[Name(id='num_unique', ctx=Load())])), Assign(targets=[Name(id='num_extra_zeros', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='clip', ctx=Load()), args=[BinOp(left=Name(id='num_unique', ctx=Load()), op=Sub(), right=Subscript(value=Name(id='counts', ctx=Load()), slice=Tuple(elts=[Slice(), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()), ctx=Load())), Constant(value=0)], keywords=[])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cumsum', ctx=Load()), args=[UnaryOp(op=Invert(), operand=Name(id='mask', ctx=Load())), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='sums', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='counts', ctx=Load()), slice=Tuple(elts=[Slice(), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()), ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Tuple(elts=[Name(id='sums', ctx=Load()), BinOp(left=Name(id='sums', ctx=Load()), op=Sub(), right=Subscript(value=Name(id='counts', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1)))], ctx=Load()), ctx=Load()))], ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), AugAssign(target=Name(id='mask', ctx=Store()), op=BitOr(), value=Compare(left=Name(id='counts', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='num_extra_zeros', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='unique', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='indices', ctx=Load()), slice=Name(id='mask', ctx=Load()), ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='num_unique', ctx=Load())], keywords=[])), Return(value=Name(id='unique', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_gather_mask', args=arguments(posonlyargs=[], args=[arg(arg='matrix'), arg(arg='lengths'), arg(arg='mask')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='b', ctx=Store()), Name(id='n', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='matrix', ctx=Load()), attr='shape', ctx=Load())), Assign(targets=[Name(id='device', ctx=Store())], value=Attribute(value=Name(id='matrix', ctx=Load()), attr='device', ctx=Load())), Assign(targets=[Name(id='length_mask', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='arange', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[keyword(arg='device', value=Name(id='device', ctx=Load()))]), slice=Constant(value=None), ctx=Load()), attr='tile', ctx=Load()), args=[Name(id='b', ctx=Load()), Constant(value=1)], keywords=[]), ops=[Lt()], comparators=[Subscript(value=Name(id='lengths', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None)], ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='mask', ctx=Store())], value=BinOp(left=Name(id='mask', ctx=Load()), op=BitAnd(), right=Name(id='length_mask', ctx=Load()))), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='mask', ctx=Load()), attr='sum', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='max_count', ctx=Store())], value=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='padding', ctx=Store())], value=BinOp(left=Name(id='max_count', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]))), If(test=Compare(left=Name(id='padding', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='matrix', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Tuple(elts=[Name(id='matrix', ctx=Load()), Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='padding', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='matrix', ctx=Load()), attr='dtype', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])], ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])), Assign(targets=[Name(id='mask', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Tuple(elts=[Name(id='mask', ctx=Load()), Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='ones', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='padding', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='bool', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])], ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))]))], orelse=[]), AugAssign(target=Name(id='mask', ctx=Store()), op=BitAnd(), value=Compare(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cumsum', ctx=Load()), args=[Name(id='mask', ctx=Load()), Constant(value=1)], keywords=[]), ops=[LtE()], comparators=[Name(id='max_count', ctx=Load())])), Return(value=Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=Name(id='mask', ctx=Load()), ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='max_count', ctx=Load())], keywords=[]), Name(id='counts', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_gather_broadcast', args=arguments(posonlyargs=[], args=[arg(arg='input'), arg(arg='dim'), arg(arg='index'), arg(arg='backend')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='torch')]), body=[If(test=Compare(left=Name(id='backend', ctx=Load()), ops=[Eq()], comparators=[Constant(value='torch')]), body=[Assign(targets=[Name(id='shape', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Attribute(value=Name(id='input', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Attribute(value=Name(id='index', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[])), AugAssign(target=Subscript(value=Name(id='index', ctx=Load()), slice=Compare(left=Name(id='index', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), ctx=Store()), op=Add(), value=Subscript(value=Name(id='shape', ctx=Load()), slice=Name(id='dim', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='shape', ctx=Load()), slice=Name(id='dim', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='input', ctx=Load()), attr='shape', ctx=Load()), slice=Name(id='dim', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='input', ctx=Store())], value=Call(func=Attribute(value=Name(id='input', ctx=Load()), attr='broadcast_to', ctx=Load()), args=[Name(id='shape', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='shape', ctx=Load()), slice=Name(id='dim', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='index', ctx=Load()), attr='shape', ctx=Load()), slice=Name(id='dim', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='index', ctx=Load()), attr='broadcast_to', ctx=Load()), args=[Name(id='shape', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='input', ctx=Load()), attr='gather', ctx=Load()), args=[Name(id='dim', ctx=Load()), Name(id='index', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='backend', ctx=Load()), ops=[Eq()], comparators=[Constant(value='numpy')]), body=[Assign(targets=[Name(id='result_array', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='take_along_axis', ctx=Load()), args=[Call(func=Name(id='asarray', ctx=Load()), args=[Name(id='input', ctx=Load())], keywords=[]), Call(func=Name(id='asarray', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[]), Name(id='dim', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='from_numpy', ctx=Load()), args=[Name(id='result_array', ctx=Load())], keywords=[]), attr='to', ctx=Load()), args=[], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='input', ctx=Load()), attr='dtype', ctx=Load())), keyword(arg='device', value=Attribute(value=Name(id='input', ctx=Load()), attr='device', ctx=Load()))])), Return(value=Name(id='result', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknown broadcast backend: {}.'), attr='format', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[])], keywords=[]))])])], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[])], type_ignores=[])