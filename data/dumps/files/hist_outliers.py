Module(body=[Import(names=[alias(name='typing')]), ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), Import(names=[alias(name='numba')]), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0)], orelse=[]), FunctionDef(name='optimal_sse', args=arguments(posonlyargs=[], args=[arg(arg='left', annotation=Name(id='int', ctx=Load())), arg(arg='right', annotation=Name(id='int', ctx=Load())), arg(arg='p', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='pp', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Count the approximation error by 1 bin from left to right elements.\n\n    Parameters\n    ----------\n    left:\n        left border\n    right:\n        right border\n    p:\n        array of sums of elements, ``p[i]`` - sum from first to i elements\n    pp:\n        array of sums of squares of elements, ``pp[i]`` - sum of squares from first to i elements\n\n    Returns\n    -------\n    result: float\n        approximation error\n    ')), If(test=Compare(left=Name(id='left', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='avg', ctx=Store())], value=Subscript(value=Name(id='p', ctx=Load()), slice=Name(id='right', ctx=Load()), ctx=Load())), Return(value=BinOp(left=Subscript(value=Name(id='pp', ctx=Load()), slice=Name(id='right', ctx=Load()), ctx=Load()), op=Sub(), right=BinOp(left=BinOp(left=Name(id='avg', ctx=Load()), op=Pow(), right=Constant(value=2)), op=Div(), right=BinOp(left=BinOp(left=Name(id='right', ctx=Load()), op=Sub(), right=Name(id='left', ctx=Load())), op=Add(), right=Constant(value=1)))))], orelse=[]), Assign(targets=[Name(id='avg', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='p', ctx=Load()), slice=Name(id='right', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='p', ctx=Load()), slice=BinOp(left=Name(id='left', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()))), Return(value=BinOp(left=BinOp(left=Subscript(value=Name(id='pp', ctx=Load()), slice=Name(id='right', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='pp', ctx=Load()), slice=BinOp(left=Name(id='left', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), op=Sub(), right=BinOp(left=BinOp(left=Name(id='avg', ctx=Load()), op=Pow(), right=Constant(value=2)), op=Div(), right=BinOp(left=BinOp(left=Name(id='right', ctx=Load()), op=Sub(), right=Name(id='left', ctx=Load())), op=Add(), right=Constant(value=1)))))], decorator_list=[Call(func=Attribute(value=Name(id='numba', ctx=Load()), attr='jit', ctx=Load()), args=[], keywords=[keyword(arg='nopython', value=Constant(value=True))])], returns=Name(id='float', ctx=Load())), FunctionDef(name='adjust_estimation', args=arguments(posonlyargs=[], args=[arg(arg='i', annotation=Name(id='int', ctx=Load())), arg(arg='k', annotation=Name(id='int', ctx=Load())), arg(arg='sse', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='sse_one_bin', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Count sse_one_bin[i][k] using binary search.\n\n    Parameters\n    ----------\n    i:\n        left border of series\n    k:\n        number of bins\n    sse:\n        array of approximation errors\n    sse_one_bin:\n        array of approximation errors with one bin\n\n    Returns\n    -------\n    result: float\n        calculated sse_one_bin[i][k]\n    ')), Assign(targets=[Name(id='now_evaluated', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='sse', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=BinOp(left=Name(id='k', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='first_evaluated', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='sse', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=BinOp(left=Name(id='k', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='idx_prev', ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='inf', ctx=Load())), Assign(targets=[Name(id='idx_now', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='left', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='idx_now', ctx=Load()), ops=[NotEq()], comparators=[Name(id='idx_prev', ctx=Load())]), body=[Assign(targets=[Name(id='right', ctx=Store())], value=Name(id='i', ctx=Load())), Assign(targets=[Name(id='idx_prev', ctx=Store())], value=Name(id='idx_now', ctx=Load())), While(test=Compare(left=BinOp(left=Name(id='right', ctx=Load()), op=Sub(), right=Name(id='left', ctx=Load())), ops=[Gt()], comparators=[Constant(value=1)]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Name(id='sse_one_bin', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='left', ctx=Load()), op=Add(), right=Name(id='right', ctx=Load())), op=FloorDiv(), right=Constant(value=2)), ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='now_evaluated', ctx=Load())]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='left', ctx=Load()), op=Add(), right=Name(id='right', ctx=Load())), op=FloorDiv(), right=Constant(value=2)))], orelse=[Assign(targets=[Name(id='right', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='left', ctx=Load()), op=Add(), right=Name(id='right', ctx=Load())), op=FloorDiv(), right=Constant(value=2)))])], orelse=[]), Assign(targets=[Name(id='idx_now', ctx=Store())], value=Name(id='left', ctx=Load())), Assign(targets=[Name(id='now_evaluated', ctx=Store())], value=BinOp(left=Name(id='first_evaluated', ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Name(id='sse', ctx=Load()), slice=Name(id='idx_now', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='k', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='now_min', ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='inf', ctx=Load())), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='idx_now', ctx=Load()), Name(id='i', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='now', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Name(id='sse', ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='k', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Subscript(value=Name(id='sse_one_bin', ctx=Load()), slice=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='now_min', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='now_min', ctx=Load()), Name(id='now', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='now_min', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='numba', ctx=Load()), attr='jit', ctx=Load()), args=[], keywords=[keyword(arg='nopython', value=Constant(value=True))])], returns=Name(id='float', ctx=Load())), FunctionDef(name='v_optimal_hist', args=arguments(posonlyargs=[], args=[arg(arg='series', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='bins_number', annotation=Name(id='int', ctx=Load())), arg(arg='p', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='pp', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Count an approximation error of a series with [1, bins_number] bins.\n\n    `Reference <http://www.vldb.org/conf/1998/p275.pdf>`_.\n\n    Parameters\n    ----------\n    series:\n        array to count an approximation error with bins_number bins\n    bins_number:\n        number of bins\n    p:\n        array of sums of elements, p[i] - sum from 0th to i elements\n    pp:\n        array of sums of squares of elements, p[i] - sum of squares from 0th to i elements\n\n    Returns\n    -------\n    error: np.ndarray\n        approximation error of a series with [1, bins_number] bins\n    ')), Assign(targets=[Name(id='sse', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]), Name(id='bins_number', ctx=Load())], ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='sse', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Call(func=Name(id='optimal_sse', ctx=Load()), args=[Constant(value=0), Name(id='i', ctx=Load()), Name(id='p', ctx=Load()), Name(id='pp', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='sse_one_bin', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), body=[For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='i', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='sse_one_bin', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Store())], value=Call(func=Name(id='optimal_sse', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load()), Name(id='p', ctx=Load()), Name(id='pp', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='tmp_bins_number', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='bins_number', ctx=Load())], keywords=[]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='tmp_bins_number', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='sse', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='tmp_bins_number', ctx=Load()), ctx=Store())], value=Call(func=Name(id='adjust_estimation', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='tmp_bins_number', ctx=Load()), Name(id='sse', ctx=Load()), Name(id='sse_one_bin', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='sse', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='numba', ctx=Load()), attr='jit', ctx=Load()), args=[], keywords=[keyword(arg='nopython', value=Constant(value=True))])], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='compute_f', args=arguments(posonlyargs=[], args=[arg(arg='series', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='k', annotation=Name(id='int', ctx=Load())), arg(arg='p', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='pp', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Compute F. F[a][b][k] - minimum approximation error on series[a:b+1] with k outliers.\n\n    `Reference <http://www.vldb.org/conf/1999/P9.pdf>`_.\n\n    Parameters\n    ----------\n    series:\n        array to count F\n    k:\n        number of outliers\n    p:\n        array of sums of elements, ``p[i]`` - sum from 0th to i elements\n    pp:\n        array of sums of squares of elements, ``pp[i]`` - sum of squares from 0th to i elements\n\n    Returns\n    -------\n    result: np.ndarray\n        array F, outliers_indices\n    ')), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]), BinOp(left=Name(id='k', ctx=Load()), op=Add(), right=Constant(value=1))], ctx=Load())], keywords=[])), AnnAssign(target=Name(id='s', ctx=Store()), annotation=Name(id='list', ctx=Load()), value=ListComp(elt=ListComp(elt=ListComp(elt=List(elts=[], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='k', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)]), simple=1), AnnAssign(target=Name(id='ss', ctx=Store()), annotation=Name(id='list', ctx=Load()), value=ListComp(elt=ListComp(elt=ListComp(elt=List(elts=[], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='k', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)]), simple=1), AnnAssign(target=Name(id='outliers_indices', ctx=Store()), annotation=Name(id='list', ctx=Load()), value=ListComp(elt=ListComp(elt=ListComp(elt=List(elts=[], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='k', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)]), simple=1), For(target=Name(id='right_border', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='f', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Call(func=Name(id='optimal_sse', ctx=Load()), args=[Constant(value=0), Name(id='right_border', ctx=Load()), Name(id='p', ctx=Load()), Name(id='pp', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='s', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Store())], value=List(elts=[Subscript(value=Name(id='p', ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load())], ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='ss', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Store())], value=List(elts=[Subscript(value=Name(id='pp', ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load())], ctx=Load()))], orelse=[]), For(target=Name(id='left_border', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), body=[For(target=Name(id='right_border', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='left_border', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='f', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Call(func=Name(id='optimal_sse', ctx=Load()), args=[Name(id='left_border', ctx=Load()), Name(id='right_border', ctx=Load()), Name(id='p', ctx=Load()), Name(id='pp', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='s', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Store())], value=List(elts=[BinOp(left=Subscript(value=Name(id='p', ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='p', ctx=Load()), slice=BinOp(left=Name(id='left_border', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()))], ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='ss', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Store())], value=List(elts=[BinOp(left=Subscript(value=Name(id='pp', ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='pp', ctx=Load()), slice=BinOp(left=Name(id='left_border', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()))], ctx=Load()))], orelse=[])], orelse=[]), For(target=Name(id='left_border', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), body=[For(target=Name(id='right_border', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='left_border', ctx=Load()), Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]), BinOp(left=Name(id='left_border', ctx=Load()), op=Add(), right=Name(id='k', ctx=Load()))], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='s', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Name(id='left_border', ctx=Load())), op=Add(), right=Constant(value=1)), ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='ss', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Name(id='left_border', ctx=Load())), op=Add(), right=Constant(value=1)), ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Name(id='left_border', ctx=Load())), op=Add(), right=Constant(value=1)), ctx=Store())], value=List(elts=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Name(id='left_border', ctx=Load()), BinOp(left=Name(id='right_border', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])], keywords=[])], ctx=Load()))], orelse=[])], orelse=[]), For(target=Name(id='left_border', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), body=[For(target=Name(id='right_border', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='left_border', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), body=[For(target=Name(id='outlier_number', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Name(id='left_border', ctx=Load())), op=Add(), right=Constant(value=1)), BinOp(left=Name(id='k', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='f1', ctx=Store())], value=Subscript(value=Subscript(value=Subscript(value=Name(id='f', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=BinOp(left=Name(id='outlier_number', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='tmp_ss', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='tmp_s', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='f2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='now_min', ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='inf', ctx=Load())), Assign(targets=[Name(id='now_outliers_indices', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='where', ctx=Store())], value=Constant(value=0)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='ss', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tmp_ss', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Subscript(value=Subscript(value=Subscript(value=Subscript(value=Name(id='ss', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), op=Add(), right=BinOp(left=Subscript(value=Name(id='series', ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), op=Pow(), right=Constant(value=2)))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tmp_s', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Subscript(value=Subscript(value=Subscript(value=Subscript(value=Name(id='s', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='series', ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='now_outliers_indices', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f2', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='tmp_ss', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Sub(), right=BinOp(left=BinOp(left=Subscript(value=Name(id='tmp_s', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Pow(), right=Constant(value=2)), op=Div(), right=BinOp(left=BinOp(left=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Name(id='left_border', ctx=Load())), op=Add(), right=Constant(value=1)), op=Sub(), right=Name(id='outlier_number', ctx=Load()))))], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='f2', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='now_min', ctx=Load())]), body=[Assign(targets=[Name(id='now_min', ctx=Store())], value=Subscript(value=Name(id='f2', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='where', ctx=Store())], value=Name(id='i', ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='f1', ctx=Load()), ops=[Lt()], comparators=[Name(id='now_min', ctx=Load())]), body=[Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='f', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Store())], value=Name(id='f1', ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='s', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='s', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=BinOp(left=Name(id='outlier_number', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='ss', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='ss', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=BinOp(left=Name(id='outlier_number', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=BinOp(left=Name(id='outlier_number', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load())], keywords=[]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='right_border', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Name(id='right_border', ctx=Load())], ctx=Load())], keywords=[]))])], orelse=[If(test=Compare(left=Name(id='f1', ctx=Load()), ops=[Gt()], comparators=[Name(id='now_min', ctx=Load())]), body=[Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='f', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='f2', ctx=Load()), slice=Name(id='where', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='s', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Store())], value=Name(id='tmp_s', ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='ss', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Store())], value=Name(id='tmp_ss', ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Store())], value=Name(id='now_outliers_indices', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='f', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Store())], value=Name(id='f1', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='tmp_s', ctx=Load()), attr='extend', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='s', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=BinOp(left=Name(id='outlier_number', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tmp_ss', ctx=Load()), attr='extend', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='ss', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=BinOp(left=Name(id='outlier_number', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='s', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Store())], value=Name(id='tmp_s', ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='ss', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Store())], value=Name(id='tmp_ss', ctx=Load())), Assign(targets=[Name(id='tmp', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='right_border', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=BinOp(left=Name(id='outlier_number', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tmp', ctx=Load())], keywords=[]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='tmp', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='tmp', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='right_border', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='tmp', ctx=Store())], value=List(elts=[List(elts=[Name(id='right_border', ctx=Load())], ctx=Load())], ctx=Load()))]), Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='now_outliers_indices', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=Name(id='left_border', ctx=Load()), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='tmp', ctx=Load())], keywords=[])], keywords=[]))])])], orelse=[])], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='f', ctx=Load()), Name(id='outliers_indices', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='hist', args=arguments(posonlyargs=[], args=[arg(arg='series', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='bins_number', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Compute outliers indices according to hist rule.\n\n    `Reference <http://www.vldb.org/conf/1999/P9.pdf>`_.\n\n    Parameters\n    ----------\n    series:\n        array to count F\n    bins_number:\n        number of bins\n\n    Returns\n    -------\n    indices: np.ndarray\n        outliers indices\n    ')), Assign(targets=[Name(id='approximation_error', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]), BinOp(left=Name(id='bins_number', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='bins_number', ctx=Load())], ctx=Load())], keywords=[])), AnnAssign(target=Name(id='anomalies', ctx=Store()), annotation=Name(id='list', ctx=Load()), value=ListComp(elt=ListComp(elt=ListComp(elt=List(elts=[], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='bins_number', ctx=Load())], keywords=[]), ifs=[], is_async=0)]), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='bins_number', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[], is_async=0)]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)]), simple=1), Assign(targets=[Tuple(elts=[Name(id='p', ctx=Store()), Name(id='pp', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='empty_like', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='empty_like', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Subscript(value=Name(id='p', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Subscript(value=Name(id='series', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Subscript(value=Name(id='pp', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=BinOp(left=Subscript(value=Name(id='series', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Pow(), right=Constant(value=2))), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='p', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Name(id='p', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='series', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))), Assign(targets=[Subscript(value=Name(id='pp', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Name(id='pp', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=BinOp(left=Subscript(value=Name(id='series', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), op=Pow(), right=Constant(value=2))))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='f', ctx=Store()), Name(id='outliers_indices', ctx=Store())], ctx=Store())], value=Call(func=Name(id='compute_f', ctx=Load()), args=[Name(id='series', ctx=Load()), BinOp(left=Name(id='bins_number', ctx=Load()), op=Sub(), right=Constant(value=1)), Name(id='p', ctx=Load()), Name(id='pp', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='approximation_error', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(lower=Constant(value=1)), Constant(value=0)], ctx=Load()), ctx=Store())], value=Call(func=Name(id='v_optimal_hist', ctx=Load()), args=[Name(id='series', ctx=Load()), Name(id='bins_number', ctx=Load()), Name(id='p', ctx=Load()), Name(id='pp', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='approximation_error', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=1), Slice()], ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='f', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='right_border', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), body=[For(target=Name(id='outlier_number', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='bins_number', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='anomalies', ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), For(target=Name(id='right_border', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[])], keywords=[]), body=[For(target=Name(id='tmp_bins_number', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=2), Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='bins_number', ctx=Load()), op=Add(), right=Constant(value=1)), BinOp(left=Name(id='right_border', ctx=Load()), op=Add(), right=Constant(value=2))], keywords=[])], keywords=[]), body=[For(target=Name(id='outlier_number', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='min', ctx=Load()), args=[Name(id='bins_number', ctx=Load()), BinOp(left=BinOp(left=Name(id='right_border', ctx=Load()), op=Add(), right=Constant(value=2)), op=Sub(), right=Name(id='tmp_bins_number', ctx=Load()))], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='tmp_approximation_error', ctx=Store())], value=Subscript(value=Name(id='approximation_error', ctx=Load()), slice=Tuple(elts=[Slice(upper=Name(id='right_border', ctx=Load())), BinOp(left=Name(id='tmp_bins_number', ctx=Load()), op=Sub(), right=Constant(value=1)), Slice(upper=BinOp(left=Name(id='outlier_number', ctx=Load()), op=Add(), right=Constant(value=1)))], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='tmp_f', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='f', ctx=Load()), slice=Tuple(elts=[Slice(lower=Constant(value=1), upper=BinOp(left=Name(id='right_border', ctx=Load()), op=Add(), right=Constant(value=1))), Name(id='right_border', ctx=Load()), Slice(upper=BinOp(left=Name(id='outlier_number', ctx=Load()), op=Add(), right=Constant(value=1)))], ctx=Load()), ctx=Load()), slice=Tuple(elts=[Slice(), Slice(step=UnaryOp(op=USub(), operand=Constant(value=1)))], ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='approximation_error', ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='tmp_bins_number', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='min', ctx=Load()), args=[BinOp(left=Name(id='tmp_approximation_error', ctx=Load()), op=Add(), right=Name(id='tmp_f', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='where', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=BinOp(left=Name(id='tmp_approximation_error', ctx=Load()), op=Add(), right=Name(id='tmp_f', ctx=Load())), ops=[Eq()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='approximation_error', ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='tmp_bins_number', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load())])], keywords=[])), If(test=Compare(left=Subscript(value=Subscript(value=Name(id='where', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Name(id='outlier_number', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Subscript(value=Name(id='anomalies', ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='tmp_bins_number', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Subscript(value=Name(id='outliers_indices', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Add(), right=Subscript(value=Subscript(value=Name(id='where', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load())), ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='outlier_number', ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Name(id='where', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value=0), ctx=Load())), ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Subscript(value=Name(id='anomalies', ctx=Load()), slice=Name(id='right_border', ctx=Load()), ctx=Load()), slice=Name(id='tmp_bins_number', ctx=Load()), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='anomalies', ctx=Load()), slice=Subscript(value=Subscript(value=Name(id='where', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='tmp_bins_number', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=Subscript(value=Subscript(value=Name(id='where', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='now_min', ctx=Store())], value=Subscript(value=Subscript(value=Subscript(value=Name(id='approximation_error', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='outlier_number', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='approximation_error', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), Subscript(value=Attribute(value=Name(id='approximation_error', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='approximation_error', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='approximation_error', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='outlier_number', ctx=Load())), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Name(id='now_min', ctx=Load())]), body=[Assign(targets=[Name(id='count', ctx=Store())], value=Name(id='outlier_number', ctx=Load())), Assign(targets=[Name(id='now_min', ctx=Store())], value=Subscript(value=Subscript(value=Subscript(value=Name(id='approximation_error', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='approximation_error', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='outlier_number', ctx=Load())), ctx=Load()), slice=Name(id='outlier_number', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='anomalies', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='approximation_error', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='count', ctx=Load())), ctx=Load()), slice=Name(id='count', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='get_anomalies_hist', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='bins_number', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='target'), Constant(value=10)]), body=[Expr(value=Constant(value='\n    Get point outliers in time series using histogram model.\n\n    Outliers are all points that, when removed, result in a histogram with a lower approximation error,\n    even with the number of bins less than the number of outliers.\n\n    Parameters\n    ----------\n    ts:\n        TSDataset with timeseries data\n    in_column:\n        name of the column in which the anomaly is searching\n    bins_number:\n        number of bins\n\n    Returns\n    -------\n    :\n        dict of outliers in format {segment: [outliers_timestamps]}\n    ')), Assign(targets=[Name(id='outliers_per_segment', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())), For(target=Name(id='seg', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), slice=Name(id='seg', ctx=Load()), ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='values', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Name(id='in_column', ctx=Load()), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='anomalies', ctx=Store())], value=Call(func=Name(id='hist', ctx=Load()), args=[Name(id='values', ctx=Load()), Name(id='bins_number', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='outliers_per_segment', ctx=Load()), slice=Name(id='seg', ctx=Load()), ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='timestamp', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='anomalies', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), Return(value=Name(id='outliers_per_segment', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])