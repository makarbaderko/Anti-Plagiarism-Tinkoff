Module(body=[Import(names=[alias(name='math')]), Import(names=[alias(name='warnings')]), ImportFrom(module='copy', names=[alias(name='copy')], level=0), ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='Iterator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='matplotlib', names=[alias(name='pyplot', asname='plt')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='etna', names=[alias(name='SETTINGS')], level=0), ImportFrom(module='etna.datasets.utils', names=[alias(name='_TorchDataset')], level=0), ImportFrom(module='etna.loggers', names=[alias(name='tslogger')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0)], orelse=[]), If(test=Attribute(value=Name(id='SETTINGS', ctx=Load()), attr='torch_required', ctx=Load()), body=[ImportFrom(module='torch.utils.data', names=[alias(name='Dataset')], level=0)], orelse=[]), Assign(targets=[Name(id='TTimestamp', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='TSDataset', bases=[], keywords=[], body=[Expr(value=Constant(value='TSDataset is the main class to handle your time series data.\n    It prepares the series for exploration analyzing, implements feature generation with Transforms\n    and generation of future points.\n\n    Notes\n    -----\n    TSDataset supports custom indexing and slicing method.\n    It maybe done through these interface: ``TSDataset[timestamp, segment, column]``\n    If at the start of the period dataset contains NaN those timestamps will be removed.\n\n    During creation segment is casted to string type.\n\n    Examples\n    --------\n    >>> from etna.datasets import generate_const_df\n    >>> df = generate_const_df(periods=30, start_time="2021-06-01", n_segments=2, scale=1)\n    >>> df_ts_format = TSDataset.to_dataset(df)\n    >>> ts = TSDataset(df_ts_format, "D")\n    >>> ts["2021-06-01":"2021-06-07", "segment_0", "target"]\n    timestamp\n    2021-06-01    1.0\n    2021-06-02    1.0\n    2021-06-03    1.0\n    2021-06-04    1.0\n    2021-06-05    1.0\n    2021-06-06    1.0\n    2021-06-07    1.0\n    Freq: D, Name: (segment_0, target), dtype: float64\n\n    >>> from etna.datasets import generate_ar_df\n    >>> pd.options.display.float_format = \'{:,.2f}\'.format\n    >>> df_to_forecast = generate_ar_df(100, start_time="2021-01-01", n_segments=1)\n    >>> df_regressors = generate_ar_df(120, start_time="2021-01-01", n_segments=5)\n    >>> df_regressors = df_regressors.pivot(index="timestamp", columns="segment").reset_index()\n    >>> df_regressors.columns = ["timestamp"] + [f"regressor_{i}" for i in range(5)]\n    >>> df_regressors["segment"] = "segment_0"\n    >>> df_to_forecast = TSDataset.to_dataset(df_to_forecast)\n    >>> df_regressors = TSDataset.to_dataset(df_regressors)\n    >>> tsdataset = TSDataset(df=df_to_forecast, freq="D", df_exog=df_regressors, known_future="all")\n    >>> tsdataset.df.head(5)\n    segment      segment_0\n    feature    regressor_0 regressor_1 regressor_2 regressor_3 regressor_4 target\n    timestamp\n    2021-01-01        1.62       -0.02       -0.50       -0.56        0.52   1.62\n    2021-01-02        1.01       -0.80       -0.81        0.38       -0.60   1.01\n    2021-01-03        0.48        0.47       -0.81       -1.56       -1.37   0.48\n    2021-01-04       -0.59        2.44       -2.21       -1.21       -0.69  -0.59\n    2021-01-05        0.28        0.58       -3.07       -1.45        0.77   0.28\n    ')), Assign(targets=[Name(id='idx', ctx=Store())], value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='freq', annotation=Name(id='str', ctx=Load())), arg(arg='df_exog', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), ctx=Load())), arg(arg='known_future', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load()), Name(id='Sequence', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Tuple(elts=[], ctx=Load())]), body=[Expr(value=Constant(value='Init TSDataset.\n\n        Parameters\n        ----------\n        df:\n            dataframe with timeseries\n        freq:\n            frequency of timestamp in df\n        df_exog:\n            dataframe with exogenous data;\n        known_future:\n            columns in ``df_exog[known_future]`` that are regressors,\n            if "all" value is given, all columns are meant to be regressors\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_df', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Store())], value=Name(id='freq', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='inferred_freq', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='infer_freq', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="TSDataset freq can't be inferred")], keywords=[])), Assign(targets=[Name(id='inferred_freq', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='inferred_freq', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='You probably set wrong freq. Discovered freq in you data is '), FormattedValue(value=Name(id='inferred_freq', ctx=Load()), conversion=-1), Constant(value=', you set '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='asfreq', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_known_future', ctx=Load()), args=[Name(id='known_future', ctx=Load()), Name(id='df_exog', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Store())], value=Call(func=Name(id='copy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='df_exog', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_exog', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), attr='index', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_merge_exog', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[]))], orelse=[]), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='Transform'), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transforms', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='Transform'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Apply given transform to the data.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_endings', ctx=Load()), args=[], keywords=[keyword(arg='warning', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Store())], value=Name(id='transforms', ctx=Load())), For(target=Name(id='transform', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[JoinedStr(values=[Constant(value='Transform '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' is applied to dataset')])], keywords=[])), Assign(targets=[Name(id='columns_before', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='transform', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='columns_after', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_regressors', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Name(id='transform', ctx=Load())), keyword(arg='columns_before', value=Name(id='columns_before', ctx=Load())), keyword(arg='columns_after', value=Name(id='columns_after', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='fit_transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transforms', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='Transform'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fit and apply given transforms to the data.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_endings', ctx=Load()), args=[], keywords=[keyword(arg='warning', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Store())], value=Name(id='transforms', ctx=Load())), For(target=Name(id='transform', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[JoinedStr(values=[Constant(value='Transform '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' is applied to dataset')])], keywords=[])), Assign(targets=[Name(id='columns_before', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='columns_after', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_regressors', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Name(id='transform', ctx=Load())), keyword(arg='columns_before', value=Name(id='columns_before', ctx=Load())), keyword(arg='columns_after', value=Name(id='columns_after', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='_prepare_df', args=arguments(posonlyargs=[], args=[arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Name(id='columns_frame', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='to_frame', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='columns_frame', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='columns_frame', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='df_copy', ctx=Load()), attr='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='MultiIndex', ctx=Load()), attr='from_frame', ctx=Load()), args=[Name(id='columns_frame', ctx=Load())], keywords=[])), Return(value=Name(id='df_copy', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_update_regressors', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transform', annotation=Constant(value='Transform')), arg(arg='columns_before', annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='columns_after', annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='etna.transforms', names=[alias(name='OneHotEncoderTransform')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='FutureMixin')], level=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Load())], keywords=[]), attr='intersection', ctx=Load()), args=[Name(id='columns_after', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='unseen_columns', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Name(id='columns_after', ctx=Load()), op=Sub(), right=Name(id='columns_before', ctx=Load()))], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='unseen_columns', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='new_regressors', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='FutureMixin', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='out_columns', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Name(id='columns_after', ctx=Load()), op=Sub(), right=Name(id='columns_before', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='new_regressors', ctx=Store())], value=Name(id='out_columns', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='OneHotEncoderTransform', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='in_column', ctx=Store())], value=Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load())), Assign(targets=[Name(id='out_columns', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Name(id='columns_after', ctx=Load()), op=Sub(), right=Name(id='columns_before', ctx=Load()))], keywords=[])), If(test=Compare(left=Name(id='in_column', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())]), body=[Assign(targets=[Name(id='new_regressors', ctx=Store())], value=Name(id='out_columns', ctx=Load()))], orelse=[])], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='transform', ctx=Load()), Constant(value='in_column')], keywords=[]), body=[Assign(targets=[Name(id='in_columns', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load()), orelse=List(elts=[Attribute(value=Name(id='transform', ctx=Load()), attr='in_column', ctx=Load())], ctx=Load()))), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='transform', ctx=Load()), Constant(value='out_columns')], keywords=[]), Compare(left=Attribute(value=Name(id='transform', ctx=Load()), attr='out_columns', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='out_columns', ctx=Store())], value=Attribute(value=Name(id='transform', ctx=Load()), attr='out_columns', ctx=Load())), Assign(targets=[Name(id='regressors_in_column_ids', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='in_column', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='in_columns', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='in_column', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='new_regressors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='out_columns', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='regressors_in_column_ids', ctx=Load()), ifs=[], is_async=0)]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='transform', ctx=Load()), Constant(value='out_column')], keywords=[]), Compare(left=Attribute(value=Name(id='transform', ctx=Load()), attr='out_column', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='out_columns', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='transform', ctx=Load()), attr='out_column', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=Attribute(value=Name(id='transform', ctx=Load()), attr='out_column', ctx=Load()), orelse=List(elts=[Attribute(value=Name(id='transform', ctx=Load()), attr='out_column', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='regressors_in_column_ids', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='in_column', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='in_columns', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='in_column', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='new_regressors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='out_columns', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='regressors_in_column_ids', ctx=Load()), ifs=[], is_async=0)]))], orelse=[Assign(targets=[Name(id='out_columns', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Name(id='columns_after', ctx=Load()), op=Sub(), right=Name(id='columns_before', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='regressors_in_column', ctx=Store())], value=ListComp(elt=Name(id='in_column', ctx=Load()), generators=[comprehension(target=Name(id='in_column', ctx=Store()), iter=Name(id='in_columns', ctx=Load()), ifs=[Compare(left=Name(id='in_column', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='new_regressors', ctx=Store())], value=ListComp(elt=Name(id='out_column', ctx=Load()), generators=[comprehension(target=Name(id='out_column', ctx=Store()), iter=Name(id='out_columns', ctx=Load()), ifs=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='any', ctx=Load()), args=[ListComp(elt=Compare(left=Name(id='regressor', ctx=Load()), ops=[In()], comparators=[Name(id='out_column', ctx=Load())]), generators=[comprehension(target=Name(id='regressor', ctx=Store()), iter=Name(id='regressors_in_column', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], is_async=0)]))])])], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Transform is not FutureMixin and does not have in_column attribute!')], keywords=[]))])])]), Assign(targets=[Name(id='new_regressors', ctx=Store())], value=ListComp(elt=Name(id='regressor', ctx=Load()), generators=[comprehension(target=Name(id='regressor', ctx=Store()), iter=Name(id='new_regressors', ctx=Load()), ifs=[Compare(left=Name(id='regressor', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())])], is_async=0)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='new_regressors', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_repr_html_', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='_repr_html_', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='slice', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Name(id='item', ctx=Load()), ctx=Load()), ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), Compare(left=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Is()], comparators=[Name(id='Ellipsis', ctx=Load())])]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Slice(), ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), Compare(left=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Is()], comparators=[Name(id='Ellipsis', ctx=Load())])]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='idx', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=1), ctx=Load()), Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))])])]), Assign(targets=[Name(id='first_valid_idx', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Name(id='first_valid_idx', ctx=Load())), ctx=Load())), Return(value=Name(id='df', ctx=Load()))], decorator_list=[]), FunctionDef(name='make_future', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='future_steps', annotation=Name(id='int', ctx=Load())), arg(arg='tail_steps', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='Return new TSDataset with future steps.\n\n        Parameters\n        ----------\n        future_steps:\n            number of timestamp in the future to build features for.\n        tail_steps:\n            number of timestamp for context to build features for.\n\n        Returns\n        -------\n        :\n            dataset with features in the future.\n\n        Examples\n        --------\n        >>> from etna.datasets import generate_const_df\n        >>> df = generate_const_df(\n        ...    periods=30, start_time="2021-06-01",\n        ...    n_segments=2, scale=1\n        ... )\n        >>> df_regressors = pd.DataFrame({\n        ...     "timestamp": list(pd.date_range("2021-06-01", periods=40))*2,\n        ...     "regressor_1": np.arange(80), "regressor_2": np.arange(80) + 5,\n        ...     "segment": ["segment_0"]*40 + ["segment_1"]*40\n        ... })\n        >>> df_ts_format = TSDataset.to_dataset(df)\n        >>> df_regressors_ts_format = TSDataset.to_dataset(df_regressors)\n        >>> ts = TSDataset(\n        ...     df_ts_format, "D", df_exog=df_regressors_ts_format, known_future="all"\n        ... )\n        >>> ts.make_future(4)\n        segment      segment_0                      segment_1\n        feature    regressor_1 regressor_2 target regressor_1 regressor_2 target\n        timestamp\n        2021-07-01          30          35    NaN          70          75    NaN\n        2021-07-02          31          36    NaN          71          76    NaN\n        2021-07-03          32          37    NaN          72          77    NaN\n        2021-07-04          33          38    NaN          73          78    NaN\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_endings', ctx=Load()), args=[], keywords=[keyword(arg='warning', value=Constant(value=True))])), Assign(targets=[Name(id='max_date_in_dataset', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='future_dates', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Name(id='max_date_in_dataset', ctx=Load())), keyword(arg='periods', value=BinOp(left=Name(id='future_steps', ctx=Load()), op=Add(), right=Constant(value=1))), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='closed', value=Constant(value='right'))])), Assign(targets=[Name(id='new_index', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='index', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='future_dates', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='reindex', ctx=Load()), args=[Name(id='new_index', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), attr='name', ctx=Store())], value=Constant(value='timestamp')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_merge_exog', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load()), body=[For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='regressors_index', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='index', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Call(func=Attribute(value=Name(id='future_dates', ctx=Load()), attr='isin', ctx=Load()), args=[Name(id='regressors_index', ctx=Load())], keywords=[])], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value="Some regressors don't have enough values in segment "), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1), Constant(value=', NaN-s will be used for missing values')])], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='transform', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[JoinedStr(values=[Constant(value='Transform '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' is applied to dataset')])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='future_dataset', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='tail', ctx=Load()), args=[BinOp(left=Name(id='future_steps', ctx=Load()), op=Add(), right=Name(id='tail_steps', ctx=Load()))], keywords=[]), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Name(id='future_dataset', ctx=Store())], value=Call(func=Attribute(value=Name(id='future_dataset', ctx=Load()), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1)), keyword(arg='level', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()))])), Assign(targets=[Name(id='future_ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='future_dataset', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='future_ts', ctx=Load()), attr='known_future', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())), Assign(targets=[Attribute(value=Name(id='future_ts', ctx=Load()), attr='_regressors', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())), Assign(targets=[Attribute(value=Name(id='future_ts', ctx=Load()), attr='transforms', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load())), Assign(targets=[Attribute(value=Name(id='future_ts', ctx=Load()), attr='df_exog', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())), Return(value=Name(id='future_ts', ctx=Load()))], decorator_list=[], returns=Constant(value='TSDataset')), FunctionDef(name='tsdataset_idx_slice', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='start_idx', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='end_idx', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Return new TSDataset with integer-location based indexing.\n\n        Parameters\n        ----------\n        start_idx:\n            starting index of the slice.\n        end_idx:\n            last index of the slice.\n\n        Returns\n        -------\n        :\n            TSDataset based on indexing slice.\n        ')), Assign(targets=[Name(id='df_slice', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='iloc', ctx=Load()), slice=Slice(lower=Name(id='start_idx', ctx=Load()), upper=Name(id='end_idx', ctx=Load())), ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Name(id='tsdataset_slice', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df_slice', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='tsdataset_slice', ctx=Load()), attr='known_future', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tsdataset_slice', ctx=Load()), attr='_regressors', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tsdataset_slice', ctx=Load()), attr='transforms', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tsdataset_slice', ctx=Load()), attr='df_exog', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())), Return(value=Name(id='tsdataset_slice', ctx=Load()))], decorator_list=[], returns=Constant(value='TSDataset')), FunctionDef(name='_check_known_future', args=arguments(posonlyargs=[], args=[arg(arg='known_future', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load()), Name(id='Sequence', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='df_exog', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that ``known_future`` corresponds to ``df_exog`` and returns initial list of regressors.')), If(test=Compare(left=Name(id='df_exog', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='exog_columns', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='exog_columns', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='df_exog', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]))]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='known_future', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='known_future', ctx=Load()), ops=[Eq()], comparators=[Constant(value='all')]), body=[Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='exog_columns', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="The only possible literal is 'all'")], keywords=[]))])], orelse=[Assign(targets=[Name(id='known_future_unique', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='known_future', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='known_future_unique', ctx=Load()), attr='issubset', ctx=Load()), args=[Name(id='exog_columns', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Some features in known_future are not present in df_exog: '), FormattedValue(value=Call(func=Attribute(value=Name(id='known_future_unique', ctx=Load()), attr='difference', ctx=Load()), args=[Name(id='exog_columns', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='known_future_unique', ctx=Load())], keywords=[]))])])], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_check_regressors', args=arguments(posonlyargs=[], args=[arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='df_regressors', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that regressors begin not later than in ``df`` and end later than in ``df``.')), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='df_regressors', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='df_segments', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Name(id='df_segments', ctx=Load()), body=[Assign(targets=[Name(id='target_min', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='target_min', ctx=Store())], value=IfExp(test=Compare(left=Name(id='target_min', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='pd', ctx=Load()), attr='NaT', ctx=Load()), orelse=Name(id='target_min', ctx=Load()))), Assign(targets=[Name(id='target_max', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='target_max', ctx=Store())], value=IfExp(test=Compare(left=Name(id='target_max', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='pd', ctx=Load()), attr='NaT', ctx=Load()), orelse=Name(id='target_max', ctx=Load()))), Assign(targets=[Name(id='exog_series_min', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_regressors', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='exog_series_min', ctx=Store())], value=IfExp(test=Compare(left=Name(id='exog_series_min', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='pd', ctx=Load()), attr='NaT', ctx=Load()), orelse=Name(id='exog_series_min', ctx=Load()))), Assign(targets=[Name(id='exog_series_max', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_regressors', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='exog_series_max', ctx=Store())], value=IfExp(test=Compare(left=Name(id='exog_series_max', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='pd', ctx=Load()), attr='NaT', ctx=Load()), orelse=Name(id='exog_series_max', ctx=Load()))), If(test=Compare(left=Name(id='target_min', ctx=Load()), ops=[Lt()], comparators=[Name(id='exog_series_min', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="All the regressor series should start not later than corresponding 'target'.Series of segment "), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1), Constant(value=' have not enough history: '), FormattedValue(value=Name(id='target_min', ctx=Load()), conversion=-1), Constant(value=' < '), FormattedValue(value=Name(id='exog_series_min', ctx=Load()), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='target_max', ctx=Load()), ops=[GtE()], comparators=[Name(id='exog_series_max', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="All the regressor series should finish later than corresponding 'target'.Series of segment "), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1), Constant(value=' have not enough history: '), FormattedValue(value=Name(id='target_max', ctx=Load()), conversion=-1), Constant(value=' >= '), FormattedValue(value=Name(id='exog_series_max', ctx=Load()), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_merge_exog', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Something went wrong, Trying to merge df_exog which is None!')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='df_regressors', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_regressors', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='df_regressors', value=Name(id='df_regressors', ctx=Load()))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Name(id='df', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))]), attr='loc', ctx=Load()), slice=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), ctx=Load()), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1)), keyword(arg='level', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()))])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_check_endings', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='warning')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Check that all targets ends at the same timestamp.')), Assign(targets=[Name(id='max_index', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='any', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='isna', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='max_index', ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Name(id='warning', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Segments contains NaNs in the last timestamps.Some of the transforms might work incorrectly or even fail.Make sure that you use the imputer before making the forecast.')], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='All segments should end at the same timestamp')], keywords=[]))])], orelse=[])], decorator_list=[]), FunctionDef(name='inverse_transform', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Apply inverse transform method of transforms to the data.\n\n        Applied in reversed order.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='transform', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='transforms', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='log', ctx=Load()), args=[JoinedStr(values=[Constant(value='Inverse transform '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' is applied to dataset')])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='segments', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get list of all segments in dataset.\n\n        Examples\n        --------\n        >>> from etna.datasets import generate_const_df\n        >>> df = generate_const_df(\n        ...    periods=30, start_time="2021-06-01",\n        ...    n_segments=2, scale=1\n        ... )\n        >>> df_ts_format = TSDataset.to_dataset(df)\n        >>> ts = TSDataset(df_ts_format, "D")\n        >>> ts.segments\n        [\'segment_0\', \'segment_1\']\n        ')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='regressors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get list of all regressors across all segments in dataset.\n\n        Examples\n        --------\n        >>> from etna.datasets import generate_const_df\n        >>> df = generate_const_df(\n        ...    periods=30, start_time="2021-06-01",\n        ...    n_segments=2, scale=1\n        ... )\n        >>> df_ts_format = TSDataset.to_dataset(df)\n        >>> regressors_timestamp = pd.date_range(start="2021-06-01", periods=50)\n        >>> df_regressors_1 = pd.DataFrame(\n        ...     {"timestamp": regressors_timestamp, "regressor_1": 1, "segment": "segment_0"}\n        ... )\n        >>> df_regressors_2 = pd.DataFrame(\n        ...     {"timestamp": regressors_timestamp, "regressor_1": 2, "segment": "segment_1"}\n        ... )\n        >>> df_exog = pd.concat([df_regressors_1, df_regressors_2], ignore_index=True)\n        >>> df_exog_ts_format = TSDataset.to_dataset(df_exog)\n        >>> ts = TSDataset(\n        ...     df_ts_format, df_exog=df_exog_ts_format, freq="D", known_future="all"\n        ... )\n        >>> ts.regressors\n        [\'regressor_1\']\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_regressors', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='plot', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n_segments', annotation=Name(id='int', ctx=Load())), arg(arg='column', annotation=Name(id='str', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='seed', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10), Constant(value='target'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=1), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='Plot of random or chosen segments.\n\n        Parameters\n        ----------\n        n_segments:\n            number of random segments to plot\n        column:\n            feature to plot\n        segments:\n            segments to plot\n        seed:\n            seed for local random state\n        start:\n            start plot from this timestamp\n        end:\n            end plot at this timestamp\n        figsize:\n            size of the figure per subplot with one segment in inches\n        ')), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load())), Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='n_segments', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='columns_num', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Constant(value=2), Name(id='k', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rows_num', ctx=Store())], value=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='ceil', ctx=Load()), args=[BinOp(left=Name(id='k', ctx=Load()), op=Div(), right=Name(id='columns_num', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='start', ctx=Store())], value=IfExp(test=Compare(left=Name(id='start', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Name(id='start', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='end', ctx=Store())], value=IfExp(test=Compare(left=Name(id='end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Name(id='end', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='figsize', ctx=Store())], value=Tuple(elts=[BinOp(left=Subscript(value=Name(id='figsize', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Mult(), right=Name(id='columns_num', ctx=Load())), BinOp(left=Subscript(value=Name(id='figsize', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Mult(), right=Name(id='rows_num', ctx=Load()))], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='subplots', ctx=Load()), args=[Name(id='rows_num', ctx=Load()), Name(id='columns_num', ctx=Load())], keywords=[keyword(arg='figsize', value=Name(id='figsize', ctx=Load())), keyword(arg='squeeze', value=Constant(value=False))])), Assign(targets=[Name(id='ax', ctx=Store())], value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='ravel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='rnd_state', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='RandomState', ctx=Load()), args=[Name(id='seed', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='rnd_state', ctx=Load()), attr='choice', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[keyword(arg='size', value=Name(id='k', ctx=Load())), keyword(arg='replace', value=Constant(value=False))])], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='df_slice', ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Name(id='segment', ctx=Load()), Name(id='column', ctx=Load())], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='df_slice', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='df_slice', ctx=Load()), attr='values', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='to_flatten', args=arguments(posonlyargs=[], args=[arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return pandas DataFrame with flatten index.\n\n        Parameters\n        ----------\n        df:\n            DataFrame in ETNA format.\n\n        Returns\n        -------\n        pd.DataFrame:\n            dataframe with TSDataset data\n\n        Examples\n        --------\n        >>> from etna.datasets import generate_const_df\n        >>> df = generate_const_df(\n        ...    periods=30, start_time="2021-06-01",\n        ...    n_segments=2, scale=1\n        ... )\n        >>> df.head(5)\n            timestamp    segment  target\n        0  2021-06-01  segment_0    1.00\n        1  2021-06-02  segment_0    1.00\n        2  2021-06-03  segment_0    1.00\n        3  2021-06-04  segment_0    1.00\n        4  2021-06-05  segment_0    1.00\n        >>> df_ts_format = TSDataset.to_dataset(df)\n        >>> TSDataset.to_flatten(df_ts_format).head(5)\n           timestamp  target    segment\n        0 2021-06-01     1.0  segment_0\n        1 2021-06-02     1.0  segment_0\n        2 2021-06-03     1.0  segment_0\n        3 2021-06-04     1.0  segment_0\n        4 2021-06-05     1.0  segment_0\n        ')), Assign(targets=[Name(id='dtypes', ctx=Store())], value=Attribute(value=Name(id='df', ctx=Load()), attr='dtypes', ctx=Load())), Assign(targets=[Name(id='category_columns', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='dtypes', ctx=Load()), slice=Compare(left=Name(id='dtypes', ctx=Load()), ops=[Eq()], comparators=[Constant(value='category')]), ctx=Load()), attr='index', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value=1)], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df_dict', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Subscript(value=Name(id='df_dict', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='tile', ctx=Load()), args=[Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='column', ctx=Store()), iter=Name(id='columns', ctx=Load()), body=[Assign(targets=[Name(id='df_cur', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='column', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='column', ctx=Load()), ops=[In()], comparators=[Name(id='category_columns', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='df_dict', ctx=Load()), slice=Name(id='column', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='api', ctx=Load()), attr='types', ctx=Load()), attr='union_categoricals', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='df_cur', ctx=Load()), slice=Name(id='col', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='col', ctx=Store()), iter=Attribute(value=Name(id='df_cur', ctx=Load()), attr='columns', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[Assign(targets=[Name(id='stacked', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='df_cur', ctx=Load()), attr='values', ctx=Load()), attr='T', ctx=Load()), attr='ravel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_dict', ctx=Load()), slice=Name(id='column', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[Name(id='stacked', ctx=Load())], keywords=[keyword(arg='dtype', value=Subscript(value=Attribute(value=Name(id='df_cur', ctx=Load()), attr='dtypes', ctx=Load()), slice=Constant(value=0), ctx=Load()))]))])], orelse=[]), Assign(targets=[Subscript(value=Name(id='df_dict', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='repeat', ctx=Load()), args=[Name(id='segments', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='df_flat', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='df_dict', ctx=Load())], keywords=[])), Return(value=Name(id='df_flat', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='to_pandas', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='flatten', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Return pandas DataFrame.\n\n        Parameters\n        ----------\n        flatten:\n            * If False, return pd.DataFrame with multiindex\n\n            * If True, return with flatten index\n\n        Returns\n        -------\n        pd.DataFrame\n            dataframe with TSDataset data\n\n        Examples\n        --------\n        >>> from etna.datasets import generate_const_df\n        >>> df = generate_const_df(\n        ...    periods=30, start_time="2021-06-01",\n        ...    n_segments=2, scale=1\n        ... )\n        >>> df.head(5)\n            timestamp    segment  target\n        0  2021-06-01  segment_0    1.00\n        1  2021-06-02  segment_0    1.00\n        2  2021-06-03  segment_0    1.00\n        3  2021-06-04  segment_0    1.00\n        4  2021-06-05  segment_0    1.00\n        >>> df_ts_format = TSDataset.to_dataset(df)\n        >>> ts = TSDataset(df_ts_format, "D")\n        >>> ts.to_pandas(True).head(5)\n           timestamp  target    segment\n        0 2021-06-01     1.0  segment_0\n        1 2021-06-02     1.0  segment_0\n        2 2021-06-03     1.0  segment_0\n        3 2021-06-04     1.0  segment_0\n        4 2021-06-05     1.0  segment_0\n        >>> ts.to_pandas(False).head(5)\n        segment    segment_0 segment_1\n        feature       target    target\n        timestamp\n        2021-06-01      1.00      1.00\n        2021-06-02      1.00      1.00\n        2021-06-03      1.00      1.00\n        2021-06-04      1.00      1.00\n        2021-06-05      1.00      1.00\n        ')), If(test=UnaryOp(op=Not(), operand=Name(id='flatten', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='to_flatten', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='to_dataset', args=arguments(posonlyargs=[], args=[arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert pandas dataframe to ETNA Dataset format.\n\n        Columns "timestamp" and "segment" are required.\n\n        Parameters\n        ----------\n        df:\n            DataFrame with columns ["timestamp", "segment"]. Other columns considered features.\n\n        Notes\n        -----\n        During conversion segment is casted to string type.\n\n        Examples\n        --------\n        >>> from etna.datasets import generate_const_df\n        >>> df = generate_const_df(\n        ...    periods=30, start_time="2021-06-01",\n        ...    n_segments=2, scale=1\n        ... )\n        >>> df.head(5)\n           timestamp    segment  target\n        0 2021-06-01  segment_0    1.00\n        1 2021-06-02  segment_0    1.00\n        2 2021-06-03  segment_0    1.00\n        3 2021-06-04  segment_0    1.00\n        4 2021-06-05  segment_0    1.00\n        >>> df_ts_format = TSDataset.to_dataset(df)\n        >>> df_ts_format.head(5)\n        segment    segment_0 segment_1\n        feature       target    target\n        timestamp\n        2021-06-01      1.00      1.00\n        2021-06-02      1.00      1.00\n        2021-06-03      1.00      1.00\n        2021-06-04      1.00      1.00\n        2021-06-05      1.00      1.00\n\n        >>> df_regressors = pd.DataFrame({\n        ...     "timestamp": pd.date_range("2021-01-01", periods=10),\n        ...     "regressor_1": np.arange(10), "regressor_2": np.arange(10) + 5,\n        ...     "segment": ["segment_0"]*10\n        ... })\n        >>> TSDataset.to_dataset(df_regressors).head(5)\n        segment      segment_0\n        feature    regressor_1 regressor_2\n        timestamp\n        2021-01-01           0           5\n        2021-01-02           1           6\n        2021-01-03           2           7\n        2021-01-04           3           8\n        2021-01-05           4           9\n        ')), Assign(targets=[Name(id='df_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Subscript(value=Name(id='df_copy', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[Subscript(value=Name(id='df_copy', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_copy', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df_copy', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='feature_columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='df_copy', ctx=Load()), attr='columns', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='feature_columns', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='timestamp')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='feature_columns', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='segment')], keywords=[])), Assign(targets=[Name(id='df_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_copy', ctx=Load()), attr='pivot', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Constant(value='timestamp')), keyword(arg='columns', value=Constant(value='segment'))])), Assign(targets=[Name(id='df_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_copy', ctx=Load()), attr='reorder_levels', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=0)], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='df_copy', ctx=Load()), attr='columns', ctx=Load()), attr='names', ctx=Store())], value=List(elts=[Constant(value='segment'), Constant(value='feature')], ctx=Load())), Assign(targets=[Name(id='df_copy', ctx=Store())], value=Call(func=Attribute(value=Name(id='df_copy', ctx=Load()), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1)), keyword(arg='level', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()))])), Return(value=Name(id='df_copy', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_find_all_borders', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='train_start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='train_end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_size', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Find borders for train_test_split if some values wasn't specified.")), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='test_end', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_start', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_size', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='test_size, test_start and test_end cannot be applied at the same time. test_size will be ignored')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='test_end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='test_start', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_size', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='test_start_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='test_start', ctx=Load())], keywords=[])), If(test=Compare(left=BinOp(left=Name(id='test_start_idx', ctx=Load()), op=Add(), right=Name(id='test_size', ctx=Load())), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='test_size is '), FormattedValue(value=Name(id='test_size', ctx=Load()), conversion=-1), Constant(value=', but only '), FormattedValue(value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='test_start_idx', ctx=Load())), conversion=-1), Constant(value=' available with your test_start')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='test_end_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='test_start_idx', ctx=Load()), op=Add(), right=Name(id='test_size', ctx=Load())), ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='test_size', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='train_end', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='test_start_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='train_end', ctx=Load())], keywords=[])), Assign(targets=[Name(id='test_start', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='test_start_idx', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='test_end_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='test_start_idx', ctx=Load()), op=Add(), right=Name(id='test_size', ctx=Load())), ctx=Load()))], orelse=[Assign(targets=[Name(id='test_end_defined', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]))])])], orelse=[Assign(targets=[Name(id='test_end_defined', ctx=Store())], value=Name(id='test_end', ctx=Load()))]), If(test=Compare(left=Name(id='train_start', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='train_start_defined', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='train_start_defined', ctx=Store())], value=Name(id='train_start', ctx=Load()))]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='train_end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_start', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='test_size', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='At least one of train_end, test_start or test_size should be defined')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='test_size', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='train_end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='test_start_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='test_start', ctx=Load())], keywords=[])), Assign(targets=[Name(id='train_end_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='test_start_idx', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='train_end_defined', ctx=Store())], value=Name(id='train_end', ctx=Load()))]), If(test=Compare(left=Name(id='test_start', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='train_end_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='train_end', ctx=Load())], keywords=[])), Assign(targets=[Name(id='test_start_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='train_end_idx', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='test_start_defined', ctx=Store())], value=Name(id='test_start', ctx=Load()))])], orelse=[If(test=Compare(left=Name(id='test_start', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='test_start_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='test_end_defined', ctx=Load())], keywords=[])), Assign(targets=[Name(id='test_start_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='test_start_idx', ctx=Load()), op=Sub(), right=Name(id='test_size', ctx=Load())), op=Add(), right=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='test_start_defined', ctx=Store())], value=Name(id='test_start', ctx=Load()))]), If(test=Compare(left=Name(id='train_end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='test_start_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='test_start_defined', ctx=Load())], keywords=[])), Assign(targets=[Name(id='train_end_defined', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=BinOp(left=Name(id='test_start_idx', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='train_end_defined', ctx=Store())], value=Name(id='train_end', ctx=Load()))])]), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Name(id='test_start_defined', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Name(id='train_end_defined', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='The beginning of the test goes before the end of the train')], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='train_start_defined', ctx=Load()), Name(id='train_end_defined', ctx=Load()), Name(id='test_start_defined', ctx=Load()), Name(id='test_end_defined', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='TTimestamp', ctx=Load()), Name(id='TTimestamp', ctx=Load()), Name(id='TTimestamp', ctx=Load()), Name(id='TTimestamp', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='train_test_split', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='train_start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='train_end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TTimestamp', ctx=Load()), ctx=Load())), arg(arg='test_size', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Split given df with train-test timestamp indices or size of test set.\n\n        In case of inconsistencies between ``test_size`` and (``test_start``, ``test_end``), ``test_size`` is ignored\n\n        Parameters\n        ----------\n        train_start:\n            start timestamp of new train dataset, if None first timestamp is used\n        train_end:\n            end timestamp of new train dataset, if None previous to ``test_start`` timestamp is used\n        test_start:\n            start timestamp of new test dataset, if None next to ``train_end`` timestamp is used\n        test_end:\n            end timestamp of new test dataset, if None last timestamp is used\n        test_size:\n            number of timestamps to use in test set\n\n        Returns\n        -------\n        train, test:\n            generated datasets\n\n        Examples\n        --------\n        >>> from etna.datasets import generate_ar_df\n        >>> pd.options.display.float_format = \'{:,.2f}\'.format\n        >>> df = generate_ar_df(100, start_time="2021-01-01", n_segments=3)\n        >>> df = TSDataset.to_dataset(df)\n        >>> ts = TSDataset(df, "D")\n        >>> train_ts, test_ts = ts.train_test_split(\n        ...     train_start="2021-01-01", train_end="2021-02-01",\n        ...     test_start="2021-02-02", test_end="2021-02-07"\n        ... )\n        >>> train_ts.df.tail(5)\n        segment    segment_0 segment_1 segment_2\n        feature       target    target    target\n        timestamp\n        2021-01-28     -2.06      2.03      1.51\n        2021-01-29     -2.33      0.83      0.81\n        2021-01-30     -1.80      1.69      0.61\n        2021-01-31     -2.49      1.51      0.85\n        2021-02-01     -2.89      0.91      1.06\n        >>> test_ts.df.head(5)\n        segment    segment_0 segment_1 segment_2\n        feature       target    target    target\n        timestamp\n        2021-02-02     -3.57     -0.32      1.72\n        2021-02-03     -4.42      0.23      3.51\n        2021-02-04     -5.09      1.02      3.39\n        2021-02-05     -5.10      0.40      2.15\n        2021-02-06     -6.22      0.92      0.97\n        ')), Assign(targets=[Tuple(elts=[Name(id='train_start_defined', ctx=Store()), Name(id='train_end_defined', ctx=Store()), Name(id='test_start_defined', ctx=Store()), Name(id='test_end_defined', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_all_borders', ctx=Load()), args=[Name(id='train_start', ctx=Load()), Name(id='train_end', ctx=Load()), Name(id='test_start', ctx=Load()), Name(id='test_end', ctx=Load()), Name(id='test_size', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Name(id='test_end_defined', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Max timestamp in df is '), FormattedValue(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Name(id='train_start_defined', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Min timestamp in df is '), FormattedValue(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='train_df', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='train_start_defined', ctx=Load()), upper=Name(id='train_end_defined', ctx=Load())), ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='columns', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='train_raw_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), slice=Slice(lower=Name(id='train_start_defined', ctx=Load()), upper=Name(id='train_end_defined', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='train', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='train_df', ctx=Load())), keyword(arg='df_exog', value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='known_future', value=Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='train', ctx=Load()), attr='raw_df', ctx=Store())], value=Name(id='train_raw_df', ctx=Load())), Assign(targets=[Attribute(value=Name(id='train', ctx=Load()), attr='_regressors', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())), Assign(targets=[Name(id='test_df', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), slice=Slice(lower=Name(id='test_start_defined', ctx=Load()), upper=Name(id='test_end_defined', ctx=Load())), ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), attr='columns', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='test_raw_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw_df', ctx=Load()), slice=Slice(lower=Name(id='train_start_defined', ctx=Load()), upper=Name(id='test_end_defined', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='test', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='test_df', ctx=Load())), keyword(arg='df_exog', value=Attribute(value=Name(id='self', ctx=Load()), attr='df_exog', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='known_future', value=Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='test', ctx=Load()), attr='raw_df', ctx=Store())], value=Name(id='test_raw_df', ctx=Load())), Assign(targets=[Attribute(value=Name(id='test', ctx=Load()), attr='_regressors', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())), Return(value=Tuple(elts=[Name(id='train', ctx=Load()), Name(id='test', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value='TSDataset'), Constant(value='TSDataset')], ctx=Load()), ctx=Load())), FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return TSDataset timestamp index.\n\n        Returns\n        -------\n        pd.core.indexes.datetimes.DatetimeIndex\n            timestamp index of TSDataset\n        ')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='core', ctx=Load()), attr='indexes', ctx=Load()), attr='datetimes', ctx=Load()), attr='DatetimeIndex', ctx=Load())), FunctionDef(name='columns', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return columns of ``self.df``.\n\n        Returns\n        -------\n        pd.core.indexes.multi.MultiIndex\n            multiindex of dataframe with target and features.\n        ')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='core', ctx=Load()), attr='indexes', ctx=Load()), attr='multi', ctx=Load()), attr='MultiIndex', ctx=Load())), FunctionDef(name='loc', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return self.df.loc method.\n\n        Returns\n        -------\n        pd.core.indexing._LocIndexer\n            dataframe with self.df.loc[...]\n        ')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='loc', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Attribute(value=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='core', ctx=Load()), attr='indexing', ctx=Load()), attr='_LocIndexer', ctx=Load())), FunctionDef(name='isnull', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return dataframe with flag that means if the correspondent object in ``self.df`` is null.\n\n        Returns\n        -------\n        pd.Dataframe\n            is_null dataframe\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='head', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n_rows', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=5)]), body=[Expr(value=Constant(value='Return the first ``n_rows`` rows.\n\n        Mimics pandas method.\n\n        This function returns the first ``n_rows`` rows for the object based\n        on position. It is useful for quickly testing if your object\n        has the right type of data in it.\n\n        For negative values of ``n_rows``, this function returns all rows except\n        the last ``n_rows`` rows, equivalent to ``df[:-n_rows]``.\n\n        Parameters\n        ----------\n        n_rows:\n            number of rows to select.\n\n        Returns\n        -------\n        pd.DataFrame\n            the first ``n_rows`` rows or 5 by default.\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='head', ctx=Load()), args=[Name(id='n_rows', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='tail', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n_rows', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=5)]), body=[Expr(value=Constant(value='Return the last ``n_rows`` rows.\n\n        Mimics pandas method.\n\n        This function returns last ``n_rows`` rows from the object based on\n        position. It is useful for quickly verifying data, for example,\n        after sorting or appending rows.\n\n        For negative values of ``n_rows``, this function returns all rows except\n        the first `n` rows, equivalent to ``df[n_rows:]``.\n\n        Parameters\n        ----------\n        n_rows:\n            number of rows to select.\n\n        Returns\n        -------\n        pd.DataFrame\n            the last ``n_rows`` rows or 5 by default.\n\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='tail', ctx=Load()), args=[Name(id='n_rows', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_gather_common_data', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Gather information about dataset in general.')), AnnAssign(target=Name(id='common_dict', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='num_segments'), Constant(value='num_exogs'), Constant(value='num_regressors'), Constant(value='num_known_future'), Constant(value='freq')], values=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load())], keywords=[]), Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='difference', ctx=Load()), args=[List(elts=[Constant(value='target')], ctx=Load())], keywords=[]), attr='nunique', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='regressors', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='known_future', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='freq', ctx=Load())]), simple=1), Return(value=Name(id='common_dict', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_gather_segments_data', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='segments', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Gather information about each segment.')), AnnAssign(target=Name(id='segments_dict', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='start_timestamp'), Constant(value='end_timestamp'), Constant(value='length'), Constant(value='num_missing')], values=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())]), simple=1), For(target=Name(id='segment', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_series', ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='first_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='segment_series', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='last_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='segment_series', ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='segment_series', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='segment_series', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Name(id='first_index', ctx=Load()), upper=Name(id='last_index', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='segments_dict', ctx=Load()), slice=Constant(value='start_timestamp'), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='first_index', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='segments_dict', ctx=Load()), slice=Constant(value='end_timestamp'), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='last_index', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='segments_dict', ctx=Load()), slice=Constant(value='length'), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='segment_series', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='segments_dict', ctx=Load()), slice=Constant(value='num_missing'), ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='isna', ctx=Load()), args=[Name(id='segment_series', ctx=Load())], keywords=[]), attr='sum', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='segments_dict', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='describe', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Overview of the dataset that returns a DataFrame.\n\n        Method describes dataset in segment-wise fashion. Description columns:\n\n        * start_timestamp: beginning of the segment, missing values in the beginning are ignored\n\n        * end_timestamp: ending of the segment, missing values in the ending are ignored\n\n        * length: length according to ``start_timestamp`` and ``end_timestamp``\n\n        * num_missing: number of missing variables between ``start_timestamp`` and ``end_timestamp``\n\n        * num_segments: total number of segments, common for all segments\n\n        * num_exogs: number of exogenous features, common for all segments\n\n        * num_regressors: number of exogenous factors, that are regressors, common for all segments\n\n        * num_known_future: number of regressors, that are known since creation, common for all segments\n\n        * freq: frequency of the series, common for all segments\n\n        Parameters\n        ----------\n        segments:\n            segments to show in overview, if None all segments are shown.\n\n        Returns\n        -------\n        result_table: pd.DataFrame\n            table with results of the overview\n\n        Examples\n        --------\n        >>> from etna.datasets import generate_const_df\n        >>> pd.options.display.expand_frame_repr = False\n        >>> df = generate_const_df(\n        ...    periods=30, start_time="2021-06-01",\n        ...    n_segments=2, scale=1\n        ... )\n        >>> df_ts_format = TSDataset.to_dataset(df)\n        >>> regressors_timestamp = pd.date_range(start="2021-06-01", periods=50)\n        >>> df_regressors_1 = pd.DataFrame(\n        ...     {"timestamp": regressors_timestamp, "regressor_1": 1, "segment": "segment_0"}\n        ... )\n        >>> df_regressors_2 = pd.DataFrame(\n        ...     {"timestamp": regressors_timestamp, "regressor_1": 2, "segment": "segment_1"}\n        ... )\n        >>> df_exog = pd.concat([df_regressors_1, df_regressors_2], ignore_index=True)\n        >>> df_exog_ts_format = TSDataset.to_dataset(df_exog)\n        >>> ts = TSDataset(df_ts_format, df_exog=df_exog_ts_format, freq="D", known_future="all")\n        >>> ts.describe()\n                  start_timestamp end_timestamp  length  num_missing  num_segments  num_exogs  num_regressors  num_known_future freq\n        segments\n        segment_0      2021-06-01    2021-06-30      30            0             2          1               1                 1    D\n        segment_1      2021-06-01    2021-06-30      30            0             2          1               1                 1    D\n        ')), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='common_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_common_data', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='segments_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_segments_data', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='segments_dict', ctx=Load()), slice=Constant(value='num_segments'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='num_segments'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='segments_dict', ctx=Load()), slice=Constant(value='num_exogs'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='num_exogs'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='segments_dict', ctx=Load()), slice=Constant(value='num_regressors'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='num_regressors'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='segments_dict', ctx=Load()), slice=Constant(value='num_known_future'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='num_known_future'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='segments_dict', ctx=Load()), slice=Constant(value='freq'), ctx=Store())], value=BinOp(left=List(elts=[Subscript(value=Name(id='common_dict', ctx=Load()), slice=Constant(value='freq'), ctx=Load())], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='result_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='segments_dict', ctx=Load())], keywords=[keyword(arg='index', value=Name(id='segments', ctx=Load()))])), Assign(targets=[Name(id='columns_order', ctx=Store())], value=List(elts=[Constant(value='start_timestamp'), Constant(value='end_timestamp'), Constant(value='length'), Constant(value='num_missing'), Constant(value='num_segments'), Constant(value='num_exogs'), Constant(value='num_regressors'), Constant(value='num_known_future'), Constant(value='freq')], ctx=Load())), Assign(targets=[Name(id='result_df', ctx=Store())], value=Subscript(value=Name(id='result_df', ctx=Load()), slice=Name(id='columns_order', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='result_df', ctx=Load()), attr='index', ctx=Load()), attr='name', ctx=Store())], value=Constant(value='segments')), Return(value=Name(id='result_df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='info', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Overview of the dataset that prints the result.\n\n        Method describes dataset in segment-wise fashion.\n\n        Information about dataset in general:\n\n        * num_segments: total number of segments\n\n        * num_exogs: number of exogenous features\n\n        * num_regressors: number of exogenous factors, that are regressors\n\n        * num_known_future: number of regressors, that are known since creation\n\n        * freq: frequency of the dataset\n\n        Information about individual segments:\n\n        * start_timestamp: beginning of the segment, missing values in the beginning are ignored\n\n        * end_timestamp: ending of the segment, missing values in the ending are ignored\n\n        * length: length according to ``start_timestamp`` and ``end_timestamp``\n\n        * num_missing: number of missing variables between ``start_timestamp`` and ``end_timestamp``\n\n        Parameters\n        ----------\n        segments:\n            segments to show in overview, if None all segments are shown.\n\n        Examples\n        --------\n        >>> from etna.datasets import generate_const_df\n        >>> df = generate_const_df(\n        ...    periods=30, start_time="2021-06-01",\n        ...    n_segments=2, scale=1\n        ... )\n        >>> df_ts_format = TSDataset.to_dataset(df)\n        >>> regressors_timestamp = pd.date_range(start="2021-06-01", periods=50)\n        >>> df_regressors_1 = pd.DataFrame(\n        ...     {"timestamp": regressors_timestamp, "regressor_1": 1, "segment": "segment_0"}\n        ... )\n        >>> df_regressors_2 = pd.DataFrame(\n        ...     {"timestamp": regressors_timestamp, "regressor_1": 2, "segment": "segment_1"}\n        ... )\n        >>> df_exog = pd.concat([df_regressors_1, df_regressors_2], ignore_index=True)\n        >>> df_exog_ts_format = TSDataset.to_dataset(df_exog)\n        >>> ts = TSDataset(df_ts_format, df_exog=df_exog_ts_format, freq="D", known_future="all")\n        >>> ts.info()\n        <class \'etna.datasets.TSDataset\'>\n        num_segments: 2\n        num_exogs: 1\n        num_regressors: 1\n        num_known_future: 1\n        freq: D\n                  start_timestamp end_timestamp  length  num_missing\n        segments\n        segment_0      2021-06-01    2021-06-30      30            0\n        segment_1      2021-06-01    2021-06-30      30            0\n        ')), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value="<class 'etna.datasets.TSDataset'>")], keywords=[])), Assign(targets=[Name(id='common_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_common_data', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='common_dict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='segments_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gather_segments_data', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='segments_dict', ctx=Load())], keywords=[keyword(arg='index', value=Name(id='segments', ctx=Load()))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), attr='name', ctx=Store())], value=Constant(value='segments')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='option_context', ctx=Load()), args=[Constant(value='display.width'), Constant(value=None)], keywords=[]))], body=[AugAssign(target=Name(id='lines', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='to_string', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]))]), Assign(targets=[Name(id='result_string', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='result_string', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='to_torch_dataset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='make_samples', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='dropna', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Convert the TSDataset to a :py:class:`torch.Dataset`.\n\n        Parameters\n        ----------\n        make_samples:\n            function that takes per segment DataFrame and returns iterabale of samples\n        dropna:\n            if ``True``, missing rows are dropped\n\n        Returns\n        -------\n        :\n            :py:class:`torch.Dataset` with with train or test samples to infer on\n        ')), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[keyword(arg='flatten', value=Constant(value=True))])), If(test=Name(id='dropna', ctx=Load()), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ts_segments', ctx=Store())], value=ListComp(elt=Name(id='df_segment', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='df_segment', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='groupby', ctx=Load()), args=[Constant(value='segment')], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='ts_samples', ctx=Store())], value=ListComp(elt=Name(id='samples', ctx=Load()), generators=[comprehension(target=Name(id='df_segment', ctx=Store()), iter=Name(id='ts_segments', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='samples', ctx=Store()), iter=Call(func=Name(id='make_samples', ctx=Load()), args=[Name(id='df_segment', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='_TorchDataset', ctx=Load()), args=[], keywords=[keyword(arg='ts_samples', value=Name(id='ts_samples', ctx=Load()))]))], decorator_list=[], returns=Constant(value='Dataset'))], decorator_list=[])], type_ignores=[])