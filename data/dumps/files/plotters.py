Module(body=[Import(names=[alias(name='itertools')]), Import(names=[alias(name='math')]), Import(names=[alias(name='warnings')]), ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='functools', names=[alias(name='singledispatch')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='holidays', asname='holidays_lib')]), Import(names=[alias(name='matplotlib.pyplot', asname='plt')]), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='plotly')]), Import(names=[alias(name='plotly.graph_objects', asname='go')]), Import(names=[alias(name='seaborn', asname='sns')]), ImportFrom(module='matplotlib.lines', names=[alias(name='Line2D')], level=0), ImportFrom(module='ruptures.base', names=[alias(name='BaseCost')], level=0), ImportFrom(module='ruptures.base', names=[alias(name='BaseEstimator')], level=0), ImportFrom(module='ruptures.exceptions', names=[alias(name='BadSegmentationParameters')], level=0), ImportFrom(module='scipy.signal', names=[alias(name='periodogram')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='RelevanceTable')], level=0), ImportFrom(module='etna.analysis.feature_relevance', names=[alias(name='StatisticsRelevanceTable')], level=0), ImportFrom(module='etna.analysis.feature_selection', names=[alias(name='AGGREGATION_FN')], level=0), ImportFrom(module='etna.analysis.feature_selection', names=[alias(name='AggregationMode')], level=0), ImportFrom(module='etna.analysis.utils', names=[alias(name='prepare_axes')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='Transform')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='TimeSeriesImputerTransform')], level=0), ImportFrom(module='etna.transforms.decomposition.change_points_trend', names=[alias(name='ChangePointsTrendTransform')], level=0), ImportFrom(module='etna.transforms.decomposition.detrend', names=[alias(name='LinearTrendTransform')], level=0), ImportFrom(module='etna.transforms.decomposition.detrend', names=[alias(name='TheilSenTrendTransform')], level=0), ImportFrom(module='etna.transforms.decomposition.stl', names=[alias(name='STLTransform')], level=0)], orelse=[]), FunctionDef(name='_get_borders_ts', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get start and end parameters according to given TSDataset.')), If(test=Compare(left=Name(id='start', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='start_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='start', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='start_idx', ctx=Store())], value=Constant(value=0))]), If(test=Compare(left=Name(id='end', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='end_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), attr='get_loc', ctx=Load()), args=[Name(id='end', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='end_idx', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)))]), If(test=Compare(left=Name(id='start_idx', ctx=Load()), ops=[GtE()], comparators=[Name(id='end_idx', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Parameter 'end' must be greater than 'start'!")], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Subscript(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=Name(id='start_idx', ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='index', ctx=Load()), slice=Name(id='end_idx', ctx=Load()), ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_get_existing_quantiles', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get quantiles that are present inside the TSDataset.')), Assign(targets=[Name(id='cols', ctx=Store())], value=ListComp(elt=Name(id='col', ctx=Load()), generators=[comprehension(target=Name(id='col', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='col', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='target_0.')], keywords=[])], is_async=0)])), Assign(targets=[Name(id='existing_quantiles', ctx=Store())], value=SetComp(elt=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='col', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Constant(value='target_')], keywords=[])), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='col', ctx=Store()), iter=Name(id='cols', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='existing_quantiles', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), FunctionDef(name='_select_quantiles', args=arguments(posonlyargs=[], args=[arg(arg='forecast_results', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='TSDataset')], ctx=Load()), ctx=Load())), arg(arg='quantiles', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Select quantiles from the forecast results.\n\n    Selected quantiles exist in each forecast.\n    ')), Assign(targets=[Name(id='intersection_quantiles_set', ctx=Store())], value=Call(func=Attribute(value=Name(id='set', ctx=Load()), attr='intersection', ctx=Load()), args=[Starred(value=ListComp(elt=Call(func=Name(id='_get_existing_quantiles', ctx=Load()), args=[Name(id='forecast', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='forecast', ctx=Store()), iter=Call(func=Attribute(value=Name(id='forecast_results', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]), ctx=Load())], keywords=[])), Assign(targets=[Name(id='intersection_quantiles', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='intersection_quantiles_set', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='quantiles', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='selected_quantiles', ctx=Store())], value=Name(id='intersection_quantiles', ctx=Load()))], orelse=[Assign(targets=[Name(id='selected_quantiles', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='quantiles', ctx=Load())], keywords=[]), op=BitAnd(), right=Name(id='intersection_quantiles_set', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='non_existent', ctx=Store())], value=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='quantiles', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='intersection_quantiles_set', ctx=Load()))), If(test=Name(id='non_existent', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Quantiles '), FormattedValue(value=Name(id='non_existent', ctx=Load()), conversion=-1), Constant(value=' do not exist in each forecast dataset. They will be dropped.')])], keywords=[]))], orelse=[])]), Return(value=Name(id='selected_quantiles', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), FunctionDef(name='_prepare_forecast_results', args=arguments(posonlyargs=[], args=[arg(arg='forecast_ts', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='TSDataset'), Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='TSDataset'), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='TSDataset')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Prepare dictionary with forecasts results.')), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='forecast_ts', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[]), body=[Return(value=Dict(keys=[Constant(value='1')], values=[Name(id='forecast_ts', ctx=Load())]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='forecast_ts', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='forecast_ts', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])]), body=[Return(value=DictComp(key=Call(func=Name(id='str', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), value=Name(id='forecast', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='forecast', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='forecast_ts', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='forecast_ts', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='forecast_ts', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])]), body=[Return(value=Name(id='forecast_ts', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Unknown type of `forecast_ts`')], keywords=[]))])])])], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='TSDataset')], ctx=Load()), ctx=Load())), FunctionDef(name='plot_forecast', args=arguments(posonlyargs=[], args=[arg(arg='forecast_ts', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='TSDataset'), Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='TSDataset'), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='TSDataset')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='test_ts', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='TSDataset'), ctx=Load())), arg(arg='train_ts', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='TSDataset'), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='n_train_samples', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='prediction_intervals', annotation=Name(id='bool', ctx=Load())), arg(arg='quantiles', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load()), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value="\n    Plot of prediction for forecast pipeline.\n\n    Parameters\n    ----------\n    forecast_ts:\n        there are several options:\n\n        #. Forecasted TSDataset with timeseries data, single-forecast mode\n\n        #. List of forecasted TSDatasets, multi-forecast mode\n\n        #. Dictionary with forecasted TSDatasets, multi-forecast mode\n\n    test_ts:\n        TSDataset with timeseries data\n    train_ts:\n        TSDataset with timeseries data\n    segments:\n        segments to plot; if not given plot all the segments from ``forecast_df``\n    n_train_samples:\n        length of history of train to plot\n    columns_num:\n        number of graphics columns\n    figsize:\n        size of the figure per subplot with one segment in inches\n    prediction_intervals:\n        if True prediction intervals will be drawn\n    quantiles:\n        List of quantiles to draw, if isn't set then quantiles from a given dataset will be used.\n        In multi-forecast mode, only quantiles present in each forecast will be used.\n\n    Raises\n    ------\n    ValueError:\n        if the format of ``forecast_ts`` is unknown\n    ")), Assign(targets=[Name(id='forecast_results', ctx=Store())], value=Call(func=Name(id='_prepare_forecast_results', ctx=Load()), args=[Name(id='forecast_ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='num_forecasts', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='forecast_results', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='unique_segments', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='forecast', ctx=Store()), iter=Call(func=Attribute(value=Name(id='forecast_results', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='unique_segments', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='forecast', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='unique_segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), If(test=Name(id='prediction_intervals', ctx=Load()), body=[Assign(targets=[Name(id='quantiles', ctx=Store())], value=Call(func=Name(id='_select_quantiles', ctx=Load()), args=[Name(id='forecast_results', ctx=Load()), Name(id='quantiles', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='train_ts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='train_ts', ctx=Load()), attr='df', ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='by', value=Constant(value='timestamp')), keyword(arg='inplace', value=Constant(value=True))]))], orelse=[]), If(test=Compare(left=Name(id='test_ts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='test_ts', ctx=Load()), attr='df', ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='by', value=Constant(value='timestamp')), keyword(arg='inplace', value=Constant(value=True))]))], orelse=[]), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='train_ts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segment_train_df', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='train_ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='segment_train_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='columns', value=List(elts=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], ctx=Load()))]))]), If(test=Compare(left=Name(id='test_ts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segment_test_df', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='test_ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='segment_test_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='columns', value=List(elts=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], ctx=Load()))]))]), If(test=Compare(left=Name(id='n_train_samples', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Name(id='segment_train_df', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='n_train_samples', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Subscript(value=Name(id='segment_train_df', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='n_train_samples', ctx=Load()))), ctx=Load()))], orelse=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='columns', value=List(elts=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], ctx=Load()))]))])]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='train_ts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='n_train_samples', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='plot_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Attribute(value=Name(id='plot_df', ctx=Load()), attr='target', ctx=Load()), attr='values', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='train'))]))], orelse=[]), If(test=Compare(left=Name(id='test_ts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_test_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Attribute(value=Name(id='segment_test_df', ctx=Load()), attr='target', ctx=Load()), attr='values', ctx=Load())], keywords=[keyword(arg='color', value=Constant(value='purple')), keyword(arg='label', value=Constant(value='test'))]))], orelse=[]), Assign(targets=[Name(id='quantile_prefix', ctx=Store())], value=Constant(value='target_')), For(target=Tuple(elts=[Name(id='forecast_name', ctx=Store()), Name(id='forecast', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='forecast_results', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='legend_prefix', ctx=Store())], value=IfExp(test=Compare(left=Name(id='num_forecasts', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=JoinedStr(values=[FormattedValue(value=Name(id='forecast_name', ctx=Load()), conversion=-1), Constant(value=': ')]), orelse=Constant(value=''))), Assign(targets=[Name(id='segment_forecast_df', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='by', value=Constant(value='timestamp'))])), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='target', ctx=Load()), attr='values', ctx=Load())], keywords=[keyword(arg='linewidth', value=Constant(value=1)), keyword(arg='label', value=JoinedStr(values=[FormattedValue(value=Name(id='legend_prefix', ctx=Load()), conversion=-1), Constant(value='forecast')]))])), Assign(targets=[Name(id='forecast_color', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='get_color', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='prediction_intervals', ctx=Load()), Compare(left=Name(id='quantiles', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='alpha', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='linspace', ctx=Load()), args=[Constant(value=0), BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2)), BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='quantiles', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2)), op=Add(), right=Constant(value=2))], keywords=[]), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), For(target=Name(id='quantile_idx', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='quantiles', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))], keywords=[]), body=[Assign(targets=[Name(id='low_quantile', ctx=Store())], value=Subscript(value=Name(id='quantiles', ctx=Load()), slice=Name(id='quantile_idx', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='high_quantile', ctx=Store())], value=Subscript(value=Name(id='quantiles', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='quantile_idx', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='values_low', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id='quantile_prefix', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='low_quantile', ctx=Load()), conversion=-1)]), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='values_high', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id='quantile_prefix', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='high_quantile', ctx=Load()), conversion=-1)]), ctx=Load()), attr='values', ctx=Load())), If(test=Compare(left=Name(id='quantile_idx', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='quantiles', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2)), op=Sub(), right=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='fill_between', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Name(id='values_low', ctx=Load()), Name(id='values_high', ctx=Load())], keywords=[keyword(arg='facecolor', value=Name(id='forecast_color', ctx=Load())), keyword(arg='alpha', value=Subscript(value=Name(id='alpha', ctx=Load()), slice=Name(id='quantile_idx', ctx=Load()), ctx=Load())), keyword(arg='label', value=JoinedStr(values=[FormattedValue(value=Name(id='legend_prefix', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='low_quantile', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Name(id='high_quantile', ctx=Load()), conversion=-1)]))]))], orelse=[Assign(targets=[Name(id='low_next_quantile', ctx=Store())], value=Subscript(value=Name(id='quantiles', ctx=Load()), slice=BinOp(left=Name(id='quantile_idx', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='high_prev_quantile', ctx=Store())], value=Subscript(value=Name(id='quantiles', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='quantile_idx', ctx=Load())), op=Sub(), right=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='values_next', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id='quantile_prefix', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='low_next_quantile', ctx=Load()), conversion=-1)]), ctx=Load()), attr='values', ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='fill_between', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Name(id='values_low', ctx=Load()), Name(id='values_next', ctx=Load())], keywords=[keyword(arg='facecolor', value=Name(id='forecast_color', ctx=Load())), keyword(arg='alpha', value=Subscript(value=Name(id='alpha', ctx=Load()), slice=Name(id='quantile_idx', ctx=Load()), ctx=Load())), keyword(arg='label', value=JoinedStr(values=[FormattedValue(value=Name(id='legend_prefix', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='low_quantile', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Name(id='high_quantile', ctx=Load()), conversion=-1)]))])), Assign(targets=[Name(id='values_prev', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id='quantile_prefix', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='high_prev_quantile', ctx=Load()), conversion=-1)]), ctx=Load()), attr='values', ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='fill_between', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Name(id='values_high', ctx=Load()), Name(id='values_prev', ctx=Load())], keywords=[keyword(arg='facecolor', value=Name(id='forecast_color', ctx=Load())), keyword(arg='alpha', value=Subscript(value=Name(id='alpha', ctx=Load()), slice=Name(id='quantile_idx', ctx=Load()), ctx=Load()))]))])], orelse=[]), If(test=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='quantiles', ctx=Load())], keywords=[]), op=Mod(), right=Constant(value=2)), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='remaining_quantile', ctx=Store())], value=Subscript(value=Name(id='quantiles', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='quantiles', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='values', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id='quantile_prefix', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='remaining_quantile', ctx=Load()), conversion=-1)]), ctx=Load()), attr='values', ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Name(id='values', ctx=Load()), Constant(value='--')], keywords=[keyword(arg='color', value=Name(id='forecast_color', ctx=Load())), keyword(arg='label', value=JoinedStr(values=[FormattedValue(value=Name(id='legend_prefix', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='remaining_quantile', ctx=Load()), conversion=-1)]))]))], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[keyword(arg='loc', value=Constant(value='upper left'))]))], orelse=[])], decorator_list=[]), FunctionDef(name='_validate_intersecting_segments', args=arguments(posonlyargs=[], args=[arg(arg='fold_numbers', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Validate if segments aren't intersecting.")), Assign(targets=[Name(id='fold_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='fold_number', ctx=Store()), iter=Call(func=Attribute(value=Name(id='fold_numbers', ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='fold_start', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='fold_numbers', ctx=Load()), slice=Compare(left=Name(id='fold_numbers', ctx=Load()), ops=[Eq()], comparators=[Name(id='fold_number', ctx=Load())]), ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fold_end', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='fold_numbers', ctx=Load()), slice=Compare(left=Name(id='fold_numbers', ctx=Load()), ops=[Eq()], comparators=[Name(id='fold_number', ctx=Load())]), ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='fold_info', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='fold_start'), Constant(value='fold_end')], values=[Name(id='fold_start', ctx=Load()), Name(id='fold_end', ctx=Load())])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='fold_info', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='fold_start'), ctx=Load())))])), For(target=Tuple(elts=[Name(id='fold_info_1', ctx=Store()), Name(id='fold_info_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='fold_info', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Subscript(value=Name(id='fold_info', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='fold_info_2', ctx=Load()), slice=Constant(value='fold_start'), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='fold_info_1', ctx=Load()), slice=Constant(value='fold_end'), ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Folds are intersecting')], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='plot_backtest', args=arguments(posonlyargs=[], args=[arg(arg='forecast_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='history_len', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=2), Constant(value=0), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='Plot targets and forecast for backtest pipeline.\n\n    This function doesn\'t support intersecting folds.\n\n    Parameters\n    ----------\n    forecast_df:\n        forecasted dataframe with timeseries data\n    ts:\n        dataframe of timeseries that was used for backtest\n    segments:\n        segments to plot\n    columns_num:\n        number of subplots columns\n    history_len:\n        length of pre-backtest history to plot, if value is "all" then plot all the history\n    figsize:\n        size of the figure per subplot with one segment in inches\n\n    Raises\n    ------\n    ValueError:\n        if ``history_len`` is negative\n    ValueError:\n        if folds are intersecting\n    ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='history_len', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='all')]), Compare(left=Name(id='history_len', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Parameter history_len should be non-negative or 'all'")], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='fold_numbers', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='forecast_df', ctx=Load()), slice=Subscript(value=Name(id='segments', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), slice=Constant(value='fold_number'), ctx=Load())), Expr(value=Call(func=Name(id='_validate_intersecting_segments', ctx=Load()), args=[Name(id='fold_numbers', ctx=Load())], keywords=[])), Assign(targets=[Name(id='folds', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='fold_numbers', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load())), Assign(targets=[Name(id='forecast_start', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='history_df', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), ops=[Lt()], comparators=[Name(id='forecast_start', ctx=Load())]), ctx=Load())), Assign(targets=[Name(id='backtest_df', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), ops=[GtE()], comparators=[Name(id='forecast_start', ctx=Load())]), ctx=Load())), Assign(targets=[Name(id='freq_timedelta', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=0), ctx=Load()))), Assign(targets=[Name(id='default_colors', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='plt', ctx=Load()), attr='rcParams', ctx=Load()), slice=Constant(value='axes.prop_cycle'), ctx=Load()), attr='by_key', ctx=Load()), args=[], keywords=[]), slice=Constant(value='color'), ctx=Load())), Assign(targets=[Name(id='color_cycle', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='cycle', ctx=Load()), args=[Name(id='default_colors', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines_colors', ctx=Store())], value=DictComp(key=Name(id='line_name', ctx=Load()), value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='color_cycle', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='line_name', ctx=Store()), iter=List(elts=[Constant(value='history'), Constant(value='test'), Constant(value='forecast')], ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_backtest_df', ctx=Store())], value=Subscript(value=Name(id='backtest_df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_history_df', ctx=Store())], value=Subscript(value=Name(id='history_df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_forecast_df', ctx=Store())], value=Subscript(value=Name(id='forecast_df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='is_full_folds', ctx=Store())], value=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='segment_backtest_df', ctx=Load()), attr='index', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='index', ctx=Load())], keywords=[])])), If(test=Compare(left=Name(id='history_len', ctx=Load()), ops=[Eq()], comparators=[Constant(value='all')]), body=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Name(id='segment_history_df', ctx=Load()), Name(id='segment_backtest_df', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='history_len', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Call(func=Attribute(value=Name(id='segment_history_df', ctx=Load()), attr='tail', ctx=Load()), args=[Name(id='history_len', ctx=Load())], keywords=[]), Name(id='segment_backtest_df', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Name(id='segment_backtest_df', ctx=Load()))])]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='plot_df', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='plot_df', ctx=Load()), attr='target', ctx=Load())], keywords=[keyword(arg='color', value=Subscript(value=Name(id='lines_colors', ctx=Load()), slice=Constant(value='history'), ctx=Load()))])), For(target=Name(id='fold_number', ctx=Store()), iter=Name(id='folds', ctx=Load()), body=[Assign(targets=[Name(id='start_fold', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='fold_numbers', ctx=Load()), slice=Compare(left=Name(id='fold_numbers', ctx=Load()), ops=[Eq()], comparators=[Name(id='fold_number', ctx=Load())]), ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='end_fold', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='fold_numbers', ctx=Load()), slice=Compare(left=Name(id='fold_numbers', ctx=Load()), ops=[Eq()], comparators=[Name(id='fold_number', ctx=Load())]), ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='end_fold_exclusive', ctx=Store())], value=BinOp(left=Name(id='end_fold', ctx=Load()), op=Add(), right=Name(id='freq_timedelta', ctx=Load()))), Assign(targets=[Name(id='backtest_df_slice_fold', ctx=Store())], value=Subscript(value=Name(id='segment_backtest_df', ctx=Load()), slice=Slice(lower=Name(id='start_fold', ctx=Load()), upper=Name(id='end_fold_exclusive', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='target', ctx=Load())], keywords=[keyword(arg='color', value=Subscript(value=Name(id='lines_colors', ctx=Load()), slice=Constant(value='test'), ctx=Load()))])), If(test=Name(id='is_full_folds', ctx=Load()), body=[Assign(targets=[Name(id='forecast_df_slice_fold', ctx=Store())], value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=Slice(lower=Name(id='start_fold', ctx=Load()), upper=Name(id='end_fold_exclusive', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='target', ctx=Load())], keywords=[keyword(arg='color', value=Subscript(value=Name(id='lines_colors', ctx=Load()), slice=Constant(value='forecast'), ctx=Load()))]))], orelse=[Assign(targets=[Name(id='forecast_df_slice_fold', ctx=Store())], value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=Slice(lower=Name(id='start_fold', ctx=Load()), upper=Name(id='end_fold', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='backtest_df_slice_fold', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='loc', ctx=Load()), slice=Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='index', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='scatter', ctx=Load()), args=[Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='target', ctx=Load())], keywords=[keyword(arg='color', value=Subscript(value=Name(id='lines_colors', ctx=Load()), slice=Constant(value='test'), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='scatter', ctx=Load()), args=[Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='target', ctx=Load())], keywords=[keyword(arg='color', value=Subscript(value=Name(id='lines_colors', ctx=Load()), slice=Constant(value='forecast'), ctx=Load()))]))]), Assign(targets=[Name(id='opacity', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=0.075), op=Mult(), right=BinOp(left=BinOp(left=Name(id='fold_number', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mod(), right=Constant(value=2))), op=Add(), right=Constant(value=0.075))), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvspan', ctx=Load()), args=[Name(id='start_fold', ctx=Load()), Name(id='end_fold_exclusive', ctx=Load())], keywords=[keyword(arg='alpha', value=Name(id='opacity', ctx=Load())), keyword(arg='color', value=Constant(value='skyblue'))]))], orelse=[]), Assign(targets=[Name(id='legend_handles', ctx=Store())], value=ListComp(elt=Call(func=Name(id='Line2D', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load()), List(elts=[Constant(value=0)], ctx=Load())], keywords=[keyword(arg='marker', value=Constant(value='o')), keyword(arg='color', value=Name(id='color', ctx=Load())), keyword(arg='label', value=Name(id='label', ctx=Load()))]), generators=[comprehension(target=Tuple(elts=[Name(id='label', ctx=Store()), Name(id='color', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='lines_colors', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[keyword(arg='handles', value=Name(id='legend_handles', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))]))], orelse=[])], decorator_list=[]), FunctionDef(name='plot_backtest_interactive', args=arguments(posonlyargs=[], args=[arg(arg='forecast_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='history_len', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0), Tuple(elts=[Constant(value=900), Constant(value=600)], ctx=Load())]), body=[Expr(value=Constant(value='Plot targets and forecast for backtest pipeline using plotly.\n\n    Parameters\n    ----------\n    forecast_df:\n        forecasted dataframe with timeseries data\n    ts:\n        dataframe of timeseries that was used for backtest\n    segments:\n        segments to plot\n    history_len:\n        length of pre-backtest history to plot, if value is "all" then plot all the history\n    figsize:\n        size of the figure in pixels\n\n    Returns\n    -------\n    go.Figure:\n        result of plotting\n\n    Raises\n    ------\n    ValueError:\n        if ``history_len`` is negative\n    ValueError:\n        if folds are intersecting\n    ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='history_len', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='all')]), Compare(left=Name(id='history_len', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Parameter history_len should be non-negative or 'all'")], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='fold_numbers', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='forecast_df', ctx=Load()), slice=Subscript(value=Name(id='segments', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), slice=Constant(value='fold_number'), ctx=Load())), Expr(value=Call(func=Name(id='_validate_intersecting_segments', ctx=Load()), args=[Name(id='fold_numbers', ctx=Load())], keywords=[])), Assign(targets=[Name(id='folds', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='fold_numbers', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load())), Assign(targets=[Name(id='forecast_start', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='history_df', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), ops=[Lt()], comparators=[Name(id='forecast_start', ctx=Load())]), ctx=Load())), Assign(targets=[Name(id='backtest_df', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), ops=[GtE()], comparators=[Name(id='forecast_start', ctx=Load())]), ctx=Load())), Assign(targets=[Name(id='freq_timedelta', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=0), ctx=Load()))), Assign(targets=[Name(id='colors', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='plotly', ctx=Load()), attr='colors', ctx=Load()), attr='qualitative', ctx=Load()), attr='Dark24', ctx=Load())), Assign(targets=[Name(id='fig', ctx=Store())], value=Call(func=Attribute(value=Name(id='go', ctx=Load()), attr='Figure', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_backtest_df', ctx=Store())], value=Subscript(value=Name(id='backtest_df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_history_df', ctx=Store())], value=Subscript(value=Name(id='history_df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_forecast_df', ctx=Store())], value=Subscript(value=Name(id='forecast_df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='is_full_folds', ctx=Store())], value=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='segment_backtest_df', ctx=Load()), attr='index', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='segment_forecast_df', ctx=Load()), attr='index', ctx=Load())], keywords=[])])), If(test=Compare(left=Name(id='history_len', ctx=Load()), ops=[Eq()], comparators=[Constant(value='all')]), body=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='segment_history_df', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='segment_backtest_df', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='history_len', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='segment_history_df', ctx=Load()), attr='tail', ctx=Load()), args=[Name(id='history_len', ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Name(id='segment_backtest_df', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='plot_df', ctx=Store())], value=Name(id='segment_backtest_df', ctx=Load()))])]), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='add_trace', ctx=Load()), args=[Call(func=Attribute(value=Name(id='go', ctx=Load()), attr='Scattergl', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='plot_df', ctx=Load()), attr='index', ctx=Load())), keyword(arg='y', value=Attribute(value=Name(id='plot_df', ctx=Load()), attr='target', ctx=Load())), keyword(arg='legendgroup', value=JoinedStr(values=[FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='name', value=JoinedStr(values=[FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='mode', value=Constant(value='lines')), keyword(arg='marker_color', value=Subscript(value=Name(id='colors', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='colors', ctx=Load())], keywords=[])), ctx=Load())), keyword(arg='showlegend', value=Constant(value=True)), keyword(arg='line', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=2)), keyword(arg='dash', value=Constant(value='dash'))]))])], keywords=[])), For(target=Name(id='fold_number', ctx=Store()), iter=Name(id='folds', ctx=Load()), body=[Assign(targets=[Name(id='start_fold', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='fold_numbers', ctx=Load()), slice=Compare(left=Name(id='fold_numbers', ctx=Load()), ops=[Eq()], comparators=[Name(id='fold_number', ctx=Load())]), ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='end_fold', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='fold_numbers', ctx=Load()), slice=Compare(left=Name(id='fold_numbers', ctx=Load()), ops=[Eq()], comparators=[Name(id='fold_number', ctx=Load())]), ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='end_fold_exclusive', ctx=Store())], value=BinOp(left=Name(id='end_fold', ctx=Load()), op=Add(), right=Name(id='freq_timedelta', ctx=Load()))), Assign(targets=[Name(id='backtest_df_slice_fold', ctx=Store())], value=Subscript(value=Name(id='segment_backtest_df', ctx=Load()), slice=Slice(lower=Name(id='start_fold', ctx=Load()), upper=Name(id='end_fold_exclusive', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='add_trace', ctx=Load()), args=[Call(func=Attribute(value=Name(id='go', ctx=Load()), attr='Scattergl', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='index', ctx=Load())), keyword(arg='y', value=Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='target', ctx=Load())), keyword(arg='legendgroup', value=JoinedStr(values=[FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='name', value=JoinedStr(values=[Constant(value='Test: '), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='mode', value=Constant(value='lines')), keyword(arg='marker_color', value=Subscript(value=Name(id='colors', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='colors', ctx=Load())], keywords=[])), ctx=Load())), keyword(arg='showlegend', value=Constant(value=False)), keyword(arg='line', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=2)), keyword(arg='dash', value=Constant(value='solid'))]))])], keywords=[])), If(test=Name(id='is_full_folds', ctx=Load()), body=[Assign(targets=[Name(id='forecast_df_slice_fold', ctx=Store())], value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=Slice(lower=Name(id='start_fold', ctx=Load()), upper=Name(id='end_fold_exclusive', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='add_trace', ctx=Load()), args=[Call(func=Attribute(value=Name(id='go', ctx=Load()), attr='Scattergl', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='index', ctx=Load())), keyword(arg='y', value=Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='target', ctx=Load())), keyword(arg='legendgroup', value=JoinedStr(values=[FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='name', value=JoinedStr(values=[Constant(value='Forecast: '), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='mode', value=Constant(value='lines')), keyword(arg='marker_color', value=Subscript(value=Name(id='colors', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='colors', ctx=Load())], keywords=[])), ctx=Load())), keyword(arg='showlegend', value=Constant(value=False)), keyword(arg='line', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=2)), keyword(arg='dash', value=Constant(value='dot'))]))])], keywords=[]))], orelse=[Assign(targets=[Name(id='forecast_df_slice_fold', ctx=Store())], value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=Slice(lower=Name(id='start_fold', ctx=Load()), upper=Name(id='end_fold', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='backtest_df_slice_fold', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='loc', ctx=Load()), slice=Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='index', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='add_trace', ctx=Load()), args=[Call(func=Attribute(value=Name(id='go', ctx=Load()), attr='Scattergl', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='index', ctx=Load())), keyword(arg='y', value=Attribute(value=Name(id='backtest_df_slice_fold', ctx=Load()), attr='target', ctx=Load())), keyword(arg='legendgroup', value=JoinedStr(values=[FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='name', value=JoinedStr(values=[Constant(value='Test: '), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='mode', value=Constant(value='markers')), keyword(arg='marker_color', value=Subscript(value=Name(id='colors', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='colors', ctx=Load())], keywords=[])), ctx=Load())), keyword(arg='showlegend', value=Constant(value=False))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='add_trace', ctx=Load()), args=[Call(func=Attribute(value=Name(id='go', ctx=Load()), attr='Scattergl', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='index', ctx=Load())), keyword(arg='y', value=Attribute(value=Name(id='forecast_df_slice_fold', ctx=Load()), attr='target', ctx=Load())), keyword(arg='legendgroup', value=JoinedStr(values=[FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='name', value=JoinedStr(values=[Constant(value='Forecast: '), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])), keyword(arg='mode', value=Constant(value='markers')), keyword(arg='marker_color', value=Subscript(value=Name(id='colors', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='colors', ctx=Load())], keywords=[])), ctx=Load())), keyword(arg='showlegend', value=Constant(value=False))])], keywords=[]))]), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='opacity', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=0.075), op=Mult(), right=BinOp(left=BinOp(left=Name(id='fold_number', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mod(), right=Constant(value=2))), op=Add(), right=Constant(value=0.075))), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='add_vrect', ctx=Load()), args=[], keywords=[keyword(arg='x0', value=Name(id='start_fold', ctx=Load())), keyword(arg='x1', value=Name(id='end_fold_exclusive', ctx=Load())), keyword(arg='line_width', value=Constant(value=0)), keyword(arg='fillcolor', value=Constant(value='blue')), keyword(arg='opacity', value=Name(id='opacity', ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='fig', ctx=Load()), attr='update_layout', ctx=Load()), args=[], keywords=[keyword(arg='height', value=Subscript(value=Name(id='figsize', ctx=Load()), slice=Constant(value=1), ctx=Load())), keyword(arg='width', value=Subscript(value=Name(id='figsize', ctx=Load()), slice=Constant(value=0), ctx=Load())), keyword(arg='title', value=Constant(value='Backtest for all segments')), keyword(arg='xaxis_title', value=Constant(value='timestamp')), keyword(arg='yaxis_title', value=Constant(value='target')), keyword(arg='legend', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='itemsizing', value=Constant(value='trace')), keyword(arg='title', value=Constant(value='Segments'))])), keyword(arg='updatemenus', value=List(elts=[Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='type', value=Constant(value='buttons')), keyword(arg='direction', value=Constant(value='left')), keyword(arg='xanchor', value=Constant(value='left')), keyword(arg='yanchor', value=Constant(value='top')), keyword(arg='showactive', value=Constant(value=True)), keyword(arg='x', value=Constant(value=1.0)), keyword(arg='y', value=Constant(value=1.1)), keyword(arg='buttons', value=List(elts=[Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='method', value=Constant(value='restyle')), keyword(arg='args', value=List(elts=[Constant(value='visible'), Constant(value='all')], ctx=Load())), keyword(arg='label', value=Constant(value='show all'))]), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='method', value=Constant(value='restyle')), keyword(arg='args', value=List(elts=[Constant(value='visible'), Constant(value='legendonly')], ctx=Load())), keyword(arg='label', value=Constant(value='hide all'))])], ctx=Load()))])], ctx=Load())), keyword(arg='annotations', value=List(elts=[Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Constant(value='Show segments:')), keyword(arg='showarrow', value=Constant(value=False)), keyword(arg='x', value=Constant(value=1.0)), keyword(arg='y', value=Constant(value=1.08)), keyword(arg='xref', value=Constant(value='paper')), keyword(arg='yref', value=Constant(value='paper')), keyword(arg='align', value=Constant(value='left'))])], ctx=Load()))])), Return(value=Name(id='fig', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='go', ctx=Load()), attr='Figure', ctx=Load())), FunctionDef(name='plot_anomalies', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='anomaly_dict', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='target'), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load()), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Plot a time series with indicated anomalies.\n\n    Parameters\n    ----------\n    ts:\n        TSDataset of timeseries that was used for detect anomalies\n    anomaly_dict:\n        dictionary derived from anomaly detection function,\n        e.g. :py:func:`~etna.analysis.outliers.density_outliers.get_anomalies_density`\n    in_column:\n        column to plot\n    segments:\n        segments to plot\n    columns_num:\n        number of subplots columns\n    figsize:\n        size of the figure per subplot with one segment in inches\n    start:\n        start timestamp for plot\n    end:\n        end timestamp for plot\n    ')), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_borders_ts', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='anomaly', ctx=Store())], value=Subscript(value=Name(id='anomaly_dict', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Name(id='in_column', ctx=Load()), ctx=Load()), attr='values', ctx=Load())], keywords=[])), Assign(targets=[Name(id='anomaly', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='anomaly', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load())])], is_async=0)])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='scatter', ctx=Load()), args=[Name(id='anomaly', ctx=Load()), Attribute(value=Subscript(value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Call(func=Attribute(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), attr='isin', ctx=Load()), args=[Name(id='anomaly', ctx=Load())], keywords=[]), ctx=Load()), slice=Name(id='in_column', ctx=Load()), ctx=Load()), attr='values', ctx=Load())], keywords=[keyword(arg='c', value=Constant(value='r'))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_correlation_matrix', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='columns', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='method', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value='pearson')]), body=[Expr(value=Constant(value='Compute pairwise correlation of timeseries for selected segments.\n\n    Parameters\n    ----------\n    ts:\n        TSDataset with timeseries data\n    columns:\n        Columns to use, if None use all columns\n    segments:\n        Segments to use\n    method:\n        Method of correlation:\n\n        * pearson: standard correlation coefficient\n\n        * kendall: Kendall Tau correlation coefficient\n\n        * spearman: Spearman rank correlation\n\n    Returns\n    -------\n    np.ndarray\n        Correlation matrix\n    ')), If(test=Compare(left=Name(id='method', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Constant(value='pearson'), Constant(value='kendall'), Constant(value='spearman')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="'"), FormattedValue(value=Name(id='method', ctx=Load()), conversion=-1), Constant(value="' is not a valid method of correlation.")])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='columns', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='correlation_matrix', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segments', ctx=Load()), Name(id='columns', ctx=Load())], ctx=Load()), ctx=Load()), attr='corr', ctx=Load()), args=[], keywords=[keyword(arg='method', value=Name(id='method', ctx=Load()))]), attr='values', ctx=Load())), Return(value=Name(id='correlation_matrix', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='plot_correlation_matrix', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='columns', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='method', annotation=Name(id='str', ctx=Load())), arg(arg='mode', annotation=Name(id='str', ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='heatmap_kwargs'), defaults=[Constant(value=None), Constant(value=None), Constant(value='pearson'), Constant(value='macro'), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=10)], ctx=Load())]), body=[Expr(value=Constant(value="Plot pairwise correlation heatmap for selected segments.\n\n    Parameters\n    ----------\n    ts:\n        TSDataset with timeseries data\n    columns:\n        Columns to use, if None use all columns\n    segments:\n        Segments to use\n    method:\n        Method of correlation:\n\n        * pearson: standard correlation coefficient\n\n        * kendall: Kendall Tau correlation coefficient\n\n        * spearman: Spearman rank correlation\n\n    mode: 'macro' or 'per-segment'\n        Aggregation mode\n    columns_num:\n        Number of subplots columns\n    figsize:\n        size of the figure in inches\n    ")), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='columns', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='vmin'), ops=[NotIn()], comparators=[Name(id='heatmap_kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='heatmap_kwargs', ctx=Load()), slice=Constant(value='vmin'), ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[]), If(test=Compare(left=Constant(value='vmax'), ops=[NotIn()], comparators=[Name(id='heatmap_kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='heatmap_kwargs', ctx=Load()), slice=Constant(value='vmax'), ctx=Store())], value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='mode', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Constant(value='macro'), Constant(value='per-segment')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="'"), FormattedValue(value=Name(id='mode', ctx=Load()), conversion=-1), Constant(value="' is not a valid method of mode.")])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='mode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='macro')]), body=[Assign(targets=[Tuple(elts=[Name(id='fig', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='subplots', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Assign(targets=[Name(id='correlation_matrix', ctx=Store())], value=Call(func=Name(id='get_correlation_matrix', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='columns', ctx=Load()), Name(id='segments', ctx=Load()), Name(id='method', ctx=Load())], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Attribute(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segments', ctx=Load()), Name(id='columns', ctx=Load())], ctx=Load()), ctx=Load()), attr='columns', ctx=Load()), attr='values', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ax', ctx=Store())], value=Call(func=Attribute(value=Name(id='sns', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='correlation_matrix', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='.1g')), keyword(arg='square', value=Constant(value=True)), keyword(arg='ax', value=Name(id='ax', ctx=Load())), keyword(value=Name(id='heatmap_kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_xticks', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value=0.5))], keywords=[keyword(arg='labels', value=Name(id='labels', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_yticks', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value=0.5))], keywords=[keyword(arg='labels', value=Name(id='labels', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='setp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='get_xticklabels', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='rotation', value=Constant(value=45)), keyword(arg='ha', value=Constant(value='right')), keyword(arg='rotation_mode', value=Constant(value='anchor'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='setp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='get_yticklabels', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='rotation', value=Constant(value=0)), keyword(arg='ha', value=Constant(value='right')), keyword(arg='rotation_mode', value=Constant(value='anchor'))])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_title', ctx=Load()), args=[Constant(value='Correlation Heatmap')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='mode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='per-segment')]), body=[Assign(targets=[Tuple(elts=[Name(id='fig', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])], keywords=[keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='correlation_matrix', ctx=Store())], value=Call(func=Name(id='get_correlation_matrix', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='columns', ctx=Load()), List(elts=[Name(id='segment', ctx=Load())], ctx=Load()), Name(id='method', ctx=Load())], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Attribute(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Name(id='columns', ctx=Load())], ctx=Load()), ctx=Load()), attr='columns', ctx=Load()), attr='values', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='sns', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='correlation_matrix', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='.1g')), keyword(arg='square', value=Constant(value=True)), keyword(arg='ax', value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), keyword(value=Name(id='heatmap_kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_xticks', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value=0.5))], keywords=[keyword(arg='labels', value=Name(id='labels', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_yticks', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value=0.5))], keywords=[keyword(arg='labels', value=Name(id='labels', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='setp', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='get_xticklabels', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='rotation', value=Constant(value=45)), keyword(arg='ha', value=Constant(value='right')), keyword(arg='rotation_mode', value=Constant(value='anchor'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='setp', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='get_yticklabels', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='rotation', value=Constant(value=0)), keyword(arg='ha', value=Constant(value='right')), keyword(arg='rotation_mode', value=Constant(value='anchor'))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='Correlation Heatmap'), op=Add(), right=Constant(value=' ')), op=Add(), right=Name(id='segment', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='plot_anomalies_interactive', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='segment', annotation=Name(id='str', ctx=Load())), arg(arg='method', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='params_bounds', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='target'), Tuple(elts=[Constant(value=20), Constant(value=10)], ctx=Load()), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Plot a time series with indicated anomalies.\n\n    Anomalies are obtained using the specified method. The method parameters values\n    can be changed using the corresponding sliders.\n\n    Parameters\n    ----------\n    ts:\n        TSDataset with timeseries data\n    segment:\n        Segment to plot\n    method:\n        Method for outliers detection, e.g. :py:func:`~etna.analysis.outliers.density_outliers.get_anomalies_density`\n    params_bounds:\n        Parameters ranges of the outliers detection method. Bounds for the parameter are (min,max,step)\n    in_column:\n        column to plot\n    figsize:\n        size of the figure in inches\n    start:\n        start timestamp for plot\n    end:\n        end timestamp for plot\n\n    Notes\n    -----\n    Jupyter notebook might display the results incorrectly,\n    in this case try to use ``!jupyter nbextension enable --py widgetsnbextension``.\n\n    Examples\n    --------\n    >>> from etna.datasets import TSDataset\n    >>> from etna.datasets import generate_ar_df\n    >>> from etna.analysis import plot_anomalies_interactive, get_anomalies_density\n    >>> classic_df = generate_ar_df(periods=1000, start_time="2021-08-01", n_segments=2)\n    >>> df = TSDataset.to_dataset(classic_df)\n    >>> ts = TSDataset(df, "D")\n    >>> params_bounds = {"window_size": (5, 20, 1), "distance_coef": (0.1, 3, 0.25)}\n    >>> method = get_anomalies_density\n    >>> plot_anomalies_interactive(ts=ts, segment="segment_1", method=method, params_bounds=params_bounds, figsize=(20, 10)) # doctest: +SKIP\n    ')), ImportFrom(module='ipywidgets', names=[alias(name='FloatSlider')], level=0), ImportFrom(module='ipywidgets', names=[alias(name='IntSlider')], level=0), ImportFrom(module='ipywidgets', names=[alias(name='interact')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_borders_ts', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Name(id='segment', ctx=Load()), Name(id='in_column', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Name(id='df', ctx=Load()), attr='values', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='cache', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='sliders', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='style', ctx=Store())], value=Dict(keys=[Constant(value='description_width')], values=[Constant(value='initial')])), For(target=Tuple(elts=[Name(id='param', ctx=Store()), Name(id='bounds', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='params_bounds', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='min_', ctx=Store()), Name(id='max_', ctx=Store()), Name(id='step', ctx=Store())], ctx=Store())], value=Name(id='bounds', ctx=Load())), If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='min_', ctx=Load()), Name(id='float', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='max_', ctx=Load()), Name(id='float', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='step', ctx=Load()), Name(id='float', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='sliders', ctx=Load()), slice=Name(id='param', ctx=Load()), ctx=Store())], value=Call(func=Name(id='FloatSlider', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Name(id='min_', ctx=Load())), keyword(arg='max', value=Name(id='max_', ctx=Load())), keyword(arg='step', value=Name(id='step', ctx=Load())), keyword(arg='continuous_update', value=Constant(value=False)), keyword(arg='style', value=Name(id='style', ctx=Load()))]))], orelse=[Assign(targets=[Subscript(value=Name(id='sliders', ctx=Load()), slice=Name(id='param', ctx=Load()), ctx=Store())], value=Call(func=Name(id='IntSlider', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Name(id='min_', ctx=Load())), keyword(arg='max', value=Name(id='max_', ctx=Load())), keyword(arg='step', value=Name(id='step', ctx=Load())), keyword(arg='continuous_update', value=Constant(value=False)), keyword(arg='style', value=Name(id='style', ctx=Load()))]))])], orelse=[]), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Constant(value='_'), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='val', ctx=Store()), iter=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='cache', ctx=Load())]), body=[Assign(targets=[Name(id='anomalies', ctx=Store())], value=Subscript(value=Call(func=Name(id='method', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='anomalies', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='anomalies', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load())])], is_async=0)])), Assign(targets=[Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='anomalies', ctx=Load()))], orelse=[Assign(targets=[Name(id='anomalies', ctx=Store())], value=Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='scatter', ctx=Load()), args=[Name(id='anomalies', ctx=Load()), Subscript(value=Name(id='y', ctx=Load()), slice=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='to_datetime', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), attr='isin', ctx=Load()), args=[Name(id='anomalies', ctx=Load())], keywords=[]), ctx=Load())], keywords=[keyword(arg='c', value=Constant(value='r'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xticks', ctx=Load()), args=[], keywords=[keyword(arg='rotation', value=Constant(value=45))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), Expr(value=Call(func=Name(id='interact', ctx=Load()), args=[Name(id='update', ctx=Load())], keywords=[keyword(value=Name(id='sliders', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='plot_clusters', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='segment2cluster', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='centroids_df', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='Plot clusters [with centroids].\n\n    Parameters\n    ----------\n    ts:\n        TSDataset with timeseries\n    segment2cluster:\n        mapping from segment to cluster in format {segment: cluster}\n    centroids_df:\n        dataframe with centroids\n    columns_num:\n        number of columns in subplots\n    figsize:\n        size of the figure per subplot with one segment in inches\n    ')), Assign(targets=[Name(id='unique_clusters', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='segment2cluster', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='unique_clusters', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Assign(targets=[Name(id='default_colors', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='plt', ctx=Load()), attr='rcParams', ctx=Load()), slice=Constant(value='axes.prop_cycle'), ctx=Load()), attr='by_key', ctx=Load()), args=[], keywords=[]), slice=Constant(value='color'), ctx=Load())), Assign(targets=[Name(id='segment_color', ctx=Store())], value=Subscript(value=Name(id='default_colors', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='cluster', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='unique_clusters', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=ListComp(elt=Name(id='segment', ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Name(id='segment2cluster', ctx=Load()), ifs=[Compare(left=Subscript(value=Name(id='segment2cluster', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='cluster', ctx=Load())])], is_async=0)])), For(target=Name(id='segment', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_slice', ctx=Store())], value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='segment_slice', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Name(id='segment_slice', ctx=Load()), attr='values', ctx=Load())], keywords=[keyword(arg='alpha', value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='sqrt', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])], keywords=[]))), keyword(arg='c', value=Name(id='segment_color', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[JoinedStr(values=[Constant(value='cluster='), FormattedValue(value=Name(id='cluster', ctx=Load()), conversion=-1), Constant(value='\n'), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' segments in cluster')])], keywords=[])), If(test=Compare(left=Name(id='centroids_df', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='centroid', ctx=Store())], value=Subscript(value=Name(id='centroids_df', ctx=Load()), slice=Tuple(elts=[Name(id='cluster', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='centroid', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Name(id='centroid', ctx=Load()), attr='values', ctx=Load())], keywords=[keyword(arg='c', value=Constant(value='red')), keyword(arg='label', value=Constant(value='centroid'))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='plot_time_series_with_change_points', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='change_points', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load()), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Plot segments with their trend change points.\n\n    Parameters\n    ----------\n    ts:\n        TSDataset with timeseries\n    change_points:\n        dictionary with trend change points for each segment,\n        can be obtained from :py:func:`~etna.analysis.change_points_trend.search.find_change_points`\n    segments:\n        segments to use\n    columns_num:\n        number of subplots columns\n    figsize:\n        size of the figure per subplot with one segment in inches\n    start:\n        start timestamp for plot\n    end:\n        end timestamp for plot\n    ')), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_borders_ts', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='change_points_segment', ctx=Store())], value=Subscript(value=Name(id='change_points', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='target', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='change_points_segment', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='change_points_segment', ctx=Load()), ifs=[Compare(left=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), ops=[Lt(), Lt()], comparators=[Name(id='i', ctx=Load()), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])])], is_async=0)])), Assign(targets=[Name(id='all_change_points_segment', ctx=Store())], value=BinOp(left=BinOp(left=List(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load()), op=Add(), right=Name(id='change_points_segment', ctx=Load())), op=Add(), right=List(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), args=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])], ctx=Load()))), For(target=Name(id='idx', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='all_change_points_segment', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='start_time', ctx=Store())], value=Subscript(value=Name(id='all_change_points_segment', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='end_time', ctx=Store())], value=Subscript(value=Name(id='all_change_points_segment', ctx=Load()), slice=BinOp(left=Name(id='idx', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='selected_indices', ctx=Store())], value=BinOp(left=Compare(left=Name(id='timestamp', ctx=Load()), ops=[GtE()], comparators=[Name(id='start_time', ctx=Load())]), op=BitAnd(), right=Compare(left=Name(id='timestamp', ctx=Load()), ops=[LtE()], comparators=[Name(id='end_time', ctx=Load())]))), Assign(targets=[Name(id='cur_timestamp', ctx=Store())], value=Subscript(value=Name(id='timestamp', ctx=Load()), slice=Name(id='selected_indices', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='cur_target', ctx=Store())], value=Subscript(value=Name(id='target', ctx=Load()), slice=Name(id='selected_indices', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='cur_timestamp', ctx=Load()), Name(id='cur_target', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='change_point', ctx=Store()), iter=Name(id='change_points_segment', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvline', ctx=Load()), args=[Name(id='change_point', ctx=Load())], keywords=[keyword(arg='linestyle', value=Constant(value='dashed')), keyword(arg='c', value=Constant(value='grey'))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_residuals', args=arguments(posonlyargs=[], args=[arg(arg='forecast_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='ts', annotation=Constant(value='TSDataset'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get residuals for further analysis.\n\n    Parameters\n    ----------\n    forecast_df:\n        forecasted dataframe with timeseries data\n    ts:\n        dataset of timeseries that has answers to forecast\n\n    Returns\n    -------\n    new_ts: TSDataset\n        TSDataset with residuals in forecasts\n\n    Raises\n    ------\n    KeyError:\n        if segments of ``forecast_df`` and ``ts`` aren't the same\n\n    Notes\n    -----\n    Transforms are taken as is from ``ts``.\n    ")), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), Assign(targets=[Name(id='true_df', ctx=Store())], value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='forecast_df', ctx=Load()), attr='index', ctx=Load()), Slice(), Slice()], ctx=Load()), ctx=Load())), If(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Constant(value='Segments of `ts` and `forecast_df` should be the same')], keywords=[]))], orelse=[]), AugAssign(target=Subscript(value=Attribute(value=Name(id='true_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store()), op=Sub(), value=Subscript(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='new_ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='true_df', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='new_ts', ctx=Load()), attr='known_future', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='known_future', ctx=Load())), Assign(targets=[Attribute(value=Name(id='new_ts', ctx=Load()), attr='_regressors', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='regressors', ctx=Load())), Assign(targets=[Attribute(value=Name(id='new_ts', ctx=Load()), attr='transforms', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='transforms', ctx=Load())), Assign(targets=[Attribute(value=Name(id='new_ts', ctx=Load()), attr='df_exog', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='df_exog', ctx=Load())), Return(value=Name(id='new_ts', ctx=Load()))], decorator_list=[], returns=Constant(value='TSDataset')), FunctionDef(name='plot_residuals', args=arguments(posonlyargs=[], args=[arg(arg='forecast_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='feature', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='transforms', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Transform', ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='timestamp'), Tuple(elts=[], ctx=Load()), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='Plot residuals for predictions from backtest against some feature.\n\n    Parameters\n    ----------\n    forecast_df:\n        forecasted dataframe with timeseries data\n    ts:\n        dataframe of timeseries that was used for backtest\n    feature:\n        feature name to draw against residuals, if "timestamp" plot residuals against the timestamp\n    transforms:\n        sequence of transforms to get feature column\n    segments:\n        segments to use\n    columns_num:\n        number of columns in subplots\n    figsize:\n        size of the figure per subplot with one segment in inches\n\n    Raises\n    ------\n    ValueError:\n        if feature isn\'t present in the dataset after applying transformations\n\n    Notes\n    -----\n    Parameter ``transforms`` is necessary because some pipelines doesn\'t save features in their forecasts,\n    e.g. :py:mod:`etna.ensembles` pipelines.\n    ')), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Assign(targets=[Name(id='ts_copy', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ts_copy', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='transforms', value=Name(id='transforms', ctx=Load()))])), Assign(targets=[Name(id='ts_residuals', ctx=Store())], value=Call(func=Name(id='get_residuals', ctx=Load()), args=[], keywords=[keyword(arg='forecast_df', value=Name(id='forecast_df', ctx=Load())), keyword(arg='ts', value=Name(id='ts_copy', ctx=Load()))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts_residuals', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='feature', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='timestamp')]), body=[Assign(targets=[Name(id='all_features', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='feature', ctx=Load()), ops=[NotIn()], comparators=[Name(id='all_features', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Given feature isn't present in the dataset after applying transformations")], keywords=[]))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_forecast_df', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id='forecast_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='segment_residuals_df', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='residuals', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_residuals_df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='feature_values', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_residuals_df', ctx=Load()), slice=Name(id='feature', ctx=Load()), ctx=Load()), attr='values', ctx=Load())), If(test=Compare(left=Name(id='feature', ctx=Load()), ops=[Eq()], comparators=[Constant(value='timestamp')]), body=[Assign(targets=[Name(id='folds', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=Constant(value='fold_number'), ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='fold_number', ctx=Store()), iter=Name(id='folds', ctx=Load()), body=[Assign(targets=[Name(id='forecast_df_slice_fold', ctx=Store())], value=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='segment_forecast_df', ctx=Load()), slice=Constant(value='fold_number'), ctx=Load()), ops=[Eq()], comparators=[Name(id='fold_number', ctx=Load())]), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvspan', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='forecast_df_slice_fold', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='forecast_df_slice_fold', ctx=Load()), slice=Constant(value='timestamp'), ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='alpha', value=BinOp(left=Constant(value=0.15), op=Mult(), right=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Subscript(value=Name(id='forecast_df_slice_fold', ctx=Load()), slice=Constant(value='fold_number'), ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[]), op=Mod(), right=Constant(value=2)))), keyword(arg='color', value=Constant(value='skyblue'))]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='scatter', ctx=Load()), args=[Name(id='feature_values', ctx=Load()), Name(id='residuals', ctx=Load())], keywords=[keyword(arg='c', value=Constant(value='b'))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_xlabel', ctx=Load()), args=[Name(id='feature', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='TrendTransformType', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='ChangePointsTrendTransform'), Constant(value='LinearTrendTransform'), Constant(value='TheilSenTrendTransform'), Constant(value='STLTransform')], ctx=Load()), ctx=Load())), FunctionDef(name='_get_labels_names', args=arguments(posonlyargs=[], args=[arg(arg='trend_transform'), arg(arg='segments')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='If only unique transform classes are used then show their short names (without parameters). Otherwise show their full repr as label.')), ImportFrom(module='etna.transforms.decomposition.detrend', names=[alias(name='LinearTrendTransform')], level=0), ImportFrom(module='etna.transforms.decomposition.detrend', names=[alias(name='TheilSenTrendTransform')], level=0), Assign(targets=[Name(id='labels', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='transform', ctx=Store()), iter=Name(id='trend_transform', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='labels_short', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='i', ctx=Load()), slice=Slice(upper=Call(func=Attribute(value=Name(id='i', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='(')], keywords=[])), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='labels', ctx=Load()), ifs=[], is_async=0)])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='unique', ctx=Load()), args=[Name(id='labels_short', ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='labels_short', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='labels', ctx=Store())], value=Name(id='labels_short', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='linear_coeffs', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Name(id='segments', ctx=Load()), ListComp(elt=Constant(value=''), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[])], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='trend_transform', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='trend_transform', ctx=Load()), slice=Constant(value=0), ctx=Load()), Tuple(elts=[Name(id='LinearTrendTransform', ctx=Load()), Name(id='TheilSenTrendTransform', ctx=Load())], ctx=Load())], keywords=[]), Compare(left=Attribute(value=Subscript(value=Name(id='trend_transform', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='poly_degree', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[For(target=Name(id='seg', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='linear_coeffs', ctx=Load()), slice=Name(id='seg', ctx=Load()), ctx=Store())], value=BinOp(left=Constant(value=', k='), op=Add(), right=JoinedStr(values=[FormattedValue(value=Subscript(value=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Attribute(value=Subscript(value=Attribute(value=Subscript(value=Name(id='trend_transform', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='segment_transforms', ctx=Load()), slice=Name(id='seg', ctx=Load()), ctx=Load()), attr='_pipeline', ctx=Load()), attr='steps', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='coef_', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='g')]))])))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='labels', ctx=Load()), Name(id='linear_coeffs', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='plot_trend', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='trend_transform', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='TrendTransformType'), Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='TrendTransformType'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='Plot series and trend from trend transform for this series.\n\n    If only unique transform classes are used then show their short names (without parameters).\n    Otherwise show their full repr as label\n\n    Parameters\n    ----------\n    ts:\n        dataframe of timeseries that was used for trend plot\n    trend_transform:\n        trend transform or list of trend transforms to apply\n    segments:\n        segments to use\n    columns_num:\n        number of columns in subplots\n    figsize:\n        size of the figure per subplot with one segment in inches\n    ')), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Assign(targets=[Name(id='df', ctx=Store())], value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='trend_transform', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='trend_transform', ctx=Store())], value=List(elts=[Name(id='trend_transform', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='df_detrend', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='transform', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='transform', ctx=Store()), iter=Name(id='trend_transform', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Tuple(elts=[Name(id='labels', ctx=Store()), Name(id='linear_coeffs', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_labels_names', ctx=Load()), args=[Name(id='trend_transform', ctx=Load()), Name(id='segments', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Initial series'))])), For(target=Tuple(elts=[Name(id='label', ctx=Store()), Name(id='df_now', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='labels', ctx=Load()), Name(id='df_detrend', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='df', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='df_now', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()))], keywords=[keyword(arg='label', value=BinOp(left=Name(id='label', ctx=Load()), op=Add(), right=Subscript(value=Name(id='linear_coeffs', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()))), keyword(arg='lw', value=Constant(value=3))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_get_fictitious_relevances', args=arguments(posonlyargs=[], args=[arg(arg='pvalues', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Convert p-values into fictitious variables, with function f(x) = 1 - x.\n\n    Also converts alpha into fictitious variable.\n\n    Parameters\n    ----------\n    pvalues:\n        dataFrame with pvalues\n    alpha:\n        significance level, default alpha = 0.05\n\n    Returns\n    -------\n    pvalues:\n        array with fictitious relevances\n    new_alpha:\n        adjusted significance level\n    ')), Assign(targets=[Name(id='pvalues', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='pvalues', ctx=Load()))), Assign(targets=[Name(id='new_alpha', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='alpha', ctx=Load()))), Return(value=Tuple(elts=[Name(id='pvalues', ctx=Load()), Name(id='new_alpha', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='plot_feature_relevance', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='relevance_table', annotation=Name(id='RelevanceTable', ctx=Load())), arg(arg='normalized', annotation=Name(id='bool', ctx=Load())), arg(arg='relevance_aggregation_mode', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='per-segment'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='relevance_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='top_k', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Attribute(value=Name(id='AggregationMode', ctx=Load()), attr='mean', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=0.05), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='\n    Plot relevance of the features.\n\n    The most important features are at the top, the least important are at the bottom.\n\n    For :py:class:`~etna.analysis.feature_relevance.relevance.StatisticsRelevanceTable` also plot vertical line: transformed significance level.\n\n    * Values that lie to the right of this line have p-value < alpha.\n\n    * And the values that lie to the left have p-value > alpha.\n\n    Parameters\n    ----------\n    ts:\n        TSDataset with timeseries data\n    relevance_table:\n        method to evaluate the feature relevance;\n\n        * if :py:class:`~etna.analysis.feature_relevance.relevance.StatisticsRelevanceTable` table is used then relevances are normalized p-values\n\n        * if :py:class:`~etna.analysis.feature_relevance.relevance.ModelRelevanceTable` table is used then relevances are importances from some model\n\n    normalized:\n        whether obtained relevances should be normalized to sum up to 1\n    relevance_aggregation_mode:\n        aggregation strategy for obtained feature relevance table;\n        all the strategies can be examined\n        at :py:class:`~etna.analysis.feature_selection.mrmr_selection.AggregationMode`\n    relevance_params:\n        additional keyword arguments for the ``__call__`` method of\n        :py:class:`~etna.analysis.feature_relevance.relevance.RelevanceTable`\n    top_k:\n        number of best features to plot, if None plot all the features\n    alpha:\n        significance level, default alpha = 0.05, only for :py:class:`~etna.analysis.feature_relevance.relevance.StatisticsRelevanceTable`\n    segments:\n        segments to use\n    columns_num:\n        if ``relevance_aggregation_mode="per-segment"`` number of columns in subplots, otherwise the value is ignored\n    figsize:\n        size of the figure per subplot with one segment in inches\n    ')), If(test=Compare(left=Name(id='relevance_params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='relevance_params', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='border_value', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='features', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), op=Sub(), right=Set(elts=[Constant(value='target')]))], keywords=[])), Assign(targets=[Name(id='relevance_df', ctx=Store())], value=Call(func=Name(id='relevance_table', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segments', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), keyword(arg='df_exog', value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segments', ctx=Load()), Name(id='features', ctx=Load())], ctx=Load()), ctx=Load())), keyword(value=Name(id='relevance_params', ctx=Load()))])), If(test=Compare(left=Name(id='relevance_aggregation_mode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='per-segment')]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='relevance', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='relevance_df', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='relevance_table', ctx=Load()), Name(id='StatisticsRelevanceTable', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='relevance', ctx=Store()), Name(id='border_value', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_fictitious_relevances', ctx=Load()), args=[Name(id='relevance', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='na_relevance_features', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='relevance', ctx=Load()), slice=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), ctx=Load()), attr='index', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Relevances on segment: '), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1), Constant(value=' of features: '), FormattedValue(value=Name(id='na_relevance_features', ctx=Load()), conversion=-1), Constant(value=" can't be calculated.")])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='relevance', ctx=Store())], value=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='ascending', value=Constant(value=False))])), Assign(targets=[Name(id='relevance', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Name(id='top_k', ctx=Load())), ctx=Load())), If(test=Name(id='normalized', ctx=Load()), body=[If(test=Compare(left=Name(id='border_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='border_value', ctx=Store())], value=BinOp(left=Name(id='border_value', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[])))], orelse=[]), Assign(targets=[Name(id='relevance', ctx=Store())], value=BinOp(left=Name(id='relevance', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[])))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='sns', ctx=Load()), attr='barplot', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='relevance', ctx=Load()), attr='values', ctx=Load())), keyword(arg='y', value=Attribute(value=Name(id='relevance', ctx=Load()), attr='index', ctx=Load())), keyword(arg='orient', value=Constant(value='h')), keyword(arg='ax', value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))])), If(test=Compare(left=Name(id='border_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvline', ctx=Load()), args=[Name(id='border_value', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[JoinedStr(values=[Constant(value='Feature relevance: '), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='relevance_aggregation_fn', ctx=Store())], value=Subscript(value=Name(id='AGGREGATION_FN', ctx=Load()), slice=Call(func=Name(id='AggregationMode', ctx=Load()), args=[Name(id='relevance_aggregation_mode', ctx=Load())], keywords=[]), ctx=Load())), Assign(targets=[Name(id='relevance', ctx=Store())], value=Call(func=Attribute(value=Name(id='relevance_df', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='relevance_aggregation_fn', ctx=Load()), args=[Subscript(value=Name(id='x', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])), ctx=Load())], keywords=[]))], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='relevance_table', ctx=Load()), Name(id='StatisticsRelevanceTable', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='relevance', ctx=Store()), Name(id='border_value', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_fictitious_relevances', ctx=Load()), args=[Name(id='relevance', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='na_relevance_features', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='relevance', ctx=Load()), slice=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), ctx=Load()), attr='index', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Relevances of features: '), FormattedValue(value=Name(id='na_relevance_features', ctx=Load()), conversion=-1), Constant(value=" can't be calculated.")])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='relevance', ctx=Store())], value=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='ascending', value=Constant(value=False))])), Assign(targets=[Name(id='relevance', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Name(id='top_k', ctx=Load())), ctx=Load())), If(test=Name(id='normalized', ctx=Load()), body=[If(test=Compare(left=Name(id='border_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='border_value', ctx=Store())], value=BinOp(left=Name(id='border_value', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[])))], orelse=[]), Assign(targets=[Name(id='relevance', ctx=Store())], value=BinOp(left=Name(id='relevance', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Name(id='relevance', ctx=Load()), attr='sum', ctx=Load()), args=[], keywords=[])))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='subplots', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Name(id='figsize', ctx=Load())), keyword(arg='constrained_layout', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='sns', ctx=Load()), attr='barplot', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Attribute(value=Name(id='relevance', ctx=Load()), attr='values', ctx=Load())), keyword(arg='y', value=Attribute(value=Name(id='relevance', ctx=Load()), attr='index', ctx=Load())), keyword(arg='orient', value=Constant(value='h')), keyword(arg='ax', value=Name(id='ax', ctx=Load()))])), If(test=Compare(left=Name(id='border_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='axvline', ctx=Load()), args=[Name(id='border_value', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_title', ctx=Load()), args=[Constant(value='Feature relevance')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='plot_imputation', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='imputer', annotation=Constant(value='TimeSeriesImputerTransform')), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load()), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Plot the result of imputation by a given imputer.\n\n    Parameters\n    ----------\n    ts:\n        TSDataset with timeseries data\n    imputer:\n        transform to make imputation of NaNs\n    segments:\n        segments to use\n    columns_num:\n        number of columns in subplots\n    figsize:\n        size of the figure per subplot with one segment in inches\n    start:\n        start timestamp for plot\n    end:\n        end timestamp for plot\n    ')), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_borders_ts', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Assign(targets=[Name(id='ts_after', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ts_after', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='transforms', value=List(elts=[Name(id='imputer', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='feature_name', ctx=Store())], value=Attribute(value=Name(id='imputer', ctx=Load()), attr='in_column', ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_before_df', ctx=Store())], value=Subscript(value=Attribute(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[]), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Name(id='feature_name', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_after_df', ctx=Store())], value=Subscript(value=Attribute(value=Call(func=Attribute(value=Name(id='ts_after', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[]), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Name(id='feature_name', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='segment_after_df', ctx=Load()), attr='index', ctx=Load()), Name(id='segment_after_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='imputed_index', ctx=Store())], value=BinOp(left=UnaryOp(op=Invert(), operand=Call(func=Attribute(value=Name(id='segment_after_df', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])), op=BitAnd(), right=Call(func=Attribute(value=Name(id='segment_before_df', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]))), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='scatter', ctx=Load()), args=[Attribute(value=Subscript(value=Attribute(value=Name(id='segment_after_df', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='imputed_index', ctx=Load()), ctx=Load()), attr='index', ctx=Load()), Subscript(value=Attribute(value=Name(id='segment_after_df', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='imputed_index', ctx=Load()), ctx=Load())], keywords=[keyword(arg='c', value=Constant(value='red')), keyword(arg='zorder', value=Constant(value=2))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))]))], orelse=[])], decorator_list=[]), FunctionDef(name='plot_periodogram', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='period', annotation=Name(id='float', ctx=Load())), arg(arg='amplitude_aggregation_mode', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='per-segment'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='periodogram_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='xticks', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='AggregationMode', ctx=Load()), attr='mean', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value='Plot the periodogram using :py:func:`scipy.signal.periodogram`.\n\n    It is useful to determine the optimal ``order`` parameter\n    for :py:class:`~etna.transforms.timestamp.fourier.FourierTransform`.\n\n    Parameters\n    ----------\n    ts:\n        TSDataset with timeseries data\n    period:\n        the period of the seasonality to capture in frequency units of time series, it should be >= 2;\n        it is translated to the ``fs`` parameter of :py:func:`scipy.signal.periodogram`\n    amplitude_aggregation_mode:\n        aggregation strategy for obtained per segment periodograms;\n        all the strategies can be examined\n        at :py:class:`~etna.analysis.feature_selection.mrmr_selection.AggregationMode`\n    periodogram_params:\n        additional keyword arguments for periodogram, :py:func:`scipy.signal.periodogram` is used\n    segments:\n        segments to use\n    xticks:\n        list of tick locations of the x-axis, useful to highlight specific reference periodicities\n    columns_num:\n        if ``amplitude_aggregation_mode="per-segment"`` number of columns in subplots, otherwise the value is ignored\n    figsize:\n        size of the figure per subplot with one segment in inches\n\n    Raises\n    ------\n    ValueError:\n        if period < 2\n    ValueError:\n        if periodogram can\'t be calculated on segment because of the NaNs inside it\n\n    Notes\n    -----\n    In non per-segment mode all segments are cut to be the same length, the last values are taken.\n    ')), If(test=Compare(left=Name(id='period', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Period should be at least 2')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='periodogram_params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='periodogram_params', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='segments', ctx=Load())), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='amplitude_aggregation_mode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='per-segment')]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load())), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="Periodogram can't be calculated on segment with NaNs inside: "), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='frequencies', ctx=Store()), Name(id='spectrum', ctx=Store())], ctx=Store())], value=Call(func=Name(id='periodogram', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='segment_df', ctx=Load())), keyword(arg='fs', value=Name(id='period', ctx=Load())), keyword(value=Name(id='periodogram_params', ctx=Load()))])), Assign(targets=[Name(id='spectrum', ctx=Store())], value=Subscript(value=Name(id='spectrum', ctx=Load()), slice=Compare(left=Name(id='frequencies', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), ctx=Load())), Assign(targets=[Name(id='frequencies', ctx=Store())], value=Subscript(value=Name(id='frequencies', ctx=Load()), slice=Compare(left=Name(id='frequencies', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='step', ctx=Load()), args=[Name(id='frequencies', ctx=Load()), Name(id='spectrum', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_xscale', ctx=Load()), args=[Constant(value='log')], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_xlabel', ctx=Load()), args=[Constant(value='Frequency')], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_ylabel', ctx=Load()), args=[Constant(value='Power spectral density')], keywords=[])), If(test=Compare(left=Name(id='xticks', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_xticks', ctx=Load()), args=[], keywords=[keyword(arg='ticks', value=Name(id='xticks', ctx=Load())), keyword(arg='labels', value=Name(id='xticks', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[JoinedStr(values=[Constant(value='Periodogram: '), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='lengths_segments', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='segment', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load())), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[]), attr='any', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="Periodogram can't be calculated on segment with NaNs inside: "), FormattedValue(value=Name(id='segment', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='lengths_segments', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='segment_df', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cut_length', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='lengths_segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='frequencies_segments', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='spectrums_segments', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='segment', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='cut_length', ctx=Load()))), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='frequencies', ctx=Store()), Name(id='spectrum', ctx=Store())], ctx=Store())], value=Call(func=Name(id='periodogram', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='segment_df', ctx=Load())), keyword(arg='fs', value=Name(id='period', ctx=Load())), keyword(value=Name(id='periodogram_params', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='frequencies_segments', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='frequencies', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='spectrums_segments', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='spectrum', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='frequencies', ctx=Store())], value=Subscript(value=Name(id='frequencies_segments', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='amplitude_aggregation_fn', ctx=Store())], value=Subscript(value=Name(id='AGGREGATION_FN', ctx=Load()), slice=Call(func=Name(id='AggregationMode', ctx=Load()), args=[Name(id='amplitude_aggregation_mode', ctx=Load())], keywords=[]), ctx=Load())), Assign(targets=[Name(id='spectrum', ctx=Store())], value=Call(func=Name(id='amplitude_aggregation_fn', ctx=Load()), args=[Name(id='spectrums_segments', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=0))])), Assign(targets=[Name(id='spectrum', ctx=Store())], value=Subscript(value=Name(id='spectrum', ctx=Load()), slice=Compare(left=Name(id='frequencies', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), ctx=Load())), Assign(targets=[Name(id='frequencies', ctx=Store())], value=Subscript(value=Name(id='frequencies', ctx=Load()), slice=Compare(left=Name(id='frequencies', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='subplots', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Name(id='figsize', ctx=Load())), keyword(arg='constrained_layout', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='step', ctx=Load()), args=[Name(id='frequencies', ctx=Load()), Name(id='spectrum', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_xscale', ctx=Load()), args=[Constant(value='log')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_xlabel', ctx=Load()), args=[Constant(value='Frequency')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_ylabel', ctx=Load()), args=[Constant(value='Power spectral density')], keywords=[])), If(test=Compare(left=Name(id='xticks', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_xticks', ctx=Load()), args=[], keywords=[keyword(arg='ticks', value=Name(id='xticks', ctx=Load())), keyword(arg='labels', value=Name(id='xticks', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='set_title', ctx=Load()), args=[Constant(value='Periodogram')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ax', ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='_create_holidays_df', args=arguments(posonlyargs=[], args=[arg(arg='holidays'), arg(arg='index', annotation=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='core', ctx=Load()), attr='indexes', ctx=Load()), attr='datetimes', ctx=Load()), attr='DatetimeIndex', ctx=Load())), arg(arg='as_is', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Parameter holidays is expected as str or pd.DataFrame')], keywords=[]))], decorator_list=[Name(id='singledispatch', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_create_holidays_df_str', args=arguments(posonlyargs=[], args=[arg(arg='holidays', annotation=Name(id='str', ctx=Load())), arg(arg='index'), arg(arg='as_is')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='as_is', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Parameter `as_is` should be used with `holiday`: pd.DataFrame, not string.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='index', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='country_holidays', ctx=Store())], value=Call(func=Attribute(value=Name(id='holidays_lib', ctx=Load()), attr='country_holidays', ctx=Load()), args=[], keywords=[keyword(arg='country', value=Name(id='holidays', ctx=Load()))])), Assign(targets=[Name(id='holiday_names', ctx=Store())], value=SetComp(elt=Call(func=Attribute(value=Name(id='country_holidays', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='timestamp_value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='timestamp_value', ctx=Store()), iter=Name(id='timestamp', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='holiday_names', ctx=Store())], value=Call(func=Attribute(value=Name(id='holiday_names', ctx=Load()), attr='difference', ctx=Load()), args=[Set(elts=[Constant(value=None)])], keywords=[])), Assign(targets=[Name(id='holidays_dict', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='holiday_name', ctx=Store()), iter=Name(id='holiday_names', ctx=Load()), body=[Assign(targets=[Name(id='cur_holiday_index', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[]), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Call(func=Attribute(value=Name(id='country_holidays', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='x', ctx=Load()), Constant(value='')], keywords=[]), ops=[Eq()], comparators=[Name(id='holiday_name', ctx=Load())]))], keywords=[])), Assign(targets=[Subscript(value=Name(id='holidays_dict', ctx=Load()), slice=Name(id='holiday_name', ctx=Load()), ctx=Store())], value=Name(id='cur_holiday_index', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='holidays_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Name(id='holidays_dict', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='holidays_df', ctx=Load()), attr='index', ctx=Store())], value=Name(id='timestamp', ctx=Load())), Return(value=Name(id='holidays_df', ctx=Load()))], decorator_list=[Attribute(value=Name(id='_create_holidays_df', ctx=Load()), attr='register', ctx=Load())]), FunctionDef(name='_create_holidays_df_dataframe', args=arguments(posonlyargs=[], args=[arg(arg='holidays', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='index'), arg(arg='as_is')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='holidays', ctx=Load()), attr='empty', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Got empty `holiday` pd.DataFrame.')], keywords=[]))], orelse=[]), If(test=Name(id='as_is', ctx=Load()), body=[Assign(targets=[Name(id='holidays_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Name(id='index', ctx=Load())), keyword(arg='columns', value=Attribute(value=Name(id='holidays', ctx=Load()), attr='columns', ctx=Load())), keyword(arg='data', value=Constant(value=False))])), Assign(targets=[Name(id='dt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='holidays_df', ctx=Load()), attr='index', ctx=Load()), attr='intersection', ctx=Load()), args=[Attribute(value=Name(id='holidays', ctx=Load()), attr='index', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='holidays_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='dt', ctx=Load()), Slice()], ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='holidays', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='dt', ctx=Load()), Slice()], ctx=Load()), ctx=Load())), Return(value=Name(id='holidays_df', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='holidays_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Name(id='index', ctx=Load())), keyword(arg='columns', value=Call(func=Attribute(value=Subscript(value=Name(id='holidays', ctx=Load()), slice=Constant(value='holiday'), ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[])), keyword(arg='data', value=Constant(value=False))])), For(target=Name(id='name', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id='holidays', ctx=Load()), slice=Constant(value='holiday'), ctx=Load()), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='freq', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='infer_freq', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ds', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='holidays', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='holidays', ctx=Load()), slice=Constant(value='holiday'), ctx=Load()), ops=[Eq()], comparators=[Name(id='name', ctx=Load())]), ctx=Load()), slice=Constant(value='ds'), ctx=Load())), Assign(targets=[Name(id='dt', ctx=Store())], value=List(elts=[Name(id='ds', ctx=Load())], ctx=Load())), If(test=Compare(left=Constant(value='upper_window'), ops=[In()], comparators=[Attribute(value=Name(id='holidays', ctx=Load()), attr='columns', ctx=Load())]), body=[Assign(targets=[Name(id='periods', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='holidays', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='holidays', ctx=Load()), slice=Constant(value='holiday'), ctx=Load()), ops=[Eq()], comparators=[Name(id='name', ctx=Load())]), ctx=Load()), slice=Constant(value='upper_window'), ctx=Load()), attr='fillna', ctx=Load()), args=[Constant(value=0)], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='periods', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Upper windows should be non-negative.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ds_upper_bound', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='timedelta_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value=0)), keyword(arg='periods', value=BinOp(left=Name(id='periods', ctx=Load()), op=Add(), right=Constant(value=1))), keyword(arg='freq', value=Name(id='freq', ctx=Load()))])), For(target=Name(id='bound', ctx=Store()), iter=Name(id='ds_upper_bound', ctx=Load()), body=[Assign(targets=[Name(id='ds_add', ctx=Store())], value=BinOp(left=Name(id='ds', ctx=Load()), op=Add(), right=Name(id='bound', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='dt', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ds_add', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Constant(value='lower_window'), ops=[In()], comparators=[Attribute(value=Name(id='holidays', ctx=Load()), attr='columns', ctx=Load())]), body=[Assign(targets=[Name(id='periods', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='holidays', ctx=Load()), slice=Compare(left=Subscript(value=Name(id='holidays', ctx=Load()), slice=Constant(value='holiday'), ctx=Load()), ops=[Eq()], comparators=[Name(id='name', ctx=Load())]), ctx=Load()), slice=Constant(value='lower_window'), ctx=Load()), attr='fillna', ctx=Load()), args=[Constant(value=0)], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='periods', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Lower windows should be non-positive.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ds_lower_bound', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='timedelta_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value=0)), keyword(arg='periods', value=BinOp(left=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='periods', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))), keyword(arg='freq', value=Name(id='freq', ctx=Load()))])), For(target=Name(id='bound', ctx=Store()), iter=Name(id='ds_lower_bound', ctx=Load()), body=[Assign(targets=[Name(id='ds_add', ctx=Store())], value=BinOp(left=Name(id='ds', ctx=Load()), op=Sub(), right=Name(id='bound', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='dt', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ds_add', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='dt', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Name(id='dt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='holidays_df', ctx=Load()), attr='index', ctx=Load()), attr='intersection', ctx=Load()), args=[Name(id='dt', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='holidays_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='dt', ctx=Load()), Name(id='name', ctx=Load())], ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Return(value=Name(id='holidays_df', ctx=Load()))], decorator_list=[Attribute(value=Name(id='_create_holidays_df', ctx=Load()), attr='register', ctx=Load())]), FunctionDef(name='plot_holidays', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='holidays', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='as_is', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value="Plot holidays for segments.\n\n    Sequence of timestamps with one holiday is drawn as a colored region.\n    Individual holiday is drawn like a colored point.\n\n    It is not possible to distinguish points plotted at one timestamp, but this case is considered rare.\n    This the problem isn't relevant for region drawing because they are partially transparent.\n\n    Parameters\n    ----------\n    ts:\n        TSDataset with timeseries data\n    holidays:\n        there are several options:\n\n        * if str, then this is code of the country in `holidays <https://pypi.org/project/holidays/>`_ library;\n\n        * if DataFrame, then dataframe is expected to be in prophet`s holiday format;\n\n    segments:\n        segments to use\n    columns_num:\n        number of columns in subplots\n    figsize:\n        size of the figure per subplot with one segment in inches\n    as_is:\n        * | Use this option if DataFrame is represented as a dataframe with a timestamp index and holiday names columns.\n          | In a holiday column values 0 represent absence of holiday in that timestamp, 1 represent the presence.\n    start:\n        start timestamp for plot\n    end:\n        end timestamp for plot\n\n    Raises\n    ------\n    ValueError:\n        * Holiday nor pd.DataFrame or String.\n        * Holiday is an empty pd.DataFrame.\n        * `as_is=True` while holiday is String.\n        * If upper_window is negative.\n        * If lower_window is positive.\n\n    ")), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_borders_ts', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='holidays_df', ctx=Store())], value=Call(func=Name(id='_create_holidays_df', ctx=Load()), args=[Name(id='holidays', ctx=Load())], keywords=[keyword(arg='index', value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load())), keyword(arg='as_is', value=Name(id='as_is', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_pandas', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Name(id='segment_df', ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assign(targets=[Name(id='target_plot', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), Name(id='segment_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='target_color', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='target_plot', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='get_color', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='default_colors', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='plt', ctx=Load()), attr='rcParams', ctx=Load()), slice=Constant(value='axes.prop_cycle'), ctx=Load()), attr='by_key', ctx=Load()), args=[], keywords=[]), slice=Constant(value='color'), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='default_colors', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='target_color', ctx=Load())], keywords=[])), Assign(targets=[Name(id='color_cycle', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='cycle', ctx=Load()), args=[Name(id='default_colors', ctx=Load())], keywords=[])), Assign(targets=[Name(id='holidays_colors', ctx=Store())], value=DictComp(key=Name(id='holiday_name', ctx=Load()), value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='color_cycle', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='holiday_name', ctx=Store()), iter=Attribute(value=Name(id='holidays_df', ctx=Load()), attr='columns', ctx=Load()), ifs=[], is_async=0)])), For(target=Name(id='holiday_name', ctx=Store()), iter=Attribute(value=Name(id='holidays_df', ctx=Load()), attr='columns', ctx=Load()), body=[Assign(targets=[Name(id='holiday_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='holidays_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), Name(id='holiday_name', ctx=Load())], ctx=Load()), ctx=Load())), For(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='holiday_group', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='groupby', ctx=Load()), args=[Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='holiday_df', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load())))]), body=[Assign(targets=[Name(id='holiday_group_cached', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='holiday_group', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indices', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='holiday_group_cached', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='values', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='holiday_group_cached', ctx=Load()), ifs=[], is_async=0)])), If(test=Compare(left=Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='color', ctx=Store())], value=Subscript(value=Name(id='holidays_colors', ctx=Load()), slice=Name(id='holiday_name', ctx=Load()), ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='indices', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='scatter', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), slice=Subscript(value=Name(id='indices', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='iloc', ctx=Load()), slice=Subscript(value=Name(id='indices', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load())], keywords=[keyword(arg='color', value=Name(id='color', ctx=Load())), keyword(arg='zorder', value=Constant(value=2))]))], orelse=[Assign(targets=[Name(id='x_min', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), slice=Subscript(value=Name(id='indices', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_max', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), slice=Subscript(value=Name(id='indices', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvline', ctx=Load()), args=[Name(id='x_min', ctx=Load())], keywords=[keyword(arg='color', value=Name(id='color', ctx=Load())), keyword(arg='linestyle', value=Constant(value='dashed'))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvline', ctx=Load()), args=[Name(id='x_max', ctx=Load())], keywords=[keyword(arg='color', value=Name(id='color', ctx=Load())), keyword(arg='linestyle', value=Constant(value='dashed'))])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvspan', ctx=Load()), args=[], keywords=[keyword(arg='xmin', value=Name(id='x_min', ctx=Load())), keyword(arg='xmax', value=Name(id='x_max', ctx=Load())), keyword(arg='alpha', value=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=4))), keyword(arg='color', value=Name(id='color', ctx=Load()))]))])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))])), Assign(targets=[Name(id='legend_handles', ctx=Store())], value=ListComp(elt=Call(func=Name(id='Line2D', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load()), List(elts=[Constant(value=0)], ctx=Load())], keywords=[keyword(arg='marker', value=Constant(value='o')), keyword(arg='color', value=Name(id='color', ctx=Load())), keyword(arg='label', value=Name(id='label', ctx=Load()))]), generators=[comprehension(target=Tuple(elts=[Name(id='label', ctx=Store()), Name(id='color', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='holidays_colors', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[keyword(arg='handles', value=Name(id='legend_handles', ctx=Load()))]))], orelse=[])], decorator_list=[]), ClassDef(name='PerFoldAggregation', bases=[Name(id='str', ctx=Load()), Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Enum for types of aggregation in a metric per-segment plot.')), Assign(targets=[Name(id='mean', ctx=Store())], value=Constant(value='mean')), Assign(targets=[Name(id='sum', ctx=Store())], value=Constant(value='median')), FunctionDef(name='_missing_', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1), Constant(value=' is not a valid '), FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='. Only '), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='m', ctx=Load()), attr='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Name(id='cls', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), conversion=-1), Constant(value=' aggregations are allowed')])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='get_function', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get aggregation function.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='mean')]), body=[Return(value=Attribute(value=Name(id='np', ctx=Load()), attr='nanmean', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='median')]), body=[Return(value=Attribute(value=Name(id='np', ctx=Load()), attr='nanmedian', ctx=Load()))], orelse=[])])], decorator_list=[])], decorator_list=[]), FunctionDef(name='plot_metric_per_segment', args=arguments(posonlyargs=[], args=[arg(arg='metrics_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='metric_name', annotation=Name(id='str', ctx=Load())), arg(arg='ascending', annotation=Name(id='bool', ctx=Load())), arg(arg='per_fold_aggregation_mode', annotation=Name(id='str', ctx=Load())), arg(arg='top_k', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='barplot_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Attribute(value=Name(id='PerFoldAggregation', ctx=Load()), attr='mean', ctx=Load()), Constant(value=None), Constant(value=None), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value="Plot barplot with per-segment metrics.\n\n    Parameters\n    ----------\n    metrics_df:\n        dataframe with metrics calculated on the backtest\n    metric_name:\n        name of the metric to visualize\n    ascending:\n\n        * If True, small values at the top;\n\n        * If False, big values at the top.\n\n    per_fold_aggregation_mode:\n        how to aggregate metrics over the folds if they aren't already aggregated\n        (see :py:class:`~etna.analysis.plotters.PerFoldAggregation`)\n    top_k:\n        number segments to show after ordering according to ``ascending``\n    barplot_params:\n        dictionary with parameters for plotting, :py:func:`seaborn.barplot` is used\n    figsize:\n        size of the figure per subplot with one segment in inches\n\n    Raises\n    ------\n    ValueError:\n        if ``metric_name`` isn't present in ``metrics_df``\n    NotImplementedError:\n        unknown ``per_fold_aggregation_mode`` is given\n    ")), If(test=Compare(left=Name(id='barplot_params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='barplot_params', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='aggregation_mode', ctx=Store())], value=Call(func=Name(id='PerFoldAggregation', ctx=Load()), args=[Name(id='per_fold_aggregation_mode', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), If(test=Compare(left=Name(id='metric_name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='metrics_df', ctx=Load()), attr='columns', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Given metric_name isn't present in metrics_df")], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='fold_number'), ops=[In()], comparators=[Attribute(value=Name(id='metrics_df', ctx=Load()), attr='columns', ctx=Load())]), body=[Assign(targets=[Name(id='metrics_dict', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='metrics_df', ctx=Load()), attr='groupby', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='agg', ctx=Load()), args=[Dict(keys=[Name(id='metric_name', ctx=Load())], values=[Call(func=Attribute(value=Name(id='aggregation_mode', ctx=Load()), attr='get_function', ctx=Load()), args=[], keywords=[])])], keywords=[]), attr='to_dict', ctx=Load()), args=[], keywords=[]), slice=Name(id='metric_name', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='metrics_dict', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Name(id='metrics_df', ctx=Load()), slice=Tuple(elts=[Constant(value='segment'), Name(id='metric_name', ctx=Load())], ctx=Load()), ctx=Load()), attr='to_dict', ctx=Load()), args=[], keywords=[]), slice=Name(id='metric_name', ctx=Load()), ctx=Load()))]), Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='metrics_dict', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='metrics_dict', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='sort_idx', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argsort', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='ascending', ctx=Load())), body=[Assign(targets=[Name(id='sort_idx', ctx=Store())], value=Subscript(value=Name(id='sort_idx', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='segments', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='segments', ctx=Load()), slice=Name(id='sort_idx', ctx=Load()), ctx=Load()), slice=Slice(upper=Name(id='top_k', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='values', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='values', ctx=Load()), slice=Name(id='sort_idx', ctx=Load()), ctx=Load()), slice=Slice(upper=Name(id='top_k', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='sns', ctx=Load()), attr='barplot', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='values', ctx=Load())), keyword(arg='y', value=Name(id='segments', ctx=Load())), keyword(arg='orient', value=Constant(value='h')), keyword(value=Name(id='barplot_params', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='title', ctx=Load()), args=[Constant(value='Metric per-segment plot')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Segment')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Name(id='metric_name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), ClassDef(name='MetricPlotType', bases=[Name(id='str', ctx=Load()), Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Enum for types of plot in :py:func:`~etna.analysis.plotters.metric_per_segment_distribution_plot`.\n\n    Attributes\n    ----------\n    hist:\n        Histogram plot, :py:func:`seaborn.histplot` is used\n    box:\n        Boxplot, :py:func:`seaborn.boxplot` is used\n    violin:\n        Violin plot, :py:func:`seaborn.violinplot` is used\n    ')), Assign(targets=[Name(id='hist', ctx=Store())], value=Constant(value='hist')), Assign(targets=[Name(id='box', ctx=Store())], value=Constant(value='box')), Assign(targets=[Name(id='violin', ctx=Store())], value=Constant(value='violin')), FunctionDef(name='_missing_', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1), Constant(value=' is not a valid '), FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='. Only '), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='m', ctx=Load()), attr='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Name(id='cls', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), conversion=-1), Constant(value=' plots are allowed')])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='get_function', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get aggregation function.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='hist')]), body=[Return(value=Attribute(value=Name(id='sns', ctx=Load()), attr='histplot', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='box')]), body=[Return(value=Attribute(value=Name(id='sns', ctx=Load()), attr='boxplot', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='violin')]), body=[Return(value=Attribute(value=Name(id='sns', ctx=Load()), attr='violinplot', ctx=Load()))], orelse=[])])])], decorator_list=[])], decorator_list=[]), FunctionDef(name='metric_per_segment_distribution_plot', args=arguments(posonlyargs=[], args=[arg(arg='metrics_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='metric_name', annotation=Name(id='str', ctx=Load())), arg(arg='per_fold_aggregation_mode', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='plot_type', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='hist'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='box'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='violin'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='seaborn_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value='hist'), Constant(value=None), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), body=[Expr(value=Constant(value="Plot per-segment metrics distribution.\n\n    Parameters\n    ----------\n    metrics_df:\n        dataframe with metrics calculated on the backtest\n    metric_name:\n        name of the metric to visualize\n    per_fold_aggregation_mode:\n\n        * If None, separate distributions for each fold will be drawn\n\n        * If str, determines how to aggregate metrics over the folds if they aren't already aggregated\n        (see :py:class:`~etna.analysis.plotters.PerFoldAggregation`)\n\n    plot_type:\n        type of plot (see :py:class:`~etna.analysis.plotters.MetricPlotType`)\n    seaborn_params:\n        dictionary with parameters for plotting\n    figsize:\n        size of the figure per subplot with one segment in inches\n\n    Raises\n    ------\n    ValueError:\n        if ``metric_name`` isn't present in ``metrics_df``\n    NotImplementedError:\n        unknown ``per_fold_aggregation_mode`` is given\n    ")), If(test=Compare(left=Name(id='seaborn_params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='seaborn_params', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='metrics_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='metrics_df', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))])), Assign(targets=[Name(id='plot_type_enum', ctx=Store())], value=Call(func=Name(id='MetricPlotType', ctx=Load()), args=[Name(id='plot_type', ctx=Load())], keywords=[])), Assign(targets=[Name(id='plot_function', ctx=Store())], value=Call(func=Attribute(value=Name(id='plot_type_enum', ctx=Load()), attr='get_function', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), If(test=Compare(left=Name(id='metric_name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='metrics_df', ctx=Load()), attr='columns', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Given metric_name isn't present in metrics_df")], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='per_fold_aggregation_mode', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Constant(value='fold_number'), ops=[In()], comparators=[Attribute(value=Name(id='metrics_df', ctx=Load()), attr='columns', ctx=Load())])]), body=[If(test=Compare(left=Name(id='plot_type_enum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MetricPlotType', ctx=Load()), attr='hist', ctx=Load())]), body=[Expr(value=Call(func=Name(id='plot_function', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Name(id='metrics_df', ctx=Load())), keyword(arg='x', value=Name(id='metric_name', ctx=Load())), keyword(arg='hue', value=Constant(value='fold_number')), keyword(value=Name(id='seaborn_params', ctx=Load()))]))], orelse=[Expr(value=Call(func=Name(id='plot_function', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Name(id='metrics_df', ctx=Load())), keyword(arg='x', value=Constant(value='fold_number')), keyword(arg='y', value=Name(id='metric_name', ctx=Load())), keyword(value=Name(id='seaborn_params', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Fold')], keywords=[]))])], orelse=[If(test=Compare(left=Constant(value='fold_number'), ops=[In()], comparators=[Attribute(value=Name(id='metrics_df', ctx=Load()), attr='columns', ctx=Load())]), body=[Assign(targets=[Name(id='agg_func', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='PerFoldAggregation', ctx=Load()), args=[Name(id='per_fold_aggregation_mode', ctx=Load())], keywords=[]), attr='get_function', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='metrics_df', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='metrics_df', ctx=Load()), attr='groupby', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='agg', ctx=Load()), args=[Dict(keys=[Name(id='metric_name', ctx=Load())], values=[Name(id='agg_func', ctx=Load())])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='plot_type_enum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MetricPlotType', ctx=Load()), attr='hist', ctx=Load())]), body=[Expr(value=Call(func=Name(id='plot_function', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Name(id='metrics_df', ctx=Load())), keyword(arg='x', value=Name(id='metric_name', ctx=Load())), keyword(value=Name(id='seaborn_params', ctx=Load()))]))], orelse=[Expr(value=Call(func=Name(id='plot_function', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Name(id='metrics_df', ctx=Load())), keyword(arg='y', value=Name(id='metric_name', ctx=Load())), keyword(value=Name(id='seaborn_params', ctx=Load()))]))])]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='title', ctx=Load()), args=[Constant(value='Metric per-segment distribution plot')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='plot_change_points_interactive', args=arguments(posonlyargs=[], args=[arg(arg='ts'), arg(arg='change_point_model', annotation=Name(id='BaseEstimator', ctx=Load())), arg(arg='model', annotation=Name(id='BaseCost', ctx=Load())), arg(arg='params_bounds', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='model_params', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='predict_params', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='segments', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='columns_num', annotation=Name(id='int', ctx=Load())), arg(arg='figsize', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='target'), Constant(value=None), Constant(value=2), Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load()), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Plot a time series with indicated change points.\n\n    Change points are obtained using the specified method. The method parameters values\n    can be changed using the corresponding sliders.\n\n    Parameters\n    ----------\n    ts:\n        TSDataset with timeseries data\n    change_point_model:\n        model to get trend change points\n    model:\n        binseg segment model, ["l1", "l2", "rbf",...]. Not used if \'custom_cost\' is not None\n    params_bounds:\n        Parameters ranges of the change points detection. Bounds for the parameter are (min,max,step)\n    model_params:\n        List of iterable parameters for initialize the model\n    predict_params:\n        List of iterable parameters for predict method\n    in_column:\n        column to plot\n    segments:\n        segments to use\n    columns_num:\n        number of subplots columns\n    figsize:\n        size of the figure in inches\n    start:\n        start timestamp for plot\n    end:\n        end timestamp for plot\n\n    Notes\n    -----\n    Jupyter notebook might display the results incorrectly,\n    in this case try to use ``!jupyter nbextension enable --py widgetsnbextension``.\n\n    Examples\n    --------\n    >>> from etna.datasets import TSDataset\n    >>> from etna.datasets import generate_ar_df\n    >>> from etna.analysis import plot_change_points_interactive\n    >>> from ruptures.detection import Binseg\n    >>> classic_df = generate_ar_df(periods=1000, start_time="2021-08-01", n_segments=2)\n    >>> df = TSDataset.to_dataset(classic_df)\n    >>> ts = TSDataset(df, "D")\n    >>> params_bounds = {"n_bkps": [0, 5, 1], "min_size":[1,10,3]}\n    >>> plot_change_points_interactive(ts=ts, change_point_model=Binseg, model="l2", params_bounds=params_bounds, model_params=["min_size"], predict_params=["n_bkps"], figsize=(20, 10)) # doctest: +SKIP\n    ')), ImportFrom(module='ipywidgets', names=[alias(name='FloatSlider')], level=0), ImportFrom(module='ipywidgets', names=[alias(name='IntSlider')], level=0), ImportFrom(module='ipywidgets', names=[alias(name='interact')], level=0), If(test=Compare(left=Name(id='segments', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cache', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='sliders', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='style', ctx=Store())], value=Dict(keys=[Constant(value='description_width')], values=[Constant(value='initial')])), For(target=Tuple(elts=[Name(id='param', ctx=Store()), Name(id='bounds', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='params_bounds', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='min_', ctx=Store()), Name(id='max_', ctx=Store()), Name(id='step', ctx=Store())], ctx=Store())], value=Name(id='bounds', ctx=Load())), If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='min_', ctx=Load()), Name(id='float', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='max_', ctx=Load()), Name(id='float', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='step', ctx=Load()), Name(id='float', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='sliders', ctx=Load()), slice=Name(id='param', ctx=Load()), ctx=Store())], value=Call(func=Name(id='FloatSlider', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Name(id='min_', ctx=Load())), keyword(arg='max', value=Name(id='max_', ctx=Load())), keyword(arg='step', value=Name(id='step', ctx=Load())), keyword(arg='continuous_update', value=Constant(value=False)), keyword(arg='style', value=Name(id='style', ctx=Load()))]))], orelse=[Assign(targets=[Subscript(value=Name(id='sliders', ctx=Load()), slice=Name(id='param', ctx=Load()), ctx=Store())], value=Call(func=Name(id='IntSlider', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Name(id='min_', ctx=Load())), keyword(arg='max', value=Name(id='max_', ctx=Load())), keyword(arg='step', value=Name(id='step', ctx=Load())), keyword(arg='continuous_update', value=Constant(value=False)), keyword(arg='style', value=Name(id='style', ctx=Load()))]))])], orelse=[]), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ax', ctx=Store())], ctx=Store())], value=Call(func=Name(id='prepare_axes', ctx=Load()), args=[], keywords=[keyword(arg='num_plots', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), keyword(arg='columns_num', value=Name(id='columns_num', ctx=Load())), keyword(arg='figsize', value=Name(id='figsize', ctx=Load()))])), Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Constant(value='_'), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='val', ctx=Store()), iter=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='is_fitted', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='cache', ctx=Load())]), body=[Assign(targets=[Name(id='m_params', ctx=Store())], value=DictComp(key=Name(id='x', ctx=Load()), value=Subscript(value=Name(id='kwargs', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='model_params', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='p_params', ctx=Store())], value=DictComp(key=Name(id='x', ctx=Load()), value=Subscript(value=Name(id='kwargs', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='predict_params', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[Assign(targets=[Name(id='is_fitted', ctx=Store())], value=Constant(value=True))]), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='segment', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='segment_df', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='timestamp', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='segment_df', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='target', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='segment_df', ctx=Load()), slice=Name(id='in_column', ctx=Load()), ctx=Load()), attr='values', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='is_fitted', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='algo', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='change_point_model', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(value=Name(id='m_params', ctx=Load()))]), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='signal', value=Name(id='target', ctx=Load()))])), Assign(targets=[Name(id='bkps', ctx=Store())], value=Call(func=Attribute(value=Name(id='algo', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[keyword(value=Name(id='p_params', ctx=Load()))])), Assign(targets=[Subscript(value=Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Store())], value=Name(id='bkps', ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Constant(value=1)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='BadSegmentationParameters', ctx=Load()), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='segment_bkps', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='segment_bkps', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='idx', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='segment_bkps', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='bkp', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='segment_bkps', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load()), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='start_time', ctx=Store())], value=Subscript(value=Name(id='timestamp', ctx=Load()), slice=Name(id='bkp', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='end_time', ctx=Store())], value=Subscript(value=Name(id='timestamp', ctx=Load()), slice=BinOp(left=Subscript(value=Name(id='segment_bkps', ctx=Load()), slice=BinOp(left=Name(id='idx', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='selected_indices', ctx=Store())], value=BinOp(left=Compare(left=Name(id='timestamp', ctx=Load()), ops=[GtE()], comparators=[Name(id='start_time', ctx=Load())]), op=BitAnd(), right=Compare(left=Name(id='timestamp', ctx=Load()), ops=[LtE()], comparators=[Name(id='end_time', ctx=Load())]))), Assign(targets=[Name(id='cur_timestamp', ctx=Store())], value=Subscript(value=Name(id='timestamp', ctx=Load()), slice=Name(id='selected_indices', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='cur_target', ctx=Store())], value=Subscript(value=Name(id='target', ctx=Load()), slice=Name(id='selected_indices', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='cur_timestamp', ctx=Load()), Name(id='cur_target', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='bkp', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='axvline', ctx=Load()), args=[Subscript(value=Name(id='timestamp', ctx=Load()), slice=Name(id='bkp', ctx=Load()), ctx=Load())], keywords=[keyword(arg='linestyle', value=Constant(value='dashed')), keyword(arg='c', value=Constant(value='grey'))]))], orelse=[])], orelse=[])], orelse=[Assign(targets=[Name(id='box', ctx=Store())], value=Dict(keys=[Constant(value='facecolor'), Constant(value='edgecolor'), Constant(value='boxstyle')], values=[Constant(value='grey'), Constant(value='red'), Constant(value='round')])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='text', ctx=Load()), args=[Constant(value=0.5), Constant(value=0.4), Constant(value='Parameters\nError')], keywords=[keyword(arg='bbox', value=Name(id='box', ctx=Load())), keyword(arg='horizontalalignment', value=Constant(value='center')), keyword(arg='color', value=Constant(value='white')), keyword(arg='fontsize', value=Constant(value=50))]))]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ax', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='tick_params', ctx=Load()), args=[Constant(value='x')], keywords=[keyword(arg='rotation', value=Constant(value=45))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), Expr(value=Call(func=Name(id='interact', ctx=Load()), args=[Name(id='update', ctx=Load())], keywords=[keyword(value=Name(id='sliders', ctx=Load()))]))], decorator_list=[])], type_ignores=[])