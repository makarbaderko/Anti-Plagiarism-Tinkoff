Module(body=[ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='statsmodels.tsa.arima.model', names=[alias(name='ARIMA')], level=0), ImportFrom(module='statsmodels.tsa.base.tsa_model', names=[alias(name='TimeSeriesModel')], level=0), ImportFrom(module='statsmodels.tsa.exponential_smoothing.ets', names=[alias(name='ETSModel')], level=0), ImportFrom(module='statsmodels.tsa.forecasting.stl', names=[alias(name='STLForecast')], level=0), ImportFrom(module='statsmodels.tsa.forecasting.stl', names=[alias(name='STLForecastResults')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='PerSegmentWrapper')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ImportFrom(module='etna.transforms.utils', names=[alias(name='match_target_quantiles')], level=0), ClassDef(name='_OneSegmentSTLTransform', bases=[Name(id='Transform', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='period', annotation=Name(id='int', ctx=Load())), arg(arg='model', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='TimeSeriesModel', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='robust', annotation=Name(id='bool', ctx=Load())), arg(arg='model_kwargs', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='stl_kwargs', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='arima'), Constant(value=False), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Init _OneSegmentSTLTransform.\n\n        Parameters\n        ----------\n        in_column:\n            name of processed column\n        period:\n            size of seasonality\n        model:\n            model to predict trend, default options are:\n\n            1. "arima": ``ARIMA(data, 1, 1, 0)`` (default)\n\n            2. "holt": ``ETSModel(data, trend=\'add\')``\n\n            Custom model should be a subclass of :py:class:`statsmodels.tsa.base.tsa_model.TimeSeriesModel`\n            and have method ``get_prediction`` (not just ``predict``)\n        robust:\n            flag indicating whether to use robust version of STL\n        model_kwargs:\n            parameters for the model like in :py:class:`statsmodels.tsa.seasonal.STLForecast`\n        stl_kwargs:\n            additional parameters for :py:class:`statsmodels.tsa.seasonal.STLForecast`\n        ')), If(test=Compare(left=Name(id='model_kwargs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='model_kwargs', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), If(test=Compare(left=Name(id='stl_kwargs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='stl_kwargs', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='period', ctx=Store())], value=Name(id='period', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='model', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='model', ctx=Load()), ops=[Eq()], comparators=[Constant(value='arima')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Name(id='ARIMA', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='model_kwargs', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='model_kwargs', ctx=Store())], value=Dict(keys=[Constant(value='order')], values=[Tuple(elts=[Constant(value=1), Constant(value=1), Constant(value=0)], ctx=Load())]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='model', ctx=Load()), ops=[Eq()], comparators=[Constant(value='holt')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Name(id='ETSModel', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='model_kwargs', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='model_kwargs', ctx=Store())], value=Dict(keys=[Constant(value='trend')], values=[Constant(value='add')]))], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Not a valid option for model: '), FormattedValue(value=Name(id='model', ctx=Load()), conversion=-1)])], keywords=[]))])])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='model', ctx=Load()), Name(id='TimeSeriesModel', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Name(id='model', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Model should be a string or TimeSeriesModel')], keywords=[]))])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='robust', ctx=Store())], value=Name(id='robust', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model_kwargs', ctx=Store())], value=Name(id='model_kwargs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stl_kwargs', ctx=Store())], value=Name(id='stl_kwargs', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='fit_results', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='STLForecastResults', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Perform STL decomposition and fit trend model.\n\n        Parameters\n        ----------\n        df:\n            Features dataframe with time\n\n        Returns\n        -------\n        result: _OneSegmentSTLTransform\n            instance after processing\n        ')), Assign(targets=[Name(id='df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[])), ctx=Load())), If(test=Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[]), attr='values', ctx=Load()), attr='any', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='The input column contains NaNs in the middle of the series! Try to use the imputer.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='STLForecast', ctx=Load()), args=[Subscript(value=Name(id='df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load())], keywords=[keyword(arg='model_kwargs', value=Attribute(value=Name(id='self', ctx=Load()), attr='model_kwargs', ctx=Load())), keyword(arg='period', value=Attribute(value=Name(id='self', ctx=Load()), attr='period', ctx=Load())), keyword(arg='robust', value=Attribute(value=Name(id='self', ctx=Load()), attr='robust', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='stl_kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_results', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='_OneSegmentSTLTransform')), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Subtract trend and seasonal component.\n\n        Parameters\n        ----------\n        df:\n            Features dataframe with time\n\n        Returns\n        -------\n        result: pd.DataFrame\n            Dataframe with extracted features\n        ')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='fit_results', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='season_trend', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_results', ctx=Load()), attr='get_prediction', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), keyword(arg='end', value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[]))]), attr='predicted_mean', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Transform is not fitted! Fit the Transform before calling transform method.')], keywords=[]))]), AugAssign(target=Subscript(value=Name(id='result', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Store()), op=Sub(), value=Name(id='season_trend', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='inverse_transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add trend and seasonal component.\n\n        Parameters\n        ----------\n        df:\n            Features dataframe with time\n\n        Returns\n        -------\n        result: pd.DataFrame\n            Dataframe with extracted features\n        ')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='fit_results', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Transform is not fitted! Fit the Transform before calling inverse_transform method.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='season_trend', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_results', ctx=Load()), attr='get_prediction', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='first_valid_index', ctx=Load()), args=[], keywords=[])), keyword(arg='end', value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load()), attr='last_valid_index', ctx=Load()), args=[], keywords=[]))]), attr='predicted_mean', ctx=Load())), AugAssign(target=Subscript(value=Name(id='result', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Store()), op=Add(), value=Name(id='season_trend', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ops=[Eq()], comparators=[Constant(value='target')]), body=[Assign(targets=[Name(id='quantiles', ctx=Store())], value=Call(func=Name(id='match_target_quantiles', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='columns', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='quantile_column_nm', ctx=Store()), iter=Name(id='quantiles', ctx=Load()), body=[AugAssign(target=Subscript(value=Attribute(value=Name(id='result', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='quantile_column_nm', ctx=Load())], ctx=Load()), ctx=Store()), op=Add(), value=Name(id='season_trend', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], decorator_list=[]), ClassDef(name='STLTransform', bases=[Name(id='PerSegmentWrapper', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Transform that uses :py:class:`statsmodels.tsa.seasonal.STL` to subtract season and trend from the data.\n\n    Warning\n    -------\n    This transform can suffer from look-ahead bias. For transforming data at some timestamp\n    it uses information from the whole train part.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='period', annotation=Name(id='int', ctx=Load())), arg(arg='model', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='TimeSeriesModel', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='robust', annotation=Name(id='bool', ctx=Load())), arg(arg='model_kwargs', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='stl_kwargs', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='arima'), Constant(value=False), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Init STLTransform.\n\n        Parameters\n        ----------\n        in_column:\n            name of processed column\n        period:\n            size of seasonality\n        model:\n            model to predict trend, default options are:\n\n            1. "arima": ``ARIMA(data, 1, 1, 0)`` (default)\n\n            2. "holt": ``ETSModel(data, trend=\'add\')``\n\n            Custom model should be a subclass of :py:class:`statsmodels.tsa.base.tsa_model.TimeSeriesModel`\n            and have method ``get_prediction`` (not just ``predict``)\n        robust:\n            flag indicating whether to use robust version of STL\n        model_kwargs:\n            parameters for the model like in :py:class:`statsmodels.tsa.seasonal.STLForecast`\n        stl_kwargs:\n            additional parameters for :py:class:`statsmodels.tsa.seasonal.STLForecast`\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='period', ctx=Store())], value=Name(id='period', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Name(id='model', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='robust', ctx=Store())], value=Name(id='robust', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model_kwargs', ctx=Store())], value=Name(id='model_kwargs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stl_kwargs', ctx=Store())], value=Name(id='stl_kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Call(func=Name(id='_OneSegmentSTLTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(arg='period', value=Attribute(value=Name(id='self', ctx=Load()), attr='period', ctx=Load())), keyword(arg='model', value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load())), keyword(arg='robust', value=Attribute(value=Name(id='self', ctx=Load()), attr='robust', ctx=Load())), keyword(arg='model_kwargs', value=Attribute(value=Name(id='self', ctx=Load()), attr='model_kwargs', ctx=Load())), keyword(arg='stl_kwargs', value=Attribute(value=Name(id='self', ctx=Load()), attr='stl_kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])