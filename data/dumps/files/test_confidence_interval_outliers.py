Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.analysis', names=[alias(name='get_anomalies_prediction_interval')], level=0), ImportFrom(module='etna.analysis.outliers.prediction_interval_outliers', names=[alias(name='create_ts_by_column')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.models', names=[alias(name='ProphetModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='SARIMAXModel')], level=0), FunctionDef(name='test_create_ts_by_column_interface', args=arguments(posonlyargs=[], args=[arg(arg='outliers_tsds'), arg(arg='column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test that `create_ts_column` produces correct columns.')), Assign(targets=[Name(id='new_ts', ctx=Store())], value=Call(func=Name(id='create_ts_by_column', ctx=Load()), args=[Name(id='outliers_tsds', ctx=Load()), Name(id='column', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='new_ts', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='outliers_tsds', ctx=Load()), attr='segments', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='new_ts', ctx=Load()), attr='segments', ctx=Load())])), Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='new_ts', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), attr='tolist', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[List(elts=[Constant(value='target')], ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='column'), List(elts=[Constant(value='exog')], ctx=Load())], keywords=[])]), FunctionDef(name='test_create_ts_by_column_retain_column', args=arguments(posonlyargs=[], args=[arg(arg='outliers_tsds'), arg(arg='column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test that `create_ts_column` selects correct data in selected columns.')), Assign(targets=[Name(id='new_ts', ctx=Store())], value=Call(func=Name(id='create_ts_by_column', ctx=Load()), args=[Name(id='outliers_tsds', ctx=Load()), Name(id='column', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='new_ts', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='new_series', ctx=Store())], value=Subscript(value=Name(id='new_ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='original_series', ctx=Store())], value=Subscript(value=Name(id='outliers_tsds', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Name(id='column', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='new_series', ctx=Store())], value=Subscript(value=Name(id='new_series', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Call(func=Attribute(value=Name(id='new_series', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assign(targets=[Name(id='original_series', ctx=Store())], value=Subscript(value=Name(id='original_series', ctx=Load()), slice=UnaryOp(op=Invert(), operand=Call(func=Attribute(value=Name(id='original_series', ctx=Load()), attr='isna', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='new_series', ctx=Load()), ops=[Eq()], comparators=[Name(id='original_series', ctx=Load())])], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='column'), List(elts=[Constant(value='exog')], ctx=Load())], keywords=[])]), FunctionDef(name='test_get_anomalies_prediction_interval_interface', args=arguments(posonlyargs=[], args=[arg(arg='outliers_tsds'), arg(arg='model'), arg(arg='in_column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test that `get_anomalies_prediction_interval` produces correct columns.')), Assign(targets=[Name(id='anomalies', ctx=Store())], value=Call(func=Name(id='get_anomalies_prediction_interval', ctx=Load()), args=[Name(id='outliers_tsds', ctx=Load())], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='interval_width', value=Constant(value=0.95)), keyword(arg='in_column', value=Name(id='in_column', ctx=Load()))])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='anomalies', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='anomalies', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='outliers_tsds', ctx=Load()), attr='segments', ctx=Load())], keywords=[])])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Name(id='anomalies', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='anomalies', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), For(target=Name(id='date', ctx=Store()), iter=Subscript(value=Name(id='anomalies', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='date', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='in_column'), List(elts=[Constant(value='target'), Constant(value='exog')], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), Tuple(elts=[Name(id='ProphetModel', ctx=Load()), Name(id='SARIMAXModel', ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_get_anomalies_prediction_interval_values', args=arguments(posonlyargs=[], args=[arg(arg='outliers_tsds'), arg(arg='model'), arg(arg='interval_width'), arg(arg='true_anomalies'), arg(arg='in_column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test that `get_anomalies_prediction_interval` generates correct values.')), Assert(test=Compare(left=Call(func=Name(id='get_anomalies_prediction_interval', ctx=Load()), args=[Name(id='outliers_tsds', ctx=Load())], keywords=[keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(arg='interval_width', value=Name(id='interval_width', ctx=Load())), keyword(arg='in_column', value=Name(id='in_column', ctx=Load()))]), ops=[Eq()], comparators=[Name(id='true_anomalies', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='in_column'), List(elts=[Constant(value='target'), Constant(value='exog')], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model, interval_width, true_anomalies'), Tuple(elts=[Tuple(elts=[Name(id='ProphetModel', ctx=Load()), Constant(value=0.95), Dict(keys=[Constant(value='1'), Constant(value='2')], values=[List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-11')], keywords=[])], ctx=Load()), List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-09')], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-27')], keywords=[])], ctx=Load())])], ctx=Load()), Tuple(elts=[Name(id='SARIMAXModel', ctx=Load()), Constant(value=0.999), Dict(keys=[Constant(value='1'), Constant(value='2')], values=[List(elts=[], ctx=Load()), List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-27')], keywords=[])], ctx=Load())])], ctx=Load())], ctx=Load())], keywords=[])])], type_ignores=[])