Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.analysis.outliers', names=[alias(name='get_anomalies_median')], level=0), FunctionDef(name='test_const_ts', args=arguments(posonlyargs=[], args=[arg(arg='const_ts_anomal')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='anomal', ctx=Store())], value=Call(func=Name(id='get_anomalies_median', ctx=Load()), args=[Name(id='const_ts_anomal', ctx=Load())], keywords=[])), Assert(test=Compare(left=Set(elts=[Constant(value='segment_0'), Constant(value='segment_1')]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='anomal', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])])), For(target=Name(id='seg', ctx=Store()), iter=Call(func=Attribute(value=Name(id='anomal', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='anomal', ctx=Load()), slice=Name(id='seg', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_median_outliers', args=arguments(posonlyargs=[], args=[arg(arg='window_size'), arg(arg='alpha'), arg(arg='right_anomal'), arg(arg='outliers_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Call(func=Name(id='get_anomalies_median', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='outliers_tsds', ctx=Load())), keyword(arg='window_size', value=Name(id='window_size', ctx=Load())), keyword(arg='alpha', value=Name(id='alpha', ctx=Load()))]), ops=[Eq()], comparators=[Name(id='right_anomal', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='window_size, alpha, right_anomal'), Tuple(elts=[Tuple(elts=[Constant(value=10), Constant(value=3), Dict(keys=[Constant(value='1'), Constant(value='2')], values=[List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-11')], keywords=[])], ctx=Load()), List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-09')], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-27')], keywords=[])], ctx=Load())])], ctx=Load()), Tuple(elts=[Constant(value=10), Constant(value=2), Dict(keys=[Constant(value='1'), Constant(value='2')], values=[List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-11')], keywords=[])], ctx=Load()), List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-09')], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-16')], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-27')], keywords=[])], ctx=Load())])], ctx=Load()), Tuple(elts=[Constant(value=20), Constant(value=2), Dict(keys=[Constant(value='1'), Constant(value='2')], values=[List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-11')], keywords=[])], ctx=Load()), List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-09')], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-27')], keywords=[])], ctx=Load())])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_interface_correct_args', args=arguments(posonlyargs=[], args=[arg(arg='true_params'), arg(arg='outliers_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Name(id='get_anomalies_median', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='outliers_tsds', ctx=Load())), keyword(arg='window_size', value=Constant(value=10)), keyword(arg='alpha', value=Constant(value=2))])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='d', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='true_params', ctx=Load())], keywords=[])])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='j', ctx=Store()), iter=Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='j', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='true_params'), Tuple(elts=[List(elts=[Constant(value='1'), Constant(value='2')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_in_column', args=arguments(posonlyargs=[], args=[arg(arg='outliers_df_with_two_columns')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='outliers', ctx=Store())], value=Call(func=Name(id='get_anomalies_median', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='outliers_df_with_two_columns', ctx=Load())), keyword(arg='in_column', value=Constant(value='feature')), keyword(arg='window_size', value=Constant(value=10))])), Assign(targets=[Name(id='expected', ctx=Store())], value=Dict(keys=[Constant(value='1'), Constant(value='2')], values=[List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-08')], keywords=[])], ctx=Load()), List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='datetime64', ctx=Load()), args=[Constant(value='2021-01-26')], keywords=[])], ctx=Load())])), For(target=Name(id='key', ctx=Store()), iter=Name(id='expected', ctx=Load()), body=[Assert(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='outliers', ctx=Load())])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Subscript(value=Name(id='outliers', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), Subscript(value=Name(id='expected', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])