Module(body=[ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), Import(names=[alias(name='numba')]), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.clustering.distances.base', names=[alias(name='Distance')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0)], orelse=[]), FunctionDef(name='simple_dist', args=arguments(posonlyargs=[], args=[arg(arg='x1', annotation=Name(id='float', ctx=Load())), arg(arg='x2', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get distance between two samples for dtw distance.\n\n    Parameters\n    ----------\n    x1:\n        first value\n    x2:\n        second value\n\n    Returns\n    -------\n    float:\n        distance between x1 and x2\n    ')), Return(value=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='x1', ctx=Load()), op=Sub(), right=Name(id='x2', ctx=Load()))], keywords=[]))], decorator_list=[Attribute(value=Name(id='numba', ctx=Load()), attr='njit', ctx=Load())], returns=Name(id='float', ctx=Load())), ClassDef(name='DTWDistance', bases=[Name(id='Distance', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='DTW distance handler.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='points_distance', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='trim_series', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='simple_dist', ctx=Load()), Constant(value=False)]), body=[Expr(value=Constant(value="Init DTWDistance.\n\n        Parameters\n        ----------\n        points_distance:\n            function to be used for computation of distance between two series' points\n        trim_series:\n            True if it is necessary to trim series, default False.\n\n        Notes\n        -----\n        Specifying manual ``points_distance`` might slow down the clustering algorithm.\n        ")), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='trim_series', value=Name(id='trim_series', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='points_distance', ctx=Store())], value=Name(id='points_distance', ctx=Load()))], decorator_list=[]), FunctionDef(name='_build_matrix', args=arguments(posonlyargs=[], args=[arg(arg='x1', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='x2', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='points_distance', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Build dtw-distance matrix for series x1 and x2.')), Assign(targets=[Tuple(elts=[Name(id='x1_size', ctx=Store()), Name(id='x2_size', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x1', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x2', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='matrix', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='empty', ctx=Load()), args=[], keywords=[keyword(arg='shape', value=Tuple(elts=[Name(id='x1_size', ctx=Load()), Name(id='x2_size', ctx=Load())], ctx=Load()))])), Assign(targets=[Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Call(func=Name(id='points_distance', ctx=Load()), args=[Subscript(value=Name(id='x1', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='x2', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='x1_size', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Store())], value=BinOp(left=Call(func=Name(id='points_distance', ctx=Load()), args=[Subscript(value=Name(id='x1', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x2', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load())))], orelse=[]), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='x2_size', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Store())], value=BinOp(left=Call(func=Name(id='points_distance', ctx=Load()), args=[Subscript(value=Name(id='x1', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='x2', ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='x1_size', ctx=Load())], keywords=[]), body=[For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='x2_size', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Store())], value=BinOp(left=Call(func=Name(id='points_distance', ctx=Load()), args=[Subscript(value=Name(id='x1', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x2', ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load()), Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])))], orelse=[])], orelse=[]), Return(value=Name(id='matrix', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load()), Attribute(value=Name(id='numba', ctx=Load()), attr='njit', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_path', args=arguments(posonlyargs=[], args=[arg(arg='matrix', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Build a warping path with given matrix of dtw-distance.')), Assign(targets=[Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], value=Tuple(elts=[BinOp(left=Subscript(value=Attribute(value=Name(id='matrix', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Subscript(value=Attribute(value=Name(id='matrix', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1))], ctx=Load())), Assign(targets=[Name(id='path', ctx=Store())], value=List(elts=[Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], ctx=Load())), While(test=BoolOp(op=And(), values=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())]), body=[Assign(targets=[Name(id='candidates', ctx=Store())], value=List(elts=[Tuple(elts=[BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), Name(id='j', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='i', ctx=Load()), BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Constant(value=1))], ctx=Load()), Tuple(elts=[BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Constant(value=1))], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='costs', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='matrix', ctx=Load()), slice=Name(id='c', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='candidates', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmin', ctx=Load()), args=[Name(id='costs', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='candidates', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), While(test=Name(id='i', ctx=Load()), body=[Assign(targets=[Name(id='i', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1))), Expr(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), While(test=Name(id='j', ctx=Load()), body=[Assign(targets=[Name(id='j', ctx=Store())], value=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Constant(value=1))), Expr(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load()), Attribute(value=Name(id='numba', ctx=Load()), attr='njit', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_compute_distance', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x1', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='x2', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute distance between x1 and x2.')), Assign(targets=[Name(id='matrix', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_matrix', ctx=Load()), args=[], keywords=[keyword(arg='x1', value=Name(id='x1', ctx=Load())), keyword(arg='x2', value=Name(id='x2', ctx=Load())), keyword(arg='points_distance', value=Attribute(value=Name(id='self', ctx=Load()), attr='points_distance', ctx=Load()))])), Return(value=Subscript(value=Subscript(value=Name(id='matrix', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='_dba_iteration', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='initial_centroid', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='series_list', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Run DBA iteration.\n        * for each series from series list build a dtw matrix and warping path\n        * update values of centroid with values from series according to path\n        ')), Assign(targets=[Name(id='assoc_table', ctx=Store())], value=Call(func=Attribute(value=Name(id='initial_centroid', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='n_samples', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[], keywords=[keyword(arg='shape', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='initial_centroid', ctx=Load())], keywords=[]))])), For(target=Name(id='series', ctx=Store()), iter=Name(id='series_list', ctx=Load()), body=[Assign(targets=[Name(id='mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_matrix', ctx=Load()), args=[], keywords=[keyword(arg='x1', value=Name(id='initial_centroid', ctx=Load())), keyword(arg='x2', value=Name(id='series', ctx=Load())), keyword(arg='points_distance', value=Attribute(value=Name(id='self', ctx=Load()), attr='points_distance', ctx=Load()))])), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_path', ctx=Load()), args=[], keywords=[keyword(arg='matrix', value=Name(id='mat', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], value=Tuple(elts=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='initial_centroid', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], ctx=Load())), While(test=BoolOp(op=And(), values=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='assoc_table', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store()), op=Add(), value=Subscript(value=Name(id='series', ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load())), AugAssign(target=Subscript(value=Name(id='n_samples', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='centroid', ctx=Store())], value=BinOp(left=Name(id='assoc_table', ctx=Load()), op=Div(), right=Name(id='n_samples', ctx=Load()))), Return(value=Name(id='centroid', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_longest_series', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the longest series from the list.')), AnnAssign(target=Name(id='series_list', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='series', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='series_list', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='longest_series', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='series_list', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='len', ctx=Load()))])), Return(value=Name(id='longest_series', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), FunctionDef(name='_get_all_series', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get series from the TSDataset.')), Assign(targets=[Name(id='series_list', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='ts', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='series', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), attr='dropna', ctx=Load()), args=[], keywords=[]), attr='values', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='series_list', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='series', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='series_list', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load())), FunctionDef(name='_get_average', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='n_iters', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10)]), body=[Expr(value=Constant(value='Get series that minimizes squared distance to given ones according to the dtw distance.\n\n        Parameters\n        ----------\n        ts:\n            TSDataset with series to be averaged\n        n_iters:\n            number of DBA iterations to adjust centroid with series\n\n        Returns\n        -------\n        pd.Dataframe:\n            dataframe with columns "timestamp" and "target" that contains the series\n        ')), Assign(targets=[Name(id='series_list', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_all_series', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='initial_centroid', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_longest_series', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='centroid', ctx=Store())], value=Attribute(value=Name(id='initial_centroid', ctx=Load()), attr='values', ctx=Load())), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_iters', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='new_centroid', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_dba_iteration', ctx=Load()), args=[], keywords=[keyword(arg='initial_centroid', value=Name(id='centroid', ctx=Load())), keyword(arg='series_list', value=Name(id='series_list', ctx=Load()))])), Assign(targets=[Name(id='centroid', ctx=Store())], value=Name(id='new_centroid', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='centroid', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target')], values=[Attribute(value=Attribute(value=Name(id='initial_centroid', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Name(id='centroid', ctx=Load())])], keywords=[])), Return(value=Name(id='centroid', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='DTWDistance'), Constant(value='simple_dist')], ctx=Load()))], type_ignores=[])