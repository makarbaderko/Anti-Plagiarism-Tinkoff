Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.datasets.datasets_generation', names=[alias(name='generate_ar_df')], level=0), ImportFrom(module='etna.datasets.datasets_generation', names=[alias(name='generate_const_df')], level=0), ImportFrom(module='etna.datasets.datasets_generation', names=[alias(name='generate_from_patterns_df')], level=0), ImportFrom(module='etna.datasets.datasets_generation', names=[alias(name='generate_periodic_df')], level=0), FunctionDef(name='check_equals', args=arguments(posonlyargs=[], args=[arg(arg='generated_value'), arg(arg='expected_value')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Check that generated_value is equal to expected_value.')), Return(value=Compare(left=Name(id='generated_value', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_value', ctx=Load())]))], decorator_list=[]), FunctionDef(name='check_not_equal_within_3_sigma', args=arguments(posonlyargs=[], args=[arg(arg='generated_value'), arg(arg='expected_value'), arg(arg='sigma')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Check that generated_value is not equal to expected_value, but within 3 sigma range.')), If(test=Compare(left=Name(id='generated_value', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_value', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='generated_value', ctx=Load()), op=Sub(), right=Name(id='expected_value', ctx=Load()))], keywords=[]), ops=[LtE()], comparators=[BinOp(left=Constant(value=3), op=Mult(), right=Name(id='sigma', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_simple_ar_process_check', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ar_coef', ctx=Store())], value=List(elts=[Constant(value=10), Constant(value=11)], ctx=Load())), Assign(targets=[Name(id='random_seed', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='periods', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='random_numbers', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='RandomState', ctx=Load()), args=[], keywords=[keyword(arg='seed', value=Name(id='random_seed', ctx=Load()))]), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='size', value=Tuple(elts=[Constant(value=2), Name(id='periods', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='ar_df', ctx=Store())], value=Call(func=Name(id='generate_ar_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Name(id='periods', ctx=Load())), keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='n_segments', value=Constant(value=2)), keyword(arg='ar_coef', value=Name(id='ar_coef', ctx=Load())), keyword(arg='random_seed', value=Name(id='random_seed', ctx=Load()))])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ar_df', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Constant(value=2), op=Mult(), right=Name(id='periods', ctx=Load()))])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='ar_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=0), Constant(value=2)], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='random_numbers', ctx=Load()), slice=Tuple(elts=[Constant(value=0), Constant(value=0)], ctx=Load()), ctx=Load())])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='ar_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=1), Constant(value=2)], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[BinOp(left=BinOp(left=Subscript(value=Name(id='ar_coef', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Mult(), right=Subscript(value=Attribute(value=Name(id='ar_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=0), Constant(value=2)], ctx=Load()), ctx=Load())), op=Add(), right=Subscript(value=Name(id='random_numbers', ctx=Load()), slice=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()), ctx=Load()))])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='ar_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=2), Constant(value=2)], ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[BinOp(left=BinOp(left=BinOp(left=Subscript(value=Name(id='ar_coef', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Mult(), right=Subscript(value=Attribute(value=Name(id='ar_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=0), Constant(value=2)], ctx=Load()), ctx=Load())), op=Add(), right=BinOp(left=Subscript(value=Name(id='ar_coef', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Mult(), right=Subscript(value=Attribute(value=Name(id='ar_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=1), Constant(value=2)], ctx=Load()), ctx=Load()))), op=Add(), right=Subscript(value=Name(id='random_numbers', ctx=Load()), slice=Tuple(elts=[Constant(value=0), Constant(value=2)], ctx=Load()), ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_simple_periodic_df_check', args=arguments(posonlyargs=[], args=[arg(arg='add_noise'), arg(arg='checker')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='period', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='periods', ctx=Store())], value=Constant(value=11)), Assign(targets=[Name(id='sigma', ctx=Store())], value=Constant(value=0.1)), Assign(targets=[Name(id='periodic_df', ctx=Store())], value=Call(func=Name(id='generate_periodic_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Name(id='periods', ctx=Load())), keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='n_segments', value=Constant(value=2)), keyword(arg='period', value=Name(id='period', ctx=Load())), keyword(arg='add_noise', value=Name(id='add_noise', ctx=Load())), keyword(arg='sigma', value=Name(id='sigma', ctx=Load())), keyword(arg='random_seed', value=Constant(value=1))])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='periodic_df', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Constant(value=2), op=Mult(), right=Name(id='periods', ctx=Load()))])), Assign(targets=[Name(id='diff_sigma', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Constant(value=2)], keywords=[]), op=Mult(), right=Name(id='sigma', ctx=Load()))), Assert(test=Call(func=Name(id='checker', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='periodic_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=0), Constant(value=2)], ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='periodic_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[BinOp(left=Constant(value=0), op=Add(), right=Name(id='period', ctx=Load())), Constant(value=2)], ctx=Load()), ctx=Load())], keywords=[keyword(arg='sigma', value=Name(id='diff_sigma', ctx=Load()))])), Assert(test=Call(func=Name(id='checker', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='periodic_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=1), Constant(value=2)], ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='periodic_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[BinOp(left=Constant(value=1), op=Add(), right=Name(id='period', ctx=Load())), Constant(value=2)], ctx=Load()), ctx=Load())], keywords=[keyword(arg='sigma', value=Name(id='diff_sigma', ctx=Load()))])), Assert(test=Call(func=Name(id='checker', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='periodic_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=3), Constant(value=2)], ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='periodic_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[BinOp(left=Constant(value=3), op=Add(), right=Name(id='period', ctx=Load())), Constant(value=2)], ctx=Load()), ctx=Load())], keywords=[keyword(arg='sigma', value=Name(id='diff_sigma', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='add_noise, checker'), List(elts=[Tuple(elts=[Constant(value=False), Name(id='check_equals', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=True), Name(id='check_not_equal_within_3_sigma', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_simple_const_df_check', args=arguments(posonlyargs=[], args=[arg(arg='add_noise'), arg(arg='checker')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='const', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='periods', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='sigma', ctx=Store())], value=Constant(value=0.1)), Assign(targets=[Name(id='const_df', ctx=Store())], value=Call(func=Name(id='generate_const_df', ctx=Load()), args=[], keywords=[keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='n_segments', value=Constant(value=2)), keyword(arg='periods', value=Name(id='periods', ctx=Load())), keyword(arg='scale', value=Name(id='const', ctx=Load())), keyword(arg='add_noise', value=Name(id='add_noise', ctx=Load())), keyword(arg='sigma', value=Name(id='sigma', ctx=Load())), keyword(arg='random_seed', value=Constant(value=1))])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='const_df', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Constant(value=2), op=Mult(), right=Name(id='periods', ctx=Load()))])), Assert(test=Call(func=Name(id='checker', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='const_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=0), Constant(value=2)], ctx=Load()), ctx=Load()), Name(id='const', ctx=Load())], keywords=[keyword(arg='sigma', value=Name(id='sigma', ctx=Load()))])), Assert(test=Call(func=Name(id='checker', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='const_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=1), Constant(value=2)], ctx=Load()), ctx=Load()), Name(id='const', ctx=Load())], keywords=[keyword(arg='sigma', value=Name(id='sigma', ctx=Load()))])), Assert(test=Call(func=Name(id='checker', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='const_df', ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=3), Constant(value=2)], ctx=Load()), ctx=Load()), Name(id='const', ctx=Load())], keywords=[keyword(arg='sigma', value=Name(id='sigma', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='add_noise, checker'), List(elts=[Tuple(elts=[Constant(value=False), Name(id='check_equals', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=True), Name(id='check_not_equal_within_3_sigma', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_simple_from_patterns_df_check', args=arguments(posonlyargs=[], args=[arg(arg='add_noise'), arg(arg='checker')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='patterns', ctx=Store())], value=List(elts=[List(elts=[Constant(value=0), Constant(value=1)], ctx=Load()), List(elts=[Constant(value=0), Constant(value=2), Constant(value=1)], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='periods', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='sigma', ctx=Store())], value=Constant(value=0.1)), Assign(targets=[Name(id='from_patterns_df', ctx=Store())], value=Call(func=Name(id='generate_from_patterns_df', ctx=Load()), args=[], keywords=[keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='patterns', value=Name(id='patterns', ctx=Load())), keyword(arg='periods', value=Name(id='periods', ctx=Load())), keyword(arg='add_noise', value=Name(id='add_noise', ctx=Load())), keyword(arg='sigma', value=Name(id='sigma', ctx=Load())), keyword(arg='random_seed', value=Constant(value=1))])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='from_patterns_df', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='patterns', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='periods', ctx=Load()))])), Assert(test=Call(func=Name(id='checker', ctx=Load()), args=[Subscript(value=Attribute(value=Subscript(value=Name(id='from_patterns_df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='from_patterns_df', ctx=Load()), attr='segment', ctx=Load()), ops=[Eq()], comparators=[Constant(value='segment_0')]), ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=0), Constant(value=2)], ctx=Load()), ctx=Load()), Subscript(value=Subscript(value=Name(id='patterns', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='sigma', value=Name(id='sigma', ctx=Load()))])), Assert(test=Call(func=Name(id='checker', ctx=Load()), args=[Subscript(value=Attribute(value=Subscript(value=Name(id='from_patterns_df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='from_patterns_df', ctx=Load()), attr='segment', ctx=Load()), ops=[Eq()], comparators=[Constant(value='segment_0')]), ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=1), Constant(value=2)], ctx=Load()), ctx=Load()), Subscript(value=Subscript(value=Name(id='patterns', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[keyword(arg='sigma', value=Name(id='sigma', ctx=Load()))])), Assert(test=Call(func=Name(id='checker', ctx=Load()), args=[Subscript(value=Attribute(value=Subscript(value=Name(id='from_patterns_df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='from_patterns_df', ctx=Load()), attr='segment', ctx=Load()), ops=[Eq()], comparators=[Constant(value='segment_0')]), ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=2), Constant(value=2)], ctx=Load()), ctx=Load()), Subscript(value=Subscript(value=Name(id='patterns', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='sigma', value=Name(id='sigma', ctx=Load()))])), Assert(test=Call(func=Name(id='checker', ctx=Load()), args=[Subscript(value=Attribute(value=Subscript(value=Name(id='from_patterns_df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='from_patterns_df', ctx=Load()), attr='segment', ctx=Load()), ops=[Eq()], comparators=[Constant(value='segment_1')]), ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=0), Constant(value=2)], ctx=Load()), ctx=Load()), Subscript(value=Subscript(value=Name(id='patterns', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='sigma', value=Name(id='sigma', ctx=Load()))])), Assert(test=Call(func=Name(id='checker', ctx=Load()), args=[Subscript(value=Attribute(value=Subscript(value=Name(id='from_patterns_df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='from_patterns_df', ctx=Load()), attr='segment', ctx=Load()), ops=[Eq()], comparators=[Constant(value='segment_1')]), ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=3), Constant(value=2)], ctx=Load()), ctx=Load()), Subscript(value=Subscript(value=Name(id='patterns', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='sigma', value=Name(id='sigma', ctx=Load()))])), Assert(test=Call(func=Name(id='checker', ctx=Load()), args=[Subscript(value=Attribute(value=Subscript(value=Name(id='from_patterns_df', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='from_patterns_df', ctx=Load()), attr='segment', ctx=Load()), ops=[Eq()], comparators=[Constant(value='segment_1')]), ctx=Load()), attr='iat', ctx=Load()), slice=Tuple(elts=[Constant(value=4), Constant(value=2)], ctx=Load()), ctx=Load()), Subscript(value=Subscript(value=Name(id='patterns', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[keyword(arg='sigma', value=Name(id='sigma', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='add_noise, checker'), List(elts=[Tuple(elts=[Constant(value=False), Name(id='check_equals', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=True), Name(id='check_not_equal_within_3_sigma', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])])], type_ignores=[])