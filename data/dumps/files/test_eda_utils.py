Module(body=[Import(names=[alias(name='matplotlib.pyplot', asname='plt')]), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.analysis.eda_utils', names=[alias(name='_cross_correlation')], level=0), ImportFrom(module='etna.analysis.eda_utils', names=[alias(name='_resample')], level=0), ImportFrom(module='etna.analysis.eda_utils', names=[alias(name='_seasonal_split')], level=0), ImportFrom(module='etna.analysis.eda_utils', names=[alias(name='acf_plot')], level=0), ImportFrom(module='etna.analysis.eda_utils', names=[alias(name='sample_acf_plot')], level=0), ImportFrom(module='etna.analysis.eda_utils', names=[alias(name='sample_pacf_plot')], level=0), ImportFrom(module='etna.analysis.eda_utils', names=[alias(name='seasonal_plot')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), FunctionDef(name='close_plots', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield()), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[keyword(arg='autouse', value=Constant(value=True))])]), FunctionDef(name='test_cross_corr_fail_lengths', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Constant(value=2.0), Constant(value=3.0)], ctx=Load())], keywords=[])), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Constant(value=2.0)], ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Lengths of arrays should be equal'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='_cross_correlation', ctx=Load()), args=[], keywords=[keyword(arg='a', value=Name(id='a', ctx=Load())), keyword(arg='b', value=Name(id='b', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='test_cross_corr_fail_lags', args=arguments(posonlyargs=[], args=[arg(arg='max_lags')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Constant(value=2.0), Constant(value=3.0)], ctx=Load())], keywords=[])), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Constant(value=2.0), Constant(value=3.0)], ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Parameter maxlags should'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='_cross_correlation', ctx=Load()), args=[], keywords=[keyword(arg='a', value=Name(id='a', ctx=Load())), keyword(arg='b', value=Name(id='b', ctx=Load())), keyword(arg='maxlags', value=Name(id='max_lags', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='max_lags'), List(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=0), Constant(value=5)], ctx=Load())], keywords=[])]), FunctionDef(name='test_cross_corr_lags', args=arguments(posonlyargs=[], args=[arg(arg='max_lags')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='length', ctx=Store())], value=Constant(value=100)), Assign(targets=[Name(id='rng', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='default_rng', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='uniform', ctx=Load()), args=[], keywords=[keyword(arg='low', value=Constant(value=1.0)), keyword(arg='high', value=Constant(value=10.0)), keyword(arg='size', value=Name(id='length', ctx=Load()))])), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='uniform', ctx=Load()), args=[], keywords=[keyword(arg='low', value=Constant(value=1.0)), keyword(arg='high', value=Constant(value=10.0)), keyword(arg='size', value=Name(id='length', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='result', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_cross_correlation', ctx=Load()), args=[], keywords=[keyword(arg='a', value=Name(id='a', ctx=Load())), keyword(arg='b', value=Name(id='b', ctx=Load())), keyword(arg='maxlags', value=Name(id='max_lags', ctx=Load()))])), Assign(targets=[Name(id='expected_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='max_lags', ctx=Load())), BinOp(left=Name(id='max_lags', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_result', ctx=Load())])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='max_lags'), List(elts=[Constant(value=1), Constant(value=5), Constant(value=10), Constant(value=99)], ctx=Load())], keywords=[])]), FunctionDef(name='test_cross_corr_not_normed', args=arguments(posonlyargs=[], args=[arg(arg='random_state'), arg(arg='maxlags')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='length', ctx=Store())], value=Constant(value=100)), Assign(targets=[Name(id='rng', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='default_rng', ctx=Load()), args=[Name(id='random_state', ctx=Load())], keywords=[])), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='uniform', ctx=Load()), args=[], keywords=[keyword(arg='low', value=Constant(value=1.0)), keyword(arg='high', value=Constant(value=10.0)), keyword(arg='size', value=Name(id='length', ctx=Load()))])), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='uniform', ctx=Load()), args=[], keywords=[keyword(arg='low', value=Constant(value=1.0)), keyword(arg='high', value=Constant(value=10.0)), keyword(arg='size', value=Name(id='length', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='result', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_cross_correlation', ctx=Load()), args=[], keywords=[keyword(arg='a', value=Name(id='a', ctx=Load())), keyword(arg='b', value=Name(id='b', ctx=Load())), keyword(arg='maxlags', value=Name(id='maxlags', ctx=Load())), keyword(arg='normed', value=Constant(value=False))])), Assign(targets=[Name(id='expected_result', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='correlate', ctx=Load()), args=[], keywords=[keyword(arg='a', value=Name(id='a', ctx=Load())), keyword(arg='v', value=Name(id='b', ctx=Load())), keyword(arg='mode', value=Constant(value='full'))]), slice=Slice(lower=BinOp(left=BinOp(left=Name(id='length', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='maxlags', ctx=Load())), upper=BinOp(left=Name(id='length', ctx=Load()), op=Add(), right=Name(id='maxlags', ctx=Load()))), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_almost_equal', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='expected_result', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='random_state'), List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='maxlags'), List(elts=[Constant(value=1), Constant(value=5), Constant(value=99)], ctx=Load())], keywords=[])]), FunctionDef(name='test_cross_corr_not_normed_with_nans', args=arguments(posonlyargs=[], args=[arg(arg='random_state'), arg(arg='maxlags')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='length', ctx=Store())], value=Constant(value=100)), Assign(targets=[Name(id='rng', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='default_rng', ctx=Load()), args=[Name(id='random_state', ctx=Load())], keywords=[])), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='uniform', ctx=Load()), args=[], keywords=[keyword(arg='low', value=Constant(value=1.0)), keyword(arg='high', value=Constant(value=10.0)), keyword(arg='size', value=Name(id='length', ctx=Load()))])), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='uniform', ctx=Load()), args=[], keywords=[keyword(arg='low', value=Constant(value=1.0)), keyword(arg='high', value=Constant(value=10.0)), keyword(arg='size', value=Name(id='length', ctx=Load()))])), Assign(targets=[Name(id='fill_nans_a', ctx=Store())], value=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='choice', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Name(id='length', ctx=Load())], keywords=[])], keywords=[keyword(arg='replace', value=Constant(value=False)), keyword(arg='size', value=BinOp(left=Name(id='length', ctx=Load()), op=FloorDiv(), right=Constant(value=2)))])), Assign(targets=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='fill_nans_a', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Name(id='fill_nans_b', ctx=Store())], value=Call(func=Attribute(value=Name(id='rng', ctx=Load()), attr='choice', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Name(id='length', ctx=Load())], keywords=[])], keywords=[keyword(arg='replace', value=Constant(value=False)), keyword(arg='size', value=BinOp(left=Name(id='length', ctx=Load()), op=FloorDiv(), right=Constant(value=2)))])), Assign(targets=[Subscript(value=Name(id='b', ctx=Load()), slice=Name(id='fill_nans_b', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='result', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_cross_correlation', ctx=Load()), args=[], keywords=[keyword(arg='a', value=Name(id='a', ctx=Load())), keyword(arg='b', value=Name(id='b', ctx=Load())), keyword(arg='maxlags', value=Name(id='maxlags', ctx=Load())), keyword(arg='normed', value=Constant(value=False))])), Assign(targets=[Name(id='expected_result', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='correlate', ctx=Load()), args=[], keywords=[keyword(arg='a', value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='nan_to_num', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])), keyword(arg='v', value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='nan_to_num', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), keyword(arg='mode', value=Constant(value='full'))]), slice=Slice(lower=BinOp(left=BinOp(left=Name(id='length', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='maxlags', ctx=Load())), upper=BinOp(left=Name(id='length', ctx=Load()), op=Add(), right=Name(id='maxlags', ctx=Load()))), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_almost_equal', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='expected_result', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='random_state'), List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='maxlags'), List(elts=[Constant(value=1), Constant(value=5), Constant(value=99)], ctx=Load())], keywords=[])]), FunctionDef(name='test_cross_corr_normed', args=arguments(posonlyargs=[], args=[arg(arg='a'), arg(arg='b'), arg(arg='expected_result')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='result', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_cross_correlation', ctx=Load()), args=[], keywords=[keyword(arg='a', value=Name(id='a', ctx=Load())), keyword(arg='b', value=Name(id='b', ctx=Load())), keyword(arg='normed', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_almost_equal', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='expected_result', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='a, b, expected_result'), List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=2.0), Constant(value=2.0), Constant(value=2.0)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=2.0), Constant(value=2.0), Constant(value=2.0)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Constant(value=1.0), Constant(value=1.0), Constant(value=1.0), Constant(value=1.0)], ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Constant(value=2.0), Constant(value=3.0)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Constant(value=2.0), Constant(value=3.0)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), BinOp(left=Constant(value=8), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Constant(value=5), op=Mult(), right=Constant(value=13))], keywords=[])), Constant(value=1.0), BinOp(left=Constant(value=8), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Constant(value=5), op=Mult(), right=Constant(value=13))], keywords=[])), Constant(value=1.0)], ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=2.0), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=2.0)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=2.0), Constant(value=2.0), Constant(value=2.0)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Constant(value=1.0), Constant(value=1.0), Constant(value=1.0), Constant(value=1.0)], ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=3.0)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Constant(value=2.0), Constant(value=3.0)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Constant(value=1.0), Constant(value=1.0), Constant(value=1.0), Constant(value=1.0)], ctx=Load())], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_cross_corr_with_full_nans', args=arguments(posonlyargs=[], args=[arg(arg='a'), arg(arg='b'), arg(arg='normed'), arg(arg='expected_result')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='result', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_cross_correlation', ctx=Load()), args=[], keywords=[keyword(arg='a', value=Name(id='a', ctx=Load())), keyword(arg='b', value=Name(id='b', ctx=Load())), keyword(arg='maxlags', value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), keyword(arg='normed', value=Name(id='normed', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_almost_equal', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='expected_result', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='a, b, normed, expected_result'), List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=1.0)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Constant(value=2.0), Constant(value=3.0)], ctx=Load())], keywords=[]), Constant(value=False), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=0.0), Constant(value=0.0), Constant(value=3.0), Constant(value=2.0), Constant(value=1.0)], ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Constant(value=2.0), Constant(value=3.0)], ctx=Load())], keywords=[]), Constant(value=False), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=0.0), Constant(value=0.0), Constant(value=0.0), Constant(value=0.0), Constant(value=0.0)], ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=1.0)], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Constant(value=2.0), Constant(value=3.0)], ctx=Load())], keywords=[]), Constant(value=True), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=0.0), Constant(value=0.0), Constant(value=1.0), Constant(value=1.0), Constant(value=1.0)], ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), Constant(value=2.0), Constant(value=3.0)], ctx=Load())], keywords=[]), Constant(value=True), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=0.0), Constant(value=0.0), Constant(value=0.0), Constant(value=0.0), Constant(value=0.0)], ctx=Load())], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_seasonal_split', args=arguments(posonlyargs=[], args=[arg(arg='timestamp'), arg(arg='cycle'), arg(arg='expected_cycle_names'), arg(arg='expected_in_cycle_nums'), arg(arg='expected_in_cycle_names')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cycle_df', ctx=Store())], value=Call(func=Name(id='_seasonal_split', ctx=Load()), args=[], keywords=[keyword(arg='timestamp', value=Call(func=Attribute(value=Name(id='timestamp', ctx=Load()), attr='to_series', ctx=Load()), args=[], keywords=[])), keyword(arg='freq', value=Attribute(value=Attribute(value=Name(id='timestamp', ctx=Load()), attr='freq', ctx=Load()), attr='freqstr', ctx=Load())), keyword(arg='cycle', value=Name(id='cycle', ctx=Load()))])), Assert(test=Compare(left=Call(func=Attribute(value=Subscript(value=Name(id='cycle_df', ctx=Load()), slice=Constant(value='cycle_name'), ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Name(id='expected_cycle_names', ctx=Load())])), Assert(test=Compare(left=Call(func=Attribute(value=Subscript(value=Name(id='cycle_df', ctx=Load()), slice=Constant(value='in_cycle_num'), ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Name(id='expected_in_cycle_nums', ctx=Load())])), Assert(test=Compare(left=Call(func=Attribute(value=Subscript(value=Name(id='cycle_df', ctx=Load()), slice=Constant(value='in_cycle_name'), ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Name(id='expected_in_cycle_names', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='timestamp, cycle, expected_cycle_names, expected_in_cycle_nums, expected_in_cycle_names'), List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=5)), keyword(arg='freq', value=Constant(value='D'))]), Constant(value=3), List(elts=[Constant(value='1'), Constant(value='1'), Constant(value='1'), Constant(value='2'), Constant(value='2')], ctx=Load()), List(elts=[Constant(value=0), Constant(value=1), Constant(value=2), Constant(value=0), Constant(value=1)], ctx=Load()), List(elts=[Constant(value='0'), Constant(value='1'), Constant(value='2'), Constant(value='0'), Constant(value='1')], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=6)), keyword(arg='freq', value=Constant(value='15T'))]), Constant(value='hour'), BinOp(left=BinOp(left=List(elts=[Constant(value='2020-01-01 00')], ctx=Load()), op=Mult(), right=Constant(value=4)), op=Add(), right=BinOp(left=List(elts=[Constant(value='2020-01-01 01')], ctx=Load()), op=Mult(), right=Constant(value=2))), List(elts=[Constant(value=0), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=0), Constant(value=1)], ctx=Load()), List(elts=[Constant(value='0'), Constant(value='1'), Constant(value='2'), Constant(value='3'), Constant(value='0'), Constant(value='1')], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=26)), keyword(arg='freq', value=Constant(value='H'))]), Constant(value='day'), BinOp(left=BinOp(left=List(elts=[Constant(value='2020-01-01')], ctx=Load()), op=Mult(), right=Constant(value=24)), op=Add(), right=BinOp(left=List(elts=[Constant(value='2020-01-02')], ctx=Load()), op=Mult(), right=Constant(value=2))), ListComp(elt=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=24)), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]), ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=24))], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=10)), keyword(arg='freq', value=Constant(value='D'))]), Constant(value='week'), BinOp(left=BinOp(left=List(elts=[Constant(value='2020-00')], ctx=Load()), op=Mult(), right=Constant(value=5)), op=Add(), right=BinOp(left=List(elts=[Constant(value='2020-01')], ctx=Load()), op=Mult(), right=Constant(value=5))), List(elts=[Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=6), Constant(value=0), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4)], ctx=Load()), List(elts=[Constant(value='Wed'), Constant(value='Thu'), Constant(value='Fri'), Constant(value='Sat'), Constant(value='Sun'), Constant(value='Mon'), Constant(value='Tue'), Constant(value='Wed'), Constant(value='Thu'), Constant(value='Fri')], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-03')), keyword(arg='periods', value=Constant(value=40)), keyword(arg='freq', value=Constant(value='D'))]), Constant(value='month'), BinOp(left=BinOp(left=List(elts=[Constant(value='2020-Jan')], ctx=Load()), op=Mult(), right=Constant(value=29)), op=Add(), right=BinOp(left=List(elts=[Constant(value='2020-Feb')], ctx=Load()), op=Mult(), right=Constant(value=11))), BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=3), Constant(value=32)], keywords=[])], keywords=[]), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Constant(value=12)], keywords=[])], keywords=[])), BinOp(left=ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=3), Constant(value=32)], keywords=[]), ifs=[], is_async=0)]), op=Add(), right=ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Constant(value=12)], keywords=[]), ifs=[], is_async=0)]))], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=14)), keyword(arg='freq', value=Constant(value='M'))]), Constant(value='quarter'), BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=List(elts=[Constant(value='2020-1')], ctx=Load()), op=Mult(), right=Constant(value=3)), op=Add(), right=BinOp(left=List(elts=[Constant(value='2020-2')], ctx=Load()), op=Mult(), right=Constant(value=3))), op=Add(), right=BinOp(left=List(elts=[Constant(value='2020-3')], ctx=Load()), op=Mult(), right=Constant(value=3))), op=Add(), right=BinOp(left=List(elts=[Constant(value='2020-4')], ctx=Load()), op=Mult(), right=Constant(value=3))), op=Add(), right=BinOp(left=List(elts=[Constant(value='2021-1')], ctx=Load()), op=Mult(), right=Constant(value=2))), ListComp(elt=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=3)), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=14)], keywords=[]), ifs=[], is_async=0)]), ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=3))], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=14)], keywords=[]), ifs=[], is_async=0)])], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=14)), keyword(arg='freq', value=Constant(value='M'))]), Constant(value='year'), BinOp(left=BinOp(left=List(elts=[Constant(value='2020')], ctx=Load()), op=Mult(), right=Constant(value=12)), op=Add(), right=BinOp(left=List(elts=[Constant(value='2021')], ctx=Load()), op=Mult(), right=Constant(value=2))), ListComp(elt=BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=12)), op=Add(), right=Constant(value=1)), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=14)], keywords=[]), ifs=[], is_async=0)]), List(elts=[Constant(value='Jan'), Constant(value='Feb'), Constant(value='Mar'), Constant(value='Apr'), Constant(value='May'), Constant(value='Jun'), Constant(value='Jul'), Constant(value='Aug'), Constant(value='Sep'), Constant(value='Oct'), Constant(value='Nov'), Constant(value='Dec'), Constant(value='Jan'), Constant(value='Feb')], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_resample', args=arguments(posonlyargs=[], args=[arg(arg='timestamp'), arg(arg='values'), arg(arg='resample_freq'), arg(arg='aggregation'), arg(arg='expected_timestamp'), arg(arg='expected_values')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target'), Constant(value='segment')], values=[Call(func=Attribute(value=Name(id='timestamp', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[]), Name(id='values', ctx=Load()), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='timestamp', ctx=Load())], keywords=[]), op=Mult(), right=List(elts=[Constant(value='segment_0')], ctx=Load()))])], keywords=[])), Assign(targets=[Name(id='df_wide', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df_resampled', ctx=Store())], value=Call(func=Name(id='_resample', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df_wide', ctx=Load())), keyword(arg='freq', value=Name(id='resample_freq', ctx=Load())), keyword(arg='aggregation', value=Name(id='aggregation', ctx=Load()))])), Assert(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='df_resampled', ctx=Load()), attr='index', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='expected_timestamp', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='df_resampled', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_0'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[keyword(arg='drop', value=Constant(value=True))]), attr='equals', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[Name(id='expected_values', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='timestamp, values, resample_freq, aggregation, expected_timestamp, expected_values'), List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=14)), keyword(arg='freq', value=Constant(value='Q'))]), List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=10), Constant(value=16), Constant(value=10), Constant(value=5), Constant(value=7), Constant(value=5), Constant(value=7), Constant(value=3), Constant(value=3)], ctx=Load()), Constant(value='Y'), Constant(value='sum'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=4)), keyword(arg='freq', value=Constant(value='Y'))]), List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=36.0), Constant(value=24.0), Constant(value=6.0)], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=14)), keyword(arg='freq', value=Constant(value='Q'))]), List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=10), Constant(value=16), Constant(value=10), Constant(value=5), Constant(value=7), Constant(value=5), Constant(value=7), Constant(value=3), Constant(value=3)], ctx=Load()), Constant(value='Y'), Constant(value='mean'), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=4)), keyword(arg='freq', value=Constant(value='Y'))]), List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='NaN', ctx=Load()), Constant(value=12.0), Constant(value=6.0), Constant(value=3.0)], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_dummy_seasonal_plot', args=arguments(posonlyargs=[], args=[arg(arg='freq'), arg(arg='cycle'), arg(arg='additional_params'), arg(arg='ts_with_different_series_length')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='seasonal_plot', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts_with_different_series_length', ctx=Load())), keyword(arg='freq', value=Name(id='freq', ctx=Load())), keyword(arg='cycle', value=Name(id='cycle', ctx=Load())), keyword(value=Name(id='additional_params', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='freq, cycle, additional_params'), List(elts=[Tuple(elts=[Constant(value='D'), Constant(value=5), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='alignment', value=Constant(value='first'))])], ctx=Load()), Tuple(elts=[Constant(value='D'), Constant(value=5), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='alignment', value=Constant(value='last'))])], ctx=Load()), Tuple(elts=[Constant(value='D'), Constant(value='week'), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='D'), Constant(value='month'), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='D'), Constant(value='year'), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='M'), Constant(value='year'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='aggregation', value=Constant(value='sum'))])], ctx=Load()), Tuple(elts=[Constant(value='M'), Constant(value='year'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='aggregation', value=Constant(value='mean'))])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_warnings_acf', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='warns', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='DeprecationWarning: This function is deprecated and will be removed in etna=2.0; Please use acf_plot instead.'))]))], body=[Expr(value=Call(func=Name(id='sample_acf_plot', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='sample_pacf_plot', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='df_with_nans_in_head', args=arguments(posonlyargs=[], args=[arg(arg='example_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='example_df', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(upper=Constant(value=4)), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_1'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Constant(value=None)), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(upper=Constant(value=5)), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Constant(value='segment_2'), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Constant(value=None)), Return(value=Name(id='df', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_acf_nan_end', args=arguments(posonlyargs=[], args=[arg(arg='ts_diff_endings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Name(id='ts_diff_endings', ctx=Load())), Expr(value=Call(func=Name(id='acf_plot', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(arg='partial', value=Constant(value=False))])), Expr(value=Call(func=Name(id='acf_plot', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(arg='partial', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='test_acf_nan_middle', args=arguments(posonlyargs=[], args=[arg(arg='df_with_nans')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df_with_nans', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='H'))])), Expr(value=Call(func=Name(id='acf_plot', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(arg='partial', value=Constant(value=False))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Name(id='acf_plot', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(arg='partial', value=Constant(value=True))]))])], decorator_list=[]), FunctionDef(name='test_acf_nan_begin', args=arguments(posonlyargs=[], args=[arg(arg='df_with_nans_in_head')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df_with_nans_in_head', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='H'))])), Expr(value=Call(func=Name(id='acf_plot', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(arg='partial', value=Constant(value=False))])), Expr(value=Call(func=Name(id='acf_plot', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[keyword(arg='partial', value=Constant(value=True))]))], decorator_list=[])], type_ignores=[])