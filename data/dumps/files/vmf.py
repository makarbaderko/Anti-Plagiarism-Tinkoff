Module(body=[Import(names=[alias(name='math')]), ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), ImportFrom(module='numbers', names=[alias(name='Number')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='scipy')]), Import(names=[alias(name='scipy.special')]), Import(names=[alias(name='torch')]), ImportFrom(module='probabilistic_embeddings.config', names=[alias(name='prepare_config')], level=0), ImportFrom(module='third_party', names=[alias(name='sample_vmf')], level=3), ImportFrom(module='parametrization', names=[alias(name='Parametrization')], level=2), ImportFrom(module='common', names=[alias(name='DistributionBase'), alias(name='BatchNormNormalizer')], level=1), ImportFrom(module='common', names=[alias(name='auto_matmul')], level=1), Assign(targets=[Name(id='K_SEPARATE', ctx=Store())], value=Constant(value='separate')), Assign(targets=[Name(id='K_NORM', ctx=Store())], value=Constant(value='norm')), ClassDef(name='IveSCLFunction', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='autograd', ctx=Load()), attr='Function', ctx=Load())], keywords=[], body=[FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='v'), arg(arg='z')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Order must be number, got {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='v', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Negative order: {}.'), attr='format', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='save_for_backward', ctx=Load()), args=[Name(id='z', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='v', ctx=Store())], value=Name(id='v', ctx=Load())), Assign(targets=[Name(id='z_cpu', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='z', ctx=Load()), attr='data', ctx=Load()), attr='cpu', ctx=Load()), args=[], keywords=[]), attr='numpy', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isclose', ctx=Load()), args=[Name(id='v', ctx=Load()), Constant(value=0)], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='scipy', ctx=Load()), attr='special', ctx=Load()), attr='i0e', ctx=Load()), args=[Name(id='z_cpu', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='z_cpu', ctx=Load()), attr='dtype', ctx=Load()))]))], orelse=[If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isclose', ctx=Load()), args=[Name(id='v', ctx=Load()), Constant(value=1)], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='scipy', ctx=Load()), attr='special', ctx=Load()), attr='i1e', ctx=Load()), args=[Name(id='z_cpu', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='z_cpu', ctx=Load()), attr='dtype', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='scipy', ctx=Load()), attr='special', ctx=Load()), attr='ive', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='z_cpu', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='z_cpu', ctx=Load()), attr='dtype', ctx=Load()))]))])]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), attr='to', ctx=Load()), args=[Attribute(value=Name(id='z', ctx=Load()), attr='device', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='backward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='grad_output')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='z', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='saved_tensors', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Return(value=Tuple(elts=[Constant(value=None), BinOp(left=Name(id='grad_output', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Attribute(value=Name(id='IveSCLFunction', ctx=Load()), attr='apply', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='v', ctx=Load()), op=Sub(), right=Constant(value=1)), Name(id='z', ctx=Load())], keywords=[]), op=Sub(), right=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='IveSCLFunction', ctx=Load()), attr='apply', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='v', ctx=Load()), Name(id='z', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='v', ctx=Load()), op=Add(), right=Name(id='z', ctx=Load()))), op=Div(), right=Name(id='z', ctx=Load()))))], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[]), FunctionDef(name='logiv_scl', args=arguments(posonlyargs=[], args=[arg(arg='v'), arg(arg='z'), arg(arg='eps')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1e-06)]), body=[Expr(value=Constant(value='Compute log IV using SCL implementation.')), Assign(targets=[Name(id='log_ive', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Name(id='eps', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='IveSCLFunction', ctx=Load()), attr='apply', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='z', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='log_iv', ctx=Store())], value=BinOp(left=Name(id='log_ive', ctx=Load()), op=Add(), right=Name(id='z', ctx=Load()))), Return(value=Name(id='log_iv', ctx=Load()))], decorator_list=[]), ClassDef(name='LogIvFunction', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='autograd', ctx=Load()), attr='Function', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Differentiable logarithm of modified Bessel function of the first kind.\n\n    Internal computations are done in double precision.\n\n    Inputs:\n        - v: Scalar order. Only non-negative values (>= 0) are supported.\n        - z: Arguments tensor. Only positive values (> 0) are supported.\n\n    Outputs:\n        - Logarithm of modified Bessel function result the same shape as `z`.\n    ')), Assign(targets=[Name(id='EPS', ctx=Store())], value=Constant(value=1e-16)), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='ctx'), arg(arg='v'), arg(arg='z')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Order must be number, got {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='v', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Negative order.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='z_numpy', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='z', ctx=Load()), attr='double', ctx=Load()), args=[], keywords=[]), attr='detach', ctx=Load()), args=[], keywords=[]), attr='cpu', ctx=Load()), args=[], keywords=[]), attr='numpy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ive', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='from_numpy', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='scipy', ctx=Load()), attr='special', ctx=Load()), attr='ive', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='z_numpy', ctx=Load())], keywords=[])], keywords=[]), attr='to', ctx=Load()), args=[Attribute(value=Name(id='z', ctx=Load()), attr='device', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='ctx', ctx=Load()), attr='saved_v', ctx=Store())], value=Name(id='v', ctx=Load())), Assign(targets=[Attribute(value=Name(id='ctx', ctx=Load()), attr='saved_z', ctx=Store())], value=Name(id='z_numpy', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='save_for_backward', ctx=Load()), args=[Name(id='z', ctx=Load()), Name(id='ive', ctx=Load())], keywords=[])), Assign(targets=[Name(id='logiv', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='ive', ctx=Load()), attr='log', ctx=Load()), args=[], keywords=[]), attr='to', ctx=Load()), args=[Attribute(value=Name(id='z', ctx=Load()), attr='dtype', ctx=Load())], keywords=[]), op=Add(), right=Name(id='z', ctx=Load()))), Assign(targets=[Name(id='logiv_small', ctx=Store())], value=BinOp(left=BinOp(left=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='scipy', ctx=Load()), attr='special', ctx=Load()), attr='loggamma', ctx=Load()), args=[BinOp(left=Name(id='v', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])), op=Sub(), right=BinOp(left=Name(id='v', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='log', ctx=Load()), args=[Constant(value=2)], keywords=[]))), op=Add(), right=BinOp(left=Name(id='v', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='z', ctx=Load()), attr='log', ctx=Load()), args=[], keywords=[])))), Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='logiv', ctx=Load()), Name(id='logiv_small', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='backward', args=arguments(posonlyargs=[], args=[arg(arg='ctx'), arg(arg='grad_output')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='v', ctx=Store()), Name(id='z_numpy', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='ctx', ctx=Load()), attr='saved_v', ctx=Load()), Attribute(value=Name(id='ctx', ctx=Load()), attr='saved_z', ctx=Load())], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='z', ctx=Store()), Name(id='ive', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='ctx', ctx=Load()), attr='saved_tensors', ctx=Load())), Assign(targets=[Name(id='ive_shifted', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='from_numpy', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='scipy', ctx=Load()), attr='special', ctx=Load()), attr='ive', ctx=Load()), args=[BinOp(left=Name(id='v', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='z_numpy', ctx=Load())], keywords=[])], keywords=[]), attr='to', ctx=Load()), args=[Attribute(value=Name(id='grad_output', ctx=Load()), attr='device', ctx=Load())], keywords=[]), attr='to', ctx=Load()), args=[Attribute(value=Name(id='grad_output', ctx=Load()), attr='dtype', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ratio', ctx=Store())], value=BinOp(left=Name(id='ive_shifted', ctx=Load()), op=Div(), right=Name(id='ive', ctx=Load()))), Assign(targets=[Subscript(value=Name(id='ratio', ctx=Load()), slice=Call(func=Attribute(value=Name(id='ratio', ctx=Load()), attr='isnan', ctx=Load()), args=[], keywords=[]), ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='scale', ctx=Store())], value=BinOp(left=Name(id='ratio', ctx=Load()), op=Add(), right=BinOp(left=Name(id='v', ctx=Load()), op=Div(), right=Name(id='z', ctx=Load())))), Return(value=Tuple(elts=[Constant(value=None), BinOp(left=Name(id='grad_output', ctx=Load()), op=Mult(), right=Name(id='scale', ctx=Load()))], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[]), Assign(targets=[Name(id='logiv', ctx=Store())], value=Attribute(value=Name(id='LogIvFunction', ctx=Load()), attr='apply', ctx=Load())), ClassDef(name='VMFDistribution', bases=[Name(id='DistributionBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Von Mises-Fisher Mixture Model.\n\n    For MLS implemenation details see "Spherical Confidence Learning\n    for Face Recognition":\n    https://openaccess.thecvf.com/content/CVPR2021/papers/Li_Spherical_Confidence_Learning_for_Face_Recognition_CVPR_2021_paper.pdf\n\n    Layer supports diffent types of k parametrization. Use "separate"\n    to encode k as separate encoder output. Use "norm" to extract k\n    from embedding L2 norm. You can also provide fixed k value, which\n    will not be changed during training.\n\n    ')), Assign(targets=[Name(id='LOGIV', ctx=Store())], value=Dict(keys=[Constant(value='default'), Constant(value='scl')], values=[Name(id='logiv', ctx=Load()), Name(id='logiv_scl', ctx=Load())])), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='dim'), arg(arg='k'), arg(arg='parametrization'), arg(arg='max_logk'), arg(arg='logiv_type')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=512), Constant(value='separate'), Constant(value='invlin'), Constant(value=10), Constant(value='default')]), body=[Expr(value=Constant(value='Get vMF parameters.\n\n        Args:\n            dim: Point dimension.\n            k: Type of k parametrization (`separate`, `norm` or number). See class documentation for details.\n            parameterization: Type of parametrization (`exp` or `invlin`).\n            max_logk: Maximum value of log concentration for "separate" parametrization.\n            logiv_type: Algorithm used for log IV computation (`default` or `scl`).\n        ')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='dim'), Name(id='dim', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='k'), Name(id='k', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='parametrization'), Name(id='parametrization', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='max_logk'), Name(id='max_logk', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='logiv_type'), Name(id='logiv_type', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='dim'), ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Feature space must have dimension >= 2, got {}.'), attr='format', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='dim'), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Name(id='K_SEPARATE', ctx=Load()), Name(id='K_NORM', ctx=Load())], ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load()), Name(id='Number', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknow type of k parametrization: {}.'), attr='format', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load()), ops=[NotEq()], comparators=[Name(id='K_SEPARATE', ctx=Load())]), body=[Assign(targets=[Name(id='min_ik', ctx=Store())], value=Constant(value=0))], orelse=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='max_logk'), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='min_ik', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='min_ik', ctx=Store())], value=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='max_logk'), ctx=Load()))], keywords=[]))])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Store())], value=Call(func=Name(id='Parametrization', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='parametrization'), ctx=Load())], keywords=[keyword(arg='min', value=Name(id='min_ik', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_logiv_fn', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='LOGIV', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='logiv_type'), ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='dim', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Point dimension.')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='dim'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='is_spherical', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether distribution is on sphere or R^n.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_confidences', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether distribution has builtin confidence estimation or not.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='num_parameters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Number of distribution parameters.')), Assign(targets=[Name(id='mean_parameters', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='dim'), ctx=Load())), Assign(targets=[Name(id='k_parameters', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load()), ops=[Eq()], comparators=[Name(id='K_SEPARATE', ctx=Load())]), body=Constant(value=1), orelse=Constant(value=0))), Return(value=BinOp(left=Name(id='mean_parameters', ctx=Load()), op=Add(), right=Name(id='k_parameters', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='unpack_parameters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns dict with distribution parameters.')), Assign(targets=[Tuple(elts=[Name(id='log_probs', ctx=Store()), Name(id='means', ctx=Store()), Name(id='hidden_ik', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Return(value=Dict(keys=[Constant(value='log_probs'), Constant(value='mean'), Constant(value='k')], values=[Name(id='log_probs', ctx=Load()), Name(id='means', ctx=Load()), BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik', ctx=Load())], keywords=[]))]))], decorator_list=[]), FunctionDef(name='pack_parameters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns vector from parameters dict.')), Assign(targets=[Name(id='keys', ctx=Store())], value=Set(elts=[Constant(value='log_probs'), Constant(value='mean'), Constant(value='k')])), If(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='keys', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Expected dict with keys {}.'), attr='format', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='hidden_ik', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Div(), right=Subscript(value=Name(id='parameters', ctx=Load()), slice=Constant(value='k'), ctx=Load()))], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='join_parameters', ctx=Load()), args=[Subscript(value=Name(id='parameters', ctx=Load()), slice=Constant(value='log_probs'), ctx=Load()), Subscript(value=Name(id='parameters', ctx=Load()), slice=Constant(value='mean'), ctx=Load()), Name(id='hidden_ik', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='make_normalizer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create and return normalization layer.')), Assign(targets=[Name(id='dim', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='dim'), ctx=Load())), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load()), ops=[Eq()], comparators=[Name(id='K_NORM', ctx=Load())]), body=[Assign(targets=[Name(id='normalizer', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='normalizer', ctx=Store())], value=Call(func=Name(id='BatchNormNormalizer', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='num_parameters', ctx=Load())], keywords=[keyword(arg='begin', value=Constant(value=0)), keyword(arg='end', value=Name(id='dim', ctx=Load()))]))]), Return(value=Name(id='normalizer', ctx=Load()))], decorator_list=[]), FunctionDef(name='split_parameters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='normalize')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Extract log probs, means and inverse k from parameters.')), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='num_parameters', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Wrong number of parameters: {} != {}.'), attr='format', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='num_parameters', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dim', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='dim'), ctx=Load())), Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='scaled_log_probs', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[Constant(value=1)], ctx=Load())), ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='parameters', ctx=Load()), attr='dtype', ctx=Load())), keyword(arg='device', value=Attribute(value=Name(id='parameters', ctx=Load()), attr='device', ctx=Load()))])), Assign(targets=[Name(id='means_offset', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='scaled_means', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='parameters', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(lower=Name(id='means_offset', ctx=Load()), upper=BinOp(left=Name(id='means_offset', ctx=Load()), op=Add(), right=BinOp(left=Constant(value=1), op=Mult(), right=Name(id='dim', ctx=Load()))))], ctx=Load()), ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[Constant(value=1), Name(id='dim', ctx=Load())], ctx=Load())), ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load()), Name(id='Number', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ik', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[Constant(value=1), Constant(value=1)], ctx=Load())), BinOp(left=Constant(value=1), op=Div(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load()))], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='parameters', ctx=Load()), attr='dtype', ctx=Load())), keyword(arg='device', value=Attribute(value=Name(id='parameters', ctx=Load()), attr='device', ctx=Load()))])), Assign(targets=[Name(id='hidden_ik', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[Name(id='ik', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load()), ops=[Eq()], comparators=[Name(id='K_SEPARATE', ctx=Load())]), body=[Assign(targets=[Name(id='hidden_ik', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='parameters', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(lower=BinOp(left=Name(id='means_offset', ctx=Load()), op=Add(), right=BinOp(left=Constant(value=1), op=Mult(), right=Name(id='dim', ctx=Load()))))], ctx=Load()), ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[Constant(value=1), Constant(value=1)], ctx=Load())), ctx=Load())], keywords=[]))], orelse=[Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load()), ops=[Eq()], comparators=[Name(id='K_NORM', ctx=Load())])), Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[Name(id='scaled_means', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='keepdim', value=Constant(value=True))])), Assign(targets=[Name(id='hidden_ik', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Div(), right=Name(id='k', ctx=Load()))], keywords=[]))])]), If(test=Name(id='normalize', ctx=Load()), body=[Assign(targets=[Name(id='log_probs', ctx=Store())], value=BinOp(left=Name(id='scaled_log_probs', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Name(id='scaled_log_probs', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='keepdim', value=Constant(value=True))]))), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_normalize', ctx=Load()), args=[Name(id='scaled_means', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='log_probs', ctx=Load()), Name(id='means', ctx=Load()), Name(id='hidden_ik', ctx=Load())], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Name(id='scaled_log_probs', ctx=Load()), Name(id='scaled_means', ctx=Load()), Name(id='hidden_ik', ctx=Load())], ctx=Load()))])], decorator_list=[]), FunctionDef(name='join_parameters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='log_probs'), arg(arg='means'), arg(arg='hidden_ik')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Join different vMF parameters into vectors.')), Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='broadcast_shapes', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='log_probs', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Subscript(value=Attribute(value=Name(id='means', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), Subscript(value=Attribute(value=Name(id='hidden_ik', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Name(id='means', ctx=Load()), attr='broadcast_to', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='means', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load())], keywords=[])), ctx=Load())], keywords=[])), Assign(targets=[Name(id='hidden_ik', ctx=Store())], value=Call(func=Attribute(value=Name(id='hidden_ik', ctx=Load()), attr='broadcast_to', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='hidden_ik', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load())], keywords=[])), ctx=Load())], keywords=[])), Assign(targets=[Name(id='flat_parts', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load()), Name(id='Number', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ik', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Compare(left=Call(func=Attribute(value=BinOp(left=Name(id='ik', ctx=Load()), op=Sub(), right=BinOp(left=Constant(value=1), op=Div(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load()))), attr='abs', ctx=Load()), args=[], keywords=[]), ops=[Lt()], comparators=[Constant(value=1e-06)]), attr='all', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='All k must be equal to {} for fixed k parametrization'), attr='format', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='flat_parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='means', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())), ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load()), ops=[Eq()], comparators=[Name(id='K_SEPARATE', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='flat_parts', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='means', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())), ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='hidden_ik', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())), ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='k'), ctx=Load()), ops=[Eq()], comparators=[Name(id='K_NORM', ctx=Load())])), Assign(targets=[Name(id='scaled_means', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Name(id='means', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))]), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='flat_parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='scaled_means', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())), ctx=Load())], keywords=[])], keywords=[]))])]), Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Name(id='flat_parts', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))]))], decorator_list=[]), FunctionDef(name='sample', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='size')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Sample from distributions.\n\n        Args:\n            parameters: Distribution parameters with shape (..., K).\n            size: Sample size (output shape without dimension). Parameters must be broadcastable to the given size.\n              If not provided, output shape will be consistent with parameters.\n\n        Returns:\n            Tuple of:\n                - Samples with shape (..., D).\n                - Means with shape (...).\n        ')), If(test=Compare(left=Name(id='size', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='size', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='parameters', ctx=Store())], value=Call(func=Attribute(value=Name(id='parameters', ctx=Load()), attr='reshape', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=BinOp(left=List(elts=[Constant(value=1)], ctx=Load()), op=Mult(), right=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[]), op=Sub(), right=Attribute(value=Name(id='parameters', ctx=Load()), attr='ndim', ctx=Load())), op=Add(), right=Constant(value=1)))), op=Add(), right=List(elts=[Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='log_probs', ctx=Store()), Name(id='means', ctx=Store()), Name(id='hidden_ik', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Assign(targets=[Name(id='probs', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='log_probs', ctx=Load()), attr='exp', ctx=Load()), args=[], keywords=[]), attr='broadcast_to', ctx=Load()), args=[BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Constant(value=1)], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='components', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='multinomial', ctx=Load()), args=[Call(func=Attribute(value=Name(id='probs', ctx=Load()), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1)], keywords=[]), Constant(value=1)], keywords=[]), attr='reshape', ctx=Load()), args=[Starred(value=Name(id='size', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='broad_components', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='components', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), attr='broadcast_to', ctx=Load()), args=[BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Constant(value=1), Attribute(value=Name(id='self', ctx=Load()), attr='dim', ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Name(id='means', ctx=Load()), attr='broadcast_to', ctx=Load()), args=[BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Constant(value=1), Attribute(value=Name(id='self', ctx=Load()), attr='dim', ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='gather', ctx=Load()), args=[Name(id='means', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=2)), Name(id='broad_components', ctx=Load())], keywords=[]), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='hidden_ik', ctx=Store())], value=Call(func=Attribute(value=Name(id='hidden_ik', ctx=Load()), attr='broadcast_to', ctx=Load()), args=[BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Constant(value=1), Constant(value=1)], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='hidden_ik', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='gather', ctx=Load()), args=[Name(id='hidden_ik', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=2)), Subscript(value=Name(id='broad_components', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(upper=Constant(value=1))], ctx=Load()), ctx=Load())], keywords=[]), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='k', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='sample_vmf', ctx=Load()), args=[Name(id='means', ctx=Load()), Name(id='k', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='components', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='mean', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Extract mean for each distribution.\n\n        Args:\n            parameters: Distribution parameters with shape (..., K).\n\n        Returns:\n            Distribution means with shape (..., D).\n        ')), Assign(targets=[Tuple(elts=[Name(id='log_probs', ctx=Store()), Name(id='means', ctx=Store()), Name(id='hidden_ik', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Assign(targets=[Name(id='k', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='half_dim', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='dim'), ctx=Load()), op=Div(), right=Constant(value=2))), Assign(targets=[Name(id='component_means', ctx=Store())], value=BinOp(left=Name(id='means', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_logiv_fn', ctx=Load()), args=[Name(id='half_dim', ctx=Load()), Name(id='k', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_logiv_fn', ctx=Load()), args=[BinOp(left=Name(id='half_dim', ctx=Load()), op=Sub(), right=Constant(value=1)), Name(id='k', ctx=Load())], keywords=[])), attr='exp', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Name(id='component_means', ctx=Load()), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), Return(value=Name(id='means', ctx=Load()))], decorator_list=[]), FunctionDef(name='modes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get modes of distributions.\n\n        Args:\n            parameters: Distribution parameters with shape (..., K).\n\n        Returns:\n            Tuple of mode log probabilities with shape (..., C) and modes with shape (..., C, D).\n        ')), Assign(targets=[Tuple(elts=[Name(id='log_probs', ctx=Store()), Name(id='means', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='log_probs', ctx=Load()), Name(id='means', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='confidences', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get confidence score for each element of the batch.\n\n        Args:\n            parameters: Distribution parameters with shape (..., K).\n\n        Returns:\n            Confidences with shape (...).\n        ')), Assign(targets=[Tuple(elts=[Name(id='log_priors', ctx=Store()), Name(id='means', ctx=Store()), Name(id='hidden_ik', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Assign(targets=[Name(id='logik', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='log_positive', ctx=Load()), args=[Name(id='hidden_ik', ctx=Load())], keywords=[])), Return(value=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='logik', ctx=Load()), attr='mean', ctx=Load()), args=[Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=2))], ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='prior_kld', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get KL-divergence between distributions and prior.\n\n        Warning: This is not true KLD, but just simple regularizer\n        on concentration parameter of vMF distribution.\n        ')), Assign(targets=[Tuple(elts=[Name(id='log_priors', ctx=Store()), Name(id='means', ctx=Store()), Name(id='hidden_ik', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='hidden_ik', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])), Assign(targets=[Name(id='k', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='logk', ctx=Store())], value=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='log_positive', ctx=Load()), args=[Name(id='hidden_ik', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='kld', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='k', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[keyword(arg='logk', value=Name(id='logk', ctx=Load()))])), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Constant(value=1e-06)], keywords=[]))), Return(value=Call(func=Attribute(value=Name(id='kld', ctx=Load()), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], decorator_list=[]), FunctionDef(name='logpdf', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='points')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute log density for all points after normalization.\n\n        Args:\n            parameters: Distribution parameters with shape (..., K).\n            points: Points for density evaluation with shape (..., D).\n\n        Returns:\n            Log probabilities with shape (...).\n        ')), Assign(targets=[Tuple(elts=[Name(id='log_priors', ctx=Store()), Name(id='means', ctx=Store()), Name(id='hidden_ik', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Assign(targets=[Name(id='k', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='logk', ctx=Store())], value=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='log_positive', ctx=Load()), args=[Name(id='hidden_ik', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='points', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_normalize', ctx=Load()), args=[Name(id='points', ctx=Load())], keywords=[])), Assign(targets=[Name(id='logc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[keyword(arg='logk', value=Name(id='logk', ctx=Load()))])), Assign(targets=[Name(id='scaled_means', ctx=Store())], value=BinOp(left=Name(id='k', ctx=Load()), op=Mult(), right=Name(id='means', ctx=Load()))), Assign(targets=[Name(id='logexp', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='auto_matmul', ctx=Load()), args=[Name(id='scaled_means', ctx=Load()), Call(func=Attribute(value=Name(id='points', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])], keywords=[]), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='log_priors', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='logc', ctx=Load()), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), op=Add(), right=Name(id='logexp', ctx=Load()))], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))]))], decorator_list=[]), FunctionDef(name='logmls', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute Log Mutual Likelihood Score (MLS) for pairs of distributions.\n\n\n        Args:\n            parameters1: Distribution parameters with shape (..., K).\n            parameters2: Distribution parameters with shape (..., K).\n\n        Returns:\n            MLS scores with shape (...).\n        ')), Assign(targets=[Tuple(elts=[Name(id='log_probs1', ctx=Store()), Name(id='means1', ctx=Store()), Name(id='hidden_ik1', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='log_probs2', ctx=Store()), Name(id='means2', ctx=Store()), Name(id='hidden_ik2', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pairwise_logmls', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logmls', ctx=Load()), args=[], keywords=[keyword(arg='means1', value=Subscript(value=Name(id='means1', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load())), keyword(arg='hidden_ik1', value=Subscript(value=Name(id='hidden_ik1', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load())), keyword(arg='means2', value=Subscript(value=Name(id='means2', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load())), keyword(arg='hidden_ik2', value=Subscript(value=Name(id='hidden_ik2', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load()))])), Assign(targets=[Name(id='pairwise_logprobs', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='log_probs1', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(), Constant(value=None)], ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='log_probs2', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None), Slice()], ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='pairwise_logmls', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load())), Assign(targets=[Name(id='logmls', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Call(func=Attribute(value=BinOp(left=Name(id='pairwise_logprobs', ctx=Load()), op=Add(), right=Name(id='pairwise_logmls', ctx=Load())), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())), ctx=Load())], keywords=[])], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Return(value=Name(id='logmls', ctx=Load()))], decorator_list=[]), FunctionDef(name='pdf_product', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Compute product of two densities.\n\n        Returns:\n            Tuple of new distribution class and it's parameters.\n        ")), Assign(targets=[Name(id='new_config', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='new_distribution', ctx=Store())], value=Call(func=Name(id='VMFDistribution', ctx=Load()), args=[Name(id='new_config', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='log_probs1', ctx=Store()), Name(id='means1', ctx=Store()), Name(id='hidden_ik1', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='log_probs2', ctx=Store()), Name(id='means2', ctx=Store()), Name(id='hidden_ik2', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='log_probs1', ctx=Store())], value=Call(func=Attribute(value=Name(id='log_probs1', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='log_probs2', ctx=Store())], value=Call(func=Attribute(value=Name(id='log_probs2', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='means1', ctx=Store())], value=Call(func=Attribute(value=Name(id='means1', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='means2', ctx=Store())], value=Call(func=Attribute(value=Name(id='means2', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=3))], keywords=[])), Assign(targets=[Name(id='ik1', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik1', ctx=Load())], keywords=[]), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='ik2', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik2', ctx=Load())], keywords=[]), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=3))], keywords=[])), Assign(targets=[Name(id='new_means', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='means1', ctx=Load()), op=Div(), right=Name(id='ik1', ctx=Load())), op=Add(), right=BinOp(left=Name(id='means2', ctx=Load()), op=Div(), right=Name(id='ik2', ctx=Load())))), Assign(targets=[Name(id='new_k', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[Name(id='new_means', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='keepdim', value=Constant(value=True))])), Assign(targets=[Name(id='new_means', ctx=Store())], value=BinOp(left=Name(id='new_means', ctx=Load()), op=Div(), right=Name(id='new_k', ctx=Load()))), Assign(targets=[Name(id='log_norms', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Div(), right=Name(id='ik1', ctx=Load()))], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Div(), right=Name(id='ik2', ctx=Load()))], keywords=[])), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='new_k', ctx=Load())], keywords=[])), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='new_log_probs', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='log_probs1', ctx=Load()), op=Add(), right=Name(id='log_probs2', ctx=Load())), op=Add(), right=Name(id='log_norms', ctx=Load()))), Assign(targets=[Name(id='new_hidden_ik', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Div(), right=Name(id='new_k', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='new_means', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=3))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_parameters', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='join_parameters', ctx=Load()), args=[Call(func=Attribute(value=Name(id='new_log_probs', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Tuple(elts=[Constant(value=1)], ctx=Load())), ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='new_means', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Tuple(elts=[Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())), ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='new_hidden_ik', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Tuple(elts=[Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())), ctx=Load())], keywords=[])], keywords=[])), Return(value=Tuple(elts=[Name(id='new_distribution', ctx=Load()), Name(id='new_parameters', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Args:\n            parameters: Distribution parameters with shape (..., K).\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Assign(targets=[Name(id='parameters', ctx=Store())], value=Call(func=Attribute(value=Name(id='parameters', ctx=Load()), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='log_priors', ctx=Store()), Name(id='means', ctx=Store()), Name(id='hidden_ik', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sqrt_ik', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik', ctx=Load())], keywords=[]), attr='sqrt', ctx=Load()), args=[], keywords=[])), Return(value=Dict(keys=[Constant(value='vmf_sqrt_inv_k/mean'), Constant(value='vmf_sqrt_inv_k/std')], values=[Call(func=Attribute(value=Name(id='sqrt_ik', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='sqrt_ik', ctx=Load()), attr='std', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='_normalize', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='points')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Project points to sphere.')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Name(id='points', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_vmf_logc', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='k'), arg(arg='logk')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='k', ctx=Load()), Tuple(elts=[Name(id='float', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='floating', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Constant(value=1)], ctx=Load()), Name(id='k', ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='k', ctx=Load()), attr='ndim', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Subscript(value=Name(id='k', ctx=Load()), slice=Constant(value=None), ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='logk', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='logk', ctx=Store())], value=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='log', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='half_dim', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='dim'), ctx=Load()), op=Div(), right=Constant(value=2))), Assign(targets=[Name(id='lognum', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='half_dim', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Mult(), right=Name(id='logk', ctx=Load()))), Assign(targets=[Name(id='logden', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='half_dim', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='math', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])), op=Add(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_logiv_fn', ctx=Load()), args=[BinOp(left=Name(id='half_dim', ctx=Load()), op=Sub(), right=Constant(value=1)), Name(id='k', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='small_mask', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logical_or', ctx=Load()), args=[Call(func=Attribute(value=Name(id='lognum', ctx=Load()), attr='isneginf', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='logden', ctx=Load()), attr='isneginf', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='logc_small', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='tensor', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_log_unit_area', ctx=Load()), args=[], keywords=[]))], keywords=[]), attr='to', ctx=Load()), args=[Attribute(value=Name(id='k', ctx=Load()), attr='dtype', ctx=Load())], keywords=[]), attr='to', ctx=Load()), args=[Attribute(value=Name(id='k', ctx=Load()), attr='device', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='where', ctx=Load()), args=[Name(id='small_mask', ctx=Load()), Name(id='logc_small', ctx=Load()), BinOp(left=Name(id='lognum', ctx=Load()), op=Sub(), right=Name(id='logden', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='_vmf_logmls', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='means1'), arg(arg='hidden_ik1'), arg(arg='means2'), arg(arg='hidden_ik2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute Log MLS for unimodal distributions.')), Assign(targets=[Name(id='k1', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik1', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='k2', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik2', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='logk1', ctx=Store())], value=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='log_positive', ctx=Load()), args=[Name(id='hidden_ik1', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='logk2', ctx=Store())], value=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parametrization', ctx=Load()), attr='log_positive', ctx=Load()), args=[Name(id='hidden_ik2', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='k1', ctx=Load()), op=Mult(), right=Name(id='means1', ctx=Load())), op=Add(), right=BinOp(left=Name(id='k2', ctx=Load()), op=Mult(), right=Name(id='means2', ctx=Load())))], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='keepdim', value=Constant(value=True))])), Assign(targets=[Name(id='logc1', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='k1', ctx=Load())], keywords=[keyword(arg='logk', value=Name(id='logk1', ctx=Load()))])), Assign(targets=[Name(id='logc2', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='k2', ctx=Load())], keywords=[keyword(arg='logk', value=Name(id='logk2', ctx=Load()))])), Assign(targets=[Name(id='logc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=BinOp(left=BinOp(left=Name(id='logc1', ctx=Load()), op=Add(), right=Name(id='logc2', ctx=Load())), op=Sub(), right=Name(id='logc', ctx=Load())), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], decorator_list=[]), FunctionDef(name='_log_unit_area', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Logarithm of the unit sphere area.')), Assign(targets=[Name(id='dim', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='dim'), ctx=Load())), Return(value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='log', ctx=Load()), args=[Constant(value=2)], keywords=[]), op=Add(), right=BinOp(left=BinOp(left=Name(id='dim', ctx=Load()), op=Div(), right=Constant(value=2)), op=Mult(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='log', ctx=Load()), args=[Attribute(value=Name(id='math', ctx=Load()), attr='pi', ctx=Load())], keywords=[]))), op=Sub(), right=Call(func=Attribute(value=Attribute(value=Name(id='scipy', ctx=Load()), attr='special', ctx=Load()), attr='loggamma', ctx=Load()), args=[BinOp(left=Name(id='dim', ctx=Load()), op=Div(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], decorator_list=[])], type_ignores=[])