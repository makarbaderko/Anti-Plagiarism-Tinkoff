Module(body=[Expr(value=Constant(value='Tools for configuration using default config.\n\nAll configurable classes must have :meth:`get_default_config` static method\nwhich returns dictionary of default values. Than you can use\n:func:`prepare_config` function to construct actual config. Actual config\ncan be ``None``, ``dict`` or ``str`` containing path to the file.\n\n**Example**::\n\n    from collections import OrderedDict\n    from mdn_metric.config import prepare_config\n\n    class Configurable:\n        @staticmethod\n        def get_default_config():\n            return OrderedDict([\n                ("arg1", 10),\n                ("arg2", None)\n            ])\n\n        def __init__(self, *args, config=None):\n            config = prepare_config(self, config)\n            self.arg1 = config["arg1"]\n            self.arg2 = config["arg2"]\n\n    obj = Configurable(config={"arg1": 5})\n    print(obj.arg1)  # 5\n    print(obj.arg2)  # None\n\nConfig files use YAML syntax. The special key `_type` can be used in configs to specify\ntarget class. If types are provided, they are checked during initialization.\n\n**Example**::\n\n    system:\n        subsystem:\n            _type: SubsystemClass\n            arg1: [5.0, 2.0]\n\nConfig can contain hyperparameters for optimization in WandB format like:\n\n**Example**::\n\n    system:\n        subsystem:\n            arg1: [5.0, 2.0]\n            _hopt:\n              arg2:\n                min: 1\n                max: 5\n\nIf _hopt dictionary contains some values instead of dictionaries,\nthese values will used in config as parameters when needed.\n\n')), ImportFrom(module='collections', names=[alias(name='OrderedDict'), alias(name='defaultdict')], level=0), ImportFrom(module='io', names=[alias(name='read_yaml'), alias(name='write_yaml')], level=1), Assign(targets=[Name(id='CONFIG_TYPE', ctx=Store())], value=Constant(value='_type')), Assign(targets=[Name(id='CONFIG_HOPT', ctx=Store())], value=Constant(value='_hopt')), ClassDef(name='ConfigError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Exception class for errors in config.')), Pass()], decorator_list=[]), FunctionDef(name='read_config', args=arguments(posonlyargs=[], args=[arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='filename', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), Return(value=Call(func=Name(id='read_yaml', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='write_config', args=arguments(posonlyargs=[], args=[arg(arg='config'), arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='write_yaml', ctx=Load()), args=[Name(id='config', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_config', args=arguments(posonlyargs=[], args=[arg(arg='config')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Load config from file if string is provided. Return empty dictionary if input is None.')), If(test=Compare(left=Name(id='config', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='config', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='read_config', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='config', ctx=Load()), Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='OrderedDict', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Config dictionary expected, got {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='prepare_config', args=arguments(posonlyargs=[], args=[arg(arg='cls_or_default'), arg(arg='config')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Set defaults and check fields.\n\n    Config is a dictionary of values. Method creates new config using\n    default class config. Result config keys are the same as default config keys.\n\n    Args:\n        cls_or_default: Class with get_default_config method or default config dictionary.\n        config: User-provided config.\n\n    Returns:\n        Config dictionary with defaults set.\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cls_or_default', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='default_config', ctx=Store())], value=Name(id='cls_or_default', ctx=Load())), Assign(targets=[Name(id='cls_name', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='default_config', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls_or_default', ctx=Load()), attr='get_default_config', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='cls_name', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='cls_or_default', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()))]), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='get_config', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Name(id='hopts', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='CONFIG_HOPT', ctx=Load()), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='optional_values', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='hopts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='OrderedDict', ctx=Load())], ctx=Load())], keywords=[]))], is_async=0)])), If(test=Compare(left=Name(id='CONFIG_TYPE', ctx=Load()), ops=[In()], comparators=[Name(id='config', ctx=Load())]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='cls_name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='cls_name', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='config', ctx=Load()), slice=Name(id='CONFIG_TYPE', ctx=Load()), ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Type mismatch: expected {}, got {}'), attr='format', ctx=Load()), args=[Subscript(value=Name(id='config', ctx=Load()), slice=Name(id='CONFIG_TYPE', ctx=Load()), ctx=Load()), Name(id='cls_name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Delete(targets=[Subscript(value=Name(id='config', ctx=Load()), slice=Name(id='CONFIG_TYPE', ctx=Load()), ctx=Del())])], orelse=[]), For(target=Name(id='key', ctx=Store()), iter=Name(id='config', ctx=Load()), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='default_config', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknown parameter {}'), attr='format', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='new_config', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='default_config', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='new_config', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='optional_values', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='default_config', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Subscript(value=Name(id='new_config', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[]), Return(value=Name(id='new_config', ctx=Load()))], decorator_list=[]), FunctionDef(name='as_flat_config', args=arguments(posonlyargs=[], args=[arg(arg='config'), arg(arg='separator')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='.')]), body=[Expr(value=Constant(value='Convert nested config to flat config.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='config', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='read_config', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='config', ctx=Load()), Tuple(elts=[Name(id='tuple', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), Name(id='v', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='config', ctx=Load()), Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='OrderedDict', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Expected dictionary, got {}.'), attr='format', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='hopt', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='flat', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='k', ctx=Load()), ops=[Eq()], comparators=[Name(id='CONFIG_HOPT', ctx=Load())]), body=[For(target=Tuple(elts=[Name(id='hk', ctx=Store()), Name(id='hv', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='hopt', ctx=Load()), slice=Name(id='hk', ctx=Load()), ctx=Store())], value=Name(id='hv', ctx=Load()))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='OrderedDict', ctx=Load()), Name(id='tuple', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='sk', ctx=Store()), Name(id='sv', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='as_flat_config', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='sk', ctx=Load()), ops=[Eq()], comparators=[Name(id='CONFIG_HOPT', ctx=Load())]), body=[For(target=Tuple(elts=[Name(id='hk', ctx=Store()), Name(id='hv', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='sv', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='hopt', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='k', ctx=Load()), op=Add(), right=Name(id='separator', ctx=Load())), op=Add(), right=Name(id='hk', ctx=Load())), ctx=Store())], value=Name(id='hv', ctx=Load()))], orelse=[])], orelse=[Assign(targets=[Subscript(value=Name(id='flat', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='k', ctx=Load()), op=Add(), right=Name(id='separator', ctx=Load())), op=Add(), right=Name(id='sk', ctx=Load())), ctx=Store())], value=Name(id='sv', ctx=Load()))])], orelse=[])], orelse=[Assign(targets=[Subscript(value=Name(id='flat', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))])])], orelse=[]), If(test=Name(id='hopt', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='flat', ctx=Load()), slice=Name(id='CONFIG_HOPT', ctx=Load()), ctx=Store())], value=Name(id='hopt', ctx=Load()))], orelse=[]), Return(value=Name(id='flat', ctx=Load()))], decorator_list=[]), FunctionDef(name='_is_index', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='as_nested_config', args=arguments(posonlyargs=[], args=[arg(arg='flat_config'), arg(arg='separator')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='.')]), body=[Expr(value=Constant(value='Convert flat config to nested config.')), Assign(targets=[Name(id='flat_config', ctx=Store())], value=Call(func=Name(id='get_config', ctx=Load()), args=[Name(id='flat_config', ctx=Load())], keywords=[])), Assign(targets=[Name(id='by_prefix', ctx=Store())], value=Call(func=Name(id='defaultdict', ctx=Load()), args=[Name(id='OrderedDict', ctx=Load())], keywords=[])), Assign(targets=[Name(id='nested', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='flat_config', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='k', ctx=Load()), ops=[Eq()], comparators=[Name(id='CONFIG_HOPT', ctx=Load())]), body=[For(target=Tuple(elts=[Name(id='hopt_k', ctx=Store()), Name(id='hopt_v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='separator', ctx=Load()), ops=[In()], comparators=[Name(id='hopt_k', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='sk', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='hopt_k', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='separator', ctx=Load()), Constant(value=1)], keywords=[])), If(test=Compare(left=Name(id='CONFIG_HOPT', ctx=Load()), ops=[NotIn()], comparators=[Subscript(value=Name(id='by_prefix', ctx=Load()), slice=Name(id='prefix', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='by_prefix', ctx=Load()), slice=Name(id='prefix', ctx=Load()), ctx=Load()), slice=Name(id='CONFIG_HOPT', ctx=Load()), ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Name(id='by_prefix', ctx=Load()), slice=Name(id='prefix', ctx=Load()), ctx=Load()), slice=Name(id='CONFIG_HOPT', ctx=Load()), ctx=Load()), slice=Name(id='sk', ctx=Load()), ctx=Store())], value=Name(id='hopt_v', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='CONFIG_HOPT', ctx=Load()), ops=[NotIn()], comparators=[Name(id='nested', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='nested', ctx=Load()), slice=Name(id='CONFIG_HOPT', ctx=Load()), ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Subscript(value=Subscript(value=Name(id='nested', ctx=Load()), slice=Name(id='CONFIG_HOPT', ctx=Load()), ctx=Load()), slice=Name(id='hopt_k', ctx=Load()), ctx=Store())], value=Name(id='hopt_v', ctx=Load()))])], orelse=[])], orelse=[If(test=Compare(left=Name(id='separator', ctx=Load()), ops=[In()], comparators=[Name(id='k', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='sk', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='separator', ctx=Load()), Constant(value=1)], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='by_prefix', ctx=Load()), slice=Name(id='prefix', ctx=Load()), ctx=Load()), slice=Name(id='sk', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='nested', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))])])], orelse=[]), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='by_prefix', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='nested', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Call(func=Name(id='as_nested_config', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='CONFIG_HOPT', ctx=Load()), ops=[In()], comparators=[Name(id='nested', ctx=Load())]), body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='nested', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='OrderedDict', ctx=Load()), Name(id='tuple', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load())], keywords=[]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='nested', ctx=Load()), slice=Name(id='CONFIG_HOPT', ctx=Load()), ctx=Load())]), Compare(left=Subscript(value=Subscript(value=Name(id='nested', ctx=Load()), slice=Name(id='CONFIG_HOPT', ctx=Load()), ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='v', ctx=Load())])]), body=[Delete(targets=[Subscript(value=Subscript(value=Name(id='nested', ctx=Load()), slice=Name(id='CONFIG_HOPT', ctx=Load()), ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='is_index', ctx=Store())], value=ListComp(elt=Call(func=Name(id='_is_index', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='nested', ctx=Load()), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[NotEq()], comparators=[Name(id='CONFIG_HOPT', ctx=Load())])], is_async=0)])), If(test=BoolOp(op=And(), values=[Name(id='nested', ctx=Load()), Call(func=Name(id='any', ctx=Load()), args=[Name(id='is_index', ctx=Load())], keywords=[])]), body=[If(test=Call(func=Attribute(value=Name(id='nested', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='CONFIG_HOPT', ctx=Load()), Constant(value=None)], keywords=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value="Can't use hopts for list values.")], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='all', ctx=Load()), args=[Name(id='is_index', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Constant(value="Can't mix dict and list configs: some keys are indices and some are strings.")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='length', ctx=Store())], value=BinOp(left=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Call(func=Attribute(value=Name(id='nested', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='nested_list', ctx=Store())], value=BinOp(left=List(elts=[Constant(value=None)], ctx=Load()), op=Mult(), right=Name(id='length', ctx=Load()))), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='nested', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='nested_list', ctx=Load()), slice=Call(func=Name(id='int', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[]), Return(value=Name(id='nested_list', ctx=Load()))], orelse=[Return(value=Name(id='nested', ctx=Load()))])], decorator_list=[]), FunctionDef(name='update_config', args=arguments(posonlyargs=[], args=[arg(arg='config'), arg(arg='patch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Merge patch into config recursively.')), If(test=Compare(left=Name(id='patch', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='config', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='get_config', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Name(id='flat', ctx=Store())], value=Call(func=Name(id='as_flat_config', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Name(id='flat_patch', ctx=Store())], value=Call(func=Name(id='as_flat_config', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])), Assign(targets=[Name(id='hopt', ctx=Store())], value=Call(func=Attribute(value=Name(id='flat', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='CONFIG_HOPT', ctx=Load()), Dict(keys=[], values=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='hopt', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Name(id='flat_patch', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='CONFIG_HOPT', ctx=Load()), Dict(keys=[], values=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flat', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='flat_patch', ctx=Load())], keywords=[])), If(test=Name(id='hopt', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='flat', ctx=Load()), slice=Name(id='CONFIG_HOPT', ctx=Load()), ctx=Store())], value=Name(id='hopt', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='as_nested_config', ctx=Load()), args=[Name(id='flat', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='has_hopts', args=arguments(posonlyargs=[], args=[arg(arg='config')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Name(id='CONFIG_HOPT', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='as_flat_config', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='remove_hopts', args=arguments(posonlyargs=[], args=[arg(arg='config')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='flat', ctx=Store())], value=Call(func=Name(id='as_flat_config', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flat', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='CONFIG_HOPT', ctx=Load()), Constant(value=None)], keywords=[])), Return(value=Call(func=Name(id='as_nested_config', ctx=Load()), args=[Name(id='flat', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])