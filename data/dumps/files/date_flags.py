Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='math', names=[alias(name='ceil')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.transforms.base', names=[alias(name='FutureMixin')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ClassDef(name='DateFlagsTransform', bases=[Name(id='Transform', ctx=Load()), Name(id='FutureMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='DateFlagsTransform is a class that implements extraction of the main date-based features from datetime column.\n\n    Notes\n    -----\n    Small example of ``week_number_in_month`` and ``week_number_in_year`` features\n\n    =============  ======================  ========================  ========================\n      timestamp      day_number_in_week      week_number_in_month      week_number_in_year\n    =============  ======================  ========================  ========================\n    2020-01-01     4                       1                         53\n    2020-01-02     5                       1                         53\n    2020-01-03     6                       1                         53\n    2020-01-04     0                       2                         1\n    ...\n    2020-01-10     6                       2                         1\n    2020-01-11     0                       3                         2\n    =============  ======================  ========================  ========================\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='day_number_in_week', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='day_number_in_month', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='day_number_in_year', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='week_number_in_month', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='week_number_in_year', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='month_number_in_year', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='season_number', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='year_number', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='is_weekend', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='special_days_in_week', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='special_days_in_month', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='out_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=True), Tuple(elts=[], ctx=Load()), Tuple(elts=[], ctx=Load()), Constant(value=None)]), body=[Expr(value=Constant(value="Create instance of DateFlags.\n\n        Parameters\n        ----------\n        day_number_in_week:\n            if True, add column with weekday info to feature dataframe in transform\n        day_number_in_month:\n            if True, add column with day info to feature dataframe in transform\n        day_number_in_year:\n            if True, add column with number of day in a year with leap year numeration (values from 1 to 366)\n        week_number_in_month:\n            if True, add column with week number (in month context) to feature dataframe in transform\n        week_number_in_year:\n            if True, add column with week number (in year context) to feature dataframe in transform\n        month_number_in_year:\n            if True, add column with month info to feature dataframe in transform\n        season_number:\n            if True, add column with season info to feature dataframe in transform\n        year_number:\n            if True, add column with year info to feature dataframe in transform\n        is_weekend:\n            if True: add column with weekends flags to feature dataframe in transform\n        special_days_in_week:\n            list of weekdays number (from [0, 6]) that should be interpreted as special ones, if given add column\n            with flag that shows given date is a special day\n        special_days_in_month:\n            list of days number (from [1, 31]) that should be interpreted as special ones, if given add column\n            with flag that shows given date is a special day\n        out_column:\n            base for the name of created columns;\n\n            * if set the final name is '{out_column}_{feature_name}';\n\n            * if don't set, name will be ``transform.__repr__()``,\n              repr will be made for transform that creates exactly this column\n\n        ")), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='any', ctx=Load()), args=[List(elts=[Name(id='day_number_in_week', ctx=Load()), Name(id='day_number_in_month', ctx=Load()), Name(id='day_number_in_year', ctx=Load()), Name(id='week_number_in_month', ctx=Load()), Name(id='week_number_in_year', ctx=Load()), Name(id='month_number_in_year', ctx=Load()), Name(id='season_number', ctx=Load()), Name(id='year_number', ctx=Load()), Name(id='is_weekend', ctx=Load()), Name(id='special_days_in_week', ctx=Load()), Name(id='special_days_in_month', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' feature does nothing with given init args configuration, at least one of day_number_in_week, day_number_in_month, day_number_in_year, week_number_in_month, week_number_in_year, month_number_in_year, season_number, year_number, is_weekend should be True or any of special_days_in_week, special_days_in_month should be not empty.')])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='day_number_in_week', ctx=Store())], value=Name(id='day_number_in_week', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='day_number_in_month', ctx=Store())], value=Name(id='day_number_in_month', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='day_number_in_year', ctx=Store())], value=Name(id='day_number_in_year', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='week_number_in_month', ctx=Store())], value=Name(id='week_number_in_month', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='week_number_in_year', ctx=Store())], value=Name(id='week_number_in_year', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='month_number_in_year', ctx=Store())], value=Name(id='month_number_in_year', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='season_number', ctx=Store())], value=Name(id='season_number', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='year_number', ctx=Store())], value=Name(id='year_number', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_weekend', ctx=Store())], value=Name(id='is_weekend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='special_days_in_week', ctx=Store())], value=Name(id='special_days_in_week', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='special_days_in_month', ctx=Store())], value=Name(id='special_days_in_month', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_empty_parameters', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='day_number_in_week', value=Constant(value=False)), keyword(arg='day_number_in_month', value=Constant(value=False)), keyword(arg='day_number_in_year', value=Constant(value=False)), keyword(arg='week_number_in_month', value=Constant(value=False)), keyword(arg='week_number_in_year', value=Constant(value=False)), keyword(arg='month_number_in_year', value=Constant(value=False)), keyword(arg='season_number', value=Constant(value=False)), keyword(arg='year_number', value=Constant(value=False)), keyword(arg='is_weekend', value=Constant(value=False)), keyword(arg='special_days_in_week', value=Tuple(elts=[], ctx=Load())), keyword(arg='special_days_in_month', value=Tuple(elts=[], ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_get_column_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='feature_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='init_parameters', ctx=Store())], value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_empty_parameters', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='init_parameters', ctx=Load()), slice=Name(id='feature_name', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), slice=Name(id='feature_name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='temp_transform', ctx=Store())], value=Call(func=Name(id='DateFlagsTransform', ctx=Load()), args=[], keywords=[keyword(value=Name(id='init_parameters', ctx=Load())), keyword(arg='out_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='temp_transform', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), conversion=-1), Constant(value='_'), FormattedValue(value=Name(id='feature_name', ctx=Load()), conversion=-1)]))])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fit model. In this case of DateFlags does nothing.')), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='DateFlagsTransform')), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get required features from df.\n\n        Parameters\n        ----------\n        df:\n            dataframe for feature extraction, should contain 'timestamp' column\n\n        Returns\n        -------\n        :\n            dataframe with extracted features\n        ")), Assign(targets=[Name(id='features', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()))])), Assign(targets=[Name(id='timestamp_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='day_number_in_week', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='day_number_in_week')], keywords=[]), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_day_number_in_week', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='day_number_in_month', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='day_number_in_month')], keywords=[]), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_day_number_in_month', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='day_number_in_year', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='day_number_in_year')], keywords=[]), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_day_number_in_year', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='week_number_in_month', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='week_number_in_month')], keywords=[]), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_week_number_in_month', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='week_number_in_year', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='week_number_in_year')], keywords=[]), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_week_number_in_year', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='month_number_in_year', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='month_number_in_year')], keywords=[]), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_month_number_in_year', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='season_number', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='season_number')], keywords=[]), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_season_number', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='year_number', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='year_number')], keywords=[]), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_year', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='is_weekend', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='is_weekend')], keywords=[]), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_weekends', ctx=Load()), args=[], keywords=[keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='special_days_in_week', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='special_days_in_week')], keywords=[]), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_special_day_in_week', ctx=Load()), args=[], keywords=[keyword(arg='special_days', value=Attribute(value=Name(id='self', ctx=Load()), attr='special_days_in_week', ctx=Load())), keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='special_days_in_month', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Constant(value='special_days_in_month')], keywords=[]), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_special_day_in_month', ctx=Load()), args=[], keywords=[keyword(arg='special_days', value=Attribute(value=Name(id='self', ctx=Load()), attr='special_days_in_month', ctx=Load())), keyword(arg='timestamp_series', value=Name(id='timestamp_series', ctx=Load()))]))], orelse=[]), For(target=Name(id='feature', ctx=Store()), iter=Attribute(value=Name(id='features', ctx=Load()), attr='columns', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Name(id='feature', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='features', ctx=Load()), slice=Name(id='feature', ctx=Load()), ctx=Load()), attr='astype', ctx=Load()), args=[Constant(value='category')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dataframes', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='seg', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='tmp', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='seg', ctx=Load()), ctx=Load()), attr='join', ctx=Load()), args=[Name(id='features', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tmp', ctx=Load()), attr='columns', ctx=Load()), attr='to_frame', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_idx', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Constant(value='segment'), Name(id='seg', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tmp', ctx=Load()), attr='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='MultiIndex', ctx=Load()), attr='from_frame', ctx=Load()), args=[Name(id='_idx', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='dataframes', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='tmp', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Name(id='dataframes', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))]), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='columns', ctx=Load()), attr='names', ctx=Store())], value=List(elts=[Constant(value='segment'), Constant(value='feature')], ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_get_special_day_in_week', args=arguments(posonlyargs=[], args=[arg(arg='special_days', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return array with special days marked 1.\n\n        Accepts a list of special days IN WEEK as input and returns array where these days are marked with 1\n        ')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='weekday', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Name(id='special_days', ctx=Load())]))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_special_day_in_month', args=arguments(posonlyargs=[], args=[arg(arg='special_days', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return array with special days marked 1.\n\n        Accepts a list of special days IN MONTH as input and returns array where these days are marked with 1\n        ')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Attribute(value=Name(id='x', ctx=Load()), attr='day', ctx=Load()), ops=[In()], comparators=[Name(id='special_days', ctx=Load())]))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_day_number_in_week', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate an array with the number of the day in the week.')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='weekday', ctx=Load()), args=[], keywords=[]))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_day_number_in_month', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate an array with the number of the day in the month.')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='x', ctx=Load()), attr='day', ctx=Load()))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_season_number', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate an array with the season number.')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=BinOp(left=BinOp(left=Attribute(value=Name(id='x', ctx=Load()), attr='month', ctx=Load()), op=Mod(), right=Constant(value=12)), op=FloorDiv(), right=Constant(value=3)), op=Add(), right=Constant(value=1)))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_day_number_in_year', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate an array with number of day in a year with leap year numeration (values from 1 to 366).')), FunctionDef(name='leap_year_number', args=arguments(posonlyargs=[], args=[arg(arg='dt', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return day number with leap year numeration.')), Assign(targets=[Name(id='day_of_year', ctx=Store())], value=Attribute(value=Name(id='dt', ctx=Load()), attr='dayofyear', ctx=Load())), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='dt', ctx=Load()), attr='is_leap_year', ctx=Load())), Compare(left=Attribute(value=Name(id='dt', ctx=Load()), attr='month', ctx=Load()), ops=[GtE()], comparators=[Constant(value=3)])]), body=[Return(value=BinOp(left=Name(id='day_of_year', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Return(value=Name(id='day_of_year', ctx=Load()))])], decorator_list=[], returns=Name(id='int', ctx=Load())), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Name(id='leap_year_number', ctx=Load())], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_week_number_in_month', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate an array with the week number in the month.')), FunctionDef(name='week_of_month', args=arguments(posonlyargs=[], args=[arg(arg='dt', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return week of month number.\n\n            How it works:\n            Each month starts with the week number 1, no matter which weekday the 1st day is, for example\n\n            * 2021-01-01 is a Friday, we mark it as 1st week\n            * 2021-01-02 is a Saturday, 1st week\n            * 2021-01-03 is a Sunday, 1st week\n            * 2021-01-04 is a Monday, 2nd week\n            * ...\n            * 2021-01-10 is a Sunday, 2nd week\n            * 2021-01-11 is a Monday, 3rd week\n            * ...\n\n            ')), Assign(targets=[Name(id='first_day', ctx=Store())], value=Call(func=Attribute(value=Name(id='dt', ctx=Load()), attr='replace', ctx=Load()), args=[], keywords=[keyword(arg='day', value=Constant(value=1))])), Assign(targets=[Name(id='dom', ctx=Store())], value=Attribute(value=Name(id='dt', ctx=Load()), attr='day', ctx=Load())), Assign(targets=[Name(id='adjusted_dom', ctx=Store())], value=BinOp(left=Name(id='dom', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='first_day', ctx=Load()), attr='weekday', ctx=Load()), args=[], keywords=[]))), Return(value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='ceil', ctx=Load()), args=[BinOp(left=Name(id='adjusted_dom', ctx=Load()), op=Div(), right=Constant(value=7.0))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Name(id='week_of_month', ctx=Load())], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_week_number_in_year', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate an array with the week number in the year.')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='x', ctx=Load()), attr='weekofyear', ctx=Load()))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_month_number_in_year', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate an array with the week number in the year.')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='x', ctx=Load()), attr='month', ctx=Load()))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_year', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate an array with the week number in the year.')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='x', ctx=Load()), attr='year', ctx=Load()))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), FunctionDef(name='_get_weekends', args=arguments(posonlyargs=[], args=[arg(arg='timestamp_series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate an array with the weekends flags.')), Assign(targets=[Name(id='weekend_days', ctx=Store())], value=Tuple(elts=[Constant(value=5), Constant(value=6)], ctx=Load())), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='timestamp_series', ctx=Load()), attr='apply', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='weekday', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Name(id='weekend_days', ctx=Load())]))], keywords=[]), attr='values', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='DateFlagsTransform')], ctx=Load()))], type_ignores=[])