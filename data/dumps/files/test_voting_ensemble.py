Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='unittest.mock', names=[alias(name='MagicMock')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='joblib', names=[alias(name='Parallel')], level=0), ImportFrom(module='joblib', names=[alias(name='delayed')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.ensembles.voting_ensemble', names=[alias(name='VotingEnsemble')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='MAE')], level=0), ImportFrom(module='etna.pipeline', names=[alias(name='Pipeline')], level=0), Assign(targets=[Name(id='HORIZON', ctx=Store())], value=Constant(value=7)), FunctionDef(name='test_validate_weights_pass', args=arguments(posonlyargs=[], args=[arg(arg='weights', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='auto'), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that VotingEnsemble._validate_weights validate weights correctly in case of valid args sets.')), Expr(value=Call(func=Attribute(value=Name(id='VotingEnsemble', ctx=Load()), attr='_validate_weights', ctx=Load()), args=[], keywords=[keyword(arg='weights', value=Name(id='weights', ctx=Load())), keyword(arg='pipelines_number', value=Constant(value=3))]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='weights'), Tuple(elts=[Constant(value=None), List(elts=[Constant(value=0.2), Constant(value=0.3), Constant(value=0.5)], ctx=Load()), Constant(value='auto')], ctx=Load())], keywords=[])]), FunctionDef(name='test_validate_weights_fail', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that VotingEnsemble._validate_weights validate weights correctly in case of invalid args sets.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Weights size should be equal to pipelines number.'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='VotingEnsemble', ctx=Load()), attr='_validate_weights', ctx=Load()), args=[], keywords=[keyword(arg='weights', value=List(elts=[Constant(value=0.3), Constant(value=0.4), Constant(value=0.3)], ctx=Load())), keyword(arg='pipelines_number', value=Constant(value=2))]))])], decorator_list=[]), FunctionDef(name='test_process_weights', args=arguments(posonlyargs=[], args=[arg(arg='naive_pipeline_1', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='weights', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='pipelines_number', annotation=Name(id='int', ctx=Load())), arg(arg='expected', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that _process_weights processes weights correctly.')), Assign(targets=[Name(id='ensemble', ctx=Store())], value=Call(func=Name(id='VotingEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=ListComp(elt=Name(id='naive_pipeline_1', ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='pipelines_number', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), keyword(arg='weights', value=Name(id='weights', ctx=Load()))])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='_process_weights', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='weights,pipelines_number,expected'), Tuple(elts=[Tuple(elts=[Constant(value=None), Constant(value=5), List(elts=[Constant(value=0.2), Constant(value=0.2), Constant(value=0.2), Constant(value=0.2), Constant(value=0.2)], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Constant(value=0.2), Constant(value=0.3), Constant(value=0.5)], ctx=Load()), Constant(value=3), List(elts=[Constant(value=0.2), Constant(value=0.3), Constant(value=0.5)], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Constant(value=1), Constant(value=1), Constant(value=2)], ctx=Load()), Constant(value=3), List(elts=[Constant(value=0.25), Constant(value=0.25), Constant(value=0.5)], ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_process_weights_auto', args=arguments(posonlyargs=[], args=[arg(arg='example_tsdf', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='naive_pipeline_1', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='naive_pipeline_2', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that _process_weights processes weights correctly in "auto" mode.')), Assign(targets=[Name(id='ensemble', ctx=Store())], value=Call(func=Name(id='VotingEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='naive_pipeline_1', ctx=Load()), Name(id='naive_pipeline_2', ctx=Load())], ctx=Load())), keyword(arg='weights', value=Constant(value='auto'))])), Assign(targets=[Attribute(value=Name(id='ensemble', ctx=Load()), attr='ts', ctx=Store())], value=Name(id='example_tsdf', ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='_process_weights', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), Assert(test=Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value=1), ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_fit_interface', args=arguments(posonlyargs=[], args=[arg(arg='example_tsdf', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='weights', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='auto'), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='naive_pipeline_1', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='naive_pipeline_2', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that fit saves processes weights.')), Assign(targets=[Name(id='ensemble', ctx=Store())], value=Call(func=Name(id='VotingEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='naive_pipeline_1', ctx=Load()), Name(id='naive_pipeline_2', ctx=Load())], ctx=Load())), keyword(arg='weights', value=Name(id='weights', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsdf', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Attribute(value=Name(id='ensemble', ctx=Load()), attr='processed_weights', ctx=Load())), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='weights'), Tuple(elts=[Constant(value=None), List(elts=[Constant(value=0.2), Constant(value=0.3)], ctx=Load()), Constant(value='auto')], ctx=Load())], keywords=[])]), FunctionDef(name='test_forecast_interface', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='prophet_pipeline', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that VotingEnsemble.forecast returns TSDataset of correct length.')), Assign(targets=[Name(id='ensemble', ctx=Store())], value=Call(func=Name(id='VotingEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='catboost_pipeline', ctx=Load()), Name(id='prophet_pipeline', ctx=Load())], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsds', ctx=Load()))])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='forecast', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='forecast', ctx=Load()), attr='df', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='HORIZON', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_forecast_prediction_interval_interface', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds'), arg(arg='naive_pipeline_1'), arg(arg='naive_pipeline_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test the forecast interface with prediction intervals.')), Assign(targets=[Name(id='ensemble', ctx=Store())], value=Call(func=Name(id='VotingEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='naive_pipeline_1', ctx=Load()), Name(id='naive_pipeline_2', ctx=Load())], ctx=Load())), keyword(arg='weights', value=List(elts=[Constant(value=1), Constant(value=3)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='forecast', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_slice', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Set(elts=[Constant(value='target_0.025'), Constant(value='target_0.975'), Constant(value='target')]), attr='issubset', ctx=Load()), args=[Attribute(value=Name(id='segment_slice', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=BinOp(left=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.975'), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.025'), ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)]), attr='all', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_predict_interface', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='prophet_pipeline', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that VotingEnsemble.predict returns TSDataset of correct length.')), Assign(targets=[Name(id='ensemble', ctx=Store())], value=Call(func=Name(id='VotingEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='catboost_pipeline', ctx=Load()), Name(id='prophet_pipeline', ctx=Load())], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsds', ctx=Load()))])), Assign(targets=[Name(id='start_idx', ctx=Store())], value=Constant(value=20)), Assign(targets=[Name(id='end_idx', ctx=Store())], value=Constant(value=30)), Assign(targets=[Name(id='prediction', ctx=Store())], value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='predict', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsds', ctx=Load())), keyword(arg='start_timestamp', value=Subscript(value=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='index', ctx=Load()), slice=Name(id='start_idx', ctx=Load()), ctx=Load())), keyword(arg='end_timestamp', value=Subscript(value=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='index', ctx=Load()), slice=Name(id='end_idx', ctx=Load()), ctx=Load()))])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='prediction', ctx=Load()), Name(id='TSDataset', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='prediction', ctx=Load()), attr='df', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=BinOp(left=Name(id='end_idx', ctx=Load()), op=Sub(), right=Name(id='start_idx', ctx=Load())), op=Add(), right=Constant(value=1))]))], decorator_list=[]), FunctionDef(name='test_vote_default_weights', args=arguments(posonlyargs=[], args=[arg(arg='simple_df', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='naive_pipeline_1', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='naive_pipeline_2', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that VotingEnsemble gets average during vote.')), Assign(targets=[Name(id='ensemble', ctx=Store())], value=Call(func=Name(id='VotingEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='naive_pipeline_1', ctx=Load()), Name(id='naive_pipeline_2', ctx=Load())], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='simple_df', ctx=Load()))])), Assign(targets=[Name(id='forecasts', ctx=Store())], value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='ensemble', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(arg='backend', value=Constant(value='multiprocessing')), keyword(arg='verbose', value=Constant(value=11))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='ensemble', ctx=Load()), attr='_forecast_pipeline', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pipeline', value=Name(id='pipeline', ctx=Load()))]), generators=[comprehension(target=Name(id='pipeline', ctx=Store()), iter=Attribute(value=Name(id='ensemble', ctx=Load()), attr='pipelines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='_vote', ctx=Load()), args=[], keywords=[keyword(arg='forecasts', value=Name(id='forecasts', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='A'), Constant(value='target')], ctx=Load()), ctx=Load()), attr='values', ctx=Load()), List(elts=[Constant(value=47.5), Constant(value=48), Constant(value=47.5), Constant(value=48), Constant(value=47.5), Constant(value=48), Constant(value=47.5)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='B'), Constant(value='target')], ctx=Load()), ctx=Load()), attr='values', ctx=Load()), List(elts=[Constant(value=11), Constant(value=12), Constant(value=11), Constant(value=12), Constant(value=11), Constant(value=12), Constant(value=11)], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_vote_custom_weights', args=arguments(posonlyargs=[], args=[arg(arg='simple_df', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='naive_pipeline_1', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='naive_pipeline_2', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that VotingEnsemble gets average during vote.')), Assign(targets=[Name(id='ensemble', ctx=Store())], value=Call(func=Name(id='VotingEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='naive_pipeline_1', ctx=Load()), Name(id='naive_pipeline_2', ctx=Load())], ctx=Load())), keyword(arg='weights', value=List(elts=[Constant(value=1), Constant(value=3)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='simple_df', ctx=Load()))])), Assign(targets=[Name(id='forecasts', ctx=Store())], value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='ensemble', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(arg='backend', value=Constant(value='multiprocessing')), keyword(arg='verbose', value=Constant(value=11))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='ensemble', ctx=Load()), attr='_forecast_pipeline', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pipeline', value=Name(id='pipeline', ctx=Load()))]), generators=[comprehension(target=Name(id='pipeline', ctx=Store()), iter=Attribute(value=Name(id='ensemble', ctx=Load()), attr='pipelines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='_vote', ctx=Load()), args=[], keywords=[keyword(arg='forecasts', value=Name(id='forecasts', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='A'), Constant(value='target')], ctx=Load()), ctx=Load()), attr='values', ctx=Load()), List(elts=[Constant(value=47.25), Constant(value=48), Constant(value=47.25), Constant(value=48), Constant(value=47.25), Constant(value=48), Constant(value=47.25)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='B'), Constant(value='target')], ctx=Load()), ctx=Load()), attr='values', ctx=Load()), List(elts=[Constant(value=10.5), Constant(value=12), Constant(value=10.5), Constant(value=12), Constant(value=10.5), Constant(value=12), Constant(value=10.5)], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_forecast_calls_vote', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='naive_pipeline_1', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='naive_pipeline_2', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ensemble', ctx=Store())], value=Call(func=Name(id='VotingEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='naive_pipeline_1', ctx=Load()), Name(id='naive_pipeline_2', ctx=Load())], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsds', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='ensemble', ctx=Load()), attr='_vote', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='_forecast', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ensemble', ctx=Load()), attr='_vote', ctx=Load()), attr='assert_called_once', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Name(id='ensemble', ctx=Load()), attr='_vote', ctx=Load()), attr='return_value', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_predict_calls_vote', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='naive_pipeline_1', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='naive_pipeline_2', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ensemble', ctx=Store())], value=Call(func=Name(id='VotingEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=List(elts=[Name(id='naive_pipeline_1', ctx=Load()), Name(id='naive_pipeline_2', ctx=Load())], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsds', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='ensemble', ctx=Load()), attr='_vote', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='ensemble', ctx=Load()), attr='_predict', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsds', ctx=Load())), keyword(arg='start_timestamp', value=Subscript(value=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=20), ctx=Load())), keyword(arg='end_timestamp', value=Subscript(value=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='index', ctx=Load()), slice=Constant(value=30), ctx=Load())), keyword(arg='prediction_interval', value=Constant(value=False)), keyword(arg='quantiles', value=Tuple(elts=[], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ensemble', ctx=Load()), attr='_vote', ctx=Load()), attr='assert_called_once', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Name(id='ensemble', ctx=Load()), attr='_vote', ctx=Load()), attr='return_value', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_multiprocessing_ensembles', args=arguments(posonlyargs=[], args=[arg(arg='simple_df', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='catboost_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='prophet_pipeline', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='naive_pipeline_1', annotation=Name(id='Pipeline', ctx=Load())), arg(arg='naive_pipeline_2', annotation=Name(id='Pipeline', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that VotingEnsemble works the same in case of multi and single jobs modes.')), Assign(targets=[Name(id='pipelines', ctx=Store())], value=List(elts=[Name(id='catboost_pipeline', ctx=Load()), Name(id='prophet_pipeline', ctx=Load()), Name(id='naive_pipeline_1', ctx=Load()), Name(id='naive_pipeline_2', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='single_jobs_ensemble', ctx=Store())], value=Call(func=Name(id='VotingEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='pipelines', ctx=Load())], keywords=[])), keyword(arg='n_jobs', value=Constant(value=1))])), Assign(targets=[Name(id='multi_jobs_ensemble', ctx=Store())], value=Call(func=Name(id='VotingEnsemble', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='pipelines', ctx=Load())], keywords=[])), keyword(arg='n_jobs', value=Constant(value=3))])), Expr(value=Call(func=Attribute(value=Name(id='single_jobs_ensemble', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='simple_df', ctx=Load())], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='multi_jobs_ensemble', ctx=Load()), attr='fit', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='simple_df', ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='single_jobs_forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='single_jobs_ensemble', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='multi_jobs_forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='multi_jobs_ensemble', ctx=Load()), attr='forecast', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Call(func=Attribute(value=Compare(left=Attribute(value=Name(id='single_jobs_forecast', ctx=Load()), attr='df', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='multi_jobs_forecast', ctx=Load()), attr='df', ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]), attr='all', ctx=Load()), args=[], keywords=[]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='long_1', ctx=Load())]), FunctionDef(name='test_backtest', args=arguments(posonlyargs=[], args=[arg(arg='voting_ensemble_pipeline', annotation=Name(id='VotingEnsemble', ctx=Load())), arg(arg='example_tsds', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='n_jobs', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that backtest works with VotingEnsemble.')), Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Attribute(value=Name(id='voting_ensemble_pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='example_tsds', ctx=Load())), keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='n_jobs', value=Name(id='n_jobs', ctx=Load())), keyword(arg='n_folds', value=Constant(value=3))])), For(target=Name(id='df', ctx=Store()), iter=Name(id='results', ctx=Load()), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='df', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='long_1', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='n_jobs'), Tuple(elts=[Constant(value=1), Constant(value=5)], ctx=Load())], keywords=[])])], type_ignores=[])