Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='MAE')], level=0), ImportFrom(module='etna.models.tbats', names=[alias(name='BATSModel')], level=0), ImportFrom(module='etna.models.tbats', names=[alias(name='TBATSModel')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='LagTransform')], level=0), ImportFrom(module='tests.test_models.test_linear_model', names=[alias(name='linear_segments_by_parameters')], level=0), FunctionDef(name='linear_segments_ts_unique', args=arguments(posonlyargs=[], args=[arg(arg='random_seed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='alpha_values', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='rand', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Constant(value=4)), op=Sub(), right=Constant(value=2)), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=3)], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='intercept_values', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='rand', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Constant(value=4)), op=Add(), right=Constant(value=1)), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=3)], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='linear_segments_by_parameters', ctx=Load()), args=[Name(id='alpha_values', ctx=Load()), Name(id='intercept_values', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='sinusoid_ts', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='horizon', ctx=Store())], value=Constant(value=14)), Assign(targets=[Name(id='periods', ctx=Store())], value=Constant(value=100)), Assign(targets=[Name(id='sinusoid_ts_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='segment'), Constant(value='timestamp'), Constant(value='target')], values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='periods', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='1/1/2018')), keyword(arg='periods', value=Name(id='periods', ctx=Load()))]), ListComp(elt=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='periods', ctx=Load())], keywords=[]), ifs=[], is_async=0)])])], keywords=[])), Assign(targets=[Name(id='sinusoid_ts_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='segment'), Constant(value='timestamp'), Constant(value='target')], values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Name(id='periods', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='1/1/2018')), keyword(arg='periods', value=Name(id='periods', ctx=Load()))]), ListComp(elt=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='periods', ctx=Load())], keywords=[]), ifs=[], is_async=0)])])], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Name(id='sinusoid_ts_1', ctx=Load()), Name(id='sinusoid_ts_2', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='D'))])), Return(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='train_test_split', ctx=Load()), args=[], keywords=[keyword(arg='test_size', value=Name(id='horizon', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_repr', args=arguments(posonlyargs=[], args=[arg(arg='model_class'), arg(arg='model_class_repr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='kwargs', ctx=Store())], value=Dict(keys=[Constant(value='use_box_cox'), Constant(value='box_cox_bounds'), Constant(value='use_trend'), Constant(value='use_damped_trend'), Constant(value='seasonal_periods'), Constant(value='use_arma_errors'), Constant(value='show_warnings'), Constant(value='n_jobs'), Constant(value='multiprocessing_start_method'), Constant(value='context')], values=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)])), Assign(targets=[Name(id='kwargs_repr', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value='use_box_cox = None, '), op=Add(), right=Constant(value='box_cox_bounds = None, ')), op=Add(), right=Constant(value='use_trend = None, ')), op=Add(), right=Constant(value='use_damped_trend = None, ')), op=Add(), right=Constant(value='seasonal_periods = None, ')), op=Add(), right=Constant(value='use_arma_errors = None, ')), op=Add(), right=Constant(value='show_warnings = None, ')), op=Add(), right=Constant(value='n_jobs = None, ')), op=Add(), right=Constant(value='multiprocessing_start_method = None, ')), op=Add(), right=Constant(value='context = None'))), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Name(id='model_class', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='model_repr', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='true_repr', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='model_class_repr', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Name(id='kwargs_repr', ctx=Load()), conversion=-1), Constant(value=', )')])), Assert(test=Compare(left=Name(id='model_repr', ctx=Load()), ops=[Eq()], comparators=[Name(id='true_repr', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model_class, model_class_repr'), Tuple(elts=[Tuple(elts=[Name(id='TBATSModel', ctx=Load()), Constant(value='TBATSModel')], ctx=Load()), Tuple(elts=[Name(id='BATSModel', ctx=Load()), Constant(value='BATSModel')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_not_fitted', args=arguments(posonlyargs=[], args=[arg(arg='model'), arg(arg='linear_segments_ts_unique')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='train', ctx=Store()), Name(id='test', ctx=Store())], ctx=Store())], value=Name(id='linear_segments_ts_unique', ctx=Load())), Assign(targets=[Name(id='to_forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='train', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=3)], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='model is not fitted!'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='to_forecast', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), Tuple(elts=[Call(func=Name(id='TBATSModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='BATSModel', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])]), FunctionDef(name='test_format', args=arguments(posonlyargs=[], args=[arg(arg='model'), arg(arg='new_format_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Name(id='new_format_df', ctx=Load())), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='df', ctx=Load()), Constant(value='1d')], keywords=[])), Assign(targets=[Name(id='lags', ctx=Store())], value=Call(func=Name(id='LagTransform', ctx=Load()), args=[], keywords=[keyword(arg='lags', value=List(elts=[Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())), keyword(arg='in_column', value=Constant(value='target'))])), Expr(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='lags', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future_ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=3)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future_ts', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='future_ts', ctx=Load()), attr='isnull', ctx=Load()), args=[], keywords=[]), attr='values', ctx=Load()), attr='any', ctx=Load()), args=[], keywords=[])))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='long_2', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='TBATSModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='BATSModel', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])]), FunctionDef(name='test_dummy', args=arguments(posonlyargs=[], args=[arg(arg='model'), arg(arg='sinusoid_ts')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='train', ctx=Store()), Name(id='test', ctx=Store())], ctx=Store())], value=Name(id='sinusoid_ts', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='train', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future_ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='train', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=14)], keywords=[])), Assign(targets=[Name(id='y_pred', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future_ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='metric', ctx=Store())], value=Call(func=Name(id='MAE', ctx=Load()), args=[Constant(value='macro')], keywords=[])), Assign(targets=[Name(id='value_metric', ctx=Store())], value=Call(func=Name(id='metric', ctx=Load()), args=[Name(id='y_pred', ctx=Load()), Name(id='test', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='value_metric', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0.33)]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='long_2', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='TBATSModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='BATSModel', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])]), FunctionDef(name='test_prediction_interval', args=arguments(posonlyargs=[], args=[arg(arg='model'), arg(arg='example_tsds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='example_tsds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='future_ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='make_future', ctx=Load()), args=[Constant(value=3)], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='forecast', ctx=Load()), args=[Name(id='future_ts', ctx=Load())], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Constant(value=0.025), Constant(value=0.975)], ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='forecast', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='segment_slice', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assert(test=Call(func=Attribute(value=Set(elts=[Constant(value='target_0.025'), Constant(value='target_0.975'), Constant(value='target')]), attr='issubset', ctx=Load()), args=[Attribute(value=Name(id='segment_slice', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=BinOp(left=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.975'), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='segment_slice', ctx=Load()), slice=Constant(value='target_0.025'), ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)]), attr='all', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='long_2', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='model'), List(elts=[Call(func=Name(id='TBATSModel', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='BATSModel', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])])], type_ignores=[])