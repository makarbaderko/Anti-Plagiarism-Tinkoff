Module(body=[ImportFrom(module='sklearn.model_selection', names=[alias(name='train_test_split'), alias(name='KFold')], level=0), ImportFrom(module='common', names=[alias(name='Dataset')], level=2), FunctionDef(name='train_test_interleave_split', args=arguments(posonlyargs=[], args=[arg(arg='classes'), arg(arg='test_size')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Split classes into train and test subsets.\n\n    Args:\n        test_size: Fraction of the test in the [0, 1] range.\n\n    Returns:\n        Train classes and test classes.\n    ')), Assign(targets=[Name(id='classes1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='classes2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value=0)), For(target=Name(id='c', ctx=Store()), iter=Name(id='classes', ctx=Load()), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='test_size', ctx=Load()))), If(test=Compare(left=BinOp(left=Name(id='s', ctx=Load()), op=Add(), right=Constant(value=1e-06)), ops=[Gt()], comparators=[Constant(value=1)]), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Sub(), value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='classes1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='classes2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))])], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='classes1', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='classes2', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Can't split into two non-empty datasets with the given fraction.")], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='classes1', ctx=Load()), Name(id='classes2', ctx=Load())], ctx=Load()))], decorator_list=[]), ClassDef(name='KFoldInterleave', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n_splits')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_n_splits', ctx=Store())], value=Name(id='n_splits', ctx=Load()))], decorator_list=[]), FunctionDef(name='split', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='classes')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='folds', ctx=Store())], value=ListComp(elt=List(elts=[], ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_n_splits', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='classes', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='folds', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_n_splits', ctx=Load())), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='sets', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_n_splits', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='train', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='folds', ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_n_splits', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='j', ctx=Load()), ops=[NotEq()], comparators=[Name(id='i', ctx=Load())])], is_async=0)]), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='test', ctx=Store())], value=Subscript(value=Name(id='folds', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='sets', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='train', ctx=Load()), Name(id='test', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='sets', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='ClassSubsetDataset', bases=[Name(id='Dataset', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Helper class for labels subset selection.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dataset'), arg(arg='classes')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=BinOp(left=Call(func=Name(id='max', ctx=Load()), args=[Name(id='classes', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)), ops=[Gt()], comparators=[Attribute(value=Name(id='dataset', ctx=Load()), attr='num_classes', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='More classes than dataset has')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_dataset', ctx=Store())], value=Name(id='dataset', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_indices', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='labels', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='classes', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='classes', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='label', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='dataset', ctx=Load()), attr='labels', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='label', ctx=Load()), ops=[NotIn()], comparators=[Name(id='classes', ctx=Load())]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_indices', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='label_mapping', ctx=Store())], value=DictComp(key=Name(id='label', ctx=Load()), value=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='label', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='classes', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_labels', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='label_mapping', ctx=Load()), slice=Name(id='label', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='label', ctx=Store()), iter=Name(id='labels', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='classification', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether dataset is classification or verification.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dataset', ctx=Load()), attr='classification', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='openset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether dataset is for open-set or closed-set classification.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dataset', ctx=Load()), attr='openset', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='labels', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get dataset labels array.\n\n        Labels are integers in the range [0, N-1].\n\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_labels', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get element of the dataset.\n\n        Classification dataset returns tuple (image, label).\n        Verification dataset returns ((image1, image2), label).\n\n        Datasets with quality assigned to each sample return tuples like\n        (image, label, quality) or ((image1, image2), label, (quality1, quality2)).\n\n        ')), Assign(targets=[Name(id='item', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dataset', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_indices', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ctx=Load())), Return(value=BinOp(left=Tuple(elts=[Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_labels', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], ctx=Load()), op=Add(), right=Subscript(value=Name(id='item', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load())))], decorator_list=[])], decorator_list=[]), ClassDef(name='ElementSubsetDataset', bases=[Name(id='Dataset', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Helper class for subset selection. Allows to select a subset of indices.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dataset'), arg(arg='indices')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=BinOp(left=Call(func=Name(id='max', ctx=Load()), args=[Name(id='indices', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='More indices than dataset has.')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_dataset', ctx=Store())], value=Name(id='dataset', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_indices', ctx=Store())], value=Name(id='indices', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_labels', ctx=Store())], value=ListComp(elt=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dataset', ctx=Load()), attr='labels', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_indices', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='classification', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether dataset is classification or verification.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dataset', ctx=Load()), attr='classification', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='openset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether dataset is for open-set or closed-set classification.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dataset', ctx=Load()), attr='openset', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='labels', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get dataset labels array.\n\n        Labels are integers in the range [0, N-1].\n\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_labels', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get element of the dataset.\n\n        Classification dataset returns tuple (image, label).\n        Verification dataset returns ((image1, image2), label).\n\n        Datasets with quality assigned to each sample return tuples like\n        (image, label, quality) or ((image1, image2), label, (quality1, quality2)).\n\n        ')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dataset', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_indices', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='split_classes', args=arguments(posonlyargs=[], args=[arg(arg='dataset'), arg(arg='fraction'), arg(arg='interleave')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0.5), Constant(value=False)]), body=[Expr(value=Constant(value='Split dataset into two parts with different sets of labels.\n\n    Function is deterministic. Split is based on hash values, not random.\n\n    Returns:\n        Two datasets. The size of the first dataset is proportional to fraction,\n        the size of the second is proportional to (1 - fraction).\n\n    ')), Assign(targets=[Name(id='classes', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='dataset', ctx=Load()), attr='num_classes', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='interleave', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='classes1', ctx=Store()), Name(id='classes2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='train_test_interleave_split', ctx=Load()), args=[Name(id='classes', ctx=Load())], keywords=[keyword(arg='test_size', value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='fraction', ctx=Load())))]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='classes1', ctx=Store()), Name(id='classes2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='train_test_split', ctx=Load()), args=[Name(id='classes', ctx=Load())], keywords=[keyword(arg='test_size', value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='fraction', ctx=Load()))), keyword(arg='shuffle', value=Constant(value=False))]))]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='classes1', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='classes2', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Can't split into two non-empty datasets with the given fraction.")], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Call(func=Name(id='ClassSubsetDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='classes1', ctx=Load())], keywords=[]), Call(func=Name(id='ClassSubsetDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='classes2', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[]), FunctionDef(name='split_crossval_classes', args=arguments(posonlyargs=[], args=[arg(arg='dataset'), arg(arg='i'), arg(arg='k'), arg(arg='interleave')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=4), Constant(value=False)]), body=[Expr(value=Constant(value='Get i-th training and validation sets using k class-based folds.')), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[GtE()], comparators=[Name(id='k', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='IndexError', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='classes', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='dataset', ctx=Load()), attr='num_classes', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='interleave', ctx=Load()), body=[Assign(targets=[Name(id='kfolder', ctx=Store())], value=Call(func=Name(id='KFoldInterleave', ctx=Load()), args=[], keywords=[keyword(arg='n_splits', value=Name(id='k', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='kfolder', ctx=Store())], value=Call(func=Name(id='KFold', ctx=Load()), args=[], keywords=[keyword(arg='n_splits', value=Name(id='k', ctx=Load())), keyword(arg='shuffle', value=Constant(value=False))]))]), Assign(targets=[Tuple(elts=[Name(id='train_classes', ctx=Store()), Name(id='val_classes', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='kfolder', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='classes', ctx=Load())], keywords=[])], keywords=[]), slice=Name(id='i', ctx=Load()), ctx=Load())), Return(value=Tuple(elts=[Call(func=Name(id='ClassSubsetDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='train_classes', ctx=Load())], keywords=[]), Call(func=Name(id='ClassSubsetDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='val_classes', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[]), FunctionDef(name='split_crossval_elements', args=arguments(posonlyargs=[], args=[arg(arg='dataset'), arg(arg='i'), arg(arg='k'), arg(arg='interleave')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=4), Constant(value=False)]), body=[Expr(value=Constant(value='Get i-th training and validation sets using k element-based folds.')), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[GtE()], comparators=[Name(id='k', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='IndexError', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='indices', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='dataset', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), If(test=Name(id='interleave', ctx=Load()), body=[Assign(targets=[Name(id='kfolder', ctx=Store())], value=Call(func=Name(id='KFoldInterleave', ctx=Load()), args=[], keywords=[keyword(arg='n_splits', value=Name(id='k', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='kfolder', ctx=Store())], value=Call(func=Name(id='KFold', ctx=Load()), args=[], keywords=[keyword(arg='n_splits', value=Name(id='k', ctx=Load())), keyword(arg='shuffle', value=Constant(value=True)), keyword(arg='random_state', value=Constant(value=0))]))]), Assign(targets=[Tuple(elts=[Name(id='train_indices', ctx=Store()), Name(id='val_indices', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='kfolder', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='indices', ctx=Load())], keywords=[])], keywords=[]), slice=Name(id='i', ctx=Load()), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='train', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='ElementSubsetDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='train_indices', ctx=Load())], keywords=[]), Call(func=Name(id='ElementSubsetDataset', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='val_indices', ctx=Load())], keywords=[])], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='train', ctx=Load()), attr='num_classes', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='val', ctx=Load()), attr='num_classes', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value="The number of classes in train and test doesn't match.")], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='train', ctx=Load()), Name(id='val', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])