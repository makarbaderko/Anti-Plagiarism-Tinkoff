Module(body=[ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='TypeVar')], level=0), Import(names=[alias(name='dill')]), ImportFrom(module='joblib', names=[alias(name='Parallel')], level=0), ImportFrom(module='joblib', names=[alias(name='delayed')], level=0), ImportFrom(module='etna.auto.runner.base', names=[alias(name='AbstractRunner')], level=0), ImportFrom(module='etna.auto.runner.utils', names=[alias(name='run_dill_encoded')], level=0), Assign(targets=[Name(id='T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='T')], keywords=[])), ClassDef(name='LocalRunner', bases=[Name(id='AbstractRunner', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='LocalRunner for one threaded run.')), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='T', ctx=Load())], ctx=Load()), ctx=Load()))], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Call given ``func`` with ``*args`` and ``**kwargs``.')), Return(value=Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Name(id='T', ctx=Load()))], decorator_list=[]), ClassDef(name='ParallelLocalRunner', bases=[Name(id='AbstractRunner', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ParallelLocalRunner for multiple parallel runs with joblib.\n\n    Notes\n    -----\n    Global objects behavior could be different while parallel usage because platform dependent new process start.\n    Be sure that new process is started with ``fork`` via ``multiprocessing.set_start_method``.\n    If it\'s not possible you should try define all globals before ``if __name__ == "__main__"`` scope.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n_jobs', annotation=Name(id='int', ctx=Load())), arg(arg='backend', annotation=Name(id='str', ctx=Load())), arg(arg='mmap_mode', annotation=Name(id='str', ctx=Load())), arg(arg='joblib_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value='multiprocessing'), Constant(value='c'), Constant(value=None)]), body=[Expr(value=Constant(value='Init ParallelLocalRunner.\n\n        Parameters\n        ----------\n        n_jobs:\n            number of parallel jobs to use\n        backend:\n            joblib backend to use\n        mmap_mode:\n            joblib mmap mode\n        joblib_params:\n            joblib additional params\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='n_jobs', ctx=Store())], value=Name(id='n_jobs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='backend', ctx=Store())], value=Name(id='backend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mmap_mode', ctx=Store())], value=Name(id='mmap_mode', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='joblib_params', ctx=Store())], value=IfExp(test=Compare(left=Name(id='joblib_params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Dict(keys=[], values=[]), orelse=Name(id='joblib_params', ctx=Load())))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='T', ctx=Load())], ctx=Load()), ctx=Load()))], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Call given ``func`` with Joblib and ``*args`` and ``**kwargs``.')), Assign(targets=[Name(id='payload', ctx=Store())], value=Call(func=Attribute(value=Name(id='dill', ctx=Load()), attr='dumps', ctx=Load()), args=[Tuple(elts=[Name(id='func', ctx=Load()), Name(id='args', ctx=Load()), Name(id='kwargs', ctx=Load())], ctx=Load())], keywords=[])), AnnAssign(target=Name(id='job_results', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load()), value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='self', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(arg='backend', value=Attribute(value=Name(id='self', ctx=Load()), attr='backend', ctx=Load())), keyword(arg='mmap_mode', value=Attribute(value=Name(id='self', ctx=Load()), attr='mmap_mode', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='joblib_params', ctx=Load()))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Name(id='run_dill_encoded', ctx=Load())], keywords=[]), args=[Name(id='payload', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='n_jobs', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]), simple=1), Return(value=Name(id='job_results', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])