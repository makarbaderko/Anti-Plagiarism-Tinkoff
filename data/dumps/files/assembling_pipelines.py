Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='ModelType')], level=0), ImportFrom(module='etna.pipeline.pipeline', names=[alias(name='Pipeline')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='Transform')], level=0), FunctionDef(name='assemble_pipelines', args=arguments(posonlyargs=[], args=[arg(arg='models', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='ModelType', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='ModelType', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='transforms', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Transform', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Transform', ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='horizons', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Create pipelines with broadcasting from models, transforms and horizons.\n\n    After broadcasting we have:\n\n    - models:\n    .. math:: M_1, \\dots, M_n\n    - transforms:\n    .. math:: (T_{1,1}, \\dots, T_{1,n}), ... (T_{k,1}, \\dots, T_{k,n})\n    - horizons:\n    .. math:: H_1, \\dots, H_n\n\n    We expect that in input shape of size `n` can be reduced to size 1 or even become a scalar value. During broadcasting we copy this value `n` times.\n\n    Parameters\n    ----------\n    models:\n        Instance of Sequence of models\n    transforms:\n        Sequence of the transforms\n    horizons:\n        Sequence of horizons\n\n    Returns\n    -------\n    :\n        list of pipelines\n\n    Raises\n    ------\n    ValueError:\n        If the length of models sequence not equals to length of horizons sequence.\n\n    Examples\n    --------\n    >>> from etna.pipeline import assemble_pipelines\n    >>> from etna.models import LinearPerSegmentModel, NaiveModel\n    >>> from etna.transforms import TrendTransform, AddConstTransform, LagTransform\n    >>> assemble_pipelines(models=LinearPerSegmentModel(), transforms=[LagTransform(in_column='target', lags=[1]), AddConstTransform(in_column='target', value=1)], horizons=[1,2,3])\n    [Pipeline(model = LinearPerSegmentModel(fit_intercept = True, ), transforms = [LagTransform(in_column = 'target', lags = [1], out_column = None, ), AddConstTransform(in_column = 'target', value = 1, inplace = True, out_column = None, )], horizon = 1, ),\n    Pipeline(model = LinearPerSegmentModel(fit_intercept = True, ), transforms = [LagTransform(in_column = 'target', lags = [1], out_column = None, ), AddConstTransform(in_column = 'target', value = 1, inplace = True, out_column = None, )], horizon = 2, ),\n    Pipeline(model = LinearPerSegmentModel(fit_intercept = True, ), transforms = [LagTransform(in_column = 'target', lags = [1], out_column = None, ), AddConstTransform(in_column = 'target', value = 1, inplace = True, out_column = None, )], horizon = 3, )]\n    >>> assemble_pipelines(models=[LinearPerSegmentModel(), NaiveModel()], transforms=[LagTransform(in_column='target', lags=[1]), [AddConstTransform(in_column='target', value=1), TrendTransform(in_column='target')]], horizons=[1,2])\n    [Pipeline(model = LinearPerSegmentModel(fit_intercept = True, ), transforms = [LagTransform(in_column = 'target', lags = [1], out_column = None, ), AddConstTransform(in_column = 'target', value = 1, inplace = True, out_column = None, )], horizon = 1, ),\n    Pipeline(model = NaiveModel(lag = 1, ), transforms = [LagTransform(in_column = 'target', lags = [1], out_column = None, ), TrendTransform(in_column = 'target', out_column = None, detrend_model = LinearRegression(), model = 'ar', custom_cost = None, min_size = 2, jump = 1, n_bkps = 5, pen = None, epsilon = None, )], horizon = 2, )]\n    ")), Assign(targets=[Name(id='n_models', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=Call(func=Name(id='len', ctx=Load()), args=[Name(id='models', ctx=Load())], keywords=[]), orelse=Constant(value=1))), Assign(targets=[Name(id='n_horizons', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='horizons', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=Call(func=Name(id='len', ctx=Load()), args=[Name(id='horizons', ctx=Load())], keywords=[]), orelse=Constant(value=1))), Assign(targets=[Name(id='n_transforms', ctx=Store())], value=Constant(value=1)), For(target=Name(id='transform_item', ctx=Store()), iter=Name(id='transforms', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='transform_item', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='n_transforms', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='transform_item', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='n_transforms', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Transforms elements should be either one Transform, ether sequence of Transforms with same length')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='n_transforms', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='transform_item', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='lengths', ctx=Store())], value=Set(elts=[Name(id='n_models', ctx=Load()), Name(id='n_horizons', ctx=Load()), Name(id='n_transforms', ctx=Load())])), Assign(targets=[Name(id='n_pipelines', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='n_models', ctx=Load()), Name(id='n_horizons', ctx=Load()), Name(id='n_transforms', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lengths', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])), UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lengths', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), Compare(left=Constant(value=1), ops=[In()], comparators=[Name(id='lengths', ctx=Load())])]))]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='n_models', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Compare(left=Name(id='n_models', ctx=Load()), ops=[NotEq()], comparators=[Name(id='n_pipelines', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Lengths of the result models is not equals to horizons or transforms')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='n_transforms', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Compare(left=Name(id='n_transforms', ctx=Load()), ops=[NotEq()], comparators=[Name(id='n_pipelines', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Lengths of the result transforms is not equals to models or horizons')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='n_horizons', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Compare(left=Name(id='n_horizons', ctx=Load()), ops=[NotEq()], comparators=[Name(id='n_pipelines', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Lengths of the result horizons is not equals to models or transforms')], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='models', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=Name(id='models', ctx=Load()), orelse=ListComp(elt=Name(id='models', ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_pipelines', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))), Assign(targets=[Name(id='horizons', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='horizons', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=Name(id='horizons', ctx=Load()), orelse=ListComp(elt=Name(id='horizons', ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_pipelines', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))), AnnAssign(target=Name(id='transfoms_pipelines', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_pipelines', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='transfoms_pipelines', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])), For(target=Name(id='transform', ctx=Store()), iter=Name(id='transforms', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), Compare(left=Subscript(value=Name(id='transform', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='transfoms_pipelines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='transform', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='transform', ctx=Load()), Name(id='Transform', ctx=Load())], keywords=[]), Compare(left=Name(id='transform', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='transfoms_pipelines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], orelse=[]), Return(value=ListComp(elt=Call(func=Name(id='Pipeline', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='model', ctx=Load())], keywords=[]), Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='transform', ctx=Load())], keywords=[]), Name(id='horizon', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='model', ctx=Store()), Name(id='transform', ctx=Store()), Name(id='horizon', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='transfoms_pipelines', ctx=Load()), Name(id='horizons', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Pipeline', ctx=Load()), ctx=Load()))], type_ignores=[])