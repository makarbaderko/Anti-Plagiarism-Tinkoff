Module(body=[ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Iterator')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='typing_extensions', names=[alias(name='TypedDict')], level=0), ImportFrom(module='etna', names=[alias(name='SETTINGS')], level=0), If(test=Attribute(value=Name(id='SETTINGS', ctx=Load()), attr='torch_required', ctx=Load()), body=[Import(names=[alias(name='torch')]), Import(names=[alias(name='torch.nn', asname='nn')])], orelse=[]), ImportFrom(module='etna.models.base', names=[alias(name='DeepBaseModel')], level=0), ImportFrom(module='etna.models.base', names=[alias(name='DeepBaseNet')], level=0), ClassDef(name='RNNBatch', bases=[Name(id='TypedDict', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Batch specification for RNN.')), AnnAssign(target=Name(id='encoder_real', ctx=Store()), annotation=Constant(value='torch.Tensor'), simple=1), AnnAssign(target=Name(id='decoder_real', ctx=Store()), annotation=Constant(value='torch.Tensor'), simple=1), AnnAssign(target=Name(id='encoder_target', ctx=Store()), annotation=Constant(value='torch.Tensor'), simple=1), AnnAssign(target=Name(id='decoder_target', ctx=Store()), annotation=Constant(value='torch.Tensor'), simple=1), AnnAssign(target=Name(id='segment', ctx=Store()), annotation=Constant(value='torch.Tensor'), simple=1)], decorator_list=[]), ClassDef(name='RNNNet', bases=[Name(id='DeepBaseNet', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='RNN based Lightning module with LSTM cell.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input_size', annotation=Name(id='int', ctx=Load())), arg(arg='num_layers', annotation=Name(id='int', ctx=Load())), arg(arg='hidden_size', annotation=Name(id='int', ctx=Load())), arg(arg='lr', annotation=Name(id='float', ctx=Load())), arg(arg='loss', annotation=Constant(value='torch.nn.Module')), arg(arg='optimizer_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Init RNN based on LSTM cell.\n\n        Parameters\n        ----------\n        input_size:\n            size of the input feature space: target plus extra features\n        num_layers:\n            number of layers\n        hidden_size:\n            size of the hidden state\n        lr:\n            learning rate\n        loss:\n            loss function\n        optimizer_params:\n            parameters for optimizer for Adam optimizer (api reference :py:class:`torch.optim.Adam`)\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='num_layers', ctx=Store())], value=Name(id='num_layers', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='input_size', ctx=Store())], value=Name(id='input_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hidden_size', ctx=Store())], value=Name(id='hidden_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='loss', ctx=Store())], value=IfExp(test=Compare(left=Name(id='loss', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='MSELoss', ctx=Load()), args=[], keywords=[]), orelse=Name(id='loss', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rnn', ctx=Store())], value=Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='LSTM', ctx=Load()), args=[], keywords=[keyword(arg='num_layers', value=Attribute(value=Name(id='self', ctx=Load()), attr='num_layers', ctx=Load())), keyword(arg='hidden_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='hidden_size', ctx=Load())), keyword(arg='input_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='input_size', ctx=Load())), keyword(arg='batch_first', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='projection', ctx=Store())], value=Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='Linear', ctx=Load()), args=[], keywords=[keyword(arg='in_features', value=Attribute(value=Name(id='self', ctx=Load()), attr='hidden_size', ctx=Load())), keyword(arg='out_features', value=Constant(value=1))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lr', ctx=Store())], value=Name(id='lr', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='optimizer_params', ctx=Store())], value=IfExp(test=Compare(left=Name(id='optimizer_params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Dict(keys=[], values=[]), orelse=Name(id='optimizer_params', ctx=Load())))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x', annotation=Name(id='RNNBatch', ctx=Load()))], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Forward pass.\n\n        Parameters\n        ----------\n        x:\n            batch of data\n\n        Returns\n        -------\n        :\n            forecast with shape (batch_size, decoder_length, 1)\n        ')), Assign(targets=[Name(id='encoder_real', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='encoder_real'), ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='decoder_real', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='decoder_real'), ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='decoder_target', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='decoder_target'), ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='decoder_length', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='decoder_real', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='output', ctx=Store()), Tuple(elts=[Name(id='h_n', ctx=Store()), Name(id='c_n', ctx=Store())], ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='rnn', ctx=Load()), args=[Name(id='encoder_real', ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros_like', ctx=Load()), args=[Name(id='decoder_target', ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='decoder_length', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='output', ctx=Store()), Tuple(elts=[Name(id='h_n', ctx=Store()), Name(id='c_n', ctx=Store())], ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='rnn', ctx=Load()), args=[Subscript(value=Name(id='decoder_real', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='i', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), Tuple(elts=[Name(id='h_n', ctx=Load()), Name(id='c_n', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast_point', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='projection', ctx=Load()), args=[Subscript(value=Name(id='output', ctx=Load()), slice=Tuple(elts=[Slice(), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()), ctx=Load())], keywords=[]), attr='flatten', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='i', ctx=Load()), Constant(value=0)], ctx=Load()), ctx=Store())], value=Name(id='forecast_point', ctx=Load())), Assign(targets=[Subscript(value=Name(id='decoder_real', ctx=Load()), slice=Tuple(elts=[Slice(), BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=0)], ctx=Load()), ctx=Store())], value=Name(id='forecast_point', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='output', ctx=Store()), Tuple(elts=[Name(id='h_n', ctx=Store()), Name(id='c_n', ctx=Store())], ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='rnn', ctx=Load()), args=[Subscript(value=Name(id='decoder_real', ctx=Load()), slice=Tuple(elts=[Slice(), BinOp(left=Name(id='decoder_length', ctx=Load()), op=Sub(), right=Constant(value=1)), Constant(value=None)], ctx=Load()), ctx=Load()), Tuple(elts=[Name(id='h_n', ctx=Load()), Name(id='c_n', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='forecast_point', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='projection', ctx=Load()), args=[Subscript(value=Name(id='output', ctx=Load()), slice=Tuple(elts=[Slice(), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()), ctx=Load())], keywords=[]), attr='flatten', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), BinOp(left=Name(id='decoder_length', ctx=Load()), op=Sub(), right=Constant(value=1)), Constant(value=0)], ctx=Load()), ctx=Store())], value=Name(id='forecast_point', ctx=Load())), Return(value=Name(id='forecast', ctx=Load()))], decorator_list=[]), FunctionDef(name='step', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='batch', annotation=Name(id='RNNBatch', ctx=Load()))], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Step for loss computation for training or validation.\n\n        Parameters\n        ----------\n        batch:\n            batch of data\n\n        Returns\n        -------\n        :\n            loss, true_target, prediction_target\n        ')), Assign(targets=[Name(id='encoder_real', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='encoder_real'), ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='decoder_real', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='decoder_real'), ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='encoder_target', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='encoder_target'), ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='decoder_target', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='batch', ctx=Load()), slice=Constant(value='decoder_target'), ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='decoder_length', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='decoder_real', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='output', ctx=Store()), Tuple(elts=[Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='rnn', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Tuple(elts=[Name(id='encoder_real', ctx=Load()), Name(id='decoder_real', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))])], keywords=[])), Assign(targets=[Name(id='target_prediction', ctx=Store())], value=Subscript(value=Name(id='output', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(lower=UnaryOp(op=USub(), operand=Name(id='decoder_length', ctx=Load())))], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='target_prediction', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='projection', ctx=Load()), args=[Name(id='target_prediction', ctx=Load())], keywords=[])), Assign(targets=[Name(id='loss', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='loss', ctx=Load()), args=[Name(id='target_prediction', ctx=Load()), Name(id='decoder_target', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='loss', ctx=Load()), Name(id='decoder_target', ctx=Load()), Name(id='target_prediction', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='make_samples', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='encoder_length', annotation=Name(id='int', ctx=Load())), arg(arg='decoder_length', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Make samples from segment DataFrame.')), FunctionDef(name='_make', args=arguments(posonlyargs=[], args=[arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='start_idx', annotation=Name(id='int', ctx=Load())), arg(arg='encoder_length', annotation=Name(id='int', ctx=Load())), arg(arg='decoder_length', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='sample', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='encoder_real'), Constant(value='decoder_real'), Constant(value='encoder_target'), Constant(value='decoder_target'), Constant(value='segment')], values=[Call(func=Name(id='list', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[], keywords=[]), Constant(value=None)]), simple=1), Assign(targets=[Name(id='total_length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='total_sample_length', ctx=Store())], value=BinOp(left=Name(id='encoder_length', ctx=Load()), op=Add(), right=Name(id='decoder_length', ctx=Load()))), If(test=Compare(left=BinOp(left=Name(id='total_sample_length', ctx=Load()), op=Add(), right=Name(id='start_idx', ctx=Load())), ops=[Gt()], comparators=[Name(id='total_length', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Subscript(value=Name(id='sample', ctx=Load()), slice=Constant(value='decoder_real'), ctx=Store())], value=Subscript(value=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='select_dtypes', ctx=Load()), args=[], keywords=[keyword(arg='include', value=List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='number', ctx=Load())], ctx=Load()))]), attr='pipe', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=BinOp(left=List(elts=[Constant(value='target')], ctx=Load()), op=Add(), right=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='x', ctx=Load()), attr='columns', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='target')])], is_async=0)])), ctx=Load()))], keywords=[]), attr='values', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='start_idx', ctx=Load()), op=Add(), right=Name(id='encoder_length', ctx=Load())), upper=BinOp(left=BinOp(left=Name(id='start_idx', ctx=Load()), op=Add(), right=Name(id='encoder_length', ctx=Load())), op=Add(), right=Name(id='decoder_length', ctx=Load()))), ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Name(id='sample', ctx=Load()), slice=Constant(value='decoder_real'), ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=0)], ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='shift', ctx=Load()), args=[Constant(value=1)], keywords=[]), attr='values', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='start_idx', ctx=Load()), op=Add(), right=Name(id='encoder_length', ctx=Load())), upper=BinOp(left=BinOp(left=Name(id='start_idx', ctx=Load()), op=Add(), right=Name(id='encoder_length', ctx=Load())), op=Add(), right=Name(id='decoder_length', ctx=Load()))), ctx=Load())), Assign(targets=[Subscript(value=Name(id='sample', ctx=Load()), slice=Constant(value='encoder_real'), ctx=Store())], value=Subscript(value=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='select_dtypes', ctx=Load()), args=[], keywords=[keyword(arg='include', value=List(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='number', ctx=Load())], ctx=Load()))]), attr='pipe', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=BinOp(left=List(elts=[Constant(value='target')], ctx=Load()), op=Add(), right=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='x', ctx=Load()), attr='columns', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='target')])], is_async=0)])), ctx=Load()))], keywords=[]), attr='values', ctx=Load()), slice=Slice(lower=Name(id='start_idx', ctx=Load()), upper=BinOp(left=Name(id='start_idx', ctx=Load()), op=Add(), right=Name(id='encoder_length', ctx=Load()))), ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Name(id='sample', ctx=Load()), slice=Constant(value='encoder_real'), ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=0)], ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='shift', ctx=Load()), args=[Constant(value=1)], keywords=[]), attr='values', ctx=Load()), slice=Slice(lower=Name(id='start_idx', ctx=Load()), upper=BinOp(left=Name(id='start_idx', ctx=Load()), op=Add(), right=Name(id='encoder_length', ctx=Load()))), ctx=Load())), Assign(targets=[Subscript(value=Name(id='sample', ctx=Load()), slice=Constant(value='encoder_real'), ctx=Store())], value=Subscript(value=Subscript(value=Name(id='sample', ctx=Load()), slice=Constant(value='encoder_real'), ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Load()), attr='values', ctx=Load()), slice=Slice(lower=Name(id='start_idx', ctx=Load()), upper=BinOp(left=BinOp(left=Name(id='start_idx', ctx=Load()), op=Add(), right=Name(id='encoder_length', ctx=Load())), op=Add(), right=Name(id='decoder_length', ctx=Load()))), ctx=Load()), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1)], keywords=[])), Assign(targets=[Subscript(value=Name(id='sample', ctx=Load()), slice=Constant(value='encoder_target'), ctx=Store())], value=Subscript(value=Name(id='target', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=Name(id='encoder_length', ctx=Load())), ctx=Load())), Assign(targets=[Subscript(value=Name(id='sample', ctx=Load()), slice=Constant(value='decoder_target'), ctx=Store())], value=Subscript(value=Name(id='target', ctx=Load()), slice=Slice(lower=Name(id='encoder_length', ctx=Load())), ctx=Load())), Assign(targets=[Subscript(value=Name(id='sample', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Subscript(value=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='segment'), ctx=Load()), attr='values', ctx=Load()), slice=Constant(value=0), ctx=Load())), Return(value=Name(id='sample', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='start_idx', ctx=Store())], value=Constant(value=0)), While(test=Constant(value=True), body=[Assign(targets=[Name(id='batch', ctx=Store())], value=Call(func=Name(id='_make', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='start_idx', value=Name(id='start_idx', ctx=Load())), keyword(arg='encoder_length', value=Name(id='encoder_length', ctx=Load())), keyword(arg='decoder_length', value=Name(id='decoder_length', ctx=Load()))])), If(test=Compare(left=Name(id='batch', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Break()], orelse=[]), Expr(value=Yield(value=Name(id='batch', ctx=Load()))), AugAssign(target=Name(id='start_idx', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())), FunctionDef(name='configure_optimizers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Optimizer configuration.')), Assign(targets=[Name(id='optimizer', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='optim', ctx=Load()), attr='Adam', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='lr', value=Attribute(value=Name(id='self', ctx=Load()), attr='lr', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='optimizer_params', ctx=Load()))])), Return(value=Name(id='optimizer', ctx=Load()))], decorator_list=[], returns=Constant(value='torch.optim.Optimizer'))], decorator_list=[]), ClassDef(name='RNNModel', bases=[Name(id='DeepBaseModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='RNN based model on LSTM cell.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input_size', annotation=Name(id='int', ctx=Load())), arg(arg='decoder_length', annotation=Name(id='int', ctx=Load())), arg(arg='encoder_length', annotation=Name(id='int', ctx=Load())), arg(arg='num_layers', annotation=Name(id='int', ctx=Load())), arg(arg='hidden_size', annotation=Name(id='int', ctx=Load())), arg(arg='lr', annotation=Name(id='float', ctx=Load())), arg(arg='loss', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='torch.nn.Module'), ctx=Load())), arg(arg='train_batch_size', annotation=Name(id='int', ctx=Load())), arg(arg='test_batch_size', annotation=Name(id='int', ctx=Load())), arg(arg='optimizer_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())), arg(arg='trainer_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())), arg(arg='train_dataloader_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())), arg(arg='test_dataloader_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())), arg(arg='val_dataloader_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())), arg(arg='split_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=2), Constant(value=16), Constant(value=0.001), Constant(value=None), Constant(value=16), Constant(value=16), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Init RNN model based on LSTM cell.\n\n        Parameters\n        ----------\n        input_size:\n            size of the input feature space: target plus extra features\n        encoder_length:\n            encoder length\n        decoder_length:\n            decoder length\n        num_layers:\n            number of layers\n        hidden_size:\n            size of the hidden state\n        lr:\n            learning rate\n        loss:\n            loss function, MSELoss by default\n        train_batch_size:\n            batch size for training\n        test_batch_size:\n            batch size for testing\n        optimizer_params:\n            parameters for optimizer for Adam optimizer (api reference :py:class:`torch.optim.Adam`)\n        trainer_params:\n            Pytorch ligthning  trainer parameters (api reference :py:class:`pytorch_lightning.trainer.trainer.Trainer`)\n        train_dataloader_params:\n            parameters for train dataloader like sampler for example (api reference :py:class:`torch.utils.data.DataLoader`)\n        test_dataloader_params:\n            parameters for test dataloader\n        val_dataloader_params:\n            parameters for validation dataloader\n        split_params:\n            dictionary with parameters for :py:func:`torch.utils.data.random_split` for train-test splitting\n                * **train_size**: (*float*) value from 0 to 1 - fraction of samples to use for training\n\n                * **generator**: (*Optional[torch.Generator]*) - generator for reproducibile train-test splitting\n\n                * **torch_dataset_size**: (*Optional[int]*) - number of samples in dataset, in case of dataset not implementing ``__len__``\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='input_size', ctx=Store())], value=Name(id='input_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='num_layers', ctx=Store())], value=Name(id='num_layers', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hidden_size', ctx=Store())], value=Name(id='hidden_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lr', ctx=Store())], value=Name(id='lr', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='loss', ctx=Store())], value=Name(id='loss', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='optimizer_params', ctx=Store())], value=Name(id='optimizer_params', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='net', value=Call(func=Name(id='RNNNet', ctx=Load()), args=[], keywords=[keyword(arg='input_size', value=Name(id='input_size', ctx=Load())), keyword(arg='num_layers', value=Name(id='num_layers', ctx=Load())), keyword(arg='hidden_size', value=Name(id='hidden_size', ctx=Load())), keyword(arg='lr', value=Name(id='lr', ctx=Load())), keyword(arg='loss', value=IfExp(test=Compare(left=Name(id='loss', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='nn', ctx=Load()), attr='MSELoss', ctx=Load()), args=[], keywords=[]), orelse=Name(id='loss', ctx=Load()))), keyword(arg='optimizer_params', value=Name(id='optimizer_params', ctx=Load()))])), keyword(arg='decoder_length', value=Name(id='decoder_length', ctx=Load())), keyword(arg='encoder_length', value=Name(id='encoder_length', ctx=Load())), keyword(arg='train_batch_size', value=Name(id='train_batch_size', ctx=Load())), keyword(arg='test_batch_size', value=Name(id='test_batch_size', ctx=Load())), keyword(arg='train_dataloader_params', value=Name(id='train_dataloader_params', ctx=Load())), keyword(arg='test_dataloader_params', value=Name(id='test_dataloader_params', ctx=Load())), keyword(arg='val_dataloader_params', value=Name(id='val_dataloader_params', ctx=Load())), keyword(arg='trainer_params', value=Name(id='trainer_params', ctx=Load())), keyword(arg='split_params', value=Name(id='split_params', ctx=Load()))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])