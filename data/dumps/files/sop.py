Module(body=[Import(names=[alias(name='os')]), ImportFrom(module='common', names=[alias(name='Dataset'), alias(name='imread')], level=1), ClassDef(name='SOPDataset', bases=[Name(id='Dataset', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Original Stanford Online Products dataset. Train and test are splitted by sample.\n\n    See: https://cvgl.stanford.edu/projects/lifted_struct/\n\n    Args:\n        root: Dataset root.\n        train: Whether to use train or test part of the dataset.\n\n    ')), Assign(targets=[Name(id='TRAIN_LABELS', ctx=Store())], value=Constant(value='Ebay_train.txt')), Assign(targets=[Name(id='TEST_LABELS', ctx=Store())], value=Constant(value='Ebay_test.txt')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='root')], kwonlyargs=[arg(arg='train')], kw_defaults=[Constant(value=True)], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), If(test=Name(id='train', ctx=Load()), body=[Assign(targets=[Name(id='labels_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='TRAIN_LABELS', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='labels_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='TEST_LABELS', ctx=Load())], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_image_paths', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_image_labels', ctx=Store())], value=List(elts=[], ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='labels_file', ctx=Load())], keywords=[]), optional_vars=Name(id='fp', ctx=Store()))], body=[Assert(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='image_id class_id super_class_id path')])), For(target=Name(id='line', ctx=Store()), iter=Name(id='fp', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='label_low', ctx=Store()), Name(id='label_high', ctx=Store()), Name(id='path', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='label', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='label_low', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), If(test=UnaryOp(op=Not(), operand=Name(id='train', ctx=Load())), body=[AugAssign(target=Name(id='label', ctx=Store()), op=Sub(), value=Constant(value=11318))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_image_paths', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_image_labels', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='num_classes', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_image_labels', ctx=Load())], keywords=[])], keywords=[])), Assert(test=IfExp(test=Name(id='train', ctx=Load()), body=Compare(left=Name(id='num_classes', ctx=Load()), ops=[Eq()], comparators=[Constant(value=11318)]), orelse=Compare(left=Name(id='num_classes', ctx=Load()), ops=[Eq()], comparators=[Constant(value=11316)]))), Assert(test=Compare(left=Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_image_labels', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])), Assert(test=Compare(left=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_image_labels', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Name(id='num_classes', ctx=Load()), op=Sub(), right=Constant(value=1))]))], decorator_list=[]), FunctionDef(name='classification', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether dataset is classification or matching.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='openset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether dataset is for open-set or closed-set classification.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='labels', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get dataset labels array.\n\n        Labels are integers in the range [0, N-1].\n\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_image_labels', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get element of the dataset.\n\n        Returns tuple (image, label).\n\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_image_paths', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='label', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_image_labels', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='image', ctx=Store())], value=Call(func=Name(id='imread', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='image', ctx=Load()), Name(id='label', ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])