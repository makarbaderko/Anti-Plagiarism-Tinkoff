Module(body=[ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna', names=[alias(name='SETTINGS')], level=0), If(test=Attribute(value=Name(id='SETTINGS', ctx=Load()), attr='tsfresh_required', ctx=Load()), body=[ImportFrom(module='tsfresh', names=[alias(name='extract_features')], level=0), ImportFrom(module='tsfresh.feature_extraction.settings', names=[alias(name='MinimalFCParameters')], level=0)], orelse=[]), ImportFrom(module='etna.experimental.classification.feature_extraction.base', names=[alias(name='BaseTimeSeriesFeatureExtractor')], level=0), ClassDef(name='TSFreshFeatureExtractor', bases=[Name(id='BaseTimeSeriesFeatureExtractor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Class to hold tsfresh features extraction from tsfresh.\n\n    Notes\n    -----\n    `tsfresh` should be installed separately using `pip install tsfresh`.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='default_fc_parameters', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())), arg(arg='fill_na_value', annotation=Name(id='float', ctx=Load())), arg(arg='n_jobs', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), UnaryOp(op=USub(), operand=Constant(value=100)), Constant(value=1)]), body=[Expr(value=Constant(value='Init TSFreshFeatureExtractor with given parameters.\n\n        Parameters\n        ----------\n        default_fc_parameters:\n            Dict with names of features.\n            .. Examples: https://github.com/blue-yonder/tsfresh/blob/main/tsfresh/feature_extraction/settings.py\n        fill_na_value:\n            Value to fill the NaNs in the resulting dataframe.\n        n_jobs:\n            The number of processes to use for parallelization.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='default_fc_parameters', ctx=Store())], value=IfExp(test=Compare(left=Name(id='default_fc_parameters', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='default_fc_parameters', ctx=Load()), orelse=Call(func=Name(id='MinimalFCParameters', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fill_na_value', ctx=Store())], value=Name(id='fill_na_value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='n_jobs', ctx=Store())], value=Name(id='n_jobs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load()))], decorator_list=[]), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load())), arg(arg='y', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Fit the feature extractor.')), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='TSFreshFeatureExtractor')), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Extract tsfresh features from the input data.\n\n        Parameters\n        ----------\n        x:\n            Array with time series.\n\n        Returns\n        -------\n        :\n            Transformed input data.\n        ')), Assign(targets=[Name(id='df_tsfresh', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='id'), Constant(value='value')], values=[Name(id='i', ctx=Load()), Name(id='series', ctx=Load())])], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='series', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='df_features', ctx=Store())], value=Call(func=Name(id='extract_features', ctx=Load()), args=[], keywords=[keyword(arg='timeseries_container', value=Name(id='df_tsfresh', ctx=Load())), keyword(arg='column_id', value=Constant(value='id')), keyword(arg='column_value', value=Constant(value='value')), keyword(arg='default_fc_parameters', value=Attribute(value=Name(id='self', ctx=Load()), attr='default_fc_parameters', ctx=Load())), keyword(arg='n_jobs', value=Attribute(value=Name(id='self', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='df_features', ctx=Load()), attr='fillna', ctx=Load()), args=[], keywords=[keyword(arg='value', value=Attribute(value=Name(id='self', ctx=Load()), attr='fill_na_value', ctx=Load())), keyword(arg='inplace', value=Constant(value=True))])), Return(value=Attribute(value=Name(id='df_features', ctx=Load()), attr='values', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], decorator_list=[])], type_ignores=[])