Module(body=[Import(names=[alias(name='pickle')]), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.clustering', names=[alias(name='DTWClustering')], level=0), ImportFrom(module='etna.clustering', names=[alias(name='HierarchicalClustering')], level=0), ImportFrom(module='etna.clustering.hierarchical.euclidean_clustering', names=[alias(name='EuclideanClustering')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), FunctionDef(name='eucl_ts', args=arguments(posonlyargs=[], args=[arg(arg='random_seed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dfs', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Constant(value=8)], keywords=[]), body=[Assign(targets=[Name(id='date_range', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2020-01-01'), Constant(value='2020-05-01')], keywords=[])), For(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='sigma', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[List(elts=[Constant(value=0.1), Constant(value=0.3), Constant(value=0.5), Constant(value=0.8)], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='tmp', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Name(id='date_range', ctx=Load())])], keywords=[])), Assign(targets=[Subscript(value=Name(id='tmp', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='j', ctx=Load()), conversion=-1)])), Assign(targets=[Subscript(value=Name(id='tmp', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='normal', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='sigma', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='tmp', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='dfs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='tmp', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Name(id='dfs', ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='D'))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='test_eucl_clustering', args=arguments(posonlyargs=[], args=[arg(arg='eucl_ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that all the series are divided to the clusters according to mu\n    (in case of number of clusters is equal to number of different mus).')), Assign(targets=[Name(id='clustering', ctx=Store())], value=Call(func=Name(id='EuclideanClustering', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='build_distance_matrix', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='eucl_ts', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='build_clustering_algo', ctx=Load()), args=[], keywords=[keyword(arg='n_clusters', value=Constant(value=7))])), Assign(targets=[Name(id='segment2clusters', ctx=Store())], value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='fit_predict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='n_clusters', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='clustering', ctx=Load()), attr='clusters', ctx=Load())], keywords=[])], keywords=[])), Assert(test=Compare(left=Name(id='n_clusters', ctx=Load()), ops=[Eq()], comparators=[Constant(value=7)])), Assign(targets=[Name(id='segment2mean', ctx=Store())], value=DictComp(key=Name(id='segment', ctx=Load()), value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='segment', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='eucl_ts', ctx=Load()), attr='segments', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='res', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[List(elts=[Name(id='segment2clusters', ctx=Load()), Name(id='segment2mean', ctx=Load())], ctx=Load())], keywords=[keyword(arg='index', value=List(elts=[Constant(value='cluster'), Constant(value='expected_mean')], ctx=Load()))]), attr='T', ctx=Load())), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='groupby', ctx=Load()), args=[Constant(value='cluster')], keywords=[]), slice=Constant(value='expected_mean'), ctx=Load()), attr='agg', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Constant(value='min')), keyword(arg='max', value=Constant(value='max')), keyword(arg='mean', value=Constant(value='mean'))]), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=Subscript(value=Name(id='res', ctx=Load()), slice=Constant(value='min'), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='res', ctx=Load()), slice=Constant(value='max'), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Compare(left=Subscript(value=Name(id='res', ctx=Load()), slice=Constant(value='mean'), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='res', ctx=Load()), slice=Constant(value='max'), ctx=Load())]), attr='all', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='test_dtw_clustering', args=arguments(posonlyargs=[], args=[arg(arg='eucl_ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that dtw clustering works.')), Assign(targets=[Name(id='clustering', ctx=Store())], value=Call(func=Name(id='DTWClustering', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='build_distance_matrix', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='eucl_ts', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='build_clustering_algo', ctx=Load()), args=[], keywords=[keyword(arg='n_clusters', value=Constant(value=3))])), Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='fit_predict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='n_clusters', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='clustering', ctx=Load()), attr='clusters', ctx=Load())], keywords=[])], keywords=[])), Assert(test=Compare(left=Name(id='n_clusters', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)]))], decorator_list=[]), FunctionDef(name='test_pickle_unpickle', args=arguments(posonlyargs=[], args=[arg(arg='eucl_ts', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='clustering', annotation=Name(id='HierarchicalClustering', ctx=Load())), arg(arg='n_clusters', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='build_distance_matrix', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='eucl_ts', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='build_clustering_algo', ctx=Load()), args=[], keywords=[keyword(arg='n_clusters', value=Name(id='n_clusters', ctx=Load()))])), Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='fit_predict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='centroids_before_pickle', ctx=Store())], value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='get_centroids', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='dumped', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='clustering', ctx=Load())], keywords=[])), Assign(targets=[Name(id='clustering_undumped', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='dumped', ctx=Load())], keywords=[])), Assign(targets=[Name(id='centroids_after_pickle', ctx=Store())], value=Call(func=Attribute(value=Name(id='clustering_undumped', ctx=Load()), attr='get_centroids', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='centroids_after_pickle', ctx=Load()), ops=[Eq()], comparators=[Name(id='centroids_before_pickle', ctx=Load())])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='clustering,n_clusters'), Tuple(elts=[Tuple(elts=[Call(func=Name(id='EuclideanClustering', ctx=Load()), args=[], keywords=[]), Constant(value=5)], ctx=Load()), Tuple(elts=[Call(func=Name(id='EuclideanClustering', ctx=Load()), args=[], keywords=[]), Constant(value=7)], ctx=Load()), Tuple(elts=[Call(func=Name(id='DTWClustering', ctx=Load()), args=[], keywords=[]), Constant(value=3)], ctx=Load()), Tuple(elts=[Call(func=Name(id='DTWClustering', ctx=Load()), args=[], keywords=[]), Constant(value=5)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_centroids', args=arguments(posonlyargs=[], args=[arg(arg='eucl_ts', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='clustering', annotation=Name(id='HierarchicalClustering', ctx=Load())), arg(arg='n_clusters', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that centroids work in euclidean clustering pipeline.')), Expr(value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='build_distance_matrix', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='eucl_ts', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='build_clustering_algo', ctx=Load()), args=[], keywords=[keyword(arg='n_clusters', value=Name(id='n_clusters', ctx=Load()))])), Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='fit_predict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='centroids', ctx=Store())], value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='get_centroids', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='n_clusters_pred', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='centroids', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='cluster')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='centroids', ctx=Load()), Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='centroids', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value=0)], keywords=[]), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='cluster')])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='centroids', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Set(elts=[Constant(value='target')])])), Assert(test=Compare(left=Name(id='n_clusters_pred', ctx=Load()), ops=[Eq()], comparators=[Name(id='n_clusters', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='clustering,n_clusters'), Tuple(elts=[Tuple(elts=[Call(func=Name(id='EuclideanClustering', ctx=Load()), args=[], keywords=[]), Constant(value=5)], ctx=Load()), Tuple(elts=[Call(func=Name(id='EuclideanClustering', ctx=Load()), args=[], keywords=[]), Constant(value=7)], ctx=Load()), Tuple(elts=[Call(func=Name(id='DTWClustering', ctx=Load()), args=[], keywords=[]), Constant(value=3)], ctx=Load()), Tuple(elts=[Call(func=Name(id='DTWClustering', ctx=Load()), args=[], keywords=[]), Constant(value=5)], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_predict_raise_error_when_distance_matrix_is_not_built', args=arguments(posonlyargs=[], args=[arg(arg='clustering', annotation=Name(id='HierarchicalClustering', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test that HierarchicalClustering raise error when calling fit_predict without building distance matrix.')), Expr(value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='build_clustering_algo', ctx=Load()), args=[], keywords=[keyword(arg='n_clusters', value=Constant(value=5))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Distance matrix is not built!'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='fit_predict', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='clustering'), Tuple(elts=[Call(func=Name(id='EuclideanClustering', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DTWClustering', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_predict_raise_error_when_clustering_algo_is_not_built', args=arguments(posonlyargs=[], args=[arg(arg='eucl_ts', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='clustering', annotation=Name(id='HierarchicalClustering', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test that HierarchicalClustering raise error when calling fit_predict without building clustering algorithm.')), Expr(value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='build_distance_matrix', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='eucl_ts', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Clustering algorithm is not built!'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='fit_predict', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='clustering'), Tuple(elts=[Call(func=Name(id='EuclideanClustering', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DTWClustering', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])]), FunctionDef(name='test_get_centroids_raise_error_when_clustering_is_not_fitted', args=arguments(posonlyargs=[], args=[arg(arg='clustering', annotation=Name(id='HierarchicalClustering', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test that HierarchicalClustering raise error when calling get_centroids without being fit.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='HierarchicalClustering is not fitted!'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='clustering', ctx=Load()), attr='get_centroids', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='clustering'), Tuple(elts=[Call(func=Name(id='EuclideanClustering', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DTWClustering', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])])], type_ignores=[])