Module(body=[Expr(value=Constant(value='\nMIT License\n\nCopyright (c) 2017 Taylor G Smith\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n')), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='numpy.polynomial.polynomial', asname='np_polynomial')]), ImportFrom(module='pmdarima.utils', names=[alias(name='diff')], level=0), ImportFrom(module='pmdarima.utils', names=[alias(name='diff_inv')], level=0), ImportFrom(module='sklearn.utils.validation', names=[alias(name='check_array'), alias(name='column_or_1d')], level=0), Assign(targets=[Name(id='DTYPE', ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='float64', ctx=Load())), FunctionDef(name='check_endog', args=arguments(posonlyargs=[], args=[arg(arg='y'), arg(arg='dtype'), arg(arg='copy'), arg(arg='force_all_finite')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='DTYPE', ctx=Load()), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='Wrapper for ``check_array`` and ``column_or_1d`` from sklearn\n\n    Parameters\n    ----------\n    y : array-like, shape=(n_samples,)\n        The 1d endogenous array.\n\n    dtype : string, type or None (default=np.float64)\n        Data type of result. If None, the dtype of the input is preserved.\n        If "numeric", dtype is preserved unless array.dtype is object.\n\n    copy : bool, optional (default=False)\n        Whether a forced copy will be triggered. If copy=False, a copy might\n        still be triggered by a conversion.\n\n    force_all_finite : bool, optional (default=False)\n        Whether to raise an error on np.inf and np.nan in an array. The\n        possibilities are:\n\n        - True: Force all values of array to be finite.\n        - False: accept both np.inf and np.nan in array.\n\n    Returns\n    -------\n    y : np.ndarray, shape=(n_samples,)\n        A 1d numpy ndarray\n    ')), Return(value=Call(func=Name(id='column_or_1d', ctx=Load()), args=[Call(func=Name(id='check_array', ctx=Load()), args=[Name(id='y', ctx=Load())], keywords=[keyword(arg='ensure_2d', value=Constant(value=False)), keyword(arg='force_all_finite', value=Name(id='force_all_finite', ctx=Load())), keyword(arg='copy', value=Name(id='copy', ctx=Load())), keyword(arg='dtype', value=Name(id='dtype', ctx=Load()))])], keywords=[]))], decorator_list=[]), FunctionDef(name='ARMAtoMA', args=arguments(posonlyargs=[], args=[arg(arg='ar'), arg(arg='ma'), arg(arg='max_deg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Convert ARMA coefficients to infinite MA coefficients.\n    Compute coefficients of MA model equivalent to given ARMA model.\n    MA coefficients are cut off at max_deg.\n    The same function as ARMAtoMA() in stats library of R\n    Parameters\n    ----------\n    ar : array-like, shape=(n_orders,)\n        The array of AR coefficients.\n    ma : array-like, shape=(n_orders,)\n        The array of MA coefficients.\n    max_deg : int\n        Coefficients are computed up to the order of max_deg.\n    Returns\n    -------\n    np.ndarray, shape=(max_deg,)\n        Equivalent MA coefficients.\n    Notes\n    -----\n    Here is the derivation. Suppose ARMA model is defined as\n    .. math::\n    x_t - ar_1*x_{t-1} - ar_2*x_{t-2} - ... - ar_p*x_{t-p}\\\\\n        = e_t + ma_1*e_{t-1} + ma_2*e_{t-2} + ... + ma_q*e_{t-q}\n    namely\n    .. math::\n    (1 - \\sum_{i=1}^p[ar_i*B^i]) x_t = (1 + \\sum_{i=1}^q[ma_i*B^i]) e_t\n    where :math:`B` is a backward operator.\n    Equivalent MA model is\n    .. math::\n        x_t = (1 - \\sum_{i=1}^p[ar_i*B^i])^{-1}\\\\\n        * (1 + \\sum_{i=1}^q[ma_i*B^i]) e_t\\\\\n        = (1 + \\sum_{i=1}[ema_i*B^i]) e_t\n    where :math:``ema_i`` is a coefficient of equivalent MA model.\n    The :math:``ema_i`` satisfies\n    .. math::\n        (1 - \\sum_{i=1}^p[ar_i*B^i]) * (1 + \\sum_{i=1}[ema_i*B^i]) \\\\\n        = 1 + \\sum_{i=1}^q[ma_i*B^i]\n    thus\n    .. math::\n        \\sum_{i=1}[ema_i*B^i] = \\sum_{i=1}^p[ar_i*B^i] \\\\\n        + \\sum_{i=1}^p[ar_i*B^i] * \\sum_{j=1}[ema_j*B^j] \\\\\n        + \\Sum_{i=1}^q[ma_i*B^i]\n    therefore\n    .. math::\n        ema_i = ar_i (but 0 if i>p) \\\\\n        + \\Sum_{j=1}^{min(i-1,p)}[ar_j*ema_{i-j}] + ma_i(but 0 if i>q) \\\\\n        = \\sum_{j=1}{min(i,p)}[ar_j*ema_{i-j}(but 1 if j=i)] \\\\\n        + ma_i(but 0 if i>q)\n    ')), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ar', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ma', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ema', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='empty', ctx=Load()), args=[Name(id='max_deg', ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='max_deg', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='temp', ctx=Store())], value=IfExp(test=Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Name(id='q', ctx=Load())]), body=Subscript(value=Name(id='ma', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), orelse=Constant(value=0.0))), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='p', ctx=Load())], keywords=[])], keywords=[]), body=[AugAssign(target=Name(id='temp', ctx=Store()), op=Add(), value=BinOp(left=Subscript(value=Name(id='ar', ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load()), op=Mult(), right=IfExp(test=Compare(left=BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Name(id='j', ctx=Load())), op=Sub(), right=Constant(value=1)), ops=[GtE()], comparators=[Constant(value=0)]), body=Subscript(value=Name(id='ema', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Name(id='j', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load()), orelse=Constant(value=1.0))))], orelse=[]), Assign(targets=[Subscript(value=Name(id='ema', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Name(id='temp', ctx=Load()))], orelse=[]), Return(value=Name(id='ema', ctx=Load()))], decorator_list=[]), FunctionDef(name='seasonal_prediction_with_confidence', args=arguments(posonlyargs=[], args=[arg(arg='arima_res'), arg(arg='start'), arg(arg='end'), arg(arg='X'), arg(arg='alpha')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Compute the prediction for a SARIMAX and get a conf interval\n\n    Unfortunately, SARIMAX does not really provide a nice way to get the\n    confidence intervals out of the box, so we have to perform the\n    ``get_prediction`` code here and unpack the confidence intervals manually.\n    ')), Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Attribute(value=Name(id='arima_res', ctx=Load()), attr='get_prediction', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Name(id='start', ctx=Load())), keyword(arg='end', value=Name(id='end', ctx=Load())), keyword(arg='exog', value=Name(id='X', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='f', ctx=Store())], value=Attribute(value=Name(id='results', ctx=Load()), attr='predicted_mean', ctx=Load())), Assign(targets=[Name(id='conf_int', ctx=Store())], value=Call(func=Attribute(value=Name(id='results', ctx=Load()), attr='conf_int', ctx=Load()), args=[], keywords=[keyword(arg='alpha', value=Name(id='alpha', ctx=Load()))])), If(test=Subscript(value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='specification', ctx=Load()), slice=Constant(value='simple_differencing'), ctx=Load()), body=[Assign(targets=[Name(id='y_org', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='model', ctx=Load()), attr='orig_endog', ctx=Load())), Assign(targets=[Name(id='d', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='model', ctx=Load()), attr='orig_k_diff', ctx=Load())), Assign(targets=[Name(id='D', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='model', ctx=Load()), attr='orig_k_seasonal_diff', ctx=Load())), Assign(targets=[Name(id='period', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='model', ctx=Load()), attr='seasonal_periods', ctx=Load())), If(test=Compare(left=Name(id='d', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='y_sdiff', ctx=Store())], value=IfExp(test=Compare(left=Name(id='D', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=Name(id='y_org', ctx=Load()), orelse=Call(func=Name(id='diff', ctx=Load()), args=[Name(id='y_org', ctx=Load()), Name(id='period', ctx=Load()), Name(id='D', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='f_temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='y_sdiff', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='d', ctx=Load()))), ctx=Load()), Name(id='f', ctx=Load())], keywords=[])), Assign(targets=[Name(id='f_temp', ctx=Store())], value=Call(func=Name(id='diff_inv', ctx=Load()), args=[Name(id='f_temp', ctx=Load()), Constant(value=1), Name(id='d', ctx=Load())], keywords=[])), Assign(targets=[Name(id='f', ctx=Store())], value=Subscript(value=Name(id='f_temp', ctx=Load()), slice=Slice(lower=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='d', ctx=Load()))), ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='D', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Compare(left=Name(id='period', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)])]), body=[Assign(targets=[Name(id='f_temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='y_org', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=BinOp(left=Name(id='D', ctx=Load()), op=Mult(), right=Name(id='period', ctx=Load())))), ctx=Load()), Name(id='f', ctx=Load())], keywords=[])), Assign(targets=[Name(id='f_temp', ctx=Store())], value=Call(func=Name(id='diff_inv', ctx=Load()), args=[Name(id='f_temp', ctx=Load()), Name(id='period', ctx=Load()), Name(id='D', ctx=Load())], keywords=[])), Assign(targets=[Name(id='f', ctx=Store())], value=Subscript(value=Name(id='f_temp', ctx=Load()), slice=Slice(lower=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='D', ctx=Load())), op=Mult(), right=Name(id='period', ctx=Load()))), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='ar_poly', ctx=Store())], value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='polynomial_reduced_ar', ctx=Load())), Assign(targets=[Name(id='poly_diff', ctx=Store())], value=Call(func=Attribute(value=Name(id='np_polynomial', ctx=Load()), attr='polypow', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1.0), UnaryOp(op=USub(), operand=Constant(value=1.0))], ctx=Load())], keywords=[]), Name(id='d', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sdiff', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[BinOp(left=Name(id='period', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])), Assign(targets=[Subscript(value=Name(id='sdiff', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Constant(value=1.0)), Assign(targets=[Subscript(value=Name(id='sdiff', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Constant(value=1.0)), Assign(targets=[Name(id='poly_sdiff', ctx=Store())], value=Call(func=Attribute(value=Name(id='np_polynomial', ctx=Load()), attr='polypow', ctx=Load()), args=[Name(id='sdiff', ctx=Load()), Name(id='D', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ar', ctx=Store())], value=UnaryOp(op=USub(), operand=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='polymul', ctx=Load()), args=[Name(id='ar_poly', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='polymul', ctx=Load()), args=[Name(id='poly_diff', ctx=Load()), Name(id='poly_sdiff', ctx=Load())], keywords=[])], keywords=[]), slice=Slice(lower=Constant(value=1)), ctx=Load()))), Assign(targets=[Name(id='ma', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='polynomial_reduced_ma', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='n_predMinus1', ctx=Store())], value=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Name(id='start', ctx=Load()))), Assign(targets=[Name(id='ema', ctx=Store())], value=Call(func=Name(id='ARMAtoMA', ctx=Load()), args=[Name(id='ar', ctx=Load()), Name(id='ma', ctx=Load()), Name(id='n_predMinus1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sigma2', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='arima_res', ctx=Load()), attr='_params_variance', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='var', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cumsum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=1.0), BinOp(left=Name(id='ema', ctx=Load()), op=Mult(), right=Name(id='ema', ctx=Load()))], keywords=[])], keywords=[]), op=Mult(), right=Name(id='sigma2', ctx=Load()))), Assign(targets=[Name(id='q', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='results', ctx=Load()), attr='dist', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Constant(value=1.0), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Constant(value=2))), Starred(value=Attribute(value=Name(id='results', ctx=Load()), attr='dist_args', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='conf_int', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=0)], ctx=Load()), ctx=Store())], value=BinOp(left=Name(id='f', ctx=Load()), op=Sub(), right=BinOp(left=Name(id='q', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='var', ctx=Load())], keywords=[])))), Assign(targets=[Subscript(value=Name(id='conf_int', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=1)], ctx=Load()), ctx=Store())], value=BinOp(left=Name(id='f', ctx=Load()), op=Add(), right=BinOp(left=Name(id='q', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='var', ctx=Load())], keywords=[]))))], orelse=[]), Return(value=Tuple(elts=[Call(func=Name(id='check_endog', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='dtype', value=Constant(value=None)), keyword(arg='copy', value=Constant(value=False))]), Call(func=Name(id='check_array', ctx=Load()), args=[Name(id='conf_int', ctx=Load())], keywords=[keyword(arg='copy', value=Constant(value=False)), keyword(arg='dtype', value=Constant(value=None))])], ctx=Load()))], decorator_list=[])], type_ignores=[])