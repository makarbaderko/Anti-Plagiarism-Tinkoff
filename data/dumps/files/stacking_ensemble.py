Module(body=[Import(names=[alias(name='warnings')]), ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='typing', names=[alias(name='cast')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='joblib', names=[alias(name='Parallel')], level=0), ImportFrom(module='joblib', names=[alias(name='delayed')], level=0), ImportFrom(module='sklearn.base', names=[alias(name='RegressorMixin')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='LinearRegression')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.ensembles', names=[alias(name='EnsembleMixin')], level=0), ImportFrom(module='etna.loggers', names=[alias(name='tslogger')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='MAE')], level=0), ImportFrom(module='etna.pipeline.base', names=[alias(name='BasePipeline')], level=0), ClassDef(name='StackingEnsemble', bases=[Name(id='BasePipeline', ctx=Load()), Name(id='EnsembleMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='StackingEnsemble is a pipeline that forecast future using the metamodel to combine the forecasts of the base models.\n\n    Examples\n    --------\n    >>> from etna.datasets import generate_ar_df\n    >>> from etna.datasets import TSDataset\n    >>> from etna.ensembles import VotingEnsemble\n    >>> from etna.models import NaiveModel\n    >>> from etna.models import MovingAverageModel\n    >>> from etna.pipeline import Pipeline\n    >>> import pandas as pd\n    >>> pd.options.display.float_format = \'{:,.2f}\'.format\n    >>> df = generate_ar_df(periods=100, start_time="2021-06-01", ar_coef=[0.8], n_segments=3)\n    >>> df_ts_format = TSDataset.to_dataset(df)\n    >>> ts = TSDataset(df_ts_format, "D")\n    >>> ma_pipeline = Pipeline(model=MovingAverageModel(window=5), transforms=[], horizon=7)\n    >>> naive_pipeline = Pipeline(model=NaiveModel(lag=10), transforms=[], horizon=7)\n    >>> ensemble = StackingEnsemble(pipelines=[ma_pipeline, naive_pipeline])\n    >>> _ = ensemble.fit(ts=ts)\n    >>> forecast = ensemble.forecast()\n    >>> forecast[:,:,"target"]\n    segment    segment_0 segment_1 segment_2\n    feature       target    target    target\n    timestamp\n    2021-09-09      0.70      1.47      0.20\n    2021-09-10      0.62      1.53      0.26\n    2021-09-11      0.50      1.78      0.36\n    2021-09-12      0.37      1.88      0.21\n    2021-09-13      0.46      1.87      0.25\n    2021-09-14      0.44      1.49      0.21\n    2021-09-15      0.36      1.56      0.30\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pipelines', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='BasePipeline', ctx=Load()), ctx=Load())), arg(arg='final_model', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='RegressorMixin', ctx=Load()), ctx=Load())), arg(arg='n_folds', annotation=Name(id='int', ctx=Load())), arg(arg='features_to_use', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='n_jobs', annotation=Name(id='int', ctx=Load())), arg(arg='joblib_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=3), Constant(value=None), Constant(value=1), Constant(value=None)]), body=[Expr(value=Constant(value='Init StackingEnsemble.\n\n        Parameters\n        ----------\n        pipelines:\n            List of pipelines that should be used in ensemble.\n        final_model:\n            Regression model with fit/predict interface which will be used to combine the base estimators.\n        n_folds:\n            Number of folds to use in the backtest. Backtest is not used for model evaluation but for prediction.\n        features_to_use:\n            Features except the forecasts of the base models to use in the ``final_model``.\n        n_jobs:\n            Number of jobs to run in parallel.\n        joblib_params:\n            Additional parameters for :py:class:`joblib.Parallel`.\n\n        Raises\n        ------\n        ValueError:\n            If the number of the pipelines is less than 2 or pipelines have different horizons.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_pipeline_number', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=Name(id='pipelines', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pipelines', ctx=Store())], value=Name(id='pipelines', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='final_model', ctx=Store())], value=IfExp(test=Compare(left=Name(id='final_model', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[]), orelse=Name(id='final_model', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_backtest_n_folds', ctx=Load()), args=[Name(id='n_folds', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='n_folds', ctx=Store())], value=Name(id='n_folds', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='features_to_use', ctx=Store())], value=Name(id='features_to_use', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='filtered_features_for_final_model', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='n_jobs', ctx=Store())], value=Name(id='n_jobs', ctx=Load())), If(test=Compare(left=Name(id='joblib_params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='joblib_params', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='verbose', value=Constant(value=11)), keyword(arg='backend', value=Constant(value='multiprocessing')), keyword(arg='mmap_mode', value=Constant(value='c'))]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='joblib_params', ctx=Store())], value=Name(id='joblib_params', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='horizon', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_horizon', ctx=Load()), args=[], keywords=[keyword(arg='pipelines', value=Name(id='pipelines', ctx=Load()))]))]))], decorator_list=[]), FunctionDef(name='_filter_features_to_use', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='forecasts', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TSDataset', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return all the features from ``features_to_use`` which can be obtained from base models' forecasts.")), Assign(targets=[Name(id='features_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[ListComp(elt=Attribute(value=Name(id='forecast', ctx=Load()), attr='df', ctx=Load()), generators=[comprehension(target=Name(id='forecast', ctx=Store()), iter=Name(id='forecasts', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Name(id='available_features', ctx=Store())], value=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='features_df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), op=Sub(), right=Set(elts=[Constant(value='fold_number')]))), Assign(targets=[Name(id='features_to_use', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='features_to_use', ctx=Load())), If(test=Compare(left=Name(id='features_to_use', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='features_to_use', ctx=Load()), ops=[Eq()], comparators=[Constant(value='all')]), body=[Return(value=BinOp(left=Name(id='available_features', ctx=Load()), op=Sub(), right=Set(elts=[Constant(value='target')])))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='features_to_use', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='features_to_use_unique', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='features_to_use', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='features_to_use_unique', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[If(test=Call(func=Attribute(value=Name(id='features_to_use_unique', ctx=Load()), attr='issubset', ctx=Load()), args=[Name(id='available_features', ctx=Load())], keywords=[]), body=[Return(value=Name(id='features_to_use_unique', ctx=Load()))], orelse=[Assign(targets=[Name(id='unavailable_features', ctx=Store())], value=BinOp(left=Name(id='features_to_use_unique', ctx=Load()), op=Sub(), right=Name(id='available_features', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Features '), FormattedValue(value=Name(id='unavailable_features', ctx=Load()), conversion=-1), Constant(value=' are not found and will be dropped!')])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='features_to_use_unique', ctx=Load()), attr='intersection', ctx=Load()), args=[Name(id='available_features', ctx=Load())], keywords=[]))])])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Feature list is passed in the wrong format.Only the base models' forecasts will be used for the final forecast.")], keywords=[])), Return(value=Constant(value=None))])])])], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_backtest_pipeline', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pipeline', annotation=Name(id='BasePipeline', ctx=Load())), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get forecasts from backtest for given pipeline.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tslogger', ctx=Load()), attr='disable', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='forecasts', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pipeline', ctx=Load()), attr='backtest', ctx=Load()), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='metrics', value=List(elts=[Call(func=Name(id='MAE', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='n_folds', value=Attribute(value=Name(id='self', ctx=Load()), attr='n_folds', ctx=Load()))]))]), Assign(targets=[Name(id='forecasts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='forecasts', ctx=Load())), keyword(arg='freq', value=Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load()))])), Return(value=Name(id='forecasts', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fit the ensemble.\n\n        Parameters\n        ----------\n        ts:\n            TSDataset to fit ensemble.\n\n        Returns\n        -------\n        self:\n            Fitted ensemble.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Store())], value=Name(id='ts', ctx=Load())), Assign(targets=[Name(id='forecasts', ctx=Store())], value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='self', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='joblib_params', ctx=Load()))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_backtest_pipeline', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pipeline', value=Name(id='pipeline', ctx=Load())), keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[]))]), generators=[comprehension(target=Name(id='pipeline', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='pipelines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filtered_features_for_final_model', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_filter_features_to_use', ctx=Load()), args=[Name(id='forecasts', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_features', ctx=Load()), args=[], keywords=[keyword(arg='forecasts', value=Name(id='forecasts', ctx=Load())), keyword(arg='train', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='final_model', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pipelines', ctx=Store())], value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='self', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='joblib_params', ctx=Load()))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fit_pipeline', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pipeline', value=Name(id='pipeline', ctx=Load())), keyword(arg='ts', value=Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts', ctx=Load())], keywords=[]))]), generators=[comprehension(target=Name(id='pipeline', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='pipelines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='StackingEnsemble')), FunctionDef(name='_make_features', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='forecasts', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TSDataset', ctx=Load()), ctx=Load())), arg(arg='train', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Prepare features for the ``final_model``.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='StackingEnsemble is not fitted! Fit the StackingEnsemble before calling forecast method.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='targets', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='target')], ctx=Load()), ctx=Load()), attr='rename', ctx=Load()), args=[Dict(keys=[Constant(value='target')], values=[JoinedStr(values=[Constant(value='regressor_target_'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1)])])], keywords=[keyword(arg='axis', value=Constant(value=1))]), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='forecast', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='forecasts', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='targets', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Name(id='targets', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Name(id='features', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='filtered_features_for_final_model', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='features_in_forecasts', ctx=Store())], value=ListComp(elt=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='forecast', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[])], keywords=[]), attr='intersection', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filtered_features_for_final_model', ctx=Load())], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='forecast', ctx=Store()), iter=Name(id='forecasts', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='features', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='forecast', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Subscript(value=Name(id='features_in_forecasts', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='forecast', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='forecasts', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Name(id='features', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='features', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), UnaryOp(op=Invert(), operand=Call(func=Attribute(value=Attribute(value=Name(id='features', ctx=Load()), attr='columns', ctx=Load()), attr='duplicated', ctx=Load()), args=[], keywords=[]))], ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='features_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='features', ctx=Load()), Name(id='targets', ctx=Load())], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[ListComp(elt=Subscript(value=Attribute(value=Name(id='features_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load())], ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), attr='segments', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='axis', value=Constant(value=0))])), If(test=Name(id='train', ctx=Load()), body=[Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[ListComp(elt=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), slice=Tuple(elts=[Slice(lower=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='forecasts', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='index', ctx=Load()), attr='min', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='forecasts', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='index', ctx=Load()), attr='max', ctx=Load()), args=[], keywords=[])), Name(id='segment', ctx=Load()), Constant(value='target')], ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), attr='segments', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='axis', value=Constant(value=0))])), Return(value=Tuple(elts=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Name(id='x', ctx=Load()), Constant(value=None)], ctx=Load()))])], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_process_forecasts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='forecasts', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TSDataset', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_features', ctx=Load()), args=[], keywords=[keyword(arg='forecasts', value=Name(id='forecasts', ctx=Load())), keyword(arg='train', value=Constant(value=False))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='TSDataset', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='final_model', ctx=Load()), attr='predict', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='num_segments', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='forecasts', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='y', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='y', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='num_segments', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), attr='T', ctx=Load())), Assign(targets=[Name(id='num_timestamps', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='y', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='segment_col', ctx=Store())], value=ListComp(elt=Name(id='segment', ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), attr='segments', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='num_timestamps', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Subscript(value=Attribute(value=Name(id='x', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='segment')], ctx=Load()), ctx=Store())], value=Name(id='segment_col', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='x', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='timestamp')], ctx=Load()), ctx=Store())], value=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='df_exog', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='forecasts', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value='target')], ctx=Load()), ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Slice(), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='np', ctx=Load()), attr='NAN', ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='freq', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), attr='freq', ctx=Load())), keyword(arg='df_exog', value=Name(id='df_exog', ctx=Load()))])), Assign(targets=[Subscript(value=Attribute(value=Name(id='result', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Slice(), ctx=Load()), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Store())], value=Name(id='y', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='_forecast', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Make predictions.\n\n        Compute the combination of pipelines' forecasts using ``final_model``\n        ")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='ts', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Something went wrong, ts is None!')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='forecasts', ctx=Store())], value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='self', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='joblib_params', ctx=Load()))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_forecast_pipeline', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='pipeline', value=Name(id='pipeline', ctx=Load()))]), generators=[comprehension(target=Name(id='pipeline', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='pipelines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='forecast', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_process_forecasts', ctx=Load()), args=[], keywords=[keyword(arg='forecasts', value=Name(id='forecasts', ctx=Load()))])), Return(value=Name(id='forecast', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load())), FunctionDef(name='_predict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ts', annotation=Name(id='TSDataset', ctx=Load())), arg(arg='start_timestamp', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load())), arg(arg='end_timestamp', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load())), arg(arg='prediction_interval', annotation=Name(id='bool', ctx=Load())), arg(arg='quantiles', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='prediction_interval', ctx=Load()), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Ensemble '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=" doesn't support prediction intervals!")])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='predictions', ctx=Store())], value=Call(func=Call(func=Name(id='Parallel', ctx=Load()), args=[], keywords=[keyword(arg='n_jobs', value=Attribute(value=Name(id='self', ctx=Load()), attr='n_jobs', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='joblib_params', ctx=Load()))]), args=[GeneratorExp(elt=Call(func=Call(func=Name(id='delayed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_predict_pipeline', ctx=Load())], keywords=[]), args=[], keywords=[keyword(arg='ts', value=Name(id='ts', ctx=Load())), keyword(arg='pipeline', value=Name(id='pipeline', ctx=Load())), keyword(arg='start_timestamp', value=Name(id='start_timestamp', ctx=Load())), keyword(arg='end_timestamp', value=Name(id='end_timestamp', ctx=Load()))]), generators=[comprehension(target=Name(id='pipeline', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='pipelines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='prediction', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_process_forecasts', ctx=Load()), args=[], keywords=[keyword(arg='forecasts', value=Name(id='predictions', ctx=Load()))])), Return(value=Name(id='prediction', ctx=Load()))], decorator_list=[], returns=Name(id='TSDataset', ctx=Load()))], decorator_list=[])], type_ignores=[])