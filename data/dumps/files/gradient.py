Module(body=[Import(names=[alias(name='math')]), Import(names=[alias(name='torch')]), ClassDef(name='GradientNormalizer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Normalize gradient value using running gradient norm mean.\n\n    Outputs:\n        Normalized gradient norm.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='clip'), arg(arg='momentum')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0.01), Constant(value=0.9)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_momentum', ctx=Store())], value=Name(id='momentum', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_clip', ctx=Store())], value=Name(id='clip', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='register_buffer', ctx=Load()), args=[Constant(value='is_first'), Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='ones', ctx=Load()), args=[Constant(value=1)], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='bool', ctx=Load()))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='register_buffer', ctx=Load()), args=[Constant(value='moving_norm'), Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parameters', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='no_grad', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='norm', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_grad_norm', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Assign(targets=[Name(id='momentum', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='is_first', ctx=Load()), body=Constant(value=0), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='_momentum', ctx=Load()))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='moving_norm', ctx=Load()), attr='fill_', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='moving_norm', ctx=Load()), op=Mult(), right=Name(id='momentum', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='momentum', ctx=Load())), op=Mult(), right=Name(id='norm', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='mean', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='moving_norm', ctx=Load()), attr='clip', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Attribute(value=Name(id='self', ctx=Load()), attr='_clip', ctx=Load()))]), attr='item', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_mul_grad', ctx=Load()), args=[Name(id='parameters', ctx=Load()), BinOp(left=Constant(value=1), op=Div(), right=Name(id='mean', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='is_first', ctx=Load()), attr='fill_', ctx=Load()), args=[Constant(value=False)], keywords=[]))]), Return(value=BinOp(left=Name(id='norm', ctx=Load()), op=Div(), right=Name(id='mean', ctx=Load())))], decorator_list=[]), FunctionDef(name='_compute_grad_norm', args=arguments(posonlyargs=[], args=[arg(arg='parameters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parameters', ctx=Store())], value=ListComp(elt=Name(id='p', ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='parameters', ctx=Load()), ifs=[Compare(left=Attribute(value=Name(id='p', ctx=Load()), attr='grad', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])), Assign(targets=[Name(id='device', ctx=Store())], value=Attribute(value=Attribute(value=Subscript(value=Name(id='parameters', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='grad', ctx=Load()), attr='device', ctx=Load())), Assign(targets=[Name(id='norm', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='norm', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='stack', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='norm', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='p', ctx=Load()), attr='grad', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='to', ctx=Load()), args=[Name(id='device', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='parameters', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Return(value=Name(id='norm', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_mul_grad', args=arguments(posonlyargs=[], args=[arg(arg='parameters'), arg(arg='alpha')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='p', ctx=Store()), iter=Name(id='parameters', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='p', ctx=Load()), attr='requires_grad', ctx=Load())), Compare(left=Attribute(value=Name(id='p', ctx=Load()), attr='grad', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Continue()], orelse=[]), AugAssign(target=Attribute(value=Name(id='p', ctx=Load()), attr='grad', ctx=Store()), op=Mult(), value=Name(id='alpha', ctx=Load()))], orelse=[])], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[])], type_ignores=[])