Module(body=[ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), Import(names=[alias(name='torch')]), ImportFrom(module='catalyst', names=[alias(name='dl')], level=0), ImportFrom(module='_workarounds', names=[alias(name='OptimizerCallback')], level=2), ImportFrom(module='config', names=[alias(name='prepare_config'), alias(name='ConfigError')], level=2), ImportFrom(module='gradient', names=[alias(name='GradientNormalizer')], level=1), ImportFrom(module='optimizer', names=[alias(name='SGDOptimizer'), alias(name='RMSpropOptimizer'), alias(name='AdamOptimizer'), alias(name='AdamWOptimizer'), alias(name='SamOptimizer')], level=1), ImportFrom(module='scheduler', names=[alias(name='StepScheduler'), alias(name='MultiStepScheduler'), alias(name='PlateauScheduler'), alias(name='WarmupScheduler'), alias(name='ExponentialScheduler')], level=1), ImportFrom(module='variance_scheduler', names=[alias(name='ExponentSTDSchedulerCallback')], level=1), ClassDef(name='Trainer', bases=[], keywords=[], body=[Expr(value=Constant(value='Optimization pipeline.')), Assign(targets=[Name(id='OPTIMIZERS', ctx=Store())], value=Dict(keys=[Constant(value='sgd'), Constant(value='rmsprop'), Constant(value='adam'), Constant(value='adamw'), Constant(value='sam')], values=[Name(id='SGDOptimizer', ctx=Load()), Name(id='RMSpropOptimizer', ctx=Load()), Name(id='AdamOptimizer', ctx=Load()), Name(id='AdamWOptimizer', ctx=Load()), Name(id='SamOptimizer', ctx=Load())])), Assign(targets=[Name(id='SCHEDULERS', ctx=Store())], value=Dict(keys=[Constant(value='step'), Constant(value='multistep'), Constant(value='plateau'), Constant(value='exponential')], values=[Name(id='StepScheduler', ctx=Load()), Name(id='MultiStepScheduler', ctx=Load()), Name(id='PlateauScheduler', ctx=Load()), Name(id='ExponentialScheduler', ctx=Load())])), Assign(targets=[Name(id='VARIANCE_SCHEDULERS', ctx=Store())], value=Dict(keys=[Constant(value='exponential')], values=[Name(id='ExponentSTDSchedulerCallback', ctx=Load())])), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='num_epochs'), arg(arg='optimizer_type'), arg(arg='optimizer_params'), arg(arg='classifier_optimizer_params'), arg(arg='gradient_clipping'), arg(arg='use_gradient_normalizer'), arg(arg='gradient_normalizer_params'), arg(arg='scheduler_type'), arg(arg='scheduler_params'), arg(arg='variance_scheduler_type'), arg(arg='variance_scheduler_params'), arg(arg='warmup_epochs'), arg(arg='selection_dataset'), arg(arg='selection_metric'), arg(arg='selection_minimize'), arg(arg='early_stop_patience'), arg(arg='early_stop_epsilon')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=16), Constant(value='sgd'), Constant(value=None), Constant(value=None), Constant(value=5), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=0), Constant(value='train'), Constant(value='loss'), Constant(value=True), Constant(value=None), Constant(value=0.001)]), body=[Expr(value=Constant(value='Get trainer parameters.\n\n        Args:\n            num_epochs: Number of training epochs.\n            optimizer_type: One of `sgd` and `adam`.\n            optimizer_params: Parameters of optimizer class.\n            classifier_optimizer_params: Parameters of classifier optimizer. If not provided, same as optimizer_params.\n            gradient_clipping: Size of gradient clipping.\n            use_gradient_normalizer: Normalize gradient using moving norm.\n            gradient_normalizer_params: Parameters of gradient normalizer.\n            scheduler_type: One of `None` and `multistep`.\n            scheduler_params: Parameters of :class:`LRScheduler`.\n            variance_scheduler_type: One of `None` and `linear`.\n            variance_scheduler_params: Parameters of the classifier variance scheduler.\n            selection_dataset: Dataset used for checkpoint selection and early stopping.\n            selection_metric: Metric used for checkpoint selection and early stopping.\n            selection_minimize: Whether to minimize metric or maximize.\n            early_stop_patience: Number of epochs without improvement for early stopping.\n              Use None to disable early stopping.\n            early_stop_epsilon: Improvement threshold for early stopping.\n\n        ')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='num_epochs'), Name(id='num_epochs', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='optimizer_type'), Name(id='optimizer_type', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='optimizer_params'), Name(id='optimizer_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='classifier_optimizer_params'), Name(id='classifier_optimizer_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='gradient_clipping'), Name(id='gradient_clipping', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='use_gradient_normalizer'), Name(id='use_gradient_normalizer', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='gradient_normalizer_params'), Name(id='gradient_normalizer_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='scheduler_type'), Name(id='scheduler_type', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='scheduler_params'), Name(id='scheduler_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='variance_scheduler_type'), Name(id='variance_scheduler_type', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='variance_scheduler_params'), Name(id='variance_scheduler_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='warmup_epochs'), Name(id='warmup_epochs', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='selection_dataset'), Name(id='selection_dataset', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='selection_metric'), Name(id='selection_metric', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='selection_minimize'), Name(id='selection_minimize', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='early_stop_patience'), Name(id='early_stop_patience', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='early_stop_epsilon'), Name(id='early_stop_epsilon', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='config')], kw_defaults=[Constant(value=None)], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_gradient_normalizer'), ctx=Load()), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='gradient_clipping'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Constant(value='Gradient clipping and gradient normalization are mutually exclusive.')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_gradient_normalizer', ctx=Store())], value=Call(func=Name(id='GradientNormalizer', ctx=Load()), args=[], keywords=[keyword(value=BoolOp(op=Or(), values=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='gradient_normalizer_params'), ctx=Load()), Dict(keys=[], values=[])]))]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_num_epochs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_epochs'), ctx=Load()))], decorator_list=[]), FunctionDef(name='get_optimizer', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='optimizer_cls', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='OPTIMIZERS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='optimizer_type'), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='param_groups', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='embedder_params', ctx=Store())], value=ListComp(elt=Name(id='p', ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='embedder', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[]), ifs=[Attribute(value=Name(id='p', ctx=Load()), attr='requires_grad', ctx=Load())], is_async=0)])), If(test=Name(id='embedder_params', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='param_groups', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='params')], values=[Name(id='embedder_params', ctx=Load())])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='scorer_params', ctx=Store())], value=ListComp(elt=Name(id='p', ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='scorer', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[]), ifs=[Attribute(value=Name(id='p', ctx=Load()), attr='requires_grad', ctx=Load())], is_async=0)])), If(test=Name(id='scorer_params', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='param_groups', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='params'), None], values=[Name(id='scorer_params', ctx=Load()), BoolOp(op=Or(), values=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='classifier_optimizer_params'), ctx=Load()), Dict(keys=[], values=[])])])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='classifier_params', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='model', ctx=Load()), attr='classification', ctx=Load()), body=ListComp(elt=Name(id='p', ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='classifier', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[]), ifs=[Attribute(value=Name(id='p', ctx=Load()), attr='requires_grad', ctx=Load())], is_async=0)]), orelse=List(elts=[], ctx=Load()))), If(test=Name(id='classifier_params', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='param_groups', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='params'), None], values=[Name(id='classifier_params', ctx=Load()), BoolOp(op=Or(), values=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='classifier_optimizer_params'), ctx=Load()), Dict(keys=[], values=[])])])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='total_parameters', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='group', ctx=Load()), slice=Constant(value='params'), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='group', ctx=Store()), iter=Name(id='param_groups', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='required_parameters', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[ListComp(elt=Name(id='p', ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[]), ifs=[Attribute(value=Name(id='p', ctx=Load()), attr='requires_grad', ctx=Load())], is_async=0)])], keywords=[])), Assert(test=Compare(left=Name(id='total_parameters', ctx=Load()), ops=[Eq()], comparators=[Name(id='required_parameters', ctx=Load())])), Assign(targets=[Name(id='optimizer', ctx=Store())], value=Call(func=Name(id='optimizer_cls', ctx=Load()), args=[Name(id='param_groups', ctx=Load())], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='optimizer_params'), ctx=Load()))])), Return(value=Name(id='optimizer', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_scheduler', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='optimizer')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='scheduler', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scheduler_type'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='scheduler_cls', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='SCHEDULERS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scheduler_type'), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='scheduler', ctx=Store())], value=Call(func=Name(id='scheduler_cls', ctx=Load()), args=[Name(id='optimizer', ctx=Load())], keywords=[keyword(arg='minimize_metric', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='selection_minimize'), ctx=Load())), keyword(arg='num_epochs', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_num_epochs', ctx=Load()), args=[], keywords=[])), keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scheduler_params'), ctx=Load()))]))], orelse=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='warmup_epochs'), ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='scheduler', ctx=Store())], value=Call(func=Name(id='WarmupScheduler', ctx=Load()), args=[Name(id='scheduler', ctx=Load())], keywords=[keyword(arg='warmup_epochs', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='warmup_epochs'), ctx=Load()))]))], orelse=[]), Return(value=Name(id='scheduler', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_callbacks', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='checkpoints_path'), arg(arg='loss_key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='gradient_clipping'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='grad_clip_kwargs', ctx=Store())], value=Dict(keys=[Constant(value='grad_clip_fn'), Constant(value='grad_clip_params')], values=[Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='utils', ctx=Load()), attr='clip_grad_norm_', ctx=Load()), Dict(keys=[Constant(value='max_norm'), Constant(value='error_if_nonfinite')], values=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='gradient_clipping'), ctx=Load()), Constant(value=False)])]))], orelse=[If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_gradient_normalizer'), ctx=Load()), body=[Assign(targets=[Name(id='grad_clip_kwargs', ctx=Store())], value=Dict(keys=[Constant(value='grad_clip_fn'), Constant(value='grad_clip_params')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='_gradient_normalizer', ctx=Load()), Dict(keys=[], values=[])]))], orelse=[Assign(targets=[Name(id='grad_clip_kwargs', ctx=Store())], value=Dict(keys=[], values=[]))])]), Assign(targets=[Name(id='callbacks', ctx=Store())], value=Dict(keys=[Constant(value='optimizer'), Constant(value='checkpoint')], values=[Call(func=Name(id='OptimizerCallback', ctx=Load()), args=[], keywords=[keyword(arg='metric_key', value=Name(id='loss_key', ctx=Load())), keyword(arg='model_key', value=Constant(value='model')), keyword(value=Name(id='grad_clip_kwargs', ctx=Load()))]), Call(func=Attribute(value=Name(id='dl', ctx=Load()), attr='CheckpointCallback', ctx=Load()), args=[], keywords=[keyword(arg='logdir', value=Name(id='checkpoints_path', ctx=Load())), keyword(arg='loader_key', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='selection_dataset'), ctx=Load())), keyword(arg='metric_key', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='selection_metric'), ctx=Load())), keyword(arg='minimize', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='selection_minimize'), ctx=Load()))])])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scheduler_type'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='callbacks', ctx=Load()), slice=Constant(value='scheduler'), ctx=Store())], value=Call(func=Attribute(value=Name(id='dl', ctx=Load()), attr='SchedulerCallback', ctx=Load()), args=[], keywords=[keyword(arg='loader_key', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='selection_dataset'), ctx=Load())), keyword(arg='metric_key', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='selection_metric'), ctx=Load()))]))], orelse=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='variance_scheduler_type'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='callbacks', ctx=Load()), slice=Constant(value='variance_scheduler'), ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='VARIANCE_SCHEDULERS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='variance_scheduler_type'), ctx=Load()), ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='num_epochs'), ctx=Load())], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='variance_scheduler_params'), ctx=Load()))]))], orelse=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='early_stop_patience'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='callbacks', ctx=Load()), slice=Constant(value='early_stop'), ctx=Store())], value=Call(func=Attribute(value=Name(id='dl', ctx=Load()), attr='EarlyStoppingCallback', ctx=Load()), args=[], keywords=[keyword(arg='patience', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='early_stop_patience'), ctx=Load())), keyword(arg='loader_key', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='selection_dataset'), ctx=Load())), keyword(arg='metric_key', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='selection_metric'), ctx=Load())), keyword(arg='min_delta', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='early_stop_epsilon'), ctx=Load())), keyword(arg='minimize', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='selection_minimize'), ctx=Load()))]))], orelse=[]), Return(value=Name(id='callbacks', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])