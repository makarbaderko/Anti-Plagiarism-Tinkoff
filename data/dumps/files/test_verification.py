Module(body=[ImportFrom(module='unittest', names=[alias(name='TestCase'), alias(name='main')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='torch')]), ImportFrom(module='probabilistic_embeddings.metrics', names=[alias(name='VerificationMetrics')], level=0), ClassDef(name='TestVerificationMetrics', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_simple', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test metrics in simple cases.')), Assign(targets=[Name(id='fpr', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=3))), Assign(targets=[Name(id='labels', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=1)], ctx=Load())), Assign(targets=[Name(id='confidences', ctx=Store())], value=List(elts=[Constant(value=0.5), Constant(value=0.5), Constant(value=0.5), Constant(value=0.1), Constant(value=0.5), Constant(value=0.5), Constant(value=0.9), Constant(value=0.5), Constant(value=0.5), Constant(value=1.0)], ctx=Load())), Assign(targets=[Name(id='scores', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='permutation', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[]), slice=Name(id='permutation', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='confidences', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='confidences', ctx=Load())], keywords=[]), slice=Name(id='permutation', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='scores', ctx=Store())], value=Subscript(value=Name(id='scores', ctx=Load()), slice=Name(id='permutation', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='evaluator', ctx=Store())], value=Call(func=Name(id='VerificationMetrics', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Dict(keys=[Constant(value='fpr')], values=[Name(id='fpr', ctx=Load())]))])), Expr(value=Call(func=Attribute(value=Name(id='evaluator', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='from_numpy', ctx=Load()), args=[Name(id='scores', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='from_numpy', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='from_numpy', ctx=Load()), args=[Name(id='confidences', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='pr', ctx=Store()), Name(id='max_accuracy', ctx=Store()), Name(id='auc', ctx=Store()), Name(id='tpr', ctx=Store()), Name(id='fpr', ctx=Store()), Name(id='eer', ctx=Store()), Name(id='confidence_auroc', ctx=Store()), Name(id='confidence_aupr', ctx=Store()), Name(id='confidence_aurcc', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='evaluator', ctx=Load()), attr='compute', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='pr', ctx=Load()), BinOp(left=Constant(value=6), op=Div(), right=Constant(value=10))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='max_accuracy', ctx=Load()), Constant(value=0.8)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='fpr', ctx=Load()), BinOp(left=Constant(value=1), op=Div(), right=Constant(value=4))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='tpr', ctx=Load()), BinOp(left=Constant(value=5), op=Div(), right=Constant(value=6))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='eer', ctx=Load()), BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Constant(value=0.5), op=Mult(), right=BinOp(left=BinOp(left=Constant(value=5), op=Div(), right=Constant(value=6)), op=Add(), right=BinOp(left=Constant(value=3), op=Div(), right=Constant(value=4)))))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='confidence_auroc', ctx=Load()), BinOp(left=BinOp(left=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=8)), op=Div(), right=Constant(value=2)), op=Add(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2)))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='confidence_aupr', ctx=Load()), BinOp(left=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=8)), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Constant(value=7), op=Div(), right=Constant(value=8)), op=Mult(), right=BinOp(left=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2)), op=Add(), right=BinOp(left=Constant(value=8), op=Div(), right=Constant(value=9)))), op=Div(), right=Constant(value=2)))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='confidence_aurcc', ctx=Load()), BinOp(left=Constant(value=0.1), op=Mult(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2)), op=Add(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=3))), op=Add(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=4))), op=Add(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=5))), op=Add(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=6))), op=Add(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=7))), op=Add(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=8))), op=Add(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=9))), op=Add(), right=BinOp(left=BinOp(left=Constant(value=2), op=Div(), right=Constant(value=10)), op=Div(), right=Constant(value=2))))], keywords=[]))], decorator_list=[])], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='main', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])