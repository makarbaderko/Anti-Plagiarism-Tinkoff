Module(body=[ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='numpy.random', names=[alias(name='RandomState')], level=0), ImportFrom(module='statsmodels.tsa.arima_process', names=[alias(name='arma_generate_sample')], level=0), FunctionDef(name='generate_ar_df', args=arguments(posonlyargs=[], args=[arg(arg='periods', annotation=Name(id='int', ctx=Load())), arg(arg='start_time', annotation=Name(id='str', ctx=Load())), arg(arg='ar_coef', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='list', ctx=Load()), ctx=Load())), arg(arg='sigma', annotation=Name(id='float', ctx=Load())), arg(arg='n_segments', annotation=Name(id='int', ctx=Load())), arg(arg='freq', annotation=Name(id='str', ctx=Load())), arg(arg='random_seed', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=1), Constant(value=1), Constant(value='1D'), Constant(value=1)]), body=[Expr(value=Constant(value='\n    Create DataFrame with AR process data.\n\n    Parameters\n    ----------\n    periods:\n        number of timestamps\n    start_time:\n        start timestamp\n    ar_coef:\n        AR coefficients\n    sigma:\n        scale of AR noise\n    n_segments:\n        number of segments\n    freq:\n        pandas frequency string for :py:func:`pandas.date_range` that is used to generate timestamp\n    random_seed:\n        random seed\n    ')), If(test=Compare(left=Name(id='ar_coef', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ar_coef', ctx=Store())], value=List(elts=[Constant(value=1)], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='random_sampler', ctx=Store())], value=Attribute(value=Call(func=Name(id='RandomState', ctx=Load()), args=[], keywords=[keyword(arg='seed', value=Name(id='random_seed', ctx=Load()))]), attr='normal', ctx=Load())), Assign(targets=[Name(id='ar_coef', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='r_', ctx=Load()), slice=Tuple(elts=[Constant(value=1), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='ar_coef', ctx=Load())], keywords=[]))], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='ar_samples', ctx=Store())], value=Call(func=Name(id='arma_generate_sample', ctx=Load()), args=[], keywords=[keyword(arg='ar', value=Name(id='ar_coef', ctx=Load())), keyword(arg='ma', value=List(elts=[Constant(value=1)], ctx=Load())), keyword(arg='nsample', value=Tuple(elts=[Name(id='n_segments', ctx=Load()), Name(id='periods', ctx=Load())], ctx=Load())), keyword(arg='axis', value=Constant(value=1)), keyword(arg='distrvs', value=Name(id='random_sampler', ctx=Load())), keyword(arg='scale', value=Name(id='sigma', ctx=Load()))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Attribute(value=Name(id='ar_samples', ctx=Load()), attr='T', ctx=Load())), keyword(arg='columns', value=ListComp(elt=JoinedStr(values=[Constant(value='segment_'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_segments', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Name(id='start_time', ctx=Load())), keyword(arg='freq', value=Name(id='freq', ctx=Load())), keyword(arg='periods', value=Name(id='periods', ctx=Load()))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='melt', ctx=Load()), args=[], keywords=[keyword(arg='id_vars', value=List(elts=[Constant(value='timestamp')], ctx=Load())), keyword(arg='value_name', value=Constant(value='target')), keyword(arg='var_name', value=Constant(value='segment'))])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='generate_periodic_df', args=arguments(posonlyargs=[], args=[arg(arg='periods', annotation=Name(id='int', ctx=Load())), arg(arg='start_time', annotation=Name(id='str', ctx=Load())), arg(arg='scale', annotation=Name(id='float', ctx=Load())), arg(arg='period', annotation=Name(id='int', ctx=Load())), arg(arg='n_segments', annotation=Name(id='int', ctx=Load())), arg(arg='freq', annotation=Name(id='str', ctx=Load())), arg(arg='add_noise', annotation=Name(id='bool', ctx=Load())), arg(arg='sigma', annotation=Name(id='float', ctx=Load())), arg(arg='random_seed', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10), Constant(value=1), Constant(value=1), Constant(value='1D'), Constant(value=False), Constant(value=1), Constant(value=1)]), body=[Expr(value=Constant(value='\n    Create DataFrame with periodic data.\n\n    Parameters\n    ----------\n    periods:\n        number of timestamps\n    start_time:\n        start timestamp\n    scale:\n        we sample data from Uniform[0, scale)\n    period:\n        data frequency -- x[i+period] = x[i]\n    n_segments:\n        number of segments\n    freq:\n        pandas frequency string for :py:func:`pandas.date_range` that is used to generate timestamp\n    add_noise:\n        if True we add noise to final samples\n    sigma:\n        scale of added noise\n    random_seed:\n        random seed\n    ')), Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='RandomState', ctx=Load()), args=[], keywords=[keyword(arg='seed', value=Name(id='random_seed', ctx=Load()))]), attr='randint', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='scale', ctx=Load())], keywords=[])], keywords=[keyword(arg='size', value=Tuple(elts=[Name(id='n_segments', ctx=Load()), Name(id='period', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='patterns', ctx=Store())], value=ListComp(elt=Call(func=Name(id='list', ctx=Load()), args=[Name(id='ar', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='ar', ctx=Store()), iter=Name(id='samples', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='generate_from_patterns_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Name(id='periods', ctx=Load())), keyword(arg='start_time', value=Name(id='start_time', ctx=Load())), keyword(arg='patterns', value=Name(id='patterns', ctx=Load())), keyword(arg='sigma', value=Name(id='sigma', ctx=Load())), keyword(arg='random_seed', value=Name(id='random_seed', ctx=Load())), keyword(arg='freq', value=Name(id='freq', ctx=Load())), keyword(arg='add_noise', value=Name(id='add_noise', ctx=Load()))])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='generate_const_df', args=arguments(posonlyargs=[], args=[arg(arg='periods', annotation=Name(id='int', ctx=Load())), arg(arg='start_time', annotation=Name(id='str', ctx=Load())), arg(arg='scale', annotation=Name(id='float', ctx=Load())), arg(arg='n_segments', annotation=Name(id='int', ctx=Load())), arg(arg='freq', annotation=Name(id='str', ctx=Load())), arg(arg='add_noise', annotation=Name(id='bool', ctx=Load())), arg(arg='sigma', annotation=Name(id='float', ctx=Load())), arg(arg='random_seed', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value='1D'), Constant(value=False), Constant(value=1), Constant(value=1)]), body=[Expr(value=Constant(value='\n    Create DataFrame with const data.\n\n    Parameters\n    ----------\n    periods:\n        number of timestamps\n    start_time:\n        start timestamp\n    scale:\n        const value to fill\n    period:\n        data frequency -- x[i+period] = x[i]\n    n_segments:\n        number of segments\n    freq:\n        pandas frequency string for :py:func:`pandas.date_range` that is used to generate timestamp\n    add_noise:\n        if True we add noise to final samples\n    sigma:\n        scale of added noise\n    random_seed:\n        random seed\n    ')), Assign(targets=[Name(id='patterns', ctx=Store())], value=ListComp(elt=List(elts=[Name(id='scale', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_segments', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='generate_from_patterns_df', ctx=Load()), args=[], keywords=[keyword(arg='periods', value=Name(id='periods', ctx=Load())), keyword(arg='start_time', value=Name(id='start_time', ctx=Load())), keyword(arg='patterns', value=Name(id='patterns', ctx=Load())), keyword(arg='sigma', value=Name(id='sigma', ctx=Load())), keyword(arg='random_seed', value=Name(id='random_seed', ctx=Load())), keyword(arg='freq', value=Name(id='freq', ctx=Load())), keyword(arg='add_noise', value=Name(id='add_noise', ctx=Load()))])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='generate_from_patterns_df', args=arguments(posonlyargs=[], args=[arg(arg='periods', annotation=Name(id='int', ctx=Load())), arg(arg='start_time', annotation=Name(id='str', ctx=Load())), arg(arg='patterns', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='freq', annotation=Name(id='str', ctx=Load())), arg(arg='add_noise'), arg(arg='sigma', annotation=Name(id='float', ctx=Load())), arg(arg='random_seed', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='1D'), Constant(value=False), Constant(value=1), Constant(value=1)]), body=[Expr(value=Constant(value='\n    Create DataFrame from patterns.\n\n    Parameters\n    ----------\n    periods:\n        number of timestamps\n    start_time:\n        start timestamp\n    patterns:\n        list of lists with patterns to be repeated\n    freq:\n        pandas frequency string for :py:func:`pandas.date_range` that is used to generate timestamp\n    add_noise:\n        if True we add noise to final samples\n    sigma:\n        scale of added noise\n    random_seed:\n        random seed\n    ')), Assign(targets=[Name(id='n_segments', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='patterns', ctx=Load())], keywords=[])), If(test=Name(id='add_noise', ctx=Load()), body=[Assign(targets=[Name(id='noise', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='RandomState', ctx=Load()), args=[], keywords=[keyword(arg='seed', value=Name(id='random_seed', ctx=Load()))]), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Name(id='sigma', ctx=Load())), keyword(arg='size', value=Tuple(elts=[Name(id='n_segments', ctx=Load()), Name(id='periods', ctx=Load())], ctx=Load()))]))], orelse=[Assign(targets=[Name(id='noise', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[], keywords=[keyword(arg='shape', value=Tuple(elts=[Name(id='n_segments', ctx=Load()), Name(id='periods', ctx=Load())], ctx=Load()))]))]), Assign(targets=[Name(id='samples', ctx=Store())], value=Name(id='noise', ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='pattern', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='patterns', ctx=Load())], keywords=[]), body=[AugAssign(target=Subscript(value=Name(id='samples', ctx=Load()), slice=Tuple(elts=[Name(id='idx', ctx=Load()), Slice()], ctx=Load()), ctx=Store()), op=Add(), value=Subscript(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[BinOp(left=Name(id='pattern', ctx=Load()), op=Mult(), right=BinOp(left=BinOp(left=Name(id='periods', ctx=Load()), op=FloorDiv(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=1)))], keywords=[]), slice=Slice(upper=Name(id='periods', ctx=Load())), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Attribute(value=Name(id='samples', ctx=Load()), attr='T', ctx=Load())), keyword(arg='columns', value=ListComp(elt=JoinedStr(values=[Constant(value='segment_'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n_segments', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='timestamp'), ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Name(id='start_time', ctx=Load())), keyword(arg='freq', value=Name(id='freq', ctx=Load())), keyword(arg='periods', value=Name(id='periods', ctx=Load()))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='melt', ctx=Load()), args=[], keywords=[keyword(arg='id_vars', value=List(elts=[Constant(value='timestamp')], ctx=Load())), keyword(arg='value_name', value=Constant(value='target')), keyword(arg='var_name', value=Constant(value='segment'))])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], type_ignores=[])