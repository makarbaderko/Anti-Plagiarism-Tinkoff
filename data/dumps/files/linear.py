Module(body=[ImportFrom(module='sklearn.linear_model', names=[alias(name='ElasticNet')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='LinearRegression')], level=0), ImportFrom(module='etna.models.sklearn', names=[alias(name='SklearnMultiSegmentModel')], level=0), ImportFrom(module='etna.models.sklearn', names=[alias(name='SklearnPerSegmentModel')], level=0), ClassDef(name='LinearPerSegmentModel', bases=[Name(id='SklearnPerSegmentModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Class holding per segment :py:class:`sklearn.linear_model.LinearRegression`.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fit_intercept', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='\n        Create instance of LinearModel with given parameters.\n\n        Parameters\n        ----------\n        fit_intercept:\n            Whether to calculate the intercept for this model. If set to False, no intercept will be used in\n            calculations (i.e. data is expected to be centered).\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Store())], value=Name(id='fit_intercept', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[keyword(arg='fit_intercept', value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ElasticPerSegmentModel', bases=[Name(id='SklearnPerSegmentModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Class holding per segment :py:class:`sklearn.linear_model.ElasticNet`.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='l1_ratio', annotation=Name(id='float', ctx=Load())), arg(arg='fit_intercept', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=1.0), Constant(value=0.5), Constant(value=True)]), body=[Expr(value=Constant(value='\n        Create instance of ElasticNet with given parameters.\n\n        Parameters\n        ----------\n        alpha:\n            Constant that multiplies the penalty terms. Defaults to 1.0.\n            ``alpha = 0`` is equivalent to an ordinary least square, solved by the LinearRegression object.\n            For numerical reasons, using ``alpha = 0`` with the Lasso object is not advised.\n            Given this, you should use the :py:class:`~etna.models.linear.LinearPerSegmentModel` object.\n        l1_ratio:\n            The ElasticNet mixing parameter, with ``0 <= l1_ratio <= 1``.\n\n            * For ``l1_ratio = 0`` the penalty is an L2 penalty.\n\n            * For ``l1_ratio = 1`` it is an L1 penalty.\n\n            * For ``0 < l1_ratio < 1``, the penalty is a combination of L1 and L2.\n\n        fit_intercept:\n            Whether to calculate the intercept for this model. If set to False, no intercept will be used in\n            calculations (i.e. data is expected to be centered).\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Store())], value=Name(id='alpha', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='l1_ratio', ctx=Store())], value=Name(id='l1_ratio', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Store())], value=Name(id='fit_intercept', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='ElasticNet', ctx=Load()), args=[], keywords=[keyword(arg='alpha', value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Load())), keyword(arg='l1_ratio', value=Attribute(value=Name(id='self', ctx=Load()), attr='l1_ratio', ctx=Load())), keyword(arg='fit_intercept', value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='LinearMultiSegmentModel', bases=[Name(id='SklearnMultiSegmentModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Class holding :py:class:`sklearn.linear_model.LinearRegression` for all segments.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fit_intercept', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='\n        Create instance of LinearModel with given parameters.\n\n        Parameters\n        ----------\n        fit_intercept:\n            Whether to calculate the intercept for this model. If set to False, no intercept will be used in\n            calculations (i.e. data is expected to be centered).\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Store())], value=Name(id='fit_intercept', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[keyword(arg='fit_intercept', value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ElasticMultiSegmentModel', bases=[Name(id='SklearnMultiSegmentModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Class holding :py:class:`sklearn.linear_model.ElasticNet` for all segments.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='l1_ratio', annotation=Name(id='float', ctx=Load())), arg(arg='fit_intercept', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=1.0), Constant(value=0.5), Constant(value=True)]), body=[Expr(value=Constant(value='\n        Create instance of ElasticNet with given parameters.\n\n        Parameters\n        ----------\n        alpha:\n            Constant that multiplies the penalty terms. Defaults to 1.0.\n            ``alpha = 0`` is equivalent to an ordinary least square, solved by the LinearRegression object.\n            For numerical reasons, using ``alpha = 0`` with the Lasso object is not advised.\n            Given this, you should use the :py:class:`~etna.models.linear.LinearMultiSegmentModel` object.\n        l1_ratio:\n            The ElasticNet mixing parameter, with ``0 <= l1_ratio <= 1``.\n\n            * For ``l1_ratio = 0`` the penalty is an L2 penalty.\n\n            * For ``l1_ratio = 1`` it is an L1 penalty.\n\n            * For ``0 < l1_ratio < 1``, the penalty is a combination of L1 and L2.\n\n        fit_intercept:\n            Whether to calculate the intercept for this model. If set to False, no intercept will be used in\n            calculations (i.e. data is expected to be centered).\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Store())], value=Name(id='alpha', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='l1_ratio', ctx=Store())], value=Name(id='l1_ratio', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Store())], value=Name(id='fit_intercept', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='regressor', value=Call(func=Name(id='ElasticNet', ctx=Load()), args=[], keywords=[keyword(arg='alpha', value=Attribute(value=Name(id='self', ctx=Load()), attr='alpha', ctx=Load())), keyword(arg='l1_ratio', value=Attribute(value=Name(id='self', ctx=Load()), attr='l1_ratio', ctx=Load())), keyword(arg='fit_intercept', value=Attribute(value=Name(id='self', ctx=Load()), attr='fit_intercept', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])