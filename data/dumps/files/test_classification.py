Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pytest')]), ImportFrom(module='sklearn.neighbors', names=[alias(name='KNeighborsClassifier')], level=0), ImportFrom(module='tsfresh.feature_extraction.settings', names=[alias(name='MinimalFCParameters')], level=0), ImportFrom(module='etna.experimental.classification.classification', names=[alias(name='TimeSeriesBinaryClassifier')], level=0), ImportFrom(module='etna.experimental.classification.feature_extraction.tsfresh', names=[alias(name='TSFreshFeatureExtractor')], level=0), FunctionDef(name='test_predict_proba_format', args=arguments(posonlyargs=[], args=[arg(arg='x_y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store())], ctx=Store())], value=Name(id='x_y', ctx=Load())), Assign(targets=[Name(id='clf', ctx=Store())], value=Call(func=Name(id='TimeSeriesBinaryClassifier', ctx=Load()), args=[], keywords=[keyword(arg='feature_extractor', value=Call(func=Name(id='TSFreshFeatureExtractor', ctx=Load()), args=[], keywords=[keyword(arg='default_fc_parameters', value=Call(func=Name(id='MinimalFCParameters', ctx=Load()), args=[], keywords=[]))])), keyword(arg='classifier', value=Call(func=Name(id='KNeighborsClassifier', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='clf', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[])), Assign(targets=[Name(id='y_probs', ctx=Store())], value=Call(func=Attribute(value=Name(id='clf', ctx=Load()), attr='predict_proba', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='y_probs', ctx=Load()), attr='shape', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='y', ctx=Load()), attr='shape', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_predict_format', args=arguments(posonlyargs=[], args=[arg(arg='x_y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store())], ctx=Store())], value=Name(id='x_y', ctx=Load())), Assign(targets=[Name(id='clf', ctx=Store())], value=Call(func=Name(id='TimeSeriesBinaryClassifier', ctx=Load()), args=[], keywords=[keyword(arg='feature_extractor', value=Call(func=Name(id='TSFreshFeatureExtractor', ctx=Load()), args=[], keywords=[keyword(arg='default_fc_parameters', value=Call(func=Name(id='MinimalFCParameters', ctx=Load()), args=[], keywords=[]))])), keyword(arg='classifier', value=Call(func=Name(id='KNeighborsClassifier', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='clf', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[])), Assign(targets=[Name(id='y_pred', ctx=Store())], value=Call(func=Attribute(value=Name(id='clf', ctx=Load()), attr='predict', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='y_pred', ctx=Load()), attr='shape', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='y', ctx=Load()), attr='shape', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_predict_single_class_on_fit', args=arguments(posonlyargs=[], args=[arg(arg='x_y'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Name(id='x_y', ctx=Load())), Assign(targets=[Name(id='clf', ctx=Store())], value=Call(func=Name(id='TimeSeriesBinaryClassifier', ctx=Load()), args=[], keywords=[keyword(arg='feature_extractor', value=Call(func=Name(id='TSFreshFeatureExtractor', ctx=Load()), args=[], keywords=[keyword(arg='default_fc_parameters', value=Call(func=Name(id='MinimalFCParameters', ctx=Load()), args=[], keywords=[]))])), keyword(arg='classifier', value=Call(func=Name(id='KNeighborsClassifier', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='clf', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[])), Assign(targets=[Name(id='y_pred', ctx=Store())], value=Call(func=Attribute(value=Name(id='clf', ctx=Load()), attr='predict', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Name(id='y_pred', ctx=Load()), Name(id='y', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='y'), List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Constant(value=5)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Constant(value=5)], keywords=[])], ctx=Load())], keywords=[])]), FunctionDef(name='test_masked_crossval_score', args=arguments(posonlyargs=[], args=[arg(arg='many_time_series'), arg(arg='folds'), arg(arg='expected_score')], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=1)], ctx=Load())], keywords=[]), Constant(value=1)]), body=[Expr(value=Constant(value='Test for masked_crossval_score method.')), Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store())], ctx=Store())], value=Name(id='many_time_series', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='concatenate', ctx=Load()), args=[Tuple(elts=[Name(id='y', ctx=Load()), Name(id='y', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='clf', ctx=Store())], value=Call(func=Name(id='TimeSeriesBinaryClassifier', ctx=Load()), args=[], keywords=[keyword(arg='feature_extractor', value=Call(func=Name(id='TSFreshFeatureExtractor', ctx=Load()), args=[], keywords=[keyword(arg='default_fc_parameters', value=Call(func=Name(id='MinimalFCParameters', ctx=Load()), args=[], keywords=[]))])), keyword(arg='classifier', value=Call(func=Name(id='KNeighborsClassifier', ctx=Load()), args=[], keywords=[keyword(arg='n_neighbors', value=Constant(value=1))]))])), Assign(targets=[Name(id='scores', ctx=Store())], value=Call(func=Attribute(value=Name(id='clf', ctx=Load()), attr='masked_crossval_score', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='x', ctx=Load())), keyword(arg='y', value=Name(id='y', ctx=Load())), keyword(arg='mask', value=Name(id='folds', ctx=Load()))])), For(target=Name(id='score', ctx=Store()), iter=Call(func=Attribute(value=Name(id='scores', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='score', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='expected_score', ctx=Load())]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_dump_load_pipeline', args=arguments(posonlyargs=[], args=[arg(arg='x_y'), arg(arg='tmp_path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store())], ctx=Store())], value=Name(id='x_y', ctx=Load())), Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Name(id='tmp_path', ctx=Load()), op=Div(), right=Constant(value='tmp.pkl'))), Assign(targets=[Name(id='clf', ctx=Store())], value=Call(func=Name(id='TimeSeriesBinaryClassifier', ctx=Load()), args=[], keywords=[keyword(arg='feature_extractor', value=Call(func=Name(id='TSFreshFeatureExtractor', ctx=Load()), args=[], keywords=[keyword(arg='default_fc_parameters', value=Call(func=Name(id='MinimalFCParameters', ctx=Load()), args=[], keywords=[]))])), keyword(arg='classifier', value=Call(func=Name(id='KNeighborsClassifier', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='clf', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[])), Assign(targets=[Name(id='y_probs_original', ctx=Store())], value=Call(func=Attribute(value=Name(id='clf', ctx=Load()), attr='predict_proba', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='clf', ctx=Load()), attr='dump', ctx=Load()), args=[], keywords=[keyword(arg='path', value=Name(id='path', ctx=Load()))])), Assign(targets=[Name(id='clf', ctx=Store())], value=Call(func=Attribute(value=Name(id='TimeSeriesBinaryClassifier', ctx=Load()), attr='load', ctx=Load()), args=[], keywords=[keyword(arg='path', value=Name(id='path', ctx=Load()))])), Assign(targets=[Name(id='y_probs_loaded', ctx=Store())], value=Call(func=Attribute(value=Name(id='clf', ctx=Load()), attr='predict_proba', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_equal', ctx=Load()), args=[Name(id='y_probs_original', ctx=Load()), Name(id='y_probs_loaded', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])