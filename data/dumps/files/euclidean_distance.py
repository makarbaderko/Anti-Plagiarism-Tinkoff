Module(body=[ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), Import(names=[alias(name='numba')]), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.clustering.distances.base', names=[alias(name='Distance')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0)], orelse=[]), FunctionDef(name='euclidean_distance', args=arguments(posonlyargs=[], args=[arg(arg='x1', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='x2', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get euclidean distance between two arrays.\n\n    Parameters\n    ----------\n    x1:\n        first array\n    x2:\n        second array\n\n    Returns\n    -------\n    float:\n        distance between x1 and x2\n    ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[BinOp(left=Name(id='x1', ctx=Load()), op=Sub(), right=Name(id='x2', ctx=Load()))], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='numba', ctx=Load()), attr='cfunc', ctx=Load()), args=[Call(func=Attribute(value=Name(id='numba', ctx=Load()), attr='float64', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='numba', ctx=Load()), attr='float64', ctx=Load()), slice=Slice(), ctx=Load()), Subscript(value=Attribute(value=Name(id='numba', ctx=Load()), attr='float64', ctx=Load()), slice=Slice(), ctx=Load())], keywords=[])], keywords=[])], returns=Name(id='float', ctx=Load())), ClassDef(name='EuclideanDistance', bases=[Name(id='Distance', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Euclidean distance handler.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='trim_series', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Init EuclideanDistance.\n\n        Parameters\n        ----------\n        trim_series:\n            if True, compare parts of series with common timestamp\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='trim_series', value=Name(id='trim_series', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_compute_distance', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x1', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='x2', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute distance between x1 and x2.')), Return(value=Call(func=Name(id='euclidean_distance', ctx=Load()), args=[], keywords=[keyword(arg='x1', value=Name(id='x1', ctx=Load())), keyword(arg='x2', value=Name(id='x2', ctx=Load()))]))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='_get_average', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ts', annotation=Constant(value='TSDataset'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get series that minimizes squared distance to given ones according to the euclidean distance.\n\n        Parameters\n        ----------\n        ts:\n            TSDataset with series to be averaged\n\n        Returns\n        -------\n        pd.DataFrame:\n            dataframe with columns "timestamp" and "target" that contains the series\n        ')), Assign(targets=[Name(id='centroid', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp'), Constant(value='target')], values=[Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='df', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1))]), attr='values', ctx=Load())])], keywords=[])), Return(value=Name(id='centroid', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='EuclideanDistance'), Constant(value='euclidean_distance')], ctx=Load()))], type_ignores=[])