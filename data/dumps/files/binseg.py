Module(body=[ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='ruptures.base', names=[alias(name='BaseCost')], level=0), ImportFrom(module='ruptures.detection', names=[alias(name='Binseg')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='LinearRegression')], level=0), ImportFrom(module='etna.transforms.decomposition.change_points_trend', names=[alias(name='ChangePointsTrendTransform')], level=0), ImportFrom(module='etna.transforms.decomposition.change_points_trend', names=[alias(name='TDetrendModel')], level=0), ClassDef(name='BinsegTrendTransform', bases=[Name(id='ChangePointsTrendTransform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='BinsegTrendTransform uses :py:class:`ruptures.detection.Binseg` model as a change point detection model.\n\n    Warning\n    -------\n    This transform can suffer from look-ahead bias. For transforming data at some timestamp\n    it uses information from the whole train part.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='detrend_model', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TDetrendModel', ctx=Load()), ctx=Load())), arg(arg='model', annotation=Name(id='str', ctx=Load())), arg(arg='custom_cost', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseCost', ctx=Load()), ctx=Load())), arg(arg='min_size', annotation=Name(id='int', ctx=Load())), arg(arg='jump', annotation=Name(id='int', ctx=Load())), arg(arg='n_bkps', annotation=Name(id='int', ctx=Load())), arg(arg='pen', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='epsilon', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value='ar'), Constant(value=None), Constant(value=2), Constant(value=1), Constant(value=5), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Init BinsegTrendTransform.\n\n        Parameters\n        ----------\n        in_column:\n            name of column to apply transform to\n        detrend_model:\n            model to get trend in data\n        model:\n            binseg segment model, ["l1", "l2", "rbf",...]. Not used if \'custom_cost\' is not None.\n        custom_cost:\n            binseg custom cost function\n        min_size:\n            minimum segment length necessary to decide it is a stable trend segment\n        jump:\n            jump value can speed up computations: if ``jump==k``,\n            the algo will use every k-th value for change points search.\n        n_bkps:\n            number of change points to find\n        pen:\n            penalty value (>0)\n        epsilon:\n            reconstruction budget (>0)\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Name(id='model', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='custom_cost', ctx=Store())], value=Name(id='custom_cost', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_size', ctx=Store())], value=Name(id='min_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='jump', ctx=Store())], value=Name(id='jump', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='n_bkps', ctx=Store())], value=Name(id='n_bkps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pen', ctx=Store())], value=Name(id='pen', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='epsilon', ctx=Store())], value=Name(id='epsilon', ctx=Load())), Assign(targets=[Name(id='detrend_model', ctx=Store())], value=IfExp(test=Compare(left=Name(id='detrend_model', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[]), orelse=Name(id='detrend_model', ctx=Load()))), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load())), keyword(arg='change_point_model', value=Call(func=Name(id='Binseg', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load())), keyword(arg='custom_cost', value=Attribute(value=Name(id='self', ctx=Load()), attr='custom_cost', ctx=Load())), keyword(arg='min_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='min_size', ctx=Load())), keyword(arg='jump', value=Attribute(value=Name(id='self', ctx=Load()), attr='jump', ctx=Load()))])), keyword(arg='detrend_model', value=Name(id='detrend_model', ctx=Load())), keyword(arg='n_bkps', value=Attribute(value=Name(id='self', ctx=Load()), attr='n_bkps', ctx=Load())), keyword(arg='pen', value=Attribute(value=Name(id='self', ctx=Load()), attr='pen', ctx=Load())), keyword(arg='epsilon', value=Attribute(value=Name(id='self', ctx=Load()), attr='epsilon', ctx=Load()))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])