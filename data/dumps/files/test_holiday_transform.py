Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='generate_const_df')], level=0), ImportFrom(module='etna.transforms.timestamp', names=[alias(name='HolidayTransform')], level=0), FunctionDef(name='simple_ts_with_regressors', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Name(id='generate_const_df', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Constant(value=1)), keyword(arg='n_segments', value=Constant(value=3)), keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=100))])), Assign(targets=[Name(id='df_exog', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='generate_const_df', ctx=Load()), args=[], keywords=[keyword(arg='scale', value=Constant(value=10)), keyword(arg='n_segments', value=Constant(value=3)), keyword(arg='start_time', value=Constant(value='2020-01-01')), keyword(arg='periods', value=Constant(value=150))]), attr='rename', ctx=Load()), args=[Dict(keys=[Constant(value='target')], values=[Constant(value='regressor_a')])], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[])), keyword(arg='freq', value=Constant(value='D')), keyword(arg='df_exog', value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='df_exog', ctx=Load())], keywords=[]))])), Return(value=Name(id='ts', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='simple_constant_df_daily', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-01')), keyword(arg='end', value=Constant(value='2020-01-15')), keyword(arg='freq', value=Constant(value='D'))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Constant(value=42)), Expr(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[keyword(arg='inplace', value=Constant(value=True))])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='two_segments_simple_df_daily', args=arguments(posonlyargs=[], args=[arg(arg='simple_constant_df_daily', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='simple_constant_df_daily', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='simple_constant_df_daily', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df_1', ctx=Store())], value=Subscript(value=Name(id='df_1', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load())), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_1')), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_2')), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='classic_df', ctx=Load())], keywords=[])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='simple_constant_df_hour', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-01-08 22:15')), keyword(arg='end', value=Constant(value='2020-01-10')), keyword(arg='freq', value=Constant(value='H'))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Constant(value=42)), Expr(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[keyword(arg='inplace', value=Constant(value=True))])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='two_segments_simple_df_hour', args=arguments(posonlyargs=[], args=[arg(arg='simple_constant_df_hour', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='simple_constant_df_hour', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='simple_constant_df_hour', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df_1', ctx=Store())], value=Subscript(value=Name(id='df_1', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load())), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_1')), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_2')), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='classic_df', ctx=Load())], keywords=[])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='simple_constant_df_min', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-11-25 22:30')), keyword(arg='end', value=Constant(value='2020-11-26 02:15')), keyword(arg='freq', value=Constant(value='15MIN'))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Constant(value=42)), Expr(value=Call(func=Attribute(value=Name(id='df', ctx=Load()), attr='set_index', ctx=Load()), args=[Constant(value='timestamp')], keywords=[keyword(arg='inplace', value=Constant(value=True))])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='two_segments_simple_df_min', args=arguments(posonlyargs=[], args=[arg(arg='simple_constant_df_min', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='simple_constant_df_min', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='simple_constant_df_min', ctx=Load()), attr='reset_index', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='df_1', ctx=Store())], value=Subscript(value=Name(id='df_1', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load())), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_1')), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='segment_2')), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='classic_df', ctx=Load())], keywords=[])), Return(value=Name(id='df', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_holiday_with_regressors', args=arguments(posonlyargs=[], args=[arg(arg='simple_ts_with_regressors', annotation=Name(id='TSDataset', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='simple_ts_with_regressors', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Call(func=Name(id='HolidayTransform', ctx=Load()), args=[], keywords=[keyword(arg='out_column', value=Constant(value='holiday'))])], ctx=Load())], keywords=[])), Assign(targets=[Name(id='len_holiday', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[ListComp(elt=Name(id='cols', ctx=Load()), generators=[comprehension(target=Name(id='cols', ctx=Store()), iter=Attribute(value=Name(id='simple_ts_with_regressors', ctx=Load()), attr='columns', ctx=Load()), ifs=[Compare(left=Subscript(value=Name(id='cols', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value='holiday')])], is_async=0)])], keywords=[])), Assert(test=Compare(left=Name(id='len_holiday', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='unique', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='simple_ts_with_regressors', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[])], keywords=[])], keywords=[])]))], decorator_list=[]), FunctionDef(name='test_interface_two_segments_daily', args=arguments(posonlyargs=[], args=[arg(arg='two_segments_simple_df_daily', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='holidays_finder', ctx=Store())], value=Call(func=Name(id='HolidayTransform', ctx=Load()), args=[], keywords=[keyword(arg='out_column', value=Constant(value='regressor_holidays'))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='holidays_finder', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='two_segments_simple_df_daily', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Constant(value='regressor_holidays'), ops=[In()], comparators=[Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='columns', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='regressor_holidays'), ctx=Load()), attr='dtype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='category')]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_interface_two_segments_hour', args=arguments(posonlyargs=[], args=[arg(arg='two_segments_simple_df_hour', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='holidays_finder', ctx=Store())], value=Call(func=Name(id='HolidayTransform', ctx=Load()), args=[], keywords=[keyword(arg='out_column', value=Constant(value='regressor_holidays'))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='holidays_finder', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='two_segments_simple_df_hour', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Constant(value='regressor_holidays'), ops=[In()], comparators=[Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='columns', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='regressor_holidays'), ctx=Load()), attr='dtype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='category')]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_interface_two_segments_min', args=arguments(posonlyargs=[], args=[arg(arg='two_segments_simple_df_min', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='holidays_finder', ctx=Store())], value=Call(func=Name(id='HolidayTransform', ctx=Load()), args=[], keywords=[keyword(arg='out_column', value=Constant(value='regressor_holidays'))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='holidays_finder', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='two_segments_simple_df_min', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Constant(value='regressor_holidays'), ops=[In()], comparators=[Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='columns', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='regressor_holidays'), ctx=Load()), attr='dtype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='category')]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_holidays_day', args=arguments(posonlyargs=[], args=[arg(arg='iso_code', annotation=Name(id='str', ctx=Load())), arg(arg='answer', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())), arg(arg='two_segments_simple_df_daily', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='holidays_finder', ctx=Store())], value=Call(func=Name(id='HolidayTransform', ctx=Load()), args=[], keywords=[keyword(arg='iso_code', value=Name(id='iso_code', ctx=Load())), keyword(arg='out_column', value=Constant(value='regressor_holidays'))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='holidays_finder', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='two_segments_simple_df_daily', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array_equal', ctx=Load()), args=[Attribute(value=Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='regressor_holidays'), ctx=Load()), attr='values', ctx=Load()), Name(id='answer', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='iso_code,answer'), Tuple(elts=[Tuple(elts=[Constant(value='RUS'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='US'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load())], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_holidays_hour', args=arguments(posonlyargs=[], args=[arg(arg='iso_code', annotation=Name(id='str', ctx=Load())), arg(arg='answer', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())), arg(arg='two_segments_simple_df_hour', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='holidays_finder', ctx=Store())], value=Call(func=Name(id='HolidayTransform', ctx=Load()), args=[], keywords=[keyword(arg='iso_code', value=Name(id='iso_code', ctx=Load())), keyword(arg='out_column', value=Constant(value='regressor_holidays'))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='holidays_finder', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='two_segments_simple_df_hour', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array_equal', ctx=Load()), args=[Attribute(value=Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='regressor_holidays'), ctx=Load()), attr='values', ctx=Load()), Name(id='answer', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='iso_code,answer'), Tuple(elts=[Tuple(elts=[Constant(value='RUS'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='US'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load())], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_holidays_min', args=arguments(posonlyargs=[], args=[arg(arg='iso_code', annotation=Name(id='str', ctx=Load())), arg(arg='answer', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())), arg(arg='two_segments_simple_df_min', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='holidays_finder', ctx=Store())], value=Call(func=Name(id='HolidayTransform', ctx=Load()), args=[], keywords=[keyword(arg='iso_code', value=Name(id='iso_code', ctx=Load())), keyword(arg='out_column', value=Constant(value='regressor_holidays'))])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='holidays_finder', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='two_segments_simple_df_min', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array_equal', ctx=Load()), args=[Attribute(value=Subscript(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='regressor_holidays'), ctx=Load()), attr='values', ctx=Load()), Name(id='answer', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='iso_code,answer'), Tuple(elts=[Tuple(elts=[Constant(value='RUS'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='US'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=1)], ctx=Load())], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_holidays_failed', args=arguments(posonlyargs=[], args=[arg(arg='index', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DatetimeIndex', ctx=Load())), arg(arg='two_segments_simple_df_daily', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df', ctx=Store())], value=Name(id='two_segments_simple_df_daily', ctx=Load())), Assign(targets=[Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Store())], value=Name(id='index', ctx=Load())), Assign(targets=[Name(id='holidays_finder', ctx=Store())], value=Call(func=Name(id='HolidayTransform', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Frequency of data should be no more than daily.'))]))], body=[Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='holidays_finder', ctx=Load()), attr='fit_transform', ctx=Load()), args=[Name(id='df', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='index'), Tuple(elts=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2020-11-25 22:30')), keyword(arg='end', value=Constant(value='2020-12-11')), keyword(arg='freq', value=Constant(value='1D 15MIN'))]), Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Constant(value='2019-11-25')), keyword(arg='end', value=Constant(value='2021-02-25')), keyword(arg='freq', value=Constant(value='M'))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_holidays_out_column_added_to_regressors', args=arguments(posonlyargs=[], args=[arg(arg='example_tsds'), arg(arg='expected_regressors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='holidays_finder', ctx=Store())], value=Call(func=Name(id='HolidayTransform', ctx=Load()), args=[], keywords=[keyword(arg='out_column', value=Constant(value='regressor_holidays'))])), Expr(value=Call(func=Attribute(value=Name(id='example_tsds', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='holidays_finder', ctx=Load())], ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='example_tsds', ctx=Load()), attr='regressors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='expected_regressors', ctx=Load())], keywords=[])]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='expected_regressors'), List(elts=[List(elts=[Constant(value='regressor_holidays')], ctx=Load())], ctx=Load())], keywords=[])])], type_ignores=[])