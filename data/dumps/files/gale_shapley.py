Module(body=[Import(names=[alias(name='warnings')]), ImportFrom(module='math', names=[alias(name='ceil')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='etna.analysis', names=[alias(name='RelevanceTable')], level=0), ImportFrom(module='etna.core', names=[alias(name='BaseMixin')], level=0), ImportFrom(module='etna.transforms.feature_selection.base', names=[alias(name='BaseFeatureSelectionTransform')], level=0), ClassDef(name='BaseGaleShapley', bases=[Name(id='BaseMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base class for a member of Gale-Shapley matching.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='ranked_candidates', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Init BaseGaleShapley.\n\n        Parameters\n        ----------\n        name:\n            name of object\n        ranked_candidates:\n            list of preferences for the object ranked descending by importance\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ranked_candidate', ctx=Store())], value=Name(id='ranked_candidates', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='candidates_rank', ctx=Store())], value=DictComp(key=Name(id='candidate', ctx=Load()), value=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='candidate', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ranked_candidate', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match_rank', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_available', ctx=Store())], value=Constant(value=True))], decorator_list=[]), FunctionDef(name='update_tmp_match', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create match with object name.\n\n        Parameters\n        ----------\n        name:\n            name of candidate to match\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match_rank', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='candidates_rank', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_available', ctx=Store())], value=Constant(value=False))], decorator_list=[]), FunctionDef(name='reset_tmp_match', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Break tmp current.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match_rank', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_available', ctx=Store())], value=Constant(value=True))], decorator_list=[])], decorator_list=[]), ClassDef(name='SegmentGaleShapley', bases=[Name(id='BaseGaleShapley', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Class for segment member of Gale-Shapley matching.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='ranked_candidates', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Init SegmentGaleShapley.\n\n        Parameters\n        ----------\n        name:\n            name of segment\n        ranked_candidates:\n            list of features sorted descending by importance\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='ranked_candidates', value=Name(id='ranked_candidates', ctx=Load()))])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='last_candidate', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='update_tmp_match', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create match with given feature.\n\n        Parameters\n        ----------\n        name:\n            name of feature to match\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='update_tmp_match', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='last_candidate', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match_rank', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_next_candidate', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get name of the next feature to try.\n\n        Returns\n        -------\n        name: str\n            name of feature\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='last_candidate', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='last_candidate', ctx=Store())], value=Constant(value=0))], orelse=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='last_candidate', ctx=Store()), op=Add(), value=Constant(value=1))]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='last_candidate', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ranked_candidate', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='ranked_candidate', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='last_candidate', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='FeatureGaleShapley', bases=[Name(id='BaseGaleShapley', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Class for feature member of Gale-Shapley matching.')), FunctionDef(name='check_segment', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='segment', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if given segment is better than current match according to preference list.\n\n        Parameters\n        ----------\n        segment:\n            segment to check\n\n        Returns\n        -------\n        is_better: bool\n            returns True if given segment is a better candidate than current match.\n        ')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match_rank', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='candidates_rank', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='tmp_match_rank', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='GaleShapleyMatcher', bases=[Name(id='BaseMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Class for handling Gale-Shapley matching algo.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='segments', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='SegmentGaleShapley', ctx=Load()), ctx=Load())), arg(arg='features', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='FeatureGaleShapley', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Init GaleShapleyMatcher.\n\n        Parameters\n        ----------\n        segments:\n            list of segments to build matches\n        features:\n            list of features to build matches\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Store())], value=Name(id='segments', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='features', ctx=Store())], value=Name(id='features', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='segment_by_name', ctx=Store())], value=DictComp(key=Attribute(value=Name(id='segment', ctx=Load()), attr='name', ctx=Load()), value=Name(id='segment', ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='feature_by_name', ctx=Store())], value=DictComp(key=Attribute(value=Name(id='feature', ctx=Load()), attr='name', ctx=Load()), value=Name(id='feature', ctx=Load()), generators=[comprehension(target=Name(id='feature', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='features', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='match', args=arguments(posonlyargs=[], args=[arg(arg='segment', annotation=Name(id='SegmentGaleShapley', ctx=Load())), arg(arg='feature', annotation=Name(id='FeatureGaleShapley', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Build match between segment and feature.\n\n        Parameters\n        ----------\n        segment:\n            segment to match\n        feature:\n            feature to match\n        ')), Expr(value=Call(func=Attribute(value=Name(id='segment', ctx=Load()), attr='update_tmp_match', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Attribute(value=Name(id='feature', ctx=Load()), attr='name', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='feature', ctx=Load()), attr='update_tmp_match', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Attribute(value=Name(id='segment', ctx=Load()), attr='name', ctx=Load()))]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='break_match', args=arguments(posonlyargs=[], args=[arg(arg='segment', annotation=Name(id='SegmentGaleShapley', ctx=Load())), arg(arg='feature', annotation=Name(id='FeatureGaleShapley', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Break match between segment and feature.\n\n        Parameters\n        ----------\n        segment:\n            segment to break match\n        feature:\n            feature to break match\n        ')), Expr(value=Call(func=Attribute(value=Name(id='segment', ctx=Load()), attr='reset_tmp_match', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='feature', ctx=Load()), attr='reset_tmp_match', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_gale_shapley_iteration', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='available_segments', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='SegmentGaleShapley', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Run iteration of Gale-Shapley matching for given available_segments.\n\n        Parameters\n        ----------\n        available_segments:\n            list of segments that have no match at this iteration\n\n        Returns\n        -------\n        success: bool\n            True if there is at least one match attempt at the iteration\n\n        Notes\n        -----\n        Success code is necessary because in ETNA usage we can not guarantee that number of features will be\n        big enough to build matches with all the segments. In case ``n_features < n_segments`` some segments always stay\n        available that can cause infinite while loop in ``__call__``.\n        ')), Assign(targets=[Name(id='success', ctx=Store())], value=Constant(value=False)), For(target=Name(id='segment', ctx=Store()), iter=Name(id='available_segments', ctx=Load()), body=[Assign(targets=[Name(id='next_feature_candidate_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='segment', ctx=Load()), attr='get_next_candidate', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='next_feature_candidate_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='next_feature_candidate', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='feature_by_name', ctx=Load()), slice=Name(id='next_feature_candidate_name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='success', ctx=Store())], value=Constant(value=True)), If(test=Call(func=Attribute(value=Name(id='next_feature_candidate', ctx=Load()), attr='check_segment', ctx=Load()), args=[], keywords=[keyword(arg='segment', value=Attribute(value=Name(id='segment', ctx=Load()), attr='name', ctx=Load()))]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='next_feature_candidate', ctx=Load()), attr='is_available', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='break_match', ctx=Load()), args=[], keywords=[keyword(arg='segment', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='segment_by_name', ctx=Load()), slice=Attribute(value=Name(id='next_feature_candidate', ctx=Load()), attr='tmp_match', ctx=Load()), ctx=Load())), keyword(arg='feature', value=Name(id='next_feature_candidate', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='match', ctx=Load()), args=[], keywords=[keyword(arg='segment', value=Name(id='segment', ctx=Load())), keyword(arg='feature', value=Name(id='next_feature_candidate', ctx=Load()))]))], orelse=[])], orelse=[]), Return(value=Name(id='success', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_get_available_segments', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get list of available segments.')), Return(value=ListComp(elt=Name(id='segment', ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()), ifs=[Attribute(value=Name(id='segment', ctx=Load()), attr='is_available', ctx=Load())], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='SegmentGaleShapley', ctx=Load()), ctx=Load())), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Run matching.\n\n        Returns\n        -------\n        matching: Dict[str, str]\n            matching dict of segment x feature\n        ')), Assign(targets=[Name(id='success_run', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='available_segments', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_available_segments', ctx=Load()), args=[], keywords=[])), While(test=BoolOp(op=And(), values=[Name(id='available_segments', ctx=Load()), Name(id='success_run', ctx=Load())]), body=[Assign(targets=[Name(id='success_run', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gale_shapley_iteration', ctx=Load()), args=[], keywords=[keyword(arg='available_segments', value=Name(id='available_segments', ctx=Load()))])), Assign(targets=[Name(id='available_segments', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_available_segments', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=DictComp(key=Attribute(value=Name(id='segment', ctx=Load()), attr='name', ctx=Load()), value=Attribute(value=Name(id='segment', ctx=Load()), attr='tmp_match', ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='segments', ctx=Load()), ifs=[Compare(left=Attribute(value=Name(id='segment', ctx=Load()), attr='tmp_match', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='GaleShapleyFeatureSelectionTransform', bases=[Name(id='BaseFeatureSelectionTransform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='GaleShapleyFeatureSelectionTransform provides feature filtering with Gale-Shapley matching algo according to relevance table.\n\n\n    Notes\n    -----\n    Transform works with any type of features, however most of the models works only with regressors.\n    Therefore, it is recommended to pass the regressors into the feature selection transforms.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='relevance_table', annotation=Name(id='RelevanceTable', ctx=Load())), arg(arg='top_k', annotation=Name(id='int', ctx=Load())), arg(arg='features_to_use', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='all'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='use_rank', annotation=Name(id='bool', ctx=Load())), arg(arg='return_features', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='relevance_params'), defaults=[Constant(value='all'), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='Init GaleShapleyFeatureSelectionTransform.\n\n        Parameters\n        ----------\n        relevance_table:\n            class to build relevance table\n        top_k:\n            number of features that should be selected from all the given ones\n        features_to_use:\n            columns of the dataset to select from\n            if "all" value is given, all columns are used\n        use_rank:\n            if True, use rank in relevance table computation\n        return_features:\n            indicates whether to return features or not.\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='features_to_use', value=Name(id='features_to_use', ctx=Load())), keyword(arg='return_features', value=Name(id='return_features', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='relevance_table', ctx=Store())], value=Name(id='relevance_table', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='top_k', ctx=Store())], value=Name(id='top_k', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_rank', ctx=Store())], value=Name(id='use_rank', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='greater_is_better', ctx=Store())], value=IfExp(test=Name(id='use_rank', ctx=Load()), body=Constant(value=False), orelse=Attribute(value=Name(id='relevance_table', ctx=Load()), attr='greater_is_better', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='relevance_params', ctx=Store())], value=Name(id='relevance_params', ctx=Load()))], decorator_list=[]), FunctionDef(name='_compute_relevance_table', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='features', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute relevance table with given data.')), Assign(targets=[Name(id='targets_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='features_df', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='features', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='relevance_table', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='targets_df', ctx=Load())), keyword(arg='df_exog', value=Name(id='features_df', ctx=Load())), keyword(arg='return_ranks', value=Attribute(value=Name(id='self', ctx=Load()), attr='use_rank', ctx=Load())), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='relevance_params', ctx=Load()))])), Return(value=Name(id='table', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='_get_ranked_list', args=arguments(posonlyargs=[], args=[arg(arg='table', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='ascending', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get ranked lists of candidates from table of relevance.')), Assign(targets=[Name(id='ranked_features', ctx=Store())], value=DictComp(key=Name(id='key', ctx=Load()), value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='table', ctx=Load()), attr='loc', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), attr='sort_values', ctx=Load()), args=[], keywords=[keyword(arg='ascending', value=Name(id='ascending', ctx=Load()))]), attr='index', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Attribute(value=Name(id='table', ctx=Load()), attr='index', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='ranked_features', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_compute_gale_shapley_steps_number', args=arguments(posonlyargs=[], args=[arg(arg='top_k', annotation=Name(id='int', ctx=Load())), arg(arg='n_segments', annotation=Name(id='int', ctx=Load())), arg(arg='n_features', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get number of necessary Gale-Shapley algo iterations.')), If(test=Compare(left=Name(id='n_features', ctx=Load()), ops=[Lt()], comparators=[Name(id='top_k', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Given top_k='), FormattedValue(value=Name(id='top_k', ctx=Load()), conversion=-1), Constant(value=' is bigger than n_features='), FormattedValue(value=Name(id='n_features', ctx=Load()), conversion=-1), Constant(value='. Transform will not filter features.')])], keywords=[])), Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='top_k', ctx=Load()), ops=[Lt()], comparators=[Name(id='n_segments', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Given top_k='), FormattedValue(value=Name(id='top_k', ctx=Load()), conversion=-1), Constant(value=' is less than n_segments. Algo will filter data without Gale-Shapley run.')])], keywords=[])), Return(value=Constant(value=1))], orelse=[]), Return(value=Call(func=Name(id='ceil', ctx=Load()), args=[BinOp(left=Name(id='top_k', ctx=Load()), op=Div(), right=Name(id='n_segments', ctx=Load()))], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='_gale_shapley_iteration', args=arguments(posonlyargs=[], args=[arg(arg='segment_features_ranking', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='feature_segments_ranking', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Build matching for all the segments.\n\n        Parameters\n        ----------\n        segment_features_ranking:\n            dict of relevance segment x sorted features\n\n        Returns\n        -------\n        matching dict: Dict[str, str]\n            dict of segment x feature\n        ')), Assign(targets=[Name(id='gssegments', ctx=Store())], value=ListComp(elt=Call(func=Name(id='SegmentGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='ranked_candidates', value=Name(id='ranked_candidates', ctx=Load()))]), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='ranked_candidates', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='segment_features_ranking', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='gsfeatures', ctx=Store())], value=ListComp(elt=Call(func=Name(id='FeatureGaleShapley', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='ranked_candidates', value=Name(id='ranked_candidates', ctx=Load()))]), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='ranked_candidates', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='feature_segments_ranking', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='matcher', ctx=Store())], value=Call(func=Name(id='GaleShapleyMatcher', ctx=Load()), args=[], keywords=[keyword(arg='segments', value=Name(id='gssegments', ctx=Load())), keyword(arg='features', value=Name(id='gsfeatures', ctx=Load()))])), Assign(targets=[Name(id='new_matches', ctx=Store())], value=Call(func=Name(id='matcher', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='new_matches', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_update_ranking_list', args=arguments(posonlyargs=[], args=[arg(arg='segment_features_ranking', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='features_to_drop', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Delete chosen features from candidates ranked lists.')), For(target=Name(id='segment', ctx=Store()), iter=Name(id='segment_features_ranking', ctx=Load()), body=[For(target=Name(id='feature', ctx=Store()), iter=Name(id='features_to_drop', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='segment_features_ranking', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='feature', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='segment_features_ranking', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_process_last_step', args=arguments(posonlyargs=[], args=[arg(arg='matches', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='relevance_table', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='n', annotation=Name(id='int', ctx=Load())), arg(arg='greater_is_better', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Choose n features from given ones according to relevance_matrix.')), Assign(targets=[Name(id='features_relevance', ctx=Store())], value=DictComp(key=Name(id='feature', ctx=Load()), value=Subscript(value=Subscript(value=Name(id='relevance_table', ctx=Load()), slice=Name(id='feature', ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='segment', ctx=Store()), Name(id='feature', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='matches', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='sorted_features', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='features_relevance', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=1), ctx=Load()))), keyword(arg='reverse', value=Name(id='greater_is_better', ctx=Load()))])), Assign(targets=[Name(id='selected_features', ctx=Store())], value=Subscript(value=ListComp(elt=Subscript(value=Name(id='feature', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='feature', ctx=Store()), iter=Name(id='sorted_features', ctx=Load()), ifs=[], is_async=0)]), slice=Slice(upper=Name(id='n', ctx=Load())), ctx=Load())), Return(value=Name(id='selected_features', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fit Gale-Shapley algo and find a pool of ``top_k`` features.\n\n        Parameters\n        ----------\n        df:\n            dataframe to fit algo\n        ')), Assign(targets=[Name(id='features', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_features_to_use', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load()))])), Assign(targets=[Name(id='relevance_table', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_relevance_table', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='features', value=Name(id='features', ctx=Load()))])), Assign(targets=[Name(id='segment_features_ranking', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_ranked_list', ctx=Load()), args=[], keywords=[keyword(arg='table', value=Name(id='relevance_table', ctx=Load())), keyword(arg='ascending', value=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='relevance_table', ctx=Load()), attr='greater_is_better', ctx=Load())))])), Assign(targets=[Name(id='feature_segments_ranking', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_ranked_list', ctx=Load()), args=[], keywords=[keyword(arg='table', value=Attribute(value=Name(id='relevance_table', ctx=Load()), attr='T', ctx=Load())), keyword(arg='ascending', value=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='relevance_table', ctx=Load()), attr='greater_is_better', ctx=Load())))])), Assign(targets=[Name(id='gale_shapley_steps_number', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_gale_shapley_steps_number', ctx=Load()), args=[], keywords=[keyword(arg='top_k', value=Attribute(value=Name(id='self', ctx=Load()), attr='top_k', ctx=Load())), keyword(arg='n_segments', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segment_features_ranking', ctx=Load())], keywords=[])), keyword(arg='n_features', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='feature_segments_ranking', ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='last_step_features_number', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='top_k', ctx=Load()), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='segment_features_ranking', ctx=Load())], keywords=[]))), For(target=Name(id='step', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='gale_shapley_steps_number', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gale_shapley_iteration', ctx=Load()), args=[], keywords=[keyword(arg='segment_features_ranking', value=Name(id='segment_features_ranking', ctx=Load())), keyword(arg='feature_segments_ranking', value=Name(id='feature_segments_ranking', ctx=Load()))])), If(test=Compare(left=Name(id='step', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Name(id='gale_shapley_steps_number', ctx=Load()), op=Sub(), right=Constant(value=1))]), body=[Assign(targets=[Name(id='selected_features', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_process_last_step', ctx=Load()), args=[], keywords=[keyword(arg='matches', value=Name(id='matches', ctx=Load())), keyword(arg='relevance_table', value=Name(id='relevance_table', ctx=Load())), keyword(arg='n', value=Name(id='last_step_features_number', ctx=Load())), keyword(arg='greater_is_better', value=Attribute(value=Name(id='self', ctx=Load()), attr='greater_is_better', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='selected_features', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='matches', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selected_features', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='selected_features', ctx=Load())], keywords=[])), Assign(targets=[Name(id='segment_features_ranking', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_ranking_list', ctx=Load()), args=[], keywords=[keyword(arg='segment_features_ranking', value=Name(id='segment_features_ranking', ctx=Load())), keyword(arg='features_to_drop', value=Name(id='selected_features', ctx=Load()))]))], orelse=[]), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='GaleShapleyFeatureSelectionTransform'))], decorator_list=[])], type_ignores=[])