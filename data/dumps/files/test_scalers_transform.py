Module(body=[ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='numpy.testing', asname='npt')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='MaxAbsScalerTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='MinMaxScalerTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='RobustScalerTransform')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='StandardScalerTransform')], level=0), ImportFrom(module='etna.transforms.math.sklearn', names=[alias(name='SklearnTransform')], level=0), ImportFrom(module='etna.transforms.math.sklearn', names=[alias(name='TransformMode')], level=0), ClassDef(name='DummySkTransform', bases=[], keywords=[], body=[FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='X'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Pass()], decorator_list=[]), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='X'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Name(id='X', ctx=Load()))], decorator_list=[]), FunctionDef(name='inverse_transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='X'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Name(id='X', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='DummyTransform', bases=[Name(id='SklearnTransform', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='inplace', annotation=Name(id='bool', ctx=Load())), arg(arg='out_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='mode', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='TransformMode', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True), Constant(value=None), Constant(value='per-segment')]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load())), keyword(arg='inplace', value=Name(id='inplace', ctx=Load())), keyword(arg='out_column', value=Name(id='out_column', ctx=Load())), keyword(arg='transformer', value=Call(func=Name(id='DummySkTransform', ctx=Load()), args=[], keywords=[])), keyword(arg='mode', value=Name(id='mode', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='normal_distributed_df', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), attr='from_dict', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-06-01'), Constant(value='2021-07-01')], keywords=[keyword(arg='freq', value=Constant(value='1d'))])])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), attr='from_dict', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-06-01'), Constant(value='2021-07-01')], keywords=[keyword(arg='freq', value=Constant(value='1d'))])])], keywords=[])), Assign(targets=[Name(id='generator', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='RandomState', ctx=Load()), args=[], keywords=[keyword(arg='seed', value=Constant(value=1))])), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='Moscow')), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Call(func=Attribute(value=Name(id='generator', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='loc', value=Constant(value=0)), keyword(arg='scale', value=Constant(value=10)), keyword(arg='size', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df_1', ctx=Load())], keywords=[]))])), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='exog'), ctx=Store())], value=Call(func=Attribute(value=Name(id='generator', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='loc', value=Constant(value=2)), keyword(arg='scale', value=Constant(value=10)), keyword(arg='size', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df_1', ctx=Load())], keywords=[]))])), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='Omsk')), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Call(func=Attribute(value=Name(id='generator', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='loc', value=Constant(value=5)), keyword(arg='scale', value=Constant(value=1)), keyword(arg='size', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df_2', ctx=Load())], keywords=[]))])), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='exog'), ctx=Store())], value=Call(func=Attribute(value=Name(id='generator', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='loc', value=Constant(value=3)), keyword(arg='scale', value=Constant(value=1)), keyword(arg='size', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df_2', ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Return(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='classic_df', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='test_dummy_inverse_transform_all_columns', args=arguments(posonlyargs=[], args=[arg(arg='normal_distributed_df'), arg(arg='scaler'), arg(arg='mode')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that `inverse_transform(transform(df)) == df` for all columns.')), Assign(targets=[Attribute(value=Name(id='scaler', ctx=Load()), attr='mode', ctx=Store())], value=Call(func=Name(id='TransformMode', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[])), Assign(targets=[Name(id='feature_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='scaler', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='normal_distributed_df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='inversed_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='scaler', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='feature_df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Attribute(value=Name(id='normal_distributed_df', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Name(id='inversed_df', ctx=Load()), attr='values', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='scaler'), Tuple(elts=[Call(func=Name(id='DummyTransform', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='StandardScalerTransform', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='RobustScalerTransform', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='MinMaxScalerTransform', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='MaxAbsScalerTransform', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='StandardScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='with_std', value=Constant(value=False))]), Call(func=Name(id='RobustScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='with_centering', value=Constant(value=False)), keyword(arg='with_scaling', value=Constant(value=False))]), Call(func=Name(id='MinMaxScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='feature_range', value=Tuple(elts=[Constant(value=5), Constant(value=10)], ctx=Load()))])], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='mode'), Tuple(elts=[Constant(value='macro'), Constant(value='per-segment')], ctx=Load())], keywords=[])]), FunctionDef(name='test_dummy_inverse_transform_one_column', args=arguments(posonlyargs=[], args=[arg(arg='normal_distributed_df'), arg(arg='scaler'), arg(arg='mode')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that `inverse_transform(transform(df)) == df` for one column.')), Assign(targets=[Attribute(value=Name(id='scaler', ctx=Load()), attr='mode', ctx=Store())], value=Call(func=Name(id='TransformMode', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[])), Assign(targets=[Name(id='feature_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='scaler', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='normal_distributed_df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='inversed_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='scaler', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='feature_df', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Attribute(value=Name(id='normal_distributed_df', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Name(id='inversed_df', ctx=Load()), attr='values', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='scaler'), Tuple(elts=[Call(func=Name(id='DummyTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Call(func=Name(id='StandardScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Call(func=Name(id='RobustScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Call(func=Name(id='MinMaxScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Call(func=Name(id='MaxAbsScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))]), Call(func=Name(id='StandardScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='with_std', value=Constant(value=False))]), Call(func=Name(id='RobustScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='with_centering', value=Constant(value=False)), keyword(arg='with_scaling', value=Constant(value=False))]), Call(func=Name(id='MinMaxScalerTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='feature_range', value=Tuple(elts=[Constant(value=5), Constant(value=10)], ctx=Load()))])], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='mode'), Tuple(elts=[Constant(value='macro'), Constant(value='per-segment')], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_not_inplace', args=arguments(posonlyargs=[], args=[arg(arg='normal_distributed_df'), arg(arg='scaler'), arg(arg='mode')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that inversed values the same for not inplace version.')), Assign(targets=[Name(id='not_inplace_scaler', ctx=Store())], value=Call(func=Name(id='scaler', ctx=Load()), args=[], keywords=[keyword(arg='inplace', value=Constant(value=False)), keyword(arg='mode', value=Name(id='mode', ctx=Load()))])), Assign(targets=[Name(id='columns_to_compare', ctx=Store())], value=Attribute(value=Name(id='normal_distributed_df', ctx=Load()), attr='columns', ctx=Load())), Assign(targets=[Name(id='transformed_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='not_inplace_scaler', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='normal_distributed_df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='inverse_transformed_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='not_inplace_scaler', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[Name(id='transformed_df', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='inverse_transformed_df', ctx=Load()), slice=Name(id='columns_to_compare', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='normal_distributed_df', ctx=Load())])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='scaler'), Tuple(elts=[Name(id='DummyTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load()), Name(id='MaxAbsScalerTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='mode'), Tuple(elts=[Constant(value='macro'), Constant(value='per-segment')], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_transform_with_nans', args=arguments(posonlyargs=[], args=[arg(arg='scaler'), arg(arg='mode'), arg(arg='ts_diff_endings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='preprocess', ctx=Store())], value=Call(func=Name(id='scaler', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='mode', value=Name(id='mode', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='preprocess', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='scaler'), Tuple(elts=[Name(id='DummyTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load()), Name(id='MaxAbsScalerTransform', ctx=Load()), Name(id='StandardScalerTransform', ctx=Load()), Name(id='RobustScalerTransform', ctx=Load()), Name(id='MinMaxScalerTransform', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='mode'), Tuple(elts=[Constant(value='macro'), Constant(value='per-segment')], ctx=Load())], keywords=[])])], type_ignores=[])