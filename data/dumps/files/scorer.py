Module(body=[Import(names=[alias(name='torch')]), ClassDef(name='DotProductScorer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Compare two embeddings using dot product.\n\n    Args:\n        distribution: Distribution used in the model.\n\n    Inputs:\n        - parameters1: First group of distributions with shape (..., K).\n        - parameters2: Second group of distributions with shape (..., K).\n\n    Outputs:\n        - scores: Similarities with shape (...).\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='embeddings1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='embeddings2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='products', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='embeddings1', ctx=Load()), op=Mult(), right=Name(id='embeddings2', ctx=Load())), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Return(value=Name(id='products', ctx=Load()))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Return(value=Dict(keys=[], values=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='CosineScorer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Compare two embeddings using cosine similarity.\n\n    Args:\n        distribution: Distribution used in the model.\n\n    Inputs:\n        - parameters1: First group of distributions with shape (..., K).\n        - parameters2: Second group of distributions with shape (..., K).\n\n    Outputs:\n        - scores: Similarities with shape (...).\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='embeddings1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[])], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='embeddings2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='cosines', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='embeddings1', ctx=Load()), op=Mult(), right=Name(id='embeddings2', ctx=Load())), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Return(value=Name(id='cosines', ctx=Load()))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Return(value=Dict(keys=[], values=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ExpectedCosineScorer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Compare two embeddings using expected cosine similarity.\n\n    Args:\n        distribution: Distribution used in the model.\n\n    Inputs:\n        - parameters1: First group of distributions with shape (..., K).\n        - parameters2: Second group of distributions with shape (..., K).\n\n    Outputs:\n        - scores: Similarities with shape (...).\n    ')), Assign(targets=[Name(id='SAMPLE_SIZE', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='BATCH_SIZE', ctx=Store())], value=Constant(value=128)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load())])]), body=[Assign(targets=[Name(id='batch_size', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='scores', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='batch_size', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='scores', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='self', ctx=Load()), args=[Subscript(value=Name(id='parameters1', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load()))), ctx=Load()), Subscript(value=Name(id='parameters2', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load()))), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Name(id='scores', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='shape1', ctx=Store())], value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='parameters1', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='SAMPLE_SIZE', ctx=Load()), Constant(value=1)], ctx=Load()))), Assign(targets=[Name(id='shape2', ctx=Store())], value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='parameters2', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Constant(value=1), Attribute(value=Name(id='self', ctx=Load()), attr='SAMPLE_SIZE', ctx=Load())], ctx=Load()))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='shape1', ctx=Load()), Name(id='shape2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='embeddings1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters1', ctx=Load()), Name(id='shape1', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='embeddings2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters2', ctx=Load()), Name(id='shape2', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='cosines', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='embeddings1', ctx=Load()), op=Mult(), right=Name(id='embeddings2', ctx=Load())), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='cosines', ctx=Load()), attr='mean', ctx=Load()), args=[Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=2))], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Return(value=Dict(keys=[], values=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='NegativeL2Scorer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Compare two embeddings using similarity based on euclidean distance.\n\n    Args:\n        distribution: Distribution used in the model.\n\n    Inputs:\n        - parameters1: First group of distributions with shape (..., K).\n        - parameters2: Second group of distributions with shape (..., K).\n\n    Outputs:\n        - scores: Similarities with shape (...).\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='embeddings1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='embeddings2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='distances', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='square', ctx=Load()), args=[BinOp(left=Name(id='embeddings1', ctx=Load()), op=Sub(), right=Name(id='embeddings2', ctx=Load()))], keywords=[]), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Return(value=UnaryOp(op=USub(), operand=Name(id='distances', ctx=Load())))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Return(value=Dict(keys=[], values=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='MutualLikelihoodScorer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Compare two embeddings using MLS.\n\n    Args:\n        distribution: Distribution used in the model.\n\n    Inputs:\n        - parameters1: First group of distributions with shape (..., K).\n        - parameters2: Second group of distributions with shape (..., K).\n\n    Outputs:\n        - scores: Similarities with shape (...).\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logmls', ctx=Load()), args=[Name(id='parameters1', ctx=Load()), Name(id='parameters2', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Return(value=Dict(keys=[], values=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='HIBScorer', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Compare two embeddings using expectation of L2 sigmoid with trainable scale and bias.\n\n    Scorer is used by HIB: https://arxiv.org/pdf/1810.00319.pdf\n\n    Args:\n        distribution: Distribution used in the model.\n\n    Inputs:\n        - parameters1: First group of distributions with shape (..., K).\n        - parameters2: Second group of distributions with shape (..., K).\n\n    Outputs:\n        - scores: Similarities with shape (...).\n    ')), Assign(targets=[Name(id='NUM_SAMPLES', ctx=Store())], value=Constant(value=8)), Assign(targets=[Name(id='BATCH_SIZE', ctx=Store())], value=Constant(value=128)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scale', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='ones', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load())])]), body=[Assign(targets=[Name(id='batch_size', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='scores', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='batch_size', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='scores', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='self', ctx=Load()), args=[Subscript(value=Name(id='parameters1', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load()))), ctx=Load()), Subscript(value=Name(id='parameters2', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='BATCH_SIZE', ctx=Load()))), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[Name(id='scores', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='samples1', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters1', ctx=Load()), BinOp(left=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='parameters1', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='NUM_SAMPLES', ctx=Load())], ctx=Load()))], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='samples2', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters2', ctx=Load()), BinOp(left=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='parameters2', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='NUM_SAMPLES', ctx=Load())], ctx=Load()))], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='norm1sq', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='samples1', ctx=Load()), op=Pow(), right=Constant(value=2)), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='norm2sq', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='samples2', ctx=Load()), op=Pow(), right=Constant(value=2)), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='dot', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='matmul', ctx=Load()), args=[Name(id='samples1', ctx=Load()), Call(func=Attribute(value=Name(id='samples2', ctx=Load()), attr='transpose', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])], keywords=[])), Assign(targets=[Name(id='distances', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='norm1sq', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='norm2sq', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), op=Sub(), right=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='dot', ctx=Load()))), attr='sqrt', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='scores', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='sigmoid', ctx=Load()), args=[BinOp(left=BinOp(left=UnaryOp(op=USub(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='scale', ctx=Load())), op=Mult(), right=Name(id='distances', ctx=Load())), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()))], keywords=[]), attr='mean', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=2))], ctx=Load()))])), Return(value=Name(id='scores', ctx=Load()))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Return(value=Dict(keys=[Constant(value='scorer_scale'), Constant(value='scorer_bias')], values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='scale', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[])]))], decorator_list=[])], decorator_list=[])], type_ignores=[])