Module(body=[ImportFrom(module='typing', names=[alias(name='Any')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='numpy.testing', asname='npt')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='sklearn.preprocessing', names=[alias(name='PowerTransformer')], level=0), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.transforms', names=[alias(name='AddConstTransform')], level=0), ImportFrom(module='etna.transforms.math', names=[alias(name='BoxCoxTransform')], level=0), ImportFrom(module='etna.transforms.math', names=[alias(name='YeoJohnsonTransform')], level=0), FunctionDef(name='non_positive_df', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), attr='from_dict', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-06-01'), Constant(value='2021-07-01')], keywords=[keyword(arg='freq', value=Constant(value='1d'))])])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), attr='from_dict', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-06-01'), Constant(value='2021-07-01')], keywords=[keyword(arg='freq', value=Constant(value='1d'))])])], keywords=[])), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='Moscow')), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=Constant(value=0)), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='exog'), ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='Omsk')), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='exog'), ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=7))), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Return(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='classic_df', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='positive_df', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='df_1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), attr='from_dict', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-06-01'), Constant(value='2021-07-01')], keywords=[keyword(arg='freq', value=Constant(value='1d'))])])], keywords=[])), Assign(targets=[Name(id='df_2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), attr='from_dict', ctx=Load()), args=[Dict(keys=[Constant(value='timestamp')], values=[Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='date_range', ctx=Load()), args=[Constant(value='2021-06-01'), Constant(value='2021-07-01')], keywords=[keyword(arg='freq', value=Constant(value='1d'))])])], keywords=[])), Assign(targets=[Name(id='generator', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='random', ctx=Load()), attr='RandomState', ctx=Load()), args=[], keywords=[keyword(arg='seed', value=Constant(value=1))])), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='Moscow')), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='generator', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='loc', value=Constant(value=10)), keyword(arg='scale', value=Constant(value=1)), keyword(arg='size', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df_1', ctx=Load())], keywords=[]))])], keywords=[]), op=Add(), right=Constant(value=1))), Assign(targets=[Subscript(value=Name(id='df_1', ctx=Load()), slice=Constant(value='exog'), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='generator', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='loc', value=Constant(value=15)), keyword(arg='scale', value=Constant(value=1)), keyword(arg='size', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df_1', ctx=Load())], keywords=[]))])], keywords=[]), op=Add(), right=Constant(value=1))), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='segment'), ctx=Store())], value=Constant(value='Omsk')), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='target'), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='generator', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='loc', value=Constant(value=20)), keyword(arg='scale', value=Constant(value=1)), keyword(arg='size', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df_2', ctx=Load())], keywords=[]))])], keywords=[]), op=Add(), right=Constant(value=1))), Assign(targets=[Subscript(value=Name(id='df_2', ctx=Load()), slice=Constant(value='exog'), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='generator', ctx=Load()), attr='normal', ctx=Load()), args=[], keywords=[keyword(arg='loc', value=Constant(value=4)), keyword(arg='scale', value=Constant(value=1)), keyword(arg='size', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='df_2', ctx=Load())], keywords=[]))])], keywords=[]), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='classic_df', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[List(elts=[Name(id='df_1', ctx=Load()), Name(id='df_2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='ignore_index', value=Constant(value=True))])), Return(value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='classic_df', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='test_non_positive_series_behavior', args=arguments(posonlyargs=[], args=[arg(arg='non_positive_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='mode', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check BoxCoxPreprocessing behavior in case of negative-value series.')), Assign(targets=[Name(id='preprocess', ctx=Store())], value=Call(func=Name(id='BoxCoxTransform', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mode', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='non_positive_df', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='mode'), Tuple(elts=[Constant(value='macro'), Constant(value='per-segment')], ctx=Load())], keywords=[])]), FunctionDef(name='test_transform_value_all_columns', args=arguments(posonlyargs=[], args=[arg(arg='positive_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='preprocessing_class', annotation=Name(id='Any', ctx=Load())), arg(arg='method', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check the value of transform result for all columns.')), Assign(targets=[Name(id='preprocess_none', ctx=Store())], value=Call(func=Name(id='preprocessing_class', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='preprocess_all', ctx=Store())], value=Call(func=Name(id='preprocessing_class', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='positive_df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='value_none', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess_none', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='positive_df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='value_all', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess_all', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='positive_df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='true_values', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='PowerTransformer', ctx=Load()), args=[], keywords=[keyword(arg='method', value=Name(id='method', ctx=Load()))]), attr='fit_transform', ctx=Load()), args=[Attribute(value=Name(id='positive_df', ctx=Load()), attr='values', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Attribute(value=Name(id='value_none', ctx=Load()), attr='values', ctx=Load()), Name(id='true_values', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Attribute(value=Name(id='value_all', ctx=Load()), attr='values', ctx=Load()), Name(id='true_values', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='preprocessing_class,method'), Tuple(elts=[Tuple(elts=[Name(id='BoxCoxTransform', ctx=Load()), Constant(value='box-cox')], ctx=Load()), Tuple(elts=[Name(id='YeoJohnsonTransform', ctx=Load()), Constant(value='yeo-johnson')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_transform_value_one_column', args=arguments(posonlyargs=[], args=[arg(arg='positive_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='preprocessing_class', annotation=Name(id='Any', ctx=Load())), arg(arg='method', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check the value of transform result.')), Assign(targets=[Name(id='preprocess', ctx=Store())], value=Call(func=Name(id='preprocessing_class', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target'))])), Assign(targets=[Name(id='processed_values', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='positive_df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='target_processed_values', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Name(id='processed_values', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='values', ctx=Load())), Assign(targets=[Name(id='rest_processed_values', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='processed_values', ctx=Load()), attr='drop', ctx=Load()), args=[Constant(value='target')], keywords=[keyword(arg='axis', value=Constant(value=1)), keyword(arg='level', value=Constant(value='feature'))]), attr='values', ctx=Load())), Assign(targets=[Name(id='untouched_values', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='positive_df', ctx=Load()), attr='drop', ctx=Load()), args=[Constant(value='target')], keywords=[keyword(arg='axis', value=Constant(value=1)), keyword(arg='level', value=Constant(value='feature'))]), attr='values', ctx=Load())), Assign(targets=[Name(id='true_values', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='PowerTransformer', ctx=Load()), args=[], keywords=[keyword(arg='method', value=Name(id='method', ctx=Load()))]), attr='fit_transform', ctx=Load()), args=[Attribute(value=Subscript(value=Attribute(value=Name(id='positive_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Subscript(value=Attribute(value=Name(id='pd', ctx=Load()), attr='IndexSlice', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value='target')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), attr='values', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Name(id='target_processed_values', ctx=Load()), Name(id='true_values', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='npt', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Name(id='rest_processed_values', ctx=Load()), Name(id='untouched_values', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='preprocessing_class,method'), Tuple(elts=[Tuple(elts=[Name(id='BoxCoxTransform', ctx=Load()), Constant(value='box-cox')], ctx=Load()), Tuple(elts=[Name(id='YeoJohnsonTransform', ctx=Load()), Constant(value='yeo-johnson')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_all_columns', args=arguments(posonlyargs=[], args=[arg(arg='positive_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='preprocessing_class', annotation=Name(id='Any', ctx=Load())), arg(arg='mode', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that inverse_transform rolls back transform result for all columns.')), Assign(targets=[Name(id='preprocess_none', ctx=Store())], value=Call(func=Name(id='preprocessing_class', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Name(id='mode', ctx=Load()))])), Assign(targets=[Name(id='preprocess_all', ctx=Store())], value=Call(func=Name(id='preprocessing_class', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='positive_df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='feature')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[])), keyword(arg='mode', value=Name(id='mode', ctx=Load()))])), Assign(targets=[Name(id='transformed_target_none', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess_none', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='positive_df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='transformed_target_all', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess_all', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='positive_df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='inversed_target_none', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess_none', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='transformed_target_none', ctx=Load()))])), Assign(targets=[Name(id='inversed_target_all', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess_all', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='transformed_target_all', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Attribute(value=Name(id='inversed_target_none', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Name(id='positive_df', ctx=Load()), attr='values', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Attribute(value=Name(id='inversed_target_all', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Name(id='positive_df', ctx=Load()), attr='values', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='preprocessing_class'), Tuple(elts=[Name(id='BoxCoxTransform', ctx=Load()), Name(id='YeoJohnsonTransform', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='mode'), Tuple(elts=[Constant(value='macro'), Constant(value='per-segment')], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_one_column', args=arguments(posonlyargs=[], args=[arg(arg='positive_df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='preprocessing_class', annotation=Name(id='Any', ctx=Load())), arg(arg='mode', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that inverse_transform rolls back transform result for one column.')), Assign(targets=[Name(id='preprocess', ctx=Store())], value=Call(func=Name(id='preprocessing_class', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='mode', value=Name(id='mode', ctx=Load()))])), Assign(targets=[Name(id='transformed_target', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='positive_df', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='inversed_target', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='transformed_target', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Attribute(value=Name(id='inversed_target', ctx=Load()), attr='values', ctx=Load()), Attribute(value=Name(id='positive_df', ctx=Load()), attr='values', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='preprocessing_class'), Tuple(elts=[Name(id='BoxCoxTransform', ctx=Load()), Name(id='YeoJohnsonTransform', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='mode'), Tuple(elts=[Constant(value='macro'), Constant(value='per-segment')], ctx=Load())], keywords=[])]), FunctionDef(name='test_fit_transform_with_nans', args=arguments(posonlyargs=[], args=[arg(arg='preprocessing_class'), arg(arg='mode'), arg(arg='ts_diff_endings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='preprocess', ctx=Store())], value=Call(func=Name(id='preprocessing_class', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='mode', value=Name(id='mode', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='fit_transform', ctx=Load()), args=[BinOp(left=List(elts=[Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='value', value=Constant(value=100))])], ctx=Load()), op=Add(), right=List(elts=[Name(id='preprocess', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='preprocessing_class'), Tuple(elts=[Name(id='BoxCoxTransform', ctx=Load()), Name(id='YeoJohnsonTransform', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='mode'), Tuple(elts=[Constant(value='macro'), Constant(value='per-segment')], ctx=Load())], keywords=[])])], type_ignores=[])