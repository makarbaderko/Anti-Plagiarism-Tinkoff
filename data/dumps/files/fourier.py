Module(body=[Import(names=[alias(name='math')]), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.transforms.base', names=[alias(name='FutureMixin')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ClassDef(name='FourierTransform', bases=[Name(id='Transform', ctx=Load()), Name(id='FutureMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Adds fourier features to the dataset.\n\n    Notes\n    -----\n    To understand how transform works we recommend:\n    `Fourier series <https://otexts.com/fpp2/useful-predictors.html#fourier-series>`_.\n\n    * Parameter ``period`` is responsible for the seasonality we want to capture.\n    * Parameters ``order`` and ``mods`` define which harmonics will be used.\n\n    Parameter ``order`` is a more user-friendly version of ``mods``.\n    For example, ``order=2`` can be represented as ``mods=[1, 2, 3, 4]`` if ``period`` > 4 and\n    as ``mods=[1, 2, 3]`` if 3 <= ``period`` <= 4.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='period', annotation=Name(id='float', ctx=Load())), arg(arg='order', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='mods', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='out_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="Create instance of FourierTransform.\n\n        Parameters\n        ----------\n        period:\n            the period of the seasonality to capture in frequency units of time series;\n\n            ``period`` should be >= 2\n        order:\n            upper order of Fourier components to include;\n\n            ``order`` should be >= 1 and <= ceil(period/2))\n        mods:\n            alternative and precise way of defining which harmonics will be used,\n            for example ``mods=[1, 3, 4]`` means that sin of the first order\n            and sin and cos of the second order will be used;\n\n            ``mods`` should be >= 1 and < period\n        out_column:\n\n            * if set, name of added column, the final name will be '{out_columnt}_{mod}';\n\n            * if don't set, name will be ``transform.__repr__()``,\n              repr will be made for transform that creates exactly this column\n\n        Raises\n        ------\n        ValueError:\n            if period < 2\n        ValueError:\n            if both or none of order, mods is set\n        ValueError:\n            if order is < 1 or > ceil(period/2)\n        ValueError:\n            if at least one mod is < 1 or >= period\n        ")), If(test=Compare(left=Name(id='period', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Period should be at least 2')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='period', ctx=Store())], value=Name(id='period', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='mods', ctx=Store()), annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), simple=0), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='order', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='mods', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='order', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), Compare(left=Name(id='order', ctx=Load()), ops=[Gt()], comparators=[Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='ceil', ctx=Load()), args=[BinOp(left=Name(id='period', ctx=Load()), op=Div(), right=Constant(value=2))], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Order should be within [1, ceil(period/2)] range')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mods', ctx=Store())], value=ListComp(elt=Name(id='mod', ctx=Load()), generators=[comprehension(target=Name(id='mod', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='order', ctx=Load())), op=Add(), right=Constant(value=1))], keywords=[]), ifs=[Compare(left=Name(id='mod', ctx=Load()), ops=[Lt()], comparators=[Name(id='period', ctx=Load())])], is_async=0)]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='mods', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='order', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='min', ctx=Load()), args=[Name(id='mods', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='max', ctx=Load()), args=[Name(id='mods', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Name(id='period', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Every mod should be within [1, int(period)) range')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mods', ctx=Store())], value=Name(id='mods', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='There should be exactly one option set: order or mods')], keywords=[]))])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='order', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_column', ctx=Load()))], decorator_list=[]), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fit method does nothing and is kept for compatibility.\n\n        Parameters\n        ----------\n        df:\n            dataframe with data.\n\n        Returns\n        -------\n        result: FourierTransform\n        ')), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='FourierTransform')), FunctionDef(name='_get_column_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mod', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Call(func=Attribute(value=Call(func=Name(id='FourierTransform', ctx=Load()), args=[], keywords=[keyword(arg='period', value=Attribute(value=Name(id='self', ctx=Load()), attr='period', ctx=Load())), keyword(arg='mods', value=List(elts=[Name(id='mod', ctx=Load())], ctx=Load()))]), attr='__repr__', ctx=Load()), args=[], keywords=[]), conversion=-1)]))], orelse=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), conversion=-1), Constant(value='_'), FormattedValue(value=Name(id='mod', ctx=Load()), conversion=-1)]))])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_construct_answer', args=arguments(posonlyargs=[], args=[arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='features', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dataframes', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='seg', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='df', ctx=Load()), attr='columns', ctx=Load()), attr='get_level_values', ctx=Load()), args=[Constant(value='segment')], keywords=[]), attr='unique', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='tmp', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='seg', ctx=Load()), ctx=Load()), attr='join', ctx=Load()), args=[Name(id='features', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_idx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tmp', ctx=Load()), attr='columns', ctx=Load()), attr='to_frame', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_idx', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Constant(value='segment'), Name(id='seg', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tmp', ctx=Load()), attr='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='MultiIndex', ctx=Load()), attr='from_frame', ctx=Load()), args=[Name(id='_idx', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='dataframes', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='tmp', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='concat', ctx=Load()), args=[Name(id='dataframes', ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=1))]), attr='sort_index', ctx=Load()), args=[], keywords=[keyword(arg='axis', value=Constant(value=1))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='columns', ctx=Load()), attr='names', ctx=Store())], value=List(elts=[Constant(value='segment'), Constant(value='feature')], ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add harmonics to the dataset.\n\n        Parameters\n        ----------\n        df:\n            dataframe with data to transform.\n\n        Returns\n        -------\n        result: pd.Dataframe\n            transformed dataframe\n        ')), Assign(targets=[Name(id='features', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Attribute(value=Name(id='df', ctx=Load()), attr='index', ctx=Load()))])), Assign(targets=[Name(id='elapsed', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='features', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='period', ctx=Load()))), For(target=Name(id='mod', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='mods', ctx=Load()), body=[Assign(targets=[Name(id='order', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='mod', ctx=Load()), op=Add(), right=Constant(value=1)), op=FloorDiv(), right=Constant(value=2))), Assign(targets=[Name(id='is_cos', ctx=Store())], value=Compare(left=BinOp(left=Name(id='mod', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)])), Assign(targets=[Subscript(value=Name(id='features', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_name', ctx=Load()), args=[Name(id='mod', ctx=Load())], keywords=[]), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='order', ctx=Load())), op=Mult(), right=Name(id='elapsed', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Constant(value=2)), op=Mult(), right=Name(id='is_cos', ctx=Load())))], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_construct_answer', ctx=Load()), args=[Name(id='df', ctx=Load()), Name(id='features', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], decorator_list=[])], type_ignores=[])