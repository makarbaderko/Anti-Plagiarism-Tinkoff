Module(body=[Import(names=[alias(name='os')]), ImportFrom(module='common', names=[alias(name='Dataset'), alias(name='imread')], level=1), ClassDef(name='InShopClothesDataset', bases=[Name(id='Dataset', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='In-shop clothes retrieval dataset.\n\n    Test part of the dataset is obtained by joining gallery and query samples.\n\n    See: https://mmlab.ie.cuhk.edu.hk/projects/DeepFashion/InShopRetrieval.html\n\n    Args:\n        root: Dataset root (with img subfolder and list_eval_partition.txt).\n        train: Whether to use train or test part of the dataset.\n\n    ')), Assign(targets=[Name(id='IMG_ROOT', ctx=Store())], value=Constant(value='img')), Assign(targets=[Name(id='LABELS', ctx=Store())], value=Constant(value='list_eval_partition.txt')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='root')], kwonlyargs=[arg(arg='train')], kw_defaults=[Constant(value=True)], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_image_paths', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='labels', ctx=Store())], value=List(elts=[], ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='LABELS', ctx=Load())], keywords=[])], keywords=[]), optional_vars=Name(id='fp', ctx=Store()))], body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Constant(value='52712')]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Unexpected labels file. Make sure you use original labels file.')], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Constant(value='image_name item_id evaluation_status')]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Unexpected labels file. Make sure you use original labels file.')], keywords=[]))], orelse=[]), For(target=Name(id='line', ctx=Store()), iter=Name(id='fp', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='path', ctx=Store()), Name(id='label', ctx=Store()), Name(id='part', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='train')]), UnaryOp(op=Not(), operand=Name(id='train', ctx=Load()))]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='part', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='train')]), Name(id='train', ctx=Load())]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_image_paths', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='part_labels', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='label_mapping', ctx=Store())], value=DictComp(key=Name(id='label', ctx=Load()), value=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='label', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='part_labels', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_image_labels', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='label_mapping', ctx=Load()), slice=Name(id='label', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='label', ctx=Store()), iter=Name(id='labels', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='num_classes', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_image_labels', ctx=Load())], keywords=[])], keywords=[])), Assert(test=IfExp(test=Name(id='train', ctx=Load()), body=Compare(left=Name(id='num_classes', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3997)]), orelse=Compare(left=Name(id='num_classes', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3985)]))), Assert(test=Compare(left=Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_image_labels', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])), Assert(test=Compare(left=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_image_labels', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Name(id='num_classes', ctx=Load()), op=Sub(), right=Constant(value=1))]))], decorator_list=[]), FunctionDef(name='classification', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether dataset is classification or matching.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='openset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether dataset is for open-set or closed-set classification.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='labels', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get dataset labels array.\n\n        Labels are integers in the range [0, N-1].\n\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_image_labels', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get element of the dataset.\n\n        Returns tuple (image, label).\n\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_image_paths', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='label', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_image_labels', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='image', ctx=Store())], value=Call(func=Name(id='imread', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='image', ctx=Load()), Name(id='label', ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])