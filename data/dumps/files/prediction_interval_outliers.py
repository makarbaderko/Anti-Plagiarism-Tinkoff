Module(body=[ImportFrom(module='copy', names=[alias(name='deepcopy')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.models', names=[alias(name='ProphetModel')], level=0), ImportFrom(module='etna.models', names=[alias(name='SARIMAXModel')], level=0)], orelse=[]), FunctionDef(name='create_ts_by_column', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='column', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create TSDataset based on original ts with selecting only column in each segment and setting it to target.\n\n    Parameters\n    ----------\n    ts:\n        dataset with timeseries data\n    column:\n        column to select in each.\n\n    Returns\n    -------\n    result: TSDataset\n        dataset with selected column.\n    ')), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), Assign(targets=[Name(id='new_df', ctx=Store())], value=Subscript(value=Name(id='ts', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), List(elts=[Name(id='column', ctx=Load())], ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='new_columns_tuples', ctx=Store())], value=ListComp(elt=Tuple(elts=[Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value='target')], ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='new_df', ctx=Load()), attr='columns', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='new_df', ctx=Load()), attr='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pd', ctx=Load()), attr='MultiIndex', ctx=Load()), attr='from_tuples', ctx=Load()), args=[Name(id='new_columns_tuples', ctx=Load())], keywords=[keyword(arg='names', value=Attribute(value=Attribute(value=Name(id='new_df', ctx=Load()), attr='columns', ctx=Load()), attr='names', ctx=Load()))])), Return(value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='new_df', ctx=Load())], keywords=[keyword(arg='freq', value=Attribute(value=Name(id='ts', ctx=Load()), attr='freq', ctx=Load()))]))], decorator_list=[], returns=Constant(value='TSDataset')), FunctionDef(name='get_anomalies_prediction_interval', args=arguments(posonlyargs=[], args=[arg(arg='ts', annotation=Constant(value='TSDataset')), arg(arg='model', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='ProphetModel'), ctx=Load()), Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='SARIMAXModel'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='interval_width', annotation=Name(id='float', ctx=Load())), arg(arg='in_column', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='model_params'), defaults=[Constant(value=0.95), Constant(value='target')]), body=[Expr(value=Constant(value='\n    Get point outliers in time series using prediction intervals (estimation model-based method).\n\n    Outliers are all points out of the prediction interval predicted with the model.\n\n    Parameters\n    ----------\n    ts:\n        dataset with timeseries data(should contains all the necessary features).\n    model:\n        model for prediction interval estimation.\n    interval_width:\n        the significance level for the prediction interval. By default a 95% prediction interval is taken.\n    in_column:\n        column to analyze\n\n        * If it is set to "target", then all data will be used for prediction.\n\n        * Otherwise, only column data will be used.\n\n    Returns\n    -------\n    :\n        dict of outliers in format {segment: [outliers_timestamps]}.\n\n    Notes\n    -----\n    For not "target" column only column data will be used for learning.\n    ')), If(test=Compare(left=Name(id='in_column', ctx=Load()), ops=[Eq()], comparators=[Constant(value='target')]), body=[Assign(targets=[Name(id='ts_inner', ctx=Store())], value=Name(id='ts', ctx=Load()))], orelse=[Assign(targets=[Name(id='ts_inner', ctx=Store())], value=Call(func=Name(id='create_ts_by_column', ctx=Load()), args=[Name(id='ts', ctx=Load()), Name(id='in_column', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='outliers_per_segment', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='time_points', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ts', ctx=Load()), attr='index', ctx=Load()), attr='values', ctx=Load())], keywords=[])), Assign(targets=[Name(id='model_instance', ctx=Store())], value=Call(func=Name(id='model', ctx=Load()), args=[], keywords=[keyword(value=Name(id='model_params', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='model_instance', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='ts_inner', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='lower_p', ctx=Store()), Name(id='upper_p', ctx=Store())], ctx=Store())], value=List(elts=[BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='interval_width', ctx=Load())), op=Div(), right=Constant(value=2)), BinOp(left=BinOp(left=Constant(value=1), op=Add(), right=Name(id='interval_width', ctx=Load())), op=Div(), right=Constant(value=2))], ctx=Load())), Assign(targets=[Name(id='prediction_interval', ctx=Store())], value=Call(func=Attribute(value=Name(id='model_instance', ctx=Load()), attr='predict', ctx=Load()), args=[Call(func=Name(id='deepcopy', ctx=Load()), args=[Name(id='ts_inner', ctx=Load())], keywords=[])], keywords=[keyword(arg='prediction_interval', value=Constant(value=True)), keyword(arg='quantiles', value=List(elts=[Name(id='lower_p', ctx=Load()), Name(id='upper_p', ctx=Load())], ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='ts_inner', ctx=Load()), attr='segments', ctx=Load()), body=[Assign(targets=[Name(id='predicted_segment_slice', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='prediction_interval', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='actual_segment_slice', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='ts_inner', ctx=Load()), slice=Tuple(elts=[Slice(), Name(id='segment', ctx=Load()), Slice()], ctx=Load()), ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='anomalies_mask', ctx=Store())], value=BinOp(left=Compare(left=Subscript(value=Name(id='actual_segment_slice', ctx=Load()), slice=Constant(value='target'), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='predicted_segment_slice', ctx=Load()), slice=JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Name(id='upper_p', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.4g')]))]), ctx=Load())]), op=BitOr(), right=Compare(left=Subscript(value=Name(id='actual_segment_slice', ctx=Load()), slice=Constant(value='target'), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='predicted_segment_slice', ctx=Load()), slice=JoinedStr(values=[Constant(value='target_'), FormattedValue(value=Name(id='lower_p', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.4g')]))]), ctx=Load())]))), Assign(targets=[Subscript(value=Name(id='outliers_per_segment', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Name(id='time_points', ctx=Load()), slice=Name(id='anomalies_mask', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='outliers_per_segment', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='pd', ctx=Load()), attr='Timestamp', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])