Module(body=[Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='torchvision.datasets', names=[alias(name='MNIST')], level=0), ImportFrom(module='common', names=[alias(name='Dataset'), alias(name='DatasetWrapper')], level=1), ImportFrom(module='transform', names=[alias(name='MergedDataset'), alias(name='split_classes')], level=1), ClassDef(name='MnistDataset', bases=[Name(id='Dataset', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='MNIST dataset class.\n\n    Args:\n        root: Dataset root.\n        train: Whether to use train or val part of the dataset.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='root'), arg(arg='train'), arg(arg='download')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=True)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_dataset', ctx=Store())], value=Call(func=Name(id='MNIST', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Name(id='train', ctx=Load())), keyword(arg='download', value=Name(id='download', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='classification', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether dataset is classification or matching.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='openset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether dataset is for open-set or closed-set classification.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='labels', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get dataset labels array.\n\n        Labels are integers in the range [0, N-1], where N is number of classes\n\n        ')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dataset', ctx=Load()), attr='targets', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get element of the dataset.\n\n        Returns tuple (image, label).\n\n        ')), Assign(targets=[Tuple(elts=[Name(id='image', ctx=Store()), Name(id='label', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dataset', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())), Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='image', ctx=Load()), attr='convert', ctx=Load()), args=[Constant(value='RGB')], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='MnistSplitClassesDataset', bases=[Name(id='DatasetWrapper', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='MNIST dataset with different classes in train and test sets.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='root')], kwonlyargs=[arg(arg='train'), arg(arg='interleave')], kw_defaults=[Constant(value=True), Constant(value=False)], defaults=[]), body=[Assign(targets=[Name(id='merged', ctx=Store())], value=Call(func=Name(id='MergedDataset', ctx=Load()), args=[Call(func=Name(id='MnistDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=True))]), Call(func=Name(id='MnistDataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='trainset', ctx=Store()), Name(id='testset', ctx=Store())], ctx=Store())], value=Call(func=Name(id='split_classes', ctx=Load()), args=[Name(id='merged', ctx=Load())], keywords=[keyword(arg='interleave', value=Name(id='interleave', ctx=Load()))])), If(test=Name(id='train', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='trainset', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='testset', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='openset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether dataset is for open-set or closed-set classification.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[])], type_ignores=[])