Module(body=[ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='etna.transforms.base', names=[alias(name='FutureMixin')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='PerSegmentWrapper')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='Transform')], level=0), ImportFrom(module='etna.transforms.decomposition.base_change_points', names=[alias(name='BaseChangePointsModelAdapter')], level=0), ImportFrom(module='etna.transforms.decomposition.base_change_points', names=[alias(name='TTimestampInterval')], level=0), ClassDef(name='_OneSegmentChangePointsSegmentationTransform', bases=[Name(id='Transform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='_OneSegmentChangePointsSegmentationTransform make label encoder to change points.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='out_column', annotation=Name(id='str', ctx=Load())), arg(arg='change_point_model', annotation=Name(id='BaseChangePointsModelAdapter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Init _OneSegmentChangePointsSegmentationTransform.\n        Parameters\n        ----------\n        in_column:\n            name of column to apply transform to\n        out_column:\n            result column name. If not given use ``self.__repr__()``\n        change_point_model:\n            model to get change points\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_column', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='intervals', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TTimestampInterval', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='change_point_model', ctx=Store())], value=Name(id='change_point_model', ctx=Load()))], decorator_list=[]), FunctionDef(name='_fill_per_interval', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='series', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fill values in resulting series.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='intervals', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Transform is not fitted! Fit the Transform before calling transform method.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Attribute(value=Name(id='series', ctx=Load()), attr='index', ctx=Load()))])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='interval', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='intervals', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='tmp_series', ctx=Store())], value=Subscript(value=Name(id='series', ctx=Load()), slice=Slice(lower=Subscript(value=Name(id='interval', ctx=Load()), slice=Constant(value=0), ctx=Load()), upper=Subscript(value=Name(id='interval', ctx=Load()), slice=Constant(value=1), ctx=Load())), ctx=Load())), If(test=Attribute(value=Name(id='tmp_series', ctx=Load()), attr='empty', ctx=Load()), body=[Continue()], orelse=[]), Assign(targets=[Subscript(value=Name(id='result_series', ctx=Load()), slice=Attribute(value=Name(id='tmp_series', ctx=Load()), attr='index', ctx=Load()), ctx=Store())], value=Name(id='k', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='result_series', ctx=Load()), attr='astype', ctx=Load()), args=[Name(id='int', ctx=Load())], keywords=[]), attr='astype', ctx=Load()), args=[Constant(value='category')], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='Series', ctx=Load())), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fit _OneSegmentChangePointsSegmentationTransform: find change points in ``df`` and build intervals.\n\n        Parameters\n        ----------\n        df:\n            one segment dataframe indexed with timestamp\n\n        Returns\n        -------\n        :\n            instance with trained change points\n\n        Raises\n        ------\n        ValueError\n            If series contains NaNs in the middle\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='intervals', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='change_point_model', ctx=Load()), attr='get_change_points_intervals', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='df', ctx=Load())), keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()))])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='_OneSegmentChangePointsSegmentationTransform')), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Split df to intervals.\n\n        Parameters\n        ----------\n        df:\n            one segment dataframe\n\n        Returns\n        -------\n        df:\n            df with new column\n        ')), Assign(targets=[Name(id='series', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='result_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fill_per_interval', ctx=Load()), args=[], keywords=[keyword(arg='series', value=Name(id='series', ctx=Load()))])), Assign(targets=[Subscript(value=Attribute(value=Name(id='df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Slice(), Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load())], ctx=Load()), ctx=Store())], value=Name(id='result_series', ctx=Load())), Return(value=Name(id='df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], decorator_list=[]), ClassDef(name='ChangePointsSegmentationTransform', bases=[Name(id='PerSegmentWrapper', ctx=Load()), Name(id='FutureMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ChangePointsSegmentationTransform make label encoder to change points.\n\n    Warning\n    -------\n    This transform can suffer from look-ahead bias. For transforming data at some timestamp\n    it uses information from the whole train part.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='change_point_model', annotation=Name(id='BaseChangePointsModelAdapter', ctx=Load())), arg(arg='out_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Init ChangePointsSegmentationTransform.\n\n        Parameterss\n        ----------\n        in_column:\n            name of column to fit change point model\n        out_column:\n            result column name. If not given use ``self.__repr__()``\n        change_point_model:\n            model to get change points\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='change_point_model', ctx=Store())], value=Name(id='change_point_model', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Call(func=Name(id='_OneSegmentChangePointsSegmentationTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(arg='out_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load())), keyword(arg='change_point_model', value=Attribute(value=Name(id='self', ctx=Load()), attr='change_point_model', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])