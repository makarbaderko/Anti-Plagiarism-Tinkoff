Module(body=[Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='pandas', asname='pd')]), Import(names=[alias(name='pytest')]), ImportFrom(module='etna.transforms.math', names=[alias(name='AddConstTransform')], level=0), FunctionDef(name='test_addconstpreproc_value', args=arguments(posonlyargs=[], args=[arg(arg='example_df_', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='value', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check the value of transform result')), Assign(targets=[Name(id='preprocess', ctx=Store())], value=Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='value', value=Name(id='value', ctx=Load())), keyword(arg='inplace', value=Constant(value=True))])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='example_df_', ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=List(elts=[Constant(value='segment_1'), Constant(value='segment_2')], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load()), BinOp(left=Subscript(value=Subscript(value=Name(id='example_df_', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target_no_change'), ctx=Load()), op=Add(), right=Name(id='value', ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='value'), Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=3.14)), Constant(value=6), Constant(value=9.99)], ctx=Load())], keywords=[])]), FunctionDef(name='test_addconstpreproc_out_column_naming', args=arguments(posonlyargs=[], args=[arg(arg='example_df_', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='out_column', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check generated name of new column')), Assign(targets=[Name(id='preprocess', ctx=Store())], value=Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='value', value=Constant(value=4.2)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Name(id='out_column', ctx=Load()))])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='example_df_', ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=List(elts=[Constant(value='segment_1'), Constant(value='segment_2')], ctx=Load()), body=[If(test=Name(id='out_column', ctx=Load()), body=[Assert(test=Compare(left=Name(id='out_column', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())]))], orelse=[Assert(test=Compare(left=Call(func=Attribute(value=Name(id='preprocess', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())]))])], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='out_column'), Tuple(elts=[Constant(value=None), Constant(value='result')], ctx=Load())], keywords=[])]), FunctionDef(name='test_addconstpreproc_value_out_column', args=arguments(posonlyargs=[], args=[arg(arg='example_df_', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check the value of transform result in case of given out column')), Assign(targets=[Name(id='out_column', ctx=Store())], value=Constant(value='result')), Assign(targets=[Name(id='preprocess', ctx=Store())], value=Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='value', value=Constant(value=5.5)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Name(id='out_column', ctx=Load()))])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='example_df_', ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=List(elts=[Constant(value='segment_1'), Constant(value='segment_2')], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Name(id='out_column', ctx=Load()), ctx=Load()), BinOp(left=Subscript(value=Subscript(value=Name(id='example_df_', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target_no_change'), ctx=Load()), op=Add(), right=Constant(value=5.5))], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_inverse_transform', args=arguments(posonlyargs=[], args=[arg(arg='example_df_', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), arg(arg='value', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that inverse_transform rolls back transform result')), Assign(targets=[Name(id='preprocess', ctx=Store())], value=Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='value', value=Name(id='value', ctx=Load()))])), Assign(targets=[Name(id='transformed_target', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Call(func=Attribute(value=Name(id='example_df_', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='inversed', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='transformed_target', ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=List(elts=[Constant(value='segment_1'), Constant(value='segment_2')], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='testing', ctx=Load()), attr='assert_array_almost_equal', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='inversed', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target'), ctx=Load()), Subscript(value=Subscript(value=Name(id='example_df_', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), slice=Constant(value='target_no_change'), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='value'), Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=5)), Constant(value=3.14), Constant(value=33)], ctx=Load())], keywords=[])]), FunctionDef(name='test_inverse_transform_out_column', args=arguments(posonlyargs=[], args=[arg(arg='example_df_', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that inverse_transform rolls back transform result in case of given out_column')), Assign(targets=[Name(id='out_column', ctx=Store())], value=Constant(value='test')), Assign(targets=[Name(id='preprocess', ctx=Store())], value=Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='value', value=Constant(value=10.1)), keyword(arg='inplace', value=Constant(value=False)), keyword(arg='out_column', value=Name(id='out_column', ctx=Load()))])), Assign(targets=[Name(id='transformed_target', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess', ctx=Load()), attr='fit_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='example_df_', ctx=Load()))])), Assign(targets=[Name(id='inversed', ctx=Store())], value=Call(func=Attribute(value=Name(id='preprocess', ctx=Load()), attr='inverse_transform', ctx=Load()), args=[], keywords=[keyword(arg='df', value=Name(id='transformed_target', ctx=Load()))])), For(target=Name(id='segment', ctx=Store()), iter=List(elts=[Constant(value='segment_1'), Constant(value='segment_2')], ctx=Load()), body=[Assert(test=Compare(left=Name(id='out_column', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='inversed', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_fit_transform_with_nans', args=arguments(posonlyargs=[], args=[arg(arg='ts_diff_endings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='transform', ctx=Store())], value=Call(func=Name(id='AddConstTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Constant(value='target')), keyword(arg='value', value=Constant(value=10))])), Expr(value=Call(func=Attribute(value=Name(id='ts_diff_endings', ctx=Load()), attr='fit_transform', ctx=Load()), args=[List(elts=[Name(id='transform', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])