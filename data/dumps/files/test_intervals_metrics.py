Module(body=[Import(names=[alias(name='pytest')]), ImportFrom(module='etna.datasets', names=[alias(name='TSDataset')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='Coverage')], level=0), ImportFrom(module='etna.metrics', names=[alias(name='Width')], level=0), FunctionDef(name='tsdataset_with_zero_width_quantiles', args=arguments(posonlyargs=[], args=[arg(arg='example_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts_train', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='example_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts_train', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='ts_train', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='H'))])), Assign(targets=[Subscript(value=Name(id='example_df', ctx=Load()), slice=Constant(value='target_0.025'), ctx=Store())], value=Subscript(value=Name(id='example_df', ctx=Load()), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Subscript(value=Name(id='example_df', ctx=Load()), slice=Constant(value='target_0.975'), ctx=Store())], value=Subscript(value=Name(id='example_df', ctx=Load()), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='ts_test', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='example_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts_test', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='ts_test', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='H'))])), Return(value=Tuple(elts=[Name(id='ts_train', ctx=Load()), Name(id='ts_test', ctx=Load())], ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='tsdataset_with_differnt_width_and_shifted_quantiles', args=arguments(posonlyargs=[], args=[arg(arg='example_df')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts_train', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='example_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts_train', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='ts_train', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='H'))])), Assign(targets=[Subscript(value=Name(id='example_df', ctx=Load()), slice=Constant(value='target_0.025'), ctx=Store())], value=Subscript(value=Name(id='example_df', ctx=Load()), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Subscript(value=Name(id='example_df', ctx=Load()), slice=Constant(value='target_0.975'), ctx=Store())], value=Subscript(value=Name(id='example_df', ctx=Load()), slice=Constant(value='target'), ctx=Load())), Assign(targets=[Name(id='segment_one_index', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='example_df', ctx=Load()), slice=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Attribute(value=Name(id='x', ctx=Load()), attr='segment', ctx=Load()), ops=[Eq()], comparators=[Constant(value='segment_1')])), ctx=Load()), attr='index', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='example_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='segment_one_index', ctx=Load()), Constant(value='target_0.025')], ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='example_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='segment_one_index', ctx=Load()), Constant(value='target_0.025')], ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Subscript(value=Attribute(value=Name(id='example_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='segment_one_index', ctx=Load()), Constant(value='target_0.975')], ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='example_df', ctx=Load()), attr='loc', ctx=Load()), slice=Tuple(elts=[Name(id='segment_one_index', ctx=Load()), Constant(value='target_0.975')], ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='ts_test', ctx=Store())], value=Call(func=Attribute(value=Name(id='TSDataset', ctx=Load()), attr='to_dataset', ctx=Load()), args=[Name(id='example_df', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ts_test', ctx=Store())], value=Call(func=Name(id='TSDataset', ctx=Load()), args=[Name(id='ts_test', ctx=Load())], keywords=[keyword(arg='freq', value=Constant(value='H'))])), Return(value=Tuple(elts=[Name(id='ts_train', ctx=Load()), Name(id='ts_test', ctx=Load())], ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_width_metric_with_zero_width_quantiles', args=arguments(posonlyargs=[], args=[arg(arg='tsdataset_with_zero_width_quantiles')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='ts_train', ctx=Store()), Name(id='ts_test', ctx=Store())], ctx=Store())], value=Name(id='tsdataset_with_zero_width_quantiles', ctx=Load())), Assign(targets=[Name(id='expected_metric', ctx=Store())], value=Constant(value=0.0)), Assign(targets=[Name(id='width_metric', ctx=Store())], value=Call(func=Call(func=Name(id='Width', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Constant(value='per-segment'))]), args=[Name(id='ts_train', ctx=Load()), Name(id='ts_test', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Name(id='width_metric', ctx=Load()), body=[Assert(test=Compare(left=Subscript(value=Name(id='width_metric', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_metric', ctx=Load())]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_width_metric_with_differnt_width_and_shifted_quantiles', args=arguments(posonlyargs=[], args=[arg(arg='tsdataset_with_differnt_width_and_shifted_quantiles')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='ts_train', ctx=Store()), Name(id='ts_test', ctx=Store())], ctx=Store())], value=Name(id='tsdataset_with_differnt_width_and_shifted_quantiles', ctx=Load())), Assign(targets=[Name(id='expected_metric', ctx=Store())], value=Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2')], values=[Constant(value=1.0), Constant(value=0.0)])), Assign(targets=[Name(id='width_metric', ctx=Store())], value=Call(func=Call(func=Name(id='Width', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Constant(value='per-segment'))]), args=[Name(id='ts_train', ctx=Load()), Name(id='ts_test', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Name(id='width_metric', ctx=Load()), body=[Assert(test=Compare(left=Subscript(value=Name(id='width_metric', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='expected_metric', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_coverage_metric_with_differnt_width_and_shifted_quantiles', args=arguments(posonlyargs=[], args=[arg(arg='tsdataset_with_differnt_width_and_shifted_quantiles')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='ts_train', ctx=Store()), Name(id='ts_test', ctx=Store())], ctx=Store())], value=Name(id='tsdataset_with_differnt_width_and_shifted_quantiles', ctx=Load())), Assign(targets=[Name(id='expected_metric', ctx=Store())], value=Dict(keys=[Constant(value='segment_1'), Constant(value='segment_2')], values=[Constant(value=0.0), Constant(value=1.0)])), Assign(targets=[Name(id='coverage_metric', ctx=Store())], value=Call(func=Call(func=Name(id='Coverage', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Constant(value='per-segment'))]), args=[Name(id='ts_train', ctx=Load()), Name(id='ts_test', ctx=Load())], keywords=[])), For(target=Name(id='segment', ctx=Store()), iter=Name(id='coverage_metric', ctx=Load()), body=[Assert(test=Compare(left=Subscript(value=Name(id='coverage_metric', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='expected_metric', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load())]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_using_not_presented_quantiles', args=arguments(posonlyargs=[], args=[arg(arg='metric'), arg(arg='tsdataset_with_zero_width_quantiles')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='ts_train', ctx=Store()), Name(id='ts_test', ctx=Store())], ctx=Store())], value=Name(id='tsdataset_with_zero_width_quantiles', ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='AssertionError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='Quantile .* is not presented in tsdataset.'))]))], body=[Assign(targets=[Name(id='_', ctx=Store())], value=Call(func=Name(id='metric', ctx=Load()), args=[Name(id='ts_train', ctx=Load()), Name(id='ts_test', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='metric'), List(elts=[Call(func=Name(id='Coverage', ctx=Load()), args=[], keywords=[keyword(arg='quantiles', value=Tuple(elts=[Constant(value=0.1), Constant(value=0.3)], ctx=Load()))]), Call(func=Name(id='Width', ctx=Load()), args=[], keywords=[keyword(arg='quantiles', value=Tuple(elts=[Constant(value=0.1), Constant(value=0.3)], ctx=Load()))])], ctx=Load())], keywords=[])]), FunctionDef(name='test_metrics_greater_is_better', args=arguments(posonlyargs=[], args=[arg(arg='metric'), arg(arg='greater_is_better')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='metric', ctx=Load()), attr='greater_is_better', ctx=Load()), ops=[Eq()], comparators=[Name(id='greater_is_better', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='metric, greater_is_better'), Tuple(elts=[Tuple(elts=[Call(func=Name(id='Coverage', ctx=Load()), args=[], keywords=[keyword(arg='quantiles', value=Tuple(elts=[Constant(value=0.1), Constant(value=0.3)], ctx=Load()))]), Constant(value=None)], ctx=Load()), Tuple(elts=[Call(func=Name(id='Width', ctx=Load()), args=[], keywords=[keyword(arg='quantiles', value=Tuple(elts=[Constant(value=0.1), Constant(value=0.3)], ctx=Load()))]), Constant(value=False)], ctx=Load())], ctx=Load())], keywords=[])])], type_ignores=[])