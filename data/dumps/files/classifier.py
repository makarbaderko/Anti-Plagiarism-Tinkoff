Module(body=[ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), Import(names=[alias(name='math')]), Import(names=[alias(name='torch')]), ImportFrom(module='_workarounds', names=[alias(name='ArcFace'), alias(name='CosFace')], level=2), ImportFrom(module='config', names=[alias(name='prepare_config'), alias(name='ConfigError')], level=2), ImportFrom(module='distribution', names=[alias(name='NormalDistribution'), alias(name='VMFDistribution')], level=1), ImportFrom(module='parametrization', names=[alias(name='Parametrization')], level=1), FunctionDef(name='get_log_priors', args=arguments(posonlyargs=[], args=[arg(arg='num_classes'), arg(arg='priors')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Create new log priors tensor.\n\n    Args:\n        num_classes: Numder of classes.\n        priors: Initial value for priors.\n\n    Returns:\n        Parameter if trainable is True and Tensor otherwise.\n    ')), If(test=Compare(left=Name(id='priors', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='priors', ctx=Load()), Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='priors', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='tensor', ctx=Load()), args=[Name(id='priors', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='priors', ctx=Load()), attr='shape', ctx=Load()), ops=[NotEq()], comparators=[Tuple(elts=[Name(id='num_classes', ctx=Load())], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Expected initial priors with shape ({},), got: {}.'), attr='format', ctx=Load()), args=[Name(id='num_classes', ctx=Load()), Attribute(value=Name(id='priors', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='log_priors', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='priors', ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[]), attr='log', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='log_priors', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='num_classes', ctx=Load())], keywords=[]))]), Return(value=Name(id='log_priors', ctx=Load()))], decorator_list=[]), FunctionDef(name='additive_margin', args=arguments(posonlyargs=[], args=[arg(arg='logits'), arg(arg='labels'), arg(arg='margin')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0)]), body=[Expr(value=Constant(value='Add margin if labels are provided.')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='margin', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='one_hot', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros_like', ctx=Load()), args=[Name(id='logits', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='one_hot', ctx=Load()), attr='scatter_', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), attr='long', ctx=Load()), args=[], keywords=[]), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='logits', ctx=Store())], value=BinOp(left=Name(id='logits', ctx=Load()), op=Sub(), right=BinOp(left=Name(id='one_hot', ctx=Load()), op=Mult(), right=Name(id='margin', ctx=Load()))))], orelse=[]), Return(value=Name(id='logits', ctx=Load()))], decorator_list=[]), ClassDef(name='LinearClassifier', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Linear', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Simple classification head based on linear layer.\n\n    Args:\n        distribution: Distribution used in the model.\n        num_classes: Number of output classes.\n        priors (unused): Precomputed class priors. Priors can be learned on-line if not provided.\n\n    Inputs:\n        - parameters: Distribution parameters with shape (..., K).\n        - labels: Unused.\n        - scorer: Unused.\n\n    Outputs:\n        - logits: Class logits with shape (..., C).\n\n    ')), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='sample'), arg(arg='use_bias'), arg(arg='initial_scale'), arg(arg='normalize_weights'), arg(arg='use_variance'), arg(arg='initial_variance'), arg(arg='variance_parametrization'), arg(arg='freeze_variance'), arg(arg='variance_center'), arg(arg='variance_scale')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=True), Constant(value=1), Constant(value=False), Constant(value=False), Constant(value=1), Constant(value='exp'), Constant(value=False), Constant(value=0), Constant(value=1)]), body=[Expr(value=Constant(value='Get classifier config.\n\n        Args:\n            sample: If True, sample from distribution. Use distribution mean otherwise.\n            use_bias: Whether to use bias in linear layer or not.\n            initial_scale: Scale parameters during initialization.\n            normalize_weights: Normalize weights before applying.\n            use_variance: Whether to add trainable embeddings variance or not.\n            initial_variance: Initial value of the variance.\n            variance_parametrization: Type of variance coding ("exp" or "invlin").\n            freeze_variance: Don\'t train variance parameter.\n            variance_center: Parametrization center.\n            variance_scale: Parametrization scale.\n        ')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='sample'), Name(id='sample', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='use_bias'), Name(id='use_bias', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='initial_scale'), Name(id='initial_scale', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='normalize_weights'), Name(id='normalize_weights', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='use_variance'), Name(id='use_variance', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='initial_variance'), Name(id='initial_variance', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='variance_parametrization'), Name(id='variance_parametrization', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='freeze_variance'), Name(id='freeze_variance', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='variance_center'), Name(id='variance_center', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='variance_scale'), Name(id='variance_scale', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load()), Name(id='num_classes', ctx=Load())], keywords=[keyword(arg='bias', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load())), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_scale'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), body=[AugAssign(target=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), attr='data', ctx=Store()), op=Mult(), value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_scale'), ctx=Load())), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()), body=[AugAssign(target=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()), attr='data', ctx=Store()), op=Mult(), value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_scale'), ctx=Load()))], orelse=[])], orelse=[]), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_variance'), ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_variance_parametrization', ctx=Store())], value=Call(func=Name(id='Parametrization', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='variance_parametrization'), ctx=Load())], keywords=[keyword(arg='center', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='variance_center'), ctx=Load())), keyword(arg='scale', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='variance_scale'), ctx=Load()))])), Assign(targets=[Name(id='initial_variance', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_variance'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='initial_hidden_variance', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_variance_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='initial_variance', ctx=Load())], keywords=[])], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hidden_variance', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='initial_hidden_variance', ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='float', ctx=Load()))])], keywords=[keyword(arg='requires_grad', value=UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='freeze_variance'), ctx=Load())))]))], orelse=[])], decorator_list=[]), FunctionDef(name='has_weight', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_variance'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_variance_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='hidden_variance', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='clip_variance', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='max_hidden', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_variance_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='tensor', ctx=Load()), args=[Name(id='max', ctx=Load())], keywords=[])], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hidden_variance', ctx=Load()), attr='data', ctx=Load()), attr='clip_', ctx=Load()), args=[], keywords=[keyword(arg='max', value=Name(id='max_hidden', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='set_variance', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='hidden', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_variance_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='tensor', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]), attr='item', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hidden_variance', ctx=Load()), attr='data', ctx=Load()), attr='fill_', ctx=Load()), args=[Name(id='hidden', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample'), ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='embeddings', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='embeddings', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[]))]), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='normalize_weights'), ctx=Load()), body=[Assign(targets=[Name(id='weight', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), attr='flatten', ctx=Load()), args=[], keywords=[])], keywords=[]))), Assign(targets=[Name(id='bias', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='weight', ctx=Store()), Name(id='bias', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load())], ctx=Load()))]), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='linear', ctx=Load()), args=[Name(id='embeddings', ctx=Load()), Name(id='weight', ctx=Load()), Name(id='bias', ctx=Load())], keywords=[])), Return(value=Name(id='logits', ctx=Load()))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ArcFaceClassifier', bases=[Name(id='ArcFace', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ArcFace classification head with trainable target classes centers.\n\n    Args:\n        distribution: Distribution used in the model.\n        num_classes: Number of output classes.\n        priors (unused): Precomputed class priors. Priors can be learned on-line if not provided.\n\n    Inputs:\n        - parameters: Distribution parameters with shape (..., K).\n        - labels: If provided, used for ArcFace logit correction. Compute cosine otherwise.\n        - scorer: Unused.\n\n    Outputs:\n        - logits: Class logits with shape (..., C).\n\n    ')), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='sample'), arg(arg='scale'), arg(arg='margin')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=64.0), Constant(value=0.5)]), body=[Expr(value=Constant(value='Get classifier config.\n\n        Args:\n            sample: If True, sample from distribution. Use distribution mean otherwise.\n            scale: Output scale (number or "trainable").\n            margin: ArcFace margin.\n        ')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='sample'), Name(id='sample', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='scale'), Name(id='scale', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='margin'), Name(id='margin', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='distribution', ctx=Load()), attr='is_spherical', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Spherical distrubution is expected.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Name(id='scale', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='trainable')]), body=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='ones', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[]), orelse=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()))), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load()), Name(id='num_classes', ctx=Load())], keywords=[keyword(arg='m', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='margin'), ctx=Load())), keyword(arg='s', value=Name(id='scale', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load()))], decorator_list=[]), FunctionDef(name='has_weight', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample'), ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='embeddings', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='embeddings', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='embeddings', ctx=Store())], value=Call(func=Attribute(value=Name(id='embeddings', ctx=Load()), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Subscript(value=Attribute(value=Name(id='embeddings', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=IfExp(test=Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='flatten', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='forward', ctx=Load()), args=[Name(id='embeddings', ctx=Load())], keywords=[keyword(arg='target', value=Name(id='labels', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='logits', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=List(elts=[BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load())], ctx=Load()))], ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Assign(targets=[Name(id='scale', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='trainable')]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='s', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[]), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='s', ctx=Load()))), Return(value=Dict(keys=[Constant(value='scale')], values=[Name(id='scale', ctx=Load())]))], decorator_list=[]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='CosFaceClassifier', bases=[Name(id='CosFace', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='CosFace classification head with trainable target classes centers.\n\n    Args:\n        distribution: Distribution used in the model.\n        num_classes: Number of output classes.\n        priors (unused): Precomputed class priors. Priors can be learned on-line if not provided.\n\n    Inputs:\n        - parameters: Distribution parameters with shape (..., K).\n        - labels: If provided, used for logit correction. Compute cosine otherwise.\n        - scorer: Unused.\n\n    Outputs:\n        - logits: Class logits with shape (..., C).\n\n    ')), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='scale'), arg(arg='margin'), arg(arg='symmetric')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=64.0), Constant(value=0.35), Constant(value=False)]), body=[Expr(value=Constant(value='Get classifier config.\n\n        Args:\n            scale: Output scale.\n            margin: CosFace margin.\n            symmetric: If true, add margin to negatives (useful for Proxy-Anchor loss).\n        ')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='scale'), Name(id='scale', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='margin'), Name(id='margin', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='symmetric'), Name(id='symmetric', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='distribution', ctx=Load()), attr='is_spherical', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Spherical distrubution is expected.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load()), Name(id='num_classes', ctx=Load())], keywords=[keyword(arg='m', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='margin'), ctx=Load())), keyword(arg='s', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load()))], decorator_list=[]), FunctionDef(name='has_weight', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='embeddings', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Assign(targets=[Name(id='embeddings', ctx=Store())], value=Call(func=Attribute(value=Name(id='embeddings', ctx=Load()), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Subscript(value=Attribute(value=Name(id='embeddings', ctx=Load()), attr='shape', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='labels', ctx=Store())], value=IfExp(test=Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='flatten', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='forward', ctx=Load()), args=[Name(id='embeddings', ctx=Load())], keywords=[keyword(arg='target', value=Name(id='labels', ctx=Load()))])), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='symmetric'), ctx=Load()), body=[AugAssign(target=Name(id='logits', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=Constant(value=0.5), op=Mult(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='margin'), ctx=Load())), op=Mult(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load())))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='logits', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=List(elts=[BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load())], ctx=Load()))], ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='LogLikeClassifier', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Contains target centroids and performs log likelihood estimation.\n\n    Layer can add prior correction in different forms. If "pretrained"\n    is used, log priors from training set are added to logits. If\n    "trainable" is used, bias vector is trained for output logits. By\n    default prior correction is turned off.\n\n    Args:\n        distribution: Distribution used in the model.\n        num_classes: Number of output classes.\n        priors: Precomputed class priors. Priors can be learned on-line if not provided.\n\n    Inputs:\n        - parameters: Distribution parameters with shape (..., K).\n        - labels: Positive labels used for margin with shape (...).\n        - scorer: Unused.\n\n    Outputs:\n        - logits: Class logits with shape (..., C).\n\n    ')), Assign(targets=[Name(id='TARGET_DISTRIBUTIONS', ctx=Store())], value=Dict(keys=[Constant(value='gmm'), Constant(value='vmf')], values=[Name(id='NormalDistribution', ctx=Load()), Name(id='VMFDistribution', ctx=Load())])), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='priors'), arg(arg='margin'), arg(arg='target_distribution'), arg(arg='target_distribution_params')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Get classifier config.\n\n        Args:\n            priors: Type of prior correction used (one of `pretrained`, `trainable` and `none`).\n              See description above. By default turned off.\n            margin: Log probability subtracted from positive logit.\n            target_distribution: Compute likelihood of the prediction using target distributions.\n              Default is to compute likelihood of the target using predicted distribution.\n        ')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='priors'), Name(id='priors', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='margin'), Name(id='margin', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='target_distribution'), Name(id='target_distribution', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='target_distribution_params'), Name(id='target_distribution_params', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load())), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_target_distribution', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='TARGET_DISTRIBUTIONS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution'), ctx=Load()), ctx=Load()), args=[], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution_params'), ctx=Load()))])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='dim', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Predicted and target embeddings size mismatch: {} != {}.'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='dim', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='is_spherical', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='distribution', ctx=Load()), attr='is_spherical', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Constant(value='Predicted and target embeddings normalization mismatch')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='FloatTensor', ctx=Load()), args=[Name(id='num_classes', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='num_parameters', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='FloatTensor', ctx=Load()), args=[Name(id='num_classes', ctx=Load()), Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load())], keywords=[])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='init', ctx=Load()), attr='xavier_uniform_', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='priors'), ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value=None), Constant(value='none')], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Store())], value=Constant(value=None))], orelse=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='no_grad', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='log_priors', ctx=Store())], value=Call(func=Name(id='get_log_priors', ctx=Load()), args=[Name(id='num_classes', ctx=Load()), Name(id='priors', ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='priors'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='pretrained')]), body=[If(test=Compare(left=Name(id='priors', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Need dataset priors for pretrained mode')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='trainable', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='priors'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='trainable')]), body=[Assign(targets=[Name(id='trainable', ctx=Store())], value=Constant(value=True))], orelse=[Raise(exc=Call(func=Name(id='ConfigError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknown priors mode: {}.'), attr='format', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='priors'), ctx=Load())], keywords=[])], keywords=[]))])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Name(id='log_priors', ctx=Load())], keywords=[keyword(arg='requires_grad', value=Name(id='trainable', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='has_weight', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Parameters and labels shape mismatch: {}, {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='targets', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=BinOp(left=List(elts=[Constant(value=1)], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dim_prefix', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), attr='shape', ctx=Load())], keywords=[])), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution'), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='parameters', ctx=Store())], value=Call(func=Attribute(value=Name(id='parameters', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logpdf', ctx=Load()), args=[Name(id='parameters', ctx=Load()), Name(id='targets', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='embeddings', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='logpdf', ctx=Load()), args=[Name(id='targets', ctx=Load()), Name(id='embeddings', ctx=Load())], keywords=[]))]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='log_priors', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='bias', ctx=Load()), Constant(value=0)], keywords=[]))), Assign(targets=[Name(id='logits', ctx=Store())], value=BinOp(left=Name(id='log_priors', ctx=Load()), op=Add(), right=Name(id='logits', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Name(id='additive_margin', ctx=Load()), args=[Name(id='logits', ctx=Load()), Name(id='labels', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='margin'), ctx=Load())], keywords=[])), Return(value=Name(id='logits', ctx=Load()))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='target_distribution'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='confidences', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_target_distribution', ctx=Load()), attr='confidences', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='target_confidence/mean'), ctx=Store())], value=Call(func=Attribute(value=Name(id='confidences', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='target_confidence/std'), ctx=Store())], value=Call(func=Attribute(value=Name(id='confidences', ctx=Load()), attr='std', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='VMFClassifier', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Contains target centroids distribution and evaluates expected log likelihood.\n\n    Implementation is based on "Von Mises–Fisher Loss:An Exploration of Embedding Geometries for Supervised Learning." (2021).\n\n    Args:\n        distribution: Distribution used in the model.\n        num_classes: Number of output classes.\n\n    Inputs:\n        - parameters: Distribution parameters with shape (..., K).\n        - labels: Positive labels used for margin with shape (...).\n        - scorer: Unused.\n\n    Outputs:\n        - logits: Class logits with shape (..., C).\n\n    ')), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='scale'), arg(arg='initial_log_scale'), arg(arg='kappa_confidence'), arg(arg='sample_size'), arg(arg='approximate_logc'), arg(arg='deterministic_target')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='trainable'), Constant(value=2.773), Constant(value=0.7), Constant(value=10), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='Get classifier config.\n\n        Args:\n            scale: Output scale (number or "trainable").\n            initial_log_scale: Initial logarithm of scale value when scale is trainable.\n            kappa_confidence: Hyperparameter used for initialization and scoring.\n            sample_size: Number of samples for probability estimation.\n            approximate_logc: Use approximation from the paper to speedup training.\n            deterministic_target: Use a variation of vMF-loss with deterministic target embeddings.\n        ')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='scale'), Name(id='scale', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='initial_log_scale'), Name(id='initial_log_scale', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='kappa_confidence'), Name(id='kappa_confidence', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='sample_size'), Name(id='sample_size', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='approximate_logc'), Name(id='approximate_logc', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='deterministic_target'), Name(id='deterministic_target', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='distribution', ctx=Load()), Name(id='VMFDistribution', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Expected vMF distribution for vMF loss.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load())), Assign(targets=[Name(id='l', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='kappa_confidence'), ctx=Load())), Assign(targets=[Name(id='dim', ctx=Store())], value=Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load())), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load()), body=[Assign(targets=[Name(id='means', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='randn', ctx=Load()), args=[Name(id='num_classes', ctx=Load()), Name(id='dim', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='l', ctx=Load())), op=Div(), right=BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='l', ctx=Load()), op=Mult(), right=Name(id='l', ctx=Load())))), op=Mult(), right=BinOp(left=Name(id='dim', ctx=Load()), op=Sub(), right=Constant(value=1))), op=Div(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='dim', ctx=Load())], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Name(id='means', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='means', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='randn', ctx=Load()), args=[Name(id='num_classes', ctx=Load()), Constant(value=1), Name(id='dim', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='l', ctx=Load())), op=Div(), right=BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='l', ctx=Load()), op=Mult(), right=Name(id='l', ctx=Load())))), op=Mult(), right=BinOp(left=Name(id='dim', ctx=Load()), op=Sub(), right=Constant(value=1))), op=Div(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='dim', ctx=Load())], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='distribution', ctx=Load()), attr='join_parameters', ctx=Load()), args=[], keywords=[keyword(arg='log_probs', value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='num_classes', ctx=Load()), Constant(value=1)], keywords=[])), keyword(arg='means', value=Name(id='means', ctx=Load())), keyword(arg='hidden_ik', value=Call(func=Attribute(value=Attribute(value=Name(id='distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[Name(id='means', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='keepdim', value=Constant(value=True))]))], keywords=[]))])], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_scale', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='trainable')]), body=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[], ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='initial_log_scale'), ctx=Load())], keywords=[])], keywords=[]), orelse=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='log', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='has_weight', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='kappa_confidence', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get lambda parameter of vMF-loss.')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='kappa_confidence'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Parameters and labels shape mismatch: {}, {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dtype', ctx=Store())], value=Attribute(value=Name(id='parameters', ctx=Load()), attr='dtype', ctx=Load())), Assign(targets=[Name(id='device', ctx=Store())], value=Attribute(value=Name(id='parameters', ctx=Load()), attr='device', ctx=Load())), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Assign(targets=[Name(id='k', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample_size'), ctx=Load())), Assign(targets=[Name(id='c', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load())), Assign(targets=[Name(id='scale', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_scale', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='sample', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='parameters', ctx=Load()), BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Name(id='k', ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='sample', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Name(id='sample', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load()))]), body=[Assign(targets=[Name(id='sample_parameters', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='join_parameters', ctx=Load()), args=[], keywords=[keyword(arg='log_probs', value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='k', ctx=Load()), Constant(value=1)], keywords=[keyword(arg='dtype', value=Name(id='dtype', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])), keyword(arg='means', value=Call(func=Attribute(value=Name(id='sample', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[])), keyword(arg='hidden_ik', value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='ones', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='k', ctx=Load()), Constant(value=1), Constant(value=1)], keywords=[keyword(arg='dtype', value=Name(id='dtype', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))]), op=Div(), right=Name(id='scale', ctx=Load()))], keywords=[]))])), Assign(targets=[Name(id='logmls', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_logmls', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sample_parameters', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='k', ctx=Load()), Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), attr='reshape', ctx=Load()), args=[Constant(value=1), Constant(value=1), Name(id='c', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])], keywords=[])), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Assign(targets=[Name(id='target_means', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), slice=Name(id='labels', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='neg_lognum', ctx=Store())], value=BinOp(left=Name(id='scale', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=BinOp(left=Name(id='means', ctx=Load()), op=Mult(), right=Name(id='target_means', ctx=Load())), attr='sum', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))]))), Assign(targets=[Name(id='neg_logden', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Name(id='logmls', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=2))]), op=Sub(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='scale', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='losses', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='neg_logden', ctx=Load()), attr='mean', ctx=Load()), args=[Constant(value=1)], keywords=[]), op=Sub(), right=Name(id='neg_lognum', ctx=Load()))), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='empty', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='c', ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='dtype', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='logits', ctx=Load()), attr='scatter_', ctx=Load()), args=[Constant(value=1), Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Constant(value=1)], keywords=[]), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='losses', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Constant(value=1)], keywords=[]))], keywords=[]))], orelse=[If(test=Compare(left=Name(id='labels', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assert(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load())), Assign(targets=[Name(id='nweight', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='means', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), Assign(targets=[Name(id='neg_lognum', ctx=Store())], value=BinOp(left=Name(id='scale', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=BinOp(left=Name(id='means', ctx=Load()), op=Mult(), right=Subscript(value=Name(id='nweight', ctx=Load()), slice=Name(id='labels', ctx=Load()), ctx=Load())), attr='sum', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))]))), Assign(targets=[Name(id='products', ctx=Store())], value=BinOp(left=Name(id='scale', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=BinOp(left=Subscript(value=Name(id='nweight', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load()), op=Mult(), right=Subscript(value=Name(id='sample', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load())), attr='sum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))), Assign(targets=[Name(id='neg_logden', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Name(id='products', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=2))])), Assign(targets=[Name(id='losses', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='neg_logden', ctx=Load()), attr='mean', ctx=Load()), args=[Constant(value=1)], keywords=[]), op=Sub(), right=Name(id='neg_lognum', ctx=Load()))), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='empty', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='c', ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='dtype', ctx=Load())), keyword(arg='device', value=Name(id='device', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='logits', ctx=Load()), attr='scatter_', ctx=Load()), args=[Constant(value=1), Call(func=Attribute(value=Name(id='labels', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Constant(value=1)], keywords=[]), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='losses', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Constant(value=1)], keywords=[]))], keywords=[]))], orelse=[If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load()), body=[Assign(targets=[Name(id='target_sample', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='target_sample', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='tk', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='target_sample', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='target_sample', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='normalize', ctx=Load()), args=[Name(id='target_sample', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Assign(targets=[Name(id='cosines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='linear', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sample', ctx=Load()), attr='reshape', ctx=Load()), args=[BinOp(left=Name(id='b', ctx=Load()), op=Mult(), right=Name(id='k', ctx=Load())), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), Call(func=Attribute(value=Name(id='target_sample', ctx=Load()), attr='reshape', ctx=Load()), args=[BinOp(left=Name(id='c', ctx=Load()), op=Mult(), right=Name(id='tk', ctx=Load())), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])], keywords=[])), Assign(targets=[Name(id='cosines', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cosines', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='k', ctx=Load()), Name(id='c', ctx=Load()), Name(id='tk', ctx=Load())], keywords=[]), attr='permute', ctx=Load()), args=[Constant(value=0), Constant(value=2), Constant(value=1), Constant(value=3)], keywords=[]), attr='reshape', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='c', ctx=Load()), BinOp(left=Name(id='k', ctx=Load()), op=Mult(), right=Name(id='tk', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='scores', ctx=Store())], value=BinOp(left=Name(id='scale', ctx=Load()), op=Mult(), right=Name(id='cosines', ctx=Load()))), Assign(targets=[Name(id='probs', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='functional', ctx=Load()), attr='softmax', ctx=Load()), args=[Name(id='scores', ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=1))]), attr='mean', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='probs', ctx=Load()), attr='log', ctx=Load()), args=[], keywords=[]))])]), Return(value=Name(id='logits', ctx=Load()))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='scale')], values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_scale', ctx=Load()), args=[], keywords=[])])), If(test=UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='deterministic_target'), ctx=Load())), body=[Assign(targets=[Name(id='target_hidden_ik', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load())], keywords=[]), slice=Constant(value=2), ctx=Load()), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='target_sqrt_ik', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='target_hidden_ik', ctx=Load())], keywords=[]), attr='sqrt', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='target_sqrt_inv_k/mean'), ctx=Store())], value=Call(func=Attribute(value=Name(id='target_sqrt_ik', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='target_sqrt_inv_k/std'), ctx=Store())], value=Call(func=Attribute(value=Name(id='target_sqrt_ik', ctx=Load()), attr='std', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_scale', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scale'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='trainable')]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_scale', ctx=Load()), attr='exp', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='exp', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='log_scale', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='_vmf_logc', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='k')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dim', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='dim', ctx=Load())), Assign(targets=[Name(id='nm14', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='dim', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Div(), right=Constant(value=4))), Assign(targets=[Name(id='nm12', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='dim', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Div(), right=Constant(value=2))), Assign(targets=[Name(id='np12', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='dim', ctx=Load()), op=Add(), right=Constant(value=1)), op=Div(), right=Constant(value=2))), Assign(targets=[Name(id='nm12sq', ctx=Store())], value=BinOp(left=Name(id='nm12', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='np12sq', ctx=Store())], value=BinOp(left=Name(id='np12', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='ksq', ctx=Store())], value=BinOp(left=Name(id='k', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='sqrtm', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='nm12sq', ctx=Load()), op=Add(), right=Name(id='ksq', ctx=Load())), attr='sqrt', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sqrtp', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Name(id='np12sq', ctx=Load()), op=Add(), right=Name(id='ksq', ctx=Load())), attr='sqrt', ctx=Load()), args=[], keywords=[])), Return(value=BinOp(left=BinOp(left=Name(id='nm14', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Attribute(value=BinOp(left=Name(id='nm12', ctx=Load()), op=Add(), right=Name(id='sqrtm', ctx=Load())), attr='log', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=BinOp(left=Name(id='nm12', ctx=Load()), op=Add(), right=Name(id='sqrtp', ctx=Load())), attr='log', ctx=Load()), args=[], keywords=[]))), op=Sub(), right=BinOp(left=Constant(value=0.5), op=Mult(), right=BinOp(left=Name(id='sqrtm', ctx=Load()), op=Add(), right=Name(id='sqrtp', ctx=Load())))))], decorator_list=[]), FunctionDef(name='_vmf_logmls', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='means1'), arg(arg='hidden_ik1'), arg(arg='means2'), arg(arg='hidden_ik2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute Log MLS for unimodal distributions.')), Assign(targets=[Name(id='k1', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik1', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='k2', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_ik2', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='linalg', ctx=Load()), attr='norm', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='k1', ctx=Load()), op=Mult(), right=Name(id='means1', ctx=Load())), op=Add(), right=BinOp(left=Name(id='k2', ctx=Load()), op=Mult(), right=Name(id='means2', ctx=Load())))], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='keepdim', value=Constant(value=True))])), Assign(targets=[Name(id='logc1', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='k1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='logc2', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='k2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='logc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logc', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=BinOp(left=BinOp(left=Name(id='logc1', ctx=Load()), op=Add(), right=Name(id='logc2', ctx=Load())), op=Sub(), right=Name(id='logc', ctx=Load())), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], decorator_list=[]), FunctionDef(name='_logmls', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters1'), arg(arg='parameters2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='approximate_logc'), ctx=Load())), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logmls', ctx=Load()), args=[Name(id='parameters1', ctx=Load()), Name(id='parameters2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='log_probs1', ctx=Store()), Name(id='means1', ctx=Store()), Name(id='hidden_ik1', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters1', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='log_probs2', ctx=Store()), Name(id='means2', ctx=Store()), Name(id='hidden_ik2', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='parameters2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pairwise_logmls', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_vmf_logmls', ctx=Load()), args=[], keywords=[keyword(arg='means1', value=Subscript(value=Name(id='means1', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load())), keyword(arg='hidden_ik1', value=Subscript(value=Name(id='hidden_ik1', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load())), keyword(arg='means2', value=Subscript(value=Name(id='means2', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load())), keyword(arg='hidden_ik2', value=Subscript(value=Name(id='hidden_ik2', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load()))])), Assign(targets=[Name(id='pairwise_logprobs', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='log_probs1', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Slice(), Constant(value=None)], ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='log_probs2', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None), Slice()], ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='dim_prefix', ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='pairwise_logmls', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load())), Assign(targets=[Name(id='logmls', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Call(func=Attribute(value=BinOp(left=Name(id='pairwise_logprobs', ctx=Load()), op=Add(), right=Name(id='pairwise_logmls', ctx=Load())), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='dim_prefix', ctx=Load()), op=Add(), right=List(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())), ctx=Load())], keywords=[])], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Return(value=Name(id='logmls', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='SPEClassifier', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Extracts target centroids from elements of the same batch and computes Stochastic Prototype Embeddings logits.\n\n    See "Stochastic Prototype Embeddings." (2019) for details.\n\n    Args:\n        distribution: Distribution used in the model.\n        num_classes: Number of output classes.\n\n    Inputs:\n        - parameters: Distribution parameters with shape (..., K).\n        - labels: Positive labels used for margin with shape (...).\n        - scorer: Unused.\n\n    Outputs:\n        - logits: Class logits with shape (..., C).\n\n    ')), Assign(targets=[Name(id='LOG_EPS', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=100.0))), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='train_epsilon'), arg(arg='sample_size')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=16)]), body=[Expr(value=Constant(value='Get classifier config.\n\n        Args:\n            train_epsilon: Whether to use trainable addition to the variance or not.\n            sample_size: Number of samples used for integral evaluation. Zero to disable sampling and use distribution mean.\n        ')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='train_epsilon'), Name(id='train_epsilon', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='sample_size'), Name(id='sample_size', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='distribution', ctx=Load()), Name(id='NormalDistribution', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Expected GMM distribution for SPE loss.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load())), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='train_epsilon'), ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hidden_epsilon', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Parameter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[], ctx=Load()), BinOp(left=Constant(value=0.01), op=Pow(), right=BinOp(left=Constant(value=2), op=Div(), right=Attribute(value=Name(id='distribution', ctx=Load()), attr='dim', ctx=Load())))], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='torch', ctx=Load()), attr='float', ctx=Load()))])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='has_weight', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='train_epsilon'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='train_epsilon'), ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hidden_epsilon', ctx=Load()), attr='exp', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Constant(value=0))])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='labels', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='zeros', ctx=Load()), args=[Starred(value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load())], ctx=Load())), ctx=Load())], keywords=[keyword(arg='dtype', value=Attribute(value=Name(id='parameters', ctx=Load()), attr='dtype', ctx=Load())), keyword(arg='device', value=Attribute(value=Name(id='parameters', ctx=Load()), attr='device', ctx=Load()))]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='parameters', ctx=Load()), attr='ndim', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Expected embeddings with shape (B, N), got: {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Parameters and labels shape mismatch: {}, {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), Attribute(value=Name(id='labels', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='by_class', ctx=Store()), Name(id='order', ctx=Store()), Name(id='label_map', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_group_by_class', ctx=Load()), args=[Name(id='parameters', ctx=Load()), Name(id='labels', ctx=Load())], keywords=[])), Assign(targets=[Name(id='k', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='by_class', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))), Assign(targets=[Name(id='logits1', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_logits', ctx=Load()), args=[Subscript(value=Name(id='by_class', ctx=Load()), slice=Slice(upper=Name(id='k', ctx=Load())), ctx=Load()), Subscript(value=Name(id='by_class', ctx=Load()), slice=Slice(lower=Name(id='k', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='logits2', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_logits', ctx=Load()), args=[Subscript(value=Name(id='by_class', ctx=Load()), slice=Slice(lower=Name(id='k', ctx=Load())), ctx=Load()), Subscript(value=Name(id='by_class', ctx=Load()), slice=Slice(upper=Name(id='k', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='cat', ctx=Load()), args=[List(elts=[Name(id='logits1', ctx=Load()), Name(id='logits2', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dim', value=Constant(value=0))])), Assign(targets=[Name(id='all_logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='full', ctx=Load()), args=[List(elts=[Subscript(value=Attribute(value=Name(id='logits', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Attribute(value=Name(id='logits', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load())], ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='LOG_EPS', ctx=Load())], keywords=[keyword(arg='device', value=Attribute(value=Name(id='logits', ctx=Load()), attr='device', ctx=Load())), keyword(arg='dtype', value=Attribute(value=Name(id='logits', ctx=Load()), attr='dtype', ctx=Load()))])), Assign(targets=[Name(id='indices', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='label_map', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()), attr='tile', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='logits', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Attribute(value=Name(id='logits', ctx=Load()), attr='shape', ctx=Load()), slice=Constant(value=1), ctx=Load()), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='all_logits', ctx=Load()), attr='scatter_', ctx=Load()), args=[Constant(value=2), Name(id='indices', ctx=Load()), Name(id='logits', ctx=Load())], keywords=[])), Assign(targets=[Name(id='all_logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='all_logits', ctx=Load()), attr='reshape', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load())], keywords=[])), Assign(targets=[Name(id='all_logits', ctx=Store())], value=Call(func=Attribute(value=Name(id='all_logits', ctx=Load()), attr='take_along_dim', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='argsort', ctx=Load()), args=[Call(func=Attribute(value=Name(id='order', ctx=Load()), attr='flatten', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='reshape', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1)], keywords=[]), Constant(value=0)], keywords=[])), Return(value=Name(id='all_logits', ctx=Load()))], decorator_list=[]), FunctionDef(name='_group_by_class', args=arguments(posonlyargs=[], args=[arg(arg='embeddings'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Group embeddings into batch by label.\n\n        Returns:\n           A tuple of\n               - grouped_embeddings with shape (B // L, L, P), where second dimension encodes label.\n               - label_map with shape (L) which stores original label indices.\n        ')), If(test=Compare(left=Attribute(value=Name(id='embeddings', ctx=Load()), attr='ndim', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Expected tensor with shape (B, P).')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='bincount', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])), Assign(targets=[Name(id='counts', ctx=Store())], value=Subscript(value=Name(id='counts', ctx=Load()), slice=Compare(left=Name(id='counts', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), ctx=Load())), If(test=Call(func=Attribute(value=Compare(left=Name(id='counts', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='counts', ctx=Load()), slice=Constant(value=0), ctx=Load())]), attr='any', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Need uniform balanced sampling: {}.'), attr='format', ctx=Load()), args=[Name(id='counts', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='unique_labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='unique', ctx=Load()), args=[Name(id='labels', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indices', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='stack', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='nonzero', ctx=Load()), args=[Compare(left=Name(id='labels', ctx=Load()), ops=[Eq()], comparators=[Name(id='label', ctx=Load())])], keywords=[]), attr='squeeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), generators=[comprehension(target=Name(id='label', ctx=Store()), iter=Name(id='unique_labels', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='dim', value=Constant(value=1))])), Assign(targets=[Name(id='by_class', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='stack', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='embeddings', ctx=Load()), slice=Compare(left=Name(id='labels', ctx=Load()), ops=[Eq()], comparators=[Name(id='label', ctx=Load())]), ctx=Load()), generators=[comprehension(target=Name(id='label', ctx=Store()), iter=Name(id='unique_labels', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='dim', value=Constant(value=1))])), Assert(test=Compare(left=Attribute(value=Name(id='by_class', ctx=Load()), attr='ndim', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)])), Return(value=Tuple(elts=[Name(id='by_class', ctx=Load()), Name(id='indices', ctx=Load()), Name(id='unique_labels', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_compute_prototypes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='embeddings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='embeddings', ctx=Load()), attr='ndim', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=3)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Expected grouped embeddings with shape (B, L, P).')], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='logprobs', ctx=Store()), Name(id='mean', ctx=Store()), Name(id='hidden_var', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='split_parameters', ctx=Load()), args=[Name(id='embeddings', ctx=Load())], keywords=[])), Assign(targets=[Name(id='var', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='variance', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='positive', ctx=Load()), args=[Name(id='hidden_var', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='new_var', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=BinOp(left=Constant(value=1), op=Div(), right=Name(id='var', ctx=Load())), attr='sum', ctx=Load()), args=[Constant(value=0)], keywords=[]))), Assign(targets=[Name(id='new_mean', ctx=Store())], value=BinOp(left=Name(id='new_var', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=BinOp(left=Name(id='mean', ctx=Load()), op=Div(), right=Name(id='var', ctx=Load())), attr='sum', ctx=Load()), args=[Constant(value=0)], keywords=[]))), Assign(targets=[Name(id='new_hidden_var', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='_parametrization', ctx=Load()), attr='ipositive', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='variance', ctx=Load()), op=Add(), right=Name(id='new_var', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='prototypes', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='join_parameters', ctx=Load()), args=[Subscript(value=Name(id='logprobs', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='new_mean', ctx=Load()), Name(id='new_hidden_var', ctx=Load())], keywords=[])), Return(value=Name(id='prototypes', ctx=Load()))], decorator_list=[]), FunctionDef(name='_compute_logits', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='query'), arg(arg='support')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Compute SPE logits.\n\n        Args:\n            - query: Queries with shape (B, L, P) to compute logits for.\n            - support: Embeddings used for prototype computation with shape (B', L, P).\n        Returns:\n            SPE logits with shape (B, L).\n        ")), Assign(targets=[Name(id='prototypes', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_prototypes', ctx=Load()), args=[Name(id='support', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='prod_distribution', ctx=Store()), Name(id='prod_parameters', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='pdf_product', ctx=Load()), args=[Subscript(value=Name(id='query', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load()), Subscript(value=Name(id='prototypes', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample_size'), ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Tuple(elts=[Name(id='b', ctx=Store()), Name(id='l', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='query', ctx=Load()), attr='shape', ctx=Load())), Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='sample_size'), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='sample', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='prod_distribution', ctx=Load()), attr='sample', ctx=Load()), args=[Subscript(value=Name(id='prod_parameters', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value=None), Slice(), Slice()], ctx=Load()), ctx=Load()), List(elts=[Name(id='b', ctx=Load()), Name(id='l', ctx=Load()), Name(id='s', ctx=Load()), Name(id='l', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='sample', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='prod_distribution', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='prod_parameters', ctx=Load())], keywords=[]), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=3))], keywords=[]))]), Assign(targets=[Name(id='logmls', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logmls', ctx=Load()), args=[Subscript(value=Name(id='query', ctx=Load()), slice=Tuple(elts=[Slice(), Slice(), Constant(value=None), Slice()], ctx=Load()), ctx=Load()), Subscript(value=Name(id='prototypes', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='target_logpdfs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='logpdf', ctx=Load()), args=[Subscript(value=Name(id='prototypes', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()), Name(id='sample', ctx=Load())], keywords=[])), Assign(targets=[Name(id='logdenum', ctx=Store())], value=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[Name(id='target_logpdfs', ctx=Load())], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='keepdim', value=Constant(value=True))])), Assign(targets=[Name(id='logits', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='logmls', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='torch', ctx=Load()), attr='logsumexp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='logdenum', ctx=Load()))], keywords=[keyword(arg='dim', value=UnaryOp(op=USub(), operand=Constant(value=2)))])), op=Sub(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='log', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))), Return(value=Name(id='logits', ctx=Load()))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ScorerClassifier', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Linear', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Classify using scores.\n\n    Args:\n        distribution: Distribution used in the model.\n        num_classes: Number of output classes.\n        priors (unused): Precomputed class priors. Priors can be learned on-line if not provided.\n\n    Inputs:\n        - parameters: Distribution parameters with shape (..., K).\n        - labels: Unused.\n        - scorer: Scorer used for logits computation.\n\n    Outputs:\n        - logits: Class logits with shape (..., C).\n\n    ')), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='use_bias')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Get classifier config.')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='use_bias'), Name(id='use_bias', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='distribution', ctx=Load()), attr='num_parameters', ctx=Load()), Name(id='num_classes', ctx=Load())], keywords=[keyword(arg='bias', value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Name(id='distribution', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load()))], decorator_list=[]), FunctionDef(name='has_weight', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='use_bias'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='has_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parameters'), arg(arg='labels'), arg(arg='scorer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='parameters', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='target_distributions', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), attr='reshape', ctx=Load()), args=[Starred(value=BinOp(left=BinOp(left=List(elts=[Constant(value=1)], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()), attr='shape', ctx=Load())], keywords=[])), ctx=Load())], keywords=[])), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Name(id='scorer', ctx=Load()), args=[Call(func=Attribute(value=Name(id='parameters', ctx=Load()), attr='unsqueeze', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[]), Name(id='target_distributions', ctx=Load())], keywords=[])), Return(value=Name(id='logits', ctx=Load()))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Assign(targets=[Name(id='parameters', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='unpack_parameters', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='covariance'), ops=[In()], comparators=[Name(id='parameters', ctx=Load())]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Constant(value='std')), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='parameters', ctx=Load()), slice=Constant(value='covariance'), ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='k'), ops=[In()], comparators=[Name(id='parameters', ctx=Load())]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Constant(value='vmf_sqrt_inv_k')), Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='parameters', ctx=Load()), slice=Constant(value='k'), ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[]), attr='sqrt', ctx=Load()), args=[], keywords=[])))], orelse=[Return(value=Dict(keys=[], values=[]))])]), Return(value=Dict(keys=[Call(func=Attribute(value=Constant(value='target_{}/mean'), attr='format', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), Call(func=Attribute(value=Constant(value='target_{}/std'), attr='format', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])], values=[Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='std', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='extra_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='distribution={}, num_classes={}, config={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])