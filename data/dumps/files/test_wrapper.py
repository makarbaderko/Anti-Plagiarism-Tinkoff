Module(body=[Import(names=[alias(name='pytest')]), ImportFrom(module='optuna.pruners', names=[alias(name='MedianPruner')], level=0), ImportFrom(module='optuna.samplers', names=[alias(name='GridSampler')], level=0), ImportFrom(module='optuna.samplers', names=[alias(name='TPESampler')], level=0), ImportFrom(module='optuna.storages', names=[alias(name='InMemoryStorage')], level=0), ImportFrom(module='optuna.study', names=[alias(name='StudyDirection')], level=0), ImportFrom(module='etna.auto.optuna', names=[alias(name='Optuna')], level=0), FunctionDef(name='grid_sampler', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='GridSampler', ctx=Load()), args=[Dict(keys=[Constant(value='x'), Constant(value='y')], values=[List(elts=[UnaryOp(op=USub(), operand=Constant(value=2)), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=0), Constant(value=1), Constant(value=2)], ctx=Load()), List(elts=[Constant(value=1), Constant(value=0), Constant(value=1)], ctx=Load())])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='objective', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='_objective', args=arguments(posonlyargs=[], args=[arg(arg='trial')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Name(id='trial', ctx=Load()), attr='suggest_uniform', ctx=Load()), args=[Constant(value='x'), UnaryOp(op=USub(), operand=Constant(value=2)), Constant(value=2)], keywords=[])), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Attribute(value=Name(id='trial', ctx=Load()), attr='suggest_uniform', ctx=Load()), args=[Constant(value='y'), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1)], keywords=[])), Return(value=BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=Name(id='y', ctx=Load()), op=Pow(), right=Constant(value=2))))], decorator_list=[]), Return(value=Name(id='_objective', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_optuna_with_grid', args=arguments(posonlyargs=[], args=[arg(arg='grid_sampler'), arg(arg='objective'), arg(arg='expected_best_params')], kwonlyargs=[], kw_defaults=[], defaults=[Dict(keys=[Constant(value='x'), Constant(value='y')], values=[Constant(value=0), Constant(value=0)])]), body=[Assign(targets=[Name(id='opt', ctx=Store())], value=Call(func=Name(id='Optuna', ctx=Load()), args=[Constant(value='minimize')], keywords=[keyword(arg='sampler', value=Name(id='grid_sampler', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='opt', ctx=Load()), attr='tune', ctx=Load()), args=[Name(id='objective', ctx=Load())], keywords=[keyword(arg='gc_after_trial', value=Constant(value=True))])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='opt', ctx=Load()), attr='study', ctx=Load()), attr='best_params', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_best_params', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_optuna_init', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='opt', ctx=Store())], value=Call(func=Name(id='Optuna', ctx=Load()), args=[Constant(value='maximize')], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='opt', ctx=Load()), attr='study', ctx=Load()), attr='sampler', ctx=Load()), Name(id='TPESampler', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='opt', ctx=Load()), attr='study', ctx=Load()), attr='direction', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='StudyDirection', ctx=Load()), attr='MAXIMIZE', ctx=Load())])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='opt', ctx=Load()), attr='study', ctx=Load()), attr='pruner', ctx=Load()), Name(id='MedianPruner', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='opt', ctx=Load()), attr='study', ctx=Load()), attr='_storage', ctx=Load()), Name(id='InMemoryStorage', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])