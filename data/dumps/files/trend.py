Module(body=[ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='pandas', asname='pd')]), ImportFrom(module='ruptures', names=[alias(name='Binseg')], level=0), ImportFrom(module='ruptures.base', names=[alias(name='BaseCost')], level=0), ImportFrom(module='sklearn.linear_model', names=[alias(name='LinearRegression')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='FutureMixin')], level=0), ImportFrom(module='etna.transforms.base', names=[alias(name='PerSegmentWrapper')], level=0), ImportFrom(module='etna.transforms.decomposition.change_points_trend', names=[alias(name='BaseEstimator')], level=0), ImportFrom(module='etna.transforms.decomposition.change_points_trend', names=[alias(name='TDetrendModel')], level=0), ImportFrom(module='etna.transforms.decomposition.change_points_trend', names=[alias(name='_OneSegmentChangePointsTrendTransform')], level=0), ClassDef(name='_OneSegmentTrendTransform', bases=[Name(id='_OneSegmentChangePointsTrendTransform', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='_OneSegmentTrendTransform adds trend as a feature.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='out_column', annotation=Name(id='str', ctx=Load())), arg(arg='change_point_model', annotation=Name(id='BaseEstimator', ctx=Load())), arg(arg='detrend_model', annotation=Name(id='TDetrendModel', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='change_point_model_predict_params'), defaults=[]), body=[Expr(value=Constant(value='Init _OneSegmentTrendTransform.\n\n        Parameters\n        ----------\n        in_column:\n            name of column to apply transform to\n        out_column:\n            name of added column\n        change_point_model:\n            model to get trend change points\n        detrend_model:\n            model to get trend from data\n        change_point_model_predict_params:\n            params for ``change_point_model.predict`` method\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_column', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load())), keyword(arg='change_point_model', value=Name(id='change_point_model', ctx=Load())), keyword(arg='detrend_model', value=Name(id='detrend_model', ctx=Load())), keyword(value=Name(id='change_point_model_predict_params', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add column with trend, got from the detrend_model.\n\n        Parameters\n        ----------\n        df:\n            data to get trend from\n\n        Returns\n        -------\n        pd.DataFrame:\n            df with trend column\n        ')), Assign(targets=[Attribute(value=Name(id='df', ctx=Load()), attr='_is_copy', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='series', ctx=Store())], value=Subscript(value=Name(id='df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='trend_series', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_predict_per_interval_model', ctx=Load()), args=[], keywords=[keyword(arg='series', value=Name(id='series', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ctx=Store())], value=Name(id='trend_series', ctx=Load())), Return(value=Name(id='df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load())), FunctionDef(name='inverse_transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='df', annotation=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Inverse transform dataframe.\n\n        Parameters\n        ----------\n        df:\n            one segment dataframe\n\n        Returns\n        -------\n        pd.DataFrame:\n            given dataframe\n        ')), Return(value=Name(id='df', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()))], decorator_list=[]), ClassDef(name='_TrendTransform', bases=[Name(id='PerSegmentWrapper', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="_TrendTransform adds trend as a feature. Creates column '<in_column>_trend'.")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='out_column', annotation=Name(id='str', ctx=Load())), arg(arg='change_point_model', annotation=Name(id='BaseEstimator', ctx=Load())), arg(arg='detrend_model', annotation=Name(id='TDetrendModel', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='change_point_model_predict_params'), defaults=[]), body=[Expr(value=Constant(value='Init _TrendTransform.\n\n        Parameters\n        ----------\n        in_column:\n            name of column to apply transform to\n        out_column:\n            name of added column\n        change_point_model:\n            model to get trend change points\n        detrend_model:\n            model to get trend in data\n        change_point_model_predict_params:\n            params for ``change_point_model.predict`` method\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='transform', value=Call(func=Name(id='_OneSegmentTrendTransform', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Name(id='in_column', ctx=Load())), keyword(arg='out_column', value=Name(id='out_column', ctx=Load())), keyword(arg='change_point_model', value=Name(id='change_point_model', ctx=Load())), keyword(arg='detrend_model', value=Name(id='detrend_model', ctx=Load())), keyword(value=Name(id='change_point_model_predict_params', ctx=Load()))]))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TrendTransform', bases=[Name(id='_TrendTransform', ctx=Load()), Name(id='FutureMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='TrendTransform adds trend as a feature.\n\n    TrendTransform uses uses :py:class:`ruptures.detection.Binseg` model as a change point detection model\n    in _TrendTransform.\n\n    Warning\n    -------\n    This transform can suffer from look-ahead bias. For transforming data at some timestamp\n    it uses information from the whole train part.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_column', annotation=Name(id='str', ctx=Load())), arg(arg='out_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='detrend_model', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TDetrendModel', ctx=Load()), ctx=Load())), arg(arg='model', annotation=Name(id='str', ctx=Load())), arg(arg='custom_cost', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseCost', ctx=Load()), ctx=Load())), arg(arg='min_size', annotation=Name(id='int', ctx=Load())), arg(arg='jump', annotation=Name(id='int', ctx=Load())), arg(arg='n_bkps', annotation=Name(id='int', ctx=Load())), arg(arg='pen', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='epsilon', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value='ar'), Constant(value=None), Constant(value=2), Constant(value=1), Constant(value=5), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Init TrendTransform.\n\n        Parameters\n        ----------\n        in_column:\n            name of column to apply transform to\n        out_column:\n            name of added column.\n            If not given, use ``self.__repr__()``\n        detrend_model:\n            model to get trend in data\n        model:\n            binseg segment model, ["l1", "l2", "rbf",...]. Not used if \'custom_cost\' is not None.\n        custom_cost:\n            binseg custom cost function\n        min_size:\n            minimum segment length necessary to decide it is a stable trend segment\n        jump:\n            jump value can speed up computations: if ``jump==k``,\n            the algo will use every k-th value for change points search.\n        n_bkps:\n            number of change points to find\n        pen:\n            penalty value (>0)\n        epsilon:\n            reconstruction budget (>0)\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Store())], value=Name(id='in_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Store())], value=Name(id='out_column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='detrend_model', ctx=Store())], value=IfExp(test=Compare(left=Name(id='detrend_model', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Name(id='LinearRegression', ctx=Load()), args=[], keywords=[]), orelse=Name(id='detrend_model', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Name(id='model', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='custom_cost', ctx=Store())], value=Name(id='custom_cost', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_size', ctx=Store())], value=Name(id='min_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='jump', ctx=Store())], value=Name(id='jump', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='n_bkps', ctx=Store())], value=Name(id='n_bkps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pen', ctx=Store())], value=Name(id='pen', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='epsilon', ctx=Store())], value=Name(id='epsilon', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='in_column', value=Attribute(value=Name(id='self', ctx=Load()), attr='in_column', ctx=Load())), keyword(arg='out_column', value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='out_column', ctx=Load()), orelse=JoinedStr(values=[FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]), conversion=-1)]))), keyword(arg='change_point_model', value=Call(func=Name(id='Binseg', ctx=Load()), args=[], keywords=[keyword(arg='model', value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load())), keyword(arg='custom_cost', value=Attribute(value=Name(id='self', ctx=Load()), attr='custom_cost', ctx=Load())), keyword(arg='min_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='min_size', ctx=Load())), keyword(arg='jump', value=Attribute(value=Name(id='self', ctx=Load()), attr='jump', ctx=Load()))])), keyword(arg='detrend_model', value=Attribute(value=Name(id='self', ctx=Load()), attr='detrend_model', ctx=Load())), keyword(arg='n_bkps', value=Attribute(value=Name(id='self', ctx=Load()), attr='n_bkps', ctx=Load())), keyword(arg='pen', value=Attribute(value=Name(id='self', ctx=Load()), attr='pen', ctx=Load())), keyword(arg='epsilon', value=Attribute(value=Name(id='self', ctx=Load()), attr='epsilon', ctx=Load()))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])