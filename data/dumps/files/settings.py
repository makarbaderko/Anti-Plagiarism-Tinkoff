Module(body=[Import(names=[alias(name='configparser')]), Import(names=[alias(name='os')]), Import(names=[alias(name='warnings')]), ImportFrom(module='importlib.util', names=[alias(name='find_spec')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), FunctionDef(name='_module_available', args=arguments(posonlyargs=[], args=[arg(arg='module_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check if a path is available in your environment.\n    >>> _module_available('os')\n    True\n    >>> _module_available('bla.bla')\n    False\n    ")), Try(body=[Return(value=Compare(left=Call(func=Name(id='find_spec', ctx=Load()), args=[Name(id='module_path', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Return(value=Constant(value=False))]), ExceptHandler(type=Name(id='ModuleNotFoundError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_is_torch_available', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='true_case', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='_module_available', ctx=Load()), args=[Constant(value='pytorch_forecasting')], keywords=[]), op=BitAnd(), right=Call(func=Name(id='_module_available', ctx=Load()), args=[Constant(value='pytorch_lightning')], keywords=[])), op=BitAnd(), right=Call(func=Name(id='_module_available', ctx=Load()), args=[Constant(value='torch')], keywords=[]))), If(test=Name(id='true_case', ctx=Load()), body=[Return(value=Constant(value=True))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='etna[torch] is not available, to install it, run `pip install etna[torch]`')], keywords=[])), Return(value=Constant(value=False))])], decorator_list=[]), FunctionDef(name='_is_wandb_available', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='_module_available', ctx=Load()), args=[Constant(value='wandb')], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='wandb is not available, to install it, run `pip install etna[wandb]`')], keywords=[])), Return(value=Constant(value=False))])], decorator_list=[]), FunctionDef(name='_is_prophet_available', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='_module_available', ctx=Load()), args=[Constant(value='prophet')], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='etna[prophet] is not available, to install it, run `pip install etna[prophet]`')], keywords=[])), Return(value=Constant(value=False))])], decorator_list=[]), FunctionDef(name='_is_tsfresh_available', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='_module_available', ctx=Load()), args=[Constant(value='tsfresh')], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='`tsfresh` is not available, to install it, run `pip install tsfresh==0.19.0 && pip install protobuf==3.20.1`')], keywords=[])), Return(value=Constant(value=False))])], decorator_list=[]), FunctionDef(name='_get_optional_value', args=arguments(posonlyargs=[], args=[arg(arg='is_required', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='is_available_fn', annotation=Name(id='Callable', ctx=Load())), arg(arg='assert_msg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='is_required', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='is_available_fn', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Name(id='is_required', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_available_fn', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Name(id='ImportError', ctx=Load()), args=[Name(id='assert_msg', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])])], decorator_list=[], returns=Name(id='bool', ctx=Load())), ClassDef(name='Settings', bases=[], keywords=[], body=[Expr(value=Constant(value='etna settings.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='torch_required', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='prophet_required', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='wandb_required', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='tsfresh_required', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='torch_required', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Call(func=Name(id='_get_optional_value', ctx=Load()), args=[Name(id='torch_required', ctx=Load()), Name(id='_is_torch_available', ctx=Load()), Constant(value='etna[torch] is not available, to install it, run `pip install etna[torch]`.')], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='wandb_required', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Call(func=Name(id='_get_optional_value', ctx=Load()), args=[Name(id='wandb_required', ctx=Load()), Name(id='_is_wandb_available', ctx=Load()), Constant(value='wandb is not available, to install it, run `pip install wandb`.')], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='prophet_required', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Call(func=Name(id='_get_optional_value', ctx=Load()), args=[Name(id='prophet_required', ctx=Load()), Name(id='_is_prophet_available', ctx=Load()), Constant(value='etna[prophet] is not available, to install it, run `pip install etna[prophet]`.')], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='tsfresh_required', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Call(func=Name(id='_get_optional_value', ctx=Load()), args=[Name(id='tsfresh_required', ctx=Load()), Name(id='_is_tsfresh_available', ctx=Load()), Constant(value='`tsfresh` is not available, to install it, run `pip install tsfresh==0.19.0 && pip install protobuf==3.20.1`')], keywords=[]), simple=0)], decorator_list=[]), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse and return the settings.\n\n        Returns\n        -------\n        Settings:\n            Dictionary of the parsed and merged Settings.\n        ')), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='MergedConfigParser', ctx=Load()), args=[Call(func=Name(id='ConfigFileFinder', ctx=Load()), args=[Constant(value='etna')], keywords=[])], keywords=[]), attr='parse', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='Settings', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Constant(value='Settings')), FunctionDef(name='type_hint', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return type hint for the specified ``key``.\n\n        Parameters\n        ----------\n        key:\n            key of interest\n\n        Returns\n        -------\n            type hint for the specified key\n        ')), Return(value=Call(func=Name(id='type', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load()), Constant(value=None)], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='DEFAULT_SETTINGS', ctx=Store())], value=Call(func=Name(id='Settings', ctx=Load()), args=[], keywords=[])), ClassDef(name='ConfigFileFinder', bases=[], keywords=[], body=[Expr(value=Constant(value='Encapsulate the logic for finding and reading config files.\n\n    Adapted from:\n\n    - https://github.com/catalyst-team/catalyst (Apache-2.0 License)\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='program_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Initialize object to find config files.\n\n        Parameters\n        ----------\n        program_name:\n            Name of the current program (e.g., catalyst).\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='program_name', ctx=Store())], value=Name(id='program_name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='user_config_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_user_config_file', ctx=Load()), args=[Name(id='program_name', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='project_filenames', ctx=Store())], value=Tuple(elts=[JoinedStr(values=[Constant(value='.'), FormattedValue(value=Name(id='program_name', ctx=Load()), conversion=-1)])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='local_directory', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_user_config_file', args=arguments(posonlyargs=[], args=[arg(arg='program_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), body=[Assign(targets=[Name(id='home_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~')], keywords=[])), Assign(targets=[Name(id='config_file_basename', ctx=Store())], value=JoinedStr(values=[Constant(value='.'), FormattedValue(value=Name(id='program_name', ctx=Load()), conversion=-1)]))], orelse=[Assign(targets=[Name(id='home_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='XDG_CONFIG_HOME'), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~/.config')], keywords=[])], keywords=[])), Assign(targets=[Name(id='config_file_basename', ctx=Store())], value=Name(id='program_name', ctx=Load()))]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='home_dir', ctx=Load()), Name(id='config_file_basename', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='_read_config', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='files', annotation=Name(id='str', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Attribute(value=Name(id='configparser', ctx=Load()), attr='RawConfigParser', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Name(id='found_files', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='filename', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='found_files', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='There was an error decoding a config file. The file with a problem was '), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1), Constant(value='.')])], keywords=[]))]), ExceptHandler(type=Attribute(value=Name(id='configparser', ctx=Load()), attr='ParsingError', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='There was an error trying to parse a config file. The file with a problem was '), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1), Constant(value='.')])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='config', ctx=Load()), Name(id='found_files', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='configparser', ctx=Load()), attr='RawConfigParser', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='generate_possible_local_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Find and generate all local config files.\n\n        Yields\n        ------\n        str:\n            Path to config file.\n        ')), Assign(targets=[Name(id='parent', ctx=Store()), Name(id='tail', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='found_config_files', ctx=Store())], value=Constant(value=False)), While(test=BoolOp(op=And(), values=[Name(id='tail', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='found_config_files', ctx=Load()))]), body=[For(target=Name(id='project_filename', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='project_filenames', ctx=Load()), body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='parent', ctx=Load()), Name(id='project_filename', ctx=Load())], keywords=[])], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Name(id='filename', ctx=Load()))), Assign(targets=[Name(id='found_config_files', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='local_directory', ctx=Store())], value=Name(id='parent', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='parent', ctx=Store()), Name(id='tail', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='parent', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='local_config_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Find all local config files which actually exist.\n\n        Returns\n        -------\n        List[str]:\n            List of files that exist that are\n            local project config  files with extra config files\n            appended to that list (which also exist).\n        ')), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='generate_possible_local_files', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='local_configs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse all local config files into one config object.')), Assign(targets=[Tuple(elts=[Name(id='config', ctx=Store()), Name(id='found_files', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read_config', ctx=Load()), args=[Starred(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='local_config_files', ctx=Load()), args=[], keywords=[]), ctx=Load())], keywords=[])), If(test=Name(id='found_files', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Found local configuration files: '), FormattedValue(value=Name(id='found_files', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Return(value=Name(id='config', ctx=Load()))], decorator_list=[]), FunctionDef(name='user_config', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse the user config file into a config object.')), Assign(targets=[Tuple(elts=[Name(id='config', ctx=Store()), Name(id='found_files', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read_config', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='user_config_file', ctx=Load())], keywords=[])), If(test=Name(id='found_files', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Found user configuration files: '), FormattedValue(value=Name(id='found_files', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Return(value=Name(id='config', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='MergedConfigParser', bases=[], keywords=[], body=[Expr(value=Constant(value='Encapsulate merging different types of configuration files.\n\n    This parses out the options registered that were specified in the\n    configuration files, handles extra configuration files, and returns\n    dictionaries with the parsed values.\n\n    Adapted from:\n\n    - https://github.com/catalyst-team/catalyst (Apache-2.0 License)\n    ')), Assign(targets=[Name(id='GETBOOL_ACTIONS', ctx=Store())], value=Set(elts=[Constant(value='store_true'), Constant(value='store_false')])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_finder', annotation=Name(id='ConfigFileFinder', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Initialize the MergedConfigParser instance.\n\n        Parameters\n        ----------\n        config_finder:\n            Initialized ConfigFileFinder.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='program_name', ctx=Store())], value=Attribute(value=Name(id='config_finder', ctx=Load()), attr='program_name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config_finder', ctx=Store())], value=Name(id='config_finder', ctx=Load()))], decorator_list=[]), FunctionDef(name='_normalize_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='option'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='final_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='option', ctx=Load()), attr='normalize', ctx=Load()), args=[Name(id='value', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_finder', ctx=Load()), attr='local_directory', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1), Constant(value=' has been normalized to '), FormattedValue(value=Name(id='final_value', ctx=Load()), conversion=-1), Constant(value=" for option '"), FormattedValue(value=Attribute(value=Name(id='option', ctx=Load()), attr='config_name', ctx=Load()), conversion=-1), Constant(value="'")])], keywords=[])), Return(value=Name(id='final_value', ctx=Load()))], decorator_list=[]), FunctionDef(name='_parse_config', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_parser')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='type2method', ctx=Store())], value=Dict(keys=[Name(id='bool', ctx=Load()), Name(id='int', ctx=Load())], values=[Attribute(value=Name(id='config_parser', ctx=Load()), attr='getboolean', ctx=Load()), Attribute(value=Name(id='config_parser', ctx=Load()), attr='getint', ctx=Load())])), AnnAssign(target=Name(id='config_dict', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), If(test=Call(func=Attribute(value=Name(id='config_parser', ctx=Load()), attr='has_section', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='program_name', ctx=Load())], keywords=[]), body=[For(target=Name(id='option_name', ctx=Store()), iter=Call(func=Attribute(value=Name(id='config_parser', ctx=Load()), attr='options', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='program_name', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='type_', ctx=Store())], value=Call(func=Attribute(value=Name(id='DEFAULT_SETTINGS', ctx=Load()), attr='type_hint', ctx=Load()), args=[Name(id='option_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='method', ctx=Store())], value=Call(func=Attribute(value=Name(id='type2method', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='type_', ctx=Load()), Attribute(value=Name(id='config_parser', ctx=Load()), attr='get', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='config_dict', ctx=Load()), slice=Name(id='option_name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='method', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='program_name', ctx=Load()), Name(id='option_name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='config_dict', ctx=Load()))], decorator_list=[]), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse and return the local and user config files.\n\n        First this copies over the parsed local configuration and then\n        iterates over the options in the user configuration and sets them if\n        they were not set by the local configuration file.\n\n        Returns\n        -------\n        dict:\n            Dictionary of the parsed and merged configuration options.\n        ')), Assign(targets=[Name(id='user_config', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_config', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_finder', ctx=Load()), attr='user_config', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_config', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_finder', ctx=Load()), attr='local_configs', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='option', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='user_config', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='option', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='config', ctx=Load()))], decorator_list=[], returns=Name(id='dict', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='SETTINGS', ctx=Store())], value=Call(func=Attribute(value=Name(id='Settings', ctx=Load()), attr='parse', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='SETTINGS'), Constant(value='Settings'), Constant(value='ConfigFileFinder'), Constant(value='MergedConfigParser')], ctx=Load()))], type_ignores=[])