Module(body=[Import(names=[alias(name='os')]), ImportFrom(module='common', names=[alias(name='Dataset'), alias(name='DatasetWrapper'), alias(name='imread')], level=1), ImportFrom(module='transform', names=[alias(name='MergedDataset'), alias(name='split_classes')], level=1), ClassDef(name='CUB200Dataset', bases=[Name(id='Dataset', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Original Caltech-UCSD Birds 200 dataset. Train and test are splitted by sample.\n\n    See http://www.vision.caltech.edu/visipedia/CUB-200.html\n\n    Args:\n        root: Dataset root.\n        train: Whether to use train or test part of the dataset.\n        classification: If true, use original classification dataset.\n            If false, sample pairs and provide verification dataset.\n    ')), Assign(targets=[Name(id='IMAGE_DIR', ctx=Store())], value=Constant(value='images')), Assign(targets=[Name(id='IMAGE_FILENAME', ctx=Store())], value=Constant(value='images.txt')), Assign(targets=[Name(id='LABELS_FILENAME', ctx=Store())], value=Constant(value='image_class_labels.txt')), Assign(targets=[Name(id='SPLIT_FILENAME', ctx=Store())], value=Constant(value='train_test_split.txt')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='root')], kwonlyargs=[arg(arg='train')], kw_defaults=[Constant(value=True)], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='split_indices', ctx=Store())], value=List(elts=[], ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='SPLIT_FILENAME', ctx=Load())], keywords=[])], keywords=[]), optional_vars=Name(id='fp', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='fp', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='index', ctx=Store()), Name(id='part', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='part', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='train', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='split_indices', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), Assign(targets=[Name(id='split_indices', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='split_indices', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indices', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='image_labels', ctx=Store())], value=Dict(keys=[], values=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='LABELS_FILENAME', ctx=Load())], keywords=[])], keywords=[]), optional_vars=Name(id='fp', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='fp', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='index', ctx=Store()), Name(id='label', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='index', ctx=Load()), ops=[NotIn()], comparators=[Name(id='split_indices', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='label', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), Expr(value=Call(func=Attribute(value=Name(id='indices', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='image_labels', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=Name(id='label', ctx=Load()))], orelse=[])]), Assign(targets=[Name(id='num_classes', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='image_labels', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assert(test=Compare(left=Name(id='num_classes', ctx=Load()), ops=[Eq()], comparators=[Constant(value=200)])), Assert(test=Compare(left=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Attribute(value=Name(id='image_labels', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Name(id='num_classes', ctx=Load()), op=Sub(), right=Constant(value=1))])), Assign(targets=[Name(id='image_paths', ctx=Store())], value=Dict(keys=[], values=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='IMAGE_FILENAME', ctx=Load())], keywords=[])], keywords=[]), optional_vars=Name(id='fp', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='fp', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='index', ctx=Store()), Name(id='path', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='index', ctx=Load()), ops=[NotIn()], comparators=[Name(id='split_indices', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Subscript(value=Name(id='image_paths', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='IMAGE_DIR', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_paths', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='image_paths', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='index', ctx=Store()), iter=Name(id='indices', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_labels', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='image_labels', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='index', ctx=Store()), iter=Name(id='indices', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='classification', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether dataset is classification or matching.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='openset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether dataset is for open-set or closed-set classification.')), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='labels', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get dataset labels array.\n\n        Labels are integers in the range [0, N-1].\n\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_labels', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get element of the dataset.\n\n        Returns tuple (image, label).\n\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_paths', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='label', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_labels', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='image', ctx=Store())], value=Call(func=Name(id='imread', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='image', ctx=Load()), Name(id='label', ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='CUB200SplitClassesDataset', bases=[Name(id='DatasetWrapper', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='CUB200 dataset with different classes in train and test sets.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='root')], kwonlyargs=[arg(arg='train'), arg(arg='interleave')], kw_defaults=[Constant(value=True), Constant(value=False)], defaults=[]), body=[Assign(targets=[Name(id='merged', ctx=Store())], value=Call(func=Name(id='MergedDataset', ctx=Load()), args=[Call(func=Name(id='CUB200Dataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=True))]), Call(func=Name(id='CUB200Dataset', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[keyword(arg='train', value=Constant(value=False))])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='trainset', ctx=Store()), Name(id='testset', ctx=Store())], ctx=Store())], value=Call(func=Name(id='split_classes', ctx=Load()), args=[Name(id='merged', ctx=Load())], keywords=[keyword(arg='interleave', value=Name(id='interleave', ctx=Load()))])), If(test=Name(id='train', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='trainset', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='testset', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='openset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether dataset is for open-set or closed-set classification.')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[])], type_ignores=[])