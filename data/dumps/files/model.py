Module(body=[ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), Import(names=[alias(name='numpy', asname='np')]), Import(names=[alias(name='torch')]), ImportFrom(module='probabilistic_embeddings.config', names=[alias(name='prepare_config')], level=0), ImportFrom(module='layers', names=[alias(name='IdentityEmbedder'), alias(name='CNNEmbedder')], level=1), ImportFrom(module='layers', names=[alias(name='DiracDistribution'), alias(name='NormalDistribution'), alias(name='VMFDistribution')], level=1), ImportFrom(module='layers', names=[alias(name='DotProductScorer'), alias(name='CosineScorer'), alias(name='ExpectedCosineScorer'), alias(name='NegativeL2Scorer'), alias(name='MutualLikelihoodScorer'), alias(name='HIBScorer')], level=1), ImportFrom(module='layers', names=[alias(name='LinearClassifier'), alias(name='ArcFaceClassifier'), alias(name='CosFaceClassifier'), alias(name='LogLikeClassifier'), alias(name='VMFClassifier'), alias(name='SPEClassifier'), alias(name='ScorerClassifier')], level=1), ImportFrom(module='torch', names=[alias(name='disable_amp'), alias(name='freeze'), alias(name='eval_bn')], level=1), ClassDef(name='Model', bases=[Attribute(value=Attribute(value=Name(id='torch', ctx=Load()), attr='nn', ctx=Load()), attr='Module', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Embedder with optional classification head.\n\n    Parts of the model:\n    1. Stem (CNN model).\n    2. Head (mapping from CNN output to embedding).\n    3. Normalizer (batchnorm of embeddings for some models).\n    4. Classifier (mapping from embedding to logits).\n\n    Embedding pipeline just predicts distributions of embeddings.\n    Classification pipeline matches samples from predicted distribution with target distribution.\n\n    Stages of classification pipeline:\n    1. Predict embeddings distribution.\n    2. Evaluate negative log likelihood of the learnt target embedding.\n\n    Args:\n        num_classes: Number of output classes.\n        priors: Precomputed class priors. Priors can be learned on-line or loaded from checkpoint.\n        amp_classifier: Whether to use mixed precision for classifier or not.\n\n    Inputs:\n        - images: Batch of images with the shape (B, 3, S, S).\n        - labels: Target labels used in some scorers during training.\n\n    Outputs:\n        Dictionary of:\n            - distributions: Predicted distribution parameters.\n            - logits (optional): Unnormalized log probabilities of each class.\n    ')), Assign(targets=[Name(id='DISTRIBUTIONS', ctx=Store())], value=Dict(keys=[Constant(value='dirac'), Constant(value='gmm'), Constant(value='vmf')], values=[Name(id='DiracDistribution', ctx=Load()), Name(id='NormalDistribution', ctx=Load()), Name(id='VMFDistribution', ctx=Load())])), Assign(targets=[Name(id='EMBEDDERS', ctx=Store())], value=Dict(keys=[Constant(value='cnn'), Constant(value='identity')], values=[Name(id='CNNEmbedder', ctx=Load()), Name(id='IdentityEmbedder', ctx=Load())])), Assign(targets=[Name(id='SCORERS', ctx=Store())], value=Dict(keys=[Constant(value='dot'), Constant(value='cosine'), Constant(value='ecs'), Constant(value='l2'), Constant(value='mls'), Constant(value='hib')], values=[Name(id='DotProductScorer', ctx=Load()), Name(id='CosineScorer', ctx=Load()), Name(id='ExpectedCosineScorer', ctx=Load()), Name(id='NegativeL2Scorer', ctx=Load()), Name(id='MutualLikelihoodScorer', ctx=Load()), Name(id='HIBScorer', ctx=Load())])), Assign(targets=[Name(id='CLASSIFIERS', ctx=Store())], value=Dict(keys=[Constant(value='linear'), Constant(value='arcface'), Constant(value='cosface'), Constant(value='loglike'), Constant(value='vmf-loss'), Constant(value='spe'), Constant(value='scorer')], values=[Name(id='LinearClassifier', ctx=Load()), Name(id='ArcFaceClassifier', ctx=Load()), Name(id='CosFaceClassifier', ctx=Load()), Name(id='LogLikeClassifier', ctx=Load()), Name(id='VMFClassifier', ctx=Load()), Name(id='SPEClassifier', ctx=Load()), Name(id='ScorerClassifier', ctx=Load())])), FunctionDef(name='get_default_config', args=arguments(posonlyargs=[], args=[arg(arg='distribution_type'), arg(arg='distribution_params'), arg(arg='embedder_type'), arg(arg='embedder_params'), arg(arg='scorer_type'), arg(arg='classifier_type'), arg(arg='classifier_params'), arg(arg='freeze_classifier')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='dirac'), Constant(value=None), Constant(value='cnn'), Constant(value=None), Constant(value='dot'), Constant(value='linear'), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='Get modle parameters.\n\n        Args:\n            distribution_type: Predicted emdedding distribution type ("dirac", "gmm" or "vmf").\n            distribution_params: Predicted distribution hyperparameters.\n            embedder_type: Type of the embedder network: "cnn" for cnn embedder or "identity"\n                if embeddings are directly providided as a model\'s input.\n            embedder_params: Parameters of the network for embeddings distribution estimation.\n            scorer_type: Type of verification embeddings scorer ("l2" or "cosine").\n            classifier_type: Type of classification embeddings scorer ("linear", "arcface", "cosface", "loglike", "vmf-loss" or "spe").\n            classifier_params: Parameters of target distributions and scoring.\n            freeze_classifier: If true, freeze classifier parameters (target classes embeddings).\n        ')), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='distribution_type'), Name(id='distribution_type', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='distribution_params'), Name(id='distribution_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='embedder_type'), Name(id='embedder_type', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='embedder_params'), Name(id='embedder_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='scorer_type'), Name(id='scorer_type', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='classifier_type'), Name(id='classifier_type', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='classifier_params'), Name(id='classifier_params', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='freeze_classifier'), Name(id='freeze_classifier', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='num_classes')], kwonlyargs=[arg(arg='priors'), arg(arg='amp_classifier'), arg(arg='config')], kw_defaults=[Constant(value=None), Constant(value=False), Constant(value=None)], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Call(func=Name(id='prepare_config', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Store())], value=Name(id='num_classes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_amp_classifier', ctx=Store())], value=Name(id='amp_classifier', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='DISTRIBUTIONS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='distribution_type'), ctx=Load()), ctx=Load()), args=[], keywords=[keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='distribution_params'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_embedder', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='EMBEDDERS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='embedder_type'), ctx=Load()), ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='num_parameters', ctx=Load())], keywords=[keyword(arg='normalizer', value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), attr='make_normalizer', ctx=Load()), args=[], keywords=[])), keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='embedder_params'), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_scorer', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='SCORERS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='scorer_type'), ctx=Load()), ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='classification', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_classifier', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='CLASSIFIERS', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='classifier_type'), ctx=Load()), ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()), Name(id='num_classes', ctx=Load())], keywords=[keyword(arg='priors', value=Name(id='priors', ctx=Load())), keyword(arg='config', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='classifier_params'), ctx=Load()))])), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='freeze_classifier'), ctx=Load()), body=[Expr(value=Call(func=Name(id='freeze', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_classifier', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='classification', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether model is classification or just embedder.')), Return(value=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='classifier_type'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='distribution', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Distribution used by the model.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distribution', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='num_classes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Number of output classes or None for embedder network.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_classes', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='classifier', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='classification', ctx=Load())), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[Constant(value='Classifier is not available.')], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_classifier', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='embedder', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Model for embeddings generation.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_embedder', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='scorer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Embeddings pairwise scorer.')), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='classification', ctx=Load()), Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_scorer', ctx=Load()), Constant(value='set_ubm')], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_scorer', ctx=Load()), attr='set_ubm', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_final_weights', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='logprobs', value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='has_final_bias', ctx=Load()), body=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_final_bias', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=None)))]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_scorer', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='num_parameters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='total', ctx=Store())], value=Constant(value=0)), For(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parameters', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='total', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='prod', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='p', ctx=Load()), attr='shape', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='total', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='train', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='classification', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Constant(value='freeze_classifier'), ctx=Load())]), body=[Expr(value=Call(func=Name(id='eval_bn', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_classifier', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='images'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='distributions', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_embedder', ctx=Load()), args=[Name(id='images', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='distributions')], values=[Name(id='distributions', ctx=Load())])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='classification', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Name(id='disable_amp', ctx=Load()), args=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_amp_classifier', ctx=Load()))], keywords=[]))], body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='logits'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_classifier', ctx=Load()), args=[Call(func=Attribute(value=Name(id='distributions', ctx=Load()), attr='float', ctx=Load()), args=[], keywords=[]), Name(id='labels', ctx=Load())], keywords=[keyword(arg='scorer', value=Attribute(value=Name(id='self', ctx=Load()), attr='scorer', ctx=Load()))]))])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='has_final_weights', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='classification', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='classifier', ctx=Load()), attr='has_weight', ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='get_final_weights', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='classification', ctx=Load())), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Target embeddings are available for classification models only.')], keywords=[]))], orelse=[]), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_classifier', ctx=Load()), attr='weight', ctx=Load()))], decorator_list=[]), FunctionDef(name='has_final_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='classification', ctx=Load())), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Target bias is available for classification models only.')], keywords=[]))], orelse=[]), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_classifier', ctx=Load()), attr='has_bias', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='get_final_bias', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='classification', ctx=Load())), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Target bias is available for classification models only.')], keywords=[]))], orelse=[]), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_classifier', ctx=Load()), attr='bias', ctx=Load()))], decorator_list=[]), FunctionDef(name='has_final_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='classification', ctx=Load())), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Target variance is available for classification models only.')], keywords=[]))], orelse=[]), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_classifier', ctx=Load()), attr='has_variance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='get_final_variance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='classification', ctx=Load())), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Target variance is available for classification models only.')], keywords=[]))], orelse=[]), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_classifier', ctx=Load()), attr='variance', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_target_embeddings', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='labels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get target classification embeddings for all labels.')), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_final_weights', ctx=Load()), args=[], keywords=[]), slice=Name(id='labels', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='results')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compute useful statistics for logging.\n\n        Args:\n            results: Model forward pass results.\n\n        Returns:\n            Dictionary with floating-point statistics values.\n        ')), Assign(targets=[Name(id='parameters', ctx=Store())], value=Subscript(value=Name(id='results', ctx=Load()), slice=Constant(value='distributions'), ctx=Load())), Assign(targets=[Name(id='stats', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stats', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='statistics', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stats', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='scorer', ctx=Load()), attr='statistics', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='classification', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='stats', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_classifier', ctx=Load()), attr='statistics', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='logits', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='results', ctx=Load()), slice=Constant(value='logits'), ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='stats', ctx=Load()), slice=Constant(value='logits/mean'), ctx=Store())], value=Call(func=Attribute(value=Name(id='logits', ctx=Load()), attr='mean', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='stats', ctx=Load()), slice=Constant(value='logits/std'), ctx=Store())], value=Call(func=Attribute(value=Name(id='logits', ctx=Load()), attr='std', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='has_final_variance', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='stats', ctx=Load()), slice=Constant(value='output_std'), ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_final_variance', ctx=Load()), args=[], keywords=[]), attr='sqrt', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_embedder', ctx=Load()), attr='output_scale', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='stats', ctx=Load()), slice=Constant(value='output_scale'), ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_embedder', ctx=Load()), attr='output_scale', ctx=Load()))], orelse=[]), Return(value=Name(id='stats', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])